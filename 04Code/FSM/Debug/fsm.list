
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009954  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009b58  08009b58  00019b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f64  08009f64  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08009f64  08009f64  00019f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f6c  08009f6c  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f6c  08009f6c  00019f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f70  08009f70  00019f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000238  0800a1ac  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800a1ac  000207c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b36  00000000  00000000  00020266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000478c  00000000  00000000  00040d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  00045528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  00046a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cfbb  00000000  00000000  00047dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ccd2  00000000  00000000  00074d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001065ea  00000000  00000000  00091a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00198047  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006258  00000000  00000000  0019809c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000238 	.word	0x20000238
 800021c:	00000000 	.word	0x00000000
 8000220:	08009b3c 	.word	0x08009b3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000023c 	.word	0x2000023c
 800023c:	08009b3c 	.word	0x08009b3c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC2_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC2_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC2_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC2_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC2_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC2_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC2_Init+0x98>)
 8000616:	2201      	movs	r2, #1
 8000618:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC2_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC2_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC2_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC2_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC2_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC2_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC2_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC2_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC2_Init+0x98>)
 800064a:	f001 fd5f 	bl	800210c <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fc48 	bl	8000ee8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000658:	2303      	movs	r3, #3
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000660:	2307      	movs	r3, #7
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC2_Init+0x98>)
 800066a:	f002 f851 	bl	8002710 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fc38 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000290 	.word	0x20000290
 8000684:	40012100 	.word	0x40012100
 8000688:	0f000001 	.word	0x0f000001

0800068c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <MX_ADC3_Init+0x128>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b2:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006b8:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ce:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <MX_ADC3_Init+0x12c>)
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006da:	2206      	movs	r2, #6
 80006dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006ec:	4830      	ldr	r0, [pc, #192]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ee:	f001 fd0d 	bl	800210c <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 fbf6 	bl	8000ee8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006fc:	230a      	movs	r3, #10
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000704:	2306      	movs	r3, #6
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4828      	ldr	r0, [pc, #160]	; (80007b0 <MX_ADC3_Init+0x124>)
 800070e:	f001 ffff 	bl	8002710 <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 fbe6 	bl	8000ee8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800071c:	230d      	movs	r3, #13
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000720:	2302      	movs	r3, #2
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4821      	ldr	r0, [pc, #132]	; (80007b0 <MX_ADC3_Init+0x124>)
 800072a:	f001 fff1 	bl	8002710 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000734:	f000 fbd8 	bl	8000ee8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000738:	2309      	movs	r3, #9
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	481a      	ldr	r0, [pc, #104]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000746:	f001 ffe3 	bl	8002710 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000750:	f000 fbca 	bl	8000ee8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000754:	230f      	movs	r3, #15
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000758:	2304      	movs	r3, #4
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000762:	f001 ffd5 	bl	8002710 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800076c:	f000 fbbc 	bl	8000ee8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000770:	2308      	movs	r3, #8
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000774:	2305      	movs	r3, #5
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_ADC3_Init+0x124>)
 800077e:	f001 ffc7 	bl	8002710 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000788:	f000 fbae 	bl	8000ee8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800078c:	2306      	movs	r3, #6
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000790:	2306      	movs	r3, #6
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC3_Init+0x124>)
 800079a:	f001 ffb9 	bl	8002710 <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80007a4:	f000 fba0 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000338 	.word	0x20000338
 80007b4:	40012200 	.word	0x40012200
 80007b8:	0f000001 	.word	0x0f000001

080007bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a7c      	ldr	r2, [pc, #496]	; (80009cc <HAL_ADC_MspInit+0x210>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d15d      	bne.n	800089a <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007de:	4b7c      	ldr	r3, [pc, #496]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a7b      	ldr	r2, [pc, #492]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b79      	ldr	r3, [pc, #484]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007f2:	623b      	str	r3, [r7, #32]
 80007f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b76      	ldr	r3, [pc, #472]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a75      	ldr	r2, [pc, #468]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b73      	ldr	r3, [pc, #460]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69fb      	ldr	r3, [r7, #28]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	486c      	ldr	r0, [pc, #432]	; (80009d4 <HAL_ADC_MspInit+0x218>)
 8000822:	f002 ff61 	bl	80036e8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8000826:	4b6c      	ldr	r3, [pc, #432]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000828:	4a6c      	ldr	r2, [pc, #432]	; (80009dc <HAL_ADC_MspInit+0x220>)
 800082a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800082c:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800082e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000832:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000834:	4b68      	ldr	r3, [pc, #416]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b65      	ldr	r3, [pc, #404]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000846:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800084a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800085a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000860:	4b5d      	ldr	r3, [pc, #372]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000866:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800086c:	485a      	ldr	r0, [pc, #360]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800086e:	f002 fb31 	bl	8002ed4 <HAL_DMA_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000878:	f000 fb36 	bl	8000ee8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a56      	ldr	r2, [pc, #344]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
 8000882:	4a55      	ldr	r2, [pc, #340]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2012      	movs	r0, #18
 800088e:	f002 faea 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000892:	2012      	movs	r0, #18
 8000894:	f002 fb03 	bl	8002e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000898:	e093      	b.n	80009c2 <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC3)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a50      	ldr	r2, [pc, #320]	; (80009e0 <HAL_ADC_MspInit+0x224>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f040 808e 	bne.w	80009c2 <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008a6:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a43      	ldr	r2, [pc, #268]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008c4:	f043 0320 	orr.w	r3, r3, #32
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a3d      	ldr	r2, [pc, #244]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin|SENSOR8_Pin|SENSOR6_Pin;
 8000906:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	4832      	ldr	r0, [pc, #200]	; (80009e4 <HAL_ADC_MspInit+0x228>)
 800091c:	f002 fee4 	bl	80036e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR3_Pin;
 8000920:	2309      	movs	r3, #9
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000924:	2303      	movs	r3, #3
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	482d      	ldr	r0, [pc, #180]	; (80009e8 <HAL_ADC_MspInit+0x22c>)
 8000934:	f002 fed8 	bl	80036e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 8000938:	2308      	movs	r3, #8
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4822      	ldr	r0, [pc, #136]	; (80009d4 <HAL_ADC_MspInit+0x218>)
 800094c:	f002 fecc 	bl	80036e8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000952:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <HAL_ADC_MspInit+0x234>)
 8000954:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000958:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800095c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000978:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800097c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000980:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000988:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000998:	f002 fa9c 	bl	8002ed4 <HAL_DMA_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x1ea>
      Error_Handler();
 80009a2:	f000 faa1 	bl	8000ee8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_ADC_MspInit+0x230>)
 80009aa:	639a      	str	r2, [r3, #56]	; 0x38
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_ADC_MspInit+0x230>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2012      	movs	r0, #18
 80009b8:	f002 fa55 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009bc:	2012      	movs	r0, #18
 80009be:	f002 fa6e 	bl	8002e9e <HAL_NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3738      	adds	r7, #56	; 0x38
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40012100 	.word	0x40012100
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	20000380 	.word	0x20000380
 80009dc:	40026440 	.word	0x40026440
 80009e0:	40012200 	.word	0x40012200
 80009e4:	40021400 	.word	0x40021400
 80009e8:	40020800 	.word	0x40020800
 80009ec:	200002d8 	.word	0x200002d8
 80009f0:	40026428 	.word	0x40026428

080009f4 <debounce>:
@brief
@param	none
@retval	none
******************************************************************************/
static uint8_t debounce(ST_debounce *pb)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	uint8_t pin_sample;
	// sample pin - once per interrupt

	pin_sample = HAL_GPIO_ReadPin(pb->GPIOx, pb->GPIO_Pin);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	891b      	ldrh	r3, [r3, #8]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4610      	mov	r0, r2
 8000a08:	f003 f81a 	bl	8003a40 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	73fb      	strb	r3, [r7, #15]

	// refresh count1s
	// subtract window bit 7 to count1s
	pb->count1s -= (pb->window >> 7);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	785a      	ldrb	r2, [r3, #1]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	11db      	asrs	r3, r3, #7
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4413      	add	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	705a      	strb	r2, [r3, #1]
	// add pim_sample
	pb->count1s += pin_sample;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	785a      	ldrb	r2, [r3, #1]
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	705a      	strb	r2, [r3, #1]

	// slide window
	pb->window <<=1;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	701a      	strb	r2, [r3, #0]
	// put pin_sample bit 0 if window
	pb->window |= pin_sample;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	701a      	strb	r2, [r3, #0]

	// verify output
	return (((4 - pb->count1s) >> 7) & 0x01);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	f1c3 0304 	rsb	r3, r3, #4
 8000a58:	11db      	asrs	r3, r3, #7
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <debounce_isr>:

//	if(htim -> Instance == TIM6){

void debounce_isr(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	// previous button state
	static uint8_t pre_state = 0;
	// current button state
	uint8_t state = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]

	// debounce button
	state = debounce(&button);
 8000a76:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <debounce_isr+0x44>)
 8000a78:	f7ff ffbc 	bl	80009f4 <debounce>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
//	if((pre_state == 0) && (state == 1))
//		button.pin_output = 1;
//	if((pre_state == 1) && (state == 0))
//		button.pin_output = 0;

	button.pin_output = state * ((~pre_state) & 0x01);
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <debounce_isr+0x48>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	fb12 f303 	smulbb	r3, r2, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <debounce_isr+0x44>)
 8000a9e:	729a      	strb	r2, [r3, #10]

	// update previous button state
	pre_state = state;
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <debounce_isr+0x48>)
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	7013      	strb	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200004a8 	.word	0x200004a8
 8000ab4:	20000254 	.word	0x20000254

08000ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_DMA_Init+0x48>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2039      	movs	r0, #57	; 0x39
 8000adc:	f002 f9c3 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ae0:	2039      	movs	r0, #57	; 0x39
 8000ae2:	f002 f9dc 	bl	8002e9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	203a      	movs	r0, #58	; 0x3a
 8000aec:	f002 f9bb 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000af0:	203a      	movs	r0, #58	; 0x3a
 8000af2:	f002 f9d4 	bl	8002e9e <HAL_NVIC_EnableIRQ>

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <MX_GPIO_Init>:

/** Configure pins
     PC0   ------> ADCx_IN10
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b1a:	4b4b      	ldr	r3, [pc, #300]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a4a      	ldr	r2, [pc, #296]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b48      	ldr	r3, [pc, #288]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a44      	ldr	r2, [pc, #272]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a3e      	ldr	r2, [pc, #248]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a38      	ldr	r2, [pc, #224]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2160      	movs	r1, #96	; 0x60
 8000b96:	482d      	ldr	r0, [pc, #180]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000b98:	f002 ff6a 	bl	8003a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f244 2181 	movw	r1, #17025	; 0x4281
 8000ba2:	482b      	ldr	r0, [pc, #172]	; (8000c50 <MX_GPIO_Init+0x14c>)
 8000ba4:	f002 ff64 	bl	8003a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f244 0104 	movw	r1, #16388	; 0x4004
 8000bae:	4829      	ldr	r0, [pc, #164]	; (8000c54 <MX_GPIO_Init+0x150>)
 8000bb0:	f002 ff5e 	bl	8003a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4824      	ldr	r0, [pc, #144]	; (8000c58 <MX_GPIO_Init+0x154>)
 8000bc8:	f002 fd8e 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8000bcc:	2360      	movs	r3, #96	; 0x60
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	481a      	ldr	r0, [pc, #104]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000be4:	f002 fd80 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin;
 8000be8:	f244 2381 	movw	r3, #17025	; 0x4281
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4813      	ldr	r0, [pc, #76]	; (8000c50 <MX_GPIO_Init+0x14c>)
 8000c02:	f002 fd71 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|SPI3_SDA_Pin;
 8000c06:	f244 0304 	movw	r3, #16388	; 0x4004
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_GPIO_Init+0x150>)
 8000c20:	f002 fd62 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <MX_GPIO_Init+0x154>)
 8000c3a:	f002 fd55 	bl	80036e8 <HAL_GPIO_Init>

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	40020800 	.word	0x40020800

08000c5c <lfollower_start>:
@brief	Starts line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_start(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	// line follower already enabled?
	if(lfollower_status == 1)
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <lfollower_start+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d007      	beq.n	8000c78 <lfollower_start+0x1c>
		return;

	// start storing QTR Sensor values
	qtr_init();
 8000c68:	f000 fb34 	bl	80012d4 <qtr_init>
	// start movement
	move_start();
 8000c6c:	f000 fa10 	bl	8001090 <move_start>

	// mark line follower is enabled
	lfollower_status = 1;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <lfollower_start+0x20>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e000      	b.n	8000c7a <lfollower_start+0x1e>
		return;
 8000c78:	bf00      	nop
}
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000257 	.word	0x20000257

08000c80 <lfollower_stop>:
@brief 	Stops line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_stop(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	// line follower already disabled?
	if(lfollower_status == 0)
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <lfollower_stop+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d007      	beq.n	8000c9c <lfollower_stop+0x1c>
		return;

	// stop storing QTR sensor values
	qtr_kill();
 8000c8c:	f000 fb30 	bl	80012f0 <qtr_kill>
	// stop movement
	move_stop();
 8000c90:	f000 fa12 	bl	80010b8 <move_stop>

	// mark line follower is disabled
	lfollower_status = 0;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <lfollower_stop+0x20>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e000      	b.n	8000c9e <lfollower_stop+0x1e>
		return;
 8000c9c:	bf00      	nop
}
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000257 	.word	0x20000257

08000ca4 <lfollower_isr>:

/******************************************************************************
Line Follower ISR
******************************************************************************/
uint8_t lfollower_isr(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	ed2d 8b02 	vpush	{d8}
 8000caa:	af00      	add	r7, sp, #0
	if(lfollower_status == 0)
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <lfollower_isr+0xa0>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <lfollower_isr+0x14>
		// line follower is disabled
		return E_LF_OFF;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e03f      	b.n	8000d38 <lfollower_isr+0x94>

	if((qtr_get_digital(LF_SENSOR_CTR_R) == 0) &&
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f000 fb25 	bl	8001308 <qtr_get_digital>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d109      	bne.n	8000cd8 <lfollower_isr+0x34>
		(qtr_get_digital(LF_SENSOR_CTR_L) == 0))
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 fb1f 	bl	8001308 <qtr_get_digital>
 8000cca:	4603      	mov	r3, r0
	if((qtr_get_digital(LF_SENSOR_CTR_R) == 0) &&
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d103      	bne.n	8000cd8 <lfollower_isr+0x34>
	{
		// robot is not over the line
		// stop line follower
		lfollower_stop();
 8000cd0:	f7ff ffd6 	bl	8000c80 <lfollower_stop>
		// send error: no line to follow
		return E_LF_NO_LINE;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	e02f      	b.n	8000d38 <lfollower_isr+0x94>
	}

	// else, robot over the line
	// use PID to obtain PWM values to use on motors
	// error = S_LEFT_VAL - S_RIGHT_VAL
	pid_calcule(&pid, qtr_get_analog(LF_SENSOR_L), qtr_get_analog(LF_SENSOR_R));
 8000cd8:	2004      	movs	r0, #4
 8000cda:	f000 fb4d 	bl	8001378 <qtr_get_analog>
 8000cde:	eeb0 8a40 	vmov.f32	s16, s0
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 fb48 	bl	8001378 <qtr_get_analog>
 8000ce8:	eef0 7a40 	vmov.f32	s15, s0
 8000cec:	eef0 0a67 	vmov.f32	s1, s15
 8000cf0:	eeb0 0a48 	vmov.f32	s0, s16
 8000cf4:	4814      	ldr	r0, [pc, #80]	; (8000d48 <lfollower_isr+0xa4>)
 8000cf6:	f000 fa61 	bl	80011bc <pid_calcule>

	// Apply PID to adjust motor PWM/velocity
	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <lfollower_isr+0xa4>)
 8000cfc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d00:	eef1 7a67 	vneg.f32	s15, s15
 8000d04:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000d4c <lfollower_isr+0xa8>
 8000d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d50 <lfollower_isr+0xac>
 8000d10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <lfollower_isr+0xa4>)
 8000d16:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d1a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000d4c <lfollower_isr+0xa8>
 8000d1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d22:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000d50 <lfollower_isr+0xac>
 8000d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d2a:	eef0 0a67 	vmov.f32	s1, s15
 8000d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d32:	f000 f9d5 	bl	80010e0 <move_control>

	return EXIT_SUCCESS;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	ecbd 8b02 	vpop	{d8}
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000257 	.word	0x20000257
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	3eb33334 	.word	0x3eb33334
 8000d50:	3f266666 	.word	0x3f266666

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f001 f956 	bl	800200a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f831 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f7ff fecf 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d66:	f7ff fea7 	bl	8000ab8 <MX_DMA_Init>
  MX_SPI3_Init();
 8000d6a:	f000 fb2f 	bl	80013cc <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000d6e:	f001 f85b 	bl	8001e28 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000d72:	f000 fe89 	bl	8001a88 <MX_TIM6_Init>
  MX_ADC3_Init();
 8000d76:	f7ff fc89 	bl	800068c <MX_ADC3_Init>
  MX_TIM4_Init();
 8000d7a:	f000 fe21 	bl	80019c0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000d7e:	f001 f823 	bl	8001dc8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d82:	f000 fdcd 	bl	8001920 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000d86:	f7ff fc2f 	bl	80005e8 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize FSM state and next state
  state = S_STOPPED;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <main+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <main+0x68>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]

  int err = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]

  while (1)
  {
	err = test_modules();
 8000d9a:	f000 fdb5 	bl	8001908 <test_modules>
 8000d9e:	6078      	str	r0, [r7, #4]

	switch(err)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <main+0x60>
		case 0:
			break;

		default:
			// signal error. Light up RED LED
			write_led(LRED, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <main+0x6c>)
 8000dae:	f002 fe5f 	bl	8003a70 <HAL_GPIO_WritePin>
			break;
 8000db2:	e000      	b.n	8000db6 <main+0x62>
			break;
 8000db4:	bf00      	nop
	}

	while(1)
 8000db6:	e7fe      	b.n	8000db6 <main+0x62>
 8000db8:	20000255 	.word	0x20000255
 8000dbc:	20000256 	.word	0x20000256
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0b8      	sub	sp, #224	; 0xe0
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dce:	2234      	movs	r2, #52	; 0x34
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f006 fa70 	bl	80072b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	2290      	movs	r2, #144	; 0x90
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f006 fa61 	bl	80072b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <SystemClock_Config+0x11c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a39      	ldr	r2, [pc, #228]	; (8000ee0 <SystemClock_Config+0x11c>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <SystemClock_Config+0x11c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0e:	4b35      	ldr	r3, [pc, #212]	; (8000ee4 <SystemClock_Config+0x120>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a34      	ldr	r2, [pc, #208]	; (8000ee4 <SystemClock_Config+0x120>)
 8000e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <SystemClock_Config+0x120>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e32:	2310      	movs	r3, #16
 8000e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e44:	2308      	movs	r3, #8
 8000e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e4a:	23d8      	movs	r3, #216	; 0xd8
 8000e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fe89 	bl	8003b78 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e6c:	f000 f83c 	bl	8000ee8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e70:	f002 fe32 	bl	8003ad8 <HAL_PWREx_EnableOverDrive>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e7a:	f000 f835 	bl	8000ee8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7e:	230f      	movs	r3, #15
 8000e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ea0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ea4:	2107      	movs	r1, #7
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 f914 	bl	80040d4 <HAL_RCC_ClockConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000eb2:	f000 f819 	bl	8000ee8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000eb6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000eba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 fad9 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000ed4:	f000 f808 	bl	8000ee8 <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	37e0      	adds	r7, #224	; 0xe0
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <Error_Handler+0x8>
	...

08000ef4 <motion_start>:

/******************************************************************************
Motion Functions
******************************************************************************/
void motion_start(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	if(motion_status == MOT_ON)
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <motion_start+0x38>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d012      	beq.n	8000f26 <motion_start+0x32>
		// already moving
		return;

	// enable Line Follower
	lfollower_start();
 8000f00:	f7ff feac 	bl	8000c5c <lfollower_start>

	// start movement before beeing on Hold
	if(motion_status == MOT_HOLD)
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <motion_start+0x38>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d103      	bne.n	8000f14 <motion_start+0x20>
	{
		// motion ON
		motion_status = MOT_ON;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <motion_start+0x38>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
		return;
 8000f12:	e009      	b.n	8000f28 <motion_start+0x34>
	}

	// motion ON
	motion_status = MOT_ON;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <motion_start+0x38>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
	// enable Stop Detectors
	stop_detector_init();
 8000f1a:	f000 fb99 	bl	8001650 <stop_detector_init>

	// start sampling motion sensors
	HAL_TIM_Base_Start_IT(&TIM_MOTION);
 8000f1e:	4804      	ldr	r0, [pc, #16]	; (8000f30 <motion_start+0x3c>)
 8000f20:	f004 f8f8 	bl	8005114 <HAL_TIM_Base_Start_IT>
 8000f24:	e000      	b.n	8000f28 <motion_start+0x34>
		return;
 8000f26:	bf00      	nop
}
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000030 	.word	0x20000030
 8000f30:	2000054c 	.word	0x2000054c

08000f34 <motion_stop>:

void motion_stop(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
//	if(motion_status == MOT_OFF)
//		// already stopped
//		return;

	// disable Line Follower
	lfollower_stop();
 8000f38:	f7ff fea2 	bl	8000c80 <lfollower_stop>

	if(motion_status == MOT_HOLD)
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <motion_stop+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d005      	beq.n	8000f50 <motion_stop+0x1c>
		// motion in hold
		// stop detectors remain enabled
		return;

	// else, stop sampling motion sensors
	HAL_TIM_Base_Stop_IT(&TIM_MOTION);
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <motion_stop+0x24>)
 8000f46:	f004 f95d 	bl	8005204 <HAL_TIM_Base_Stop_IT>

	// disable Stop Detectors
	stop_detector_deInit();
 8000f4a:	f000 fb93 	bl	8001674 <stop_detector_deInit>
 8000f4e:	e000      	b.n	8000f52 <motion_stop+0x1e>
		return;
 8000f50:	bf00      	nop
	// motion OFF
//	motion_status = MOT_OFF;
}
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000030 	.word	0x20000030
 8000f58:	2000054c 	.word	0x2000054c

08000f5c <motion_isr>:

void motion_isr(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	uint8_t err;

	// check Stop Sensors
	err = stop_detector_isr();
 8000f62:	f000 fb95 	bl	8001690 <stop_detector_isr>
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]

	if(motion_status == MOT_HOLD)
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <motion_isr+0x80>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d111      	bne.n	8000f96 <motion_isr+0x3a>
	{
		if(timeout_flag)
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <motion_isr+0x84>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <motion_isr+0x2a>
		{
			// motion timeout occured
			motion_status = MOT_TIMEOUT;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <motion_isr+0x80>)
 8000f7c:	2206      	movs	r2, #6
 8000f7e:	701a      	strb	r2, [r3, #0]
			// stop everything
			motion_stop();
 8000f80:	f7ff ffd8 	bl	8000f34 <motion_stop>
			// motion timeout occured
//			motion_status = MOT_TIMEOUT;
			return;
 8000f84:	e027      	b.n	8000fd6 <motion_isr+0x7a>
		}
		if(err == 0)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d123      	bne.n	8000fd4 <motion_isr+0x78>
		{
			// obstacle has been moved
			// stop timeout
			timeout_stop();
 8000f8c:	f000 ff06 	bl	8001d9c <timeout_stop>
			// restart movement
			motion_start();
 8000f90:	f7ff ffb0 	bl	8000ef4 <motion_start>
 8000f94:	e011      	b.n	8000fba <motion_isr+0x5e>
		}
		else
			// continue in Hold
			return;
	}
	else if(err)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00e      	beq.n	8000fba <motion_isr+0x5e>
		// update motion_status
		// Signal that Motion is stopped due to Stop Mark/Obstacle
		// err = E_CROSS_FOUND (1) -> motion_status = MOT_CROSS_FOUND (2)
		// err = E_ROOM_FOUND (2) -> motion_status = MOT_ROOM_FOUND (3)
		// err = E_OBS_FOUND (3) -> motion_status = MOT_HOLD (4)
		motion_status = err + (MOT_CROSS_FOUND - E_ST_CROSS_FOUND);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <motion_isr+0x80>)
 8000fa4:	701a      	strb	r2, [r3, #0]

		// if motion is on hold, begin timeout
		if(motion_status == MOT_HOLD)
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <motion_isr+0x80>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d102      	bne.n	8000fb4 <motion_isr+0x58>
			timeout_start(HOLD_TIMEOUT);
 8000fae:	201e      	movs	r0, #30
 8000fb0:	f000 fec2 	bl	8001d38 <timeout_start>

		// obstacle/stop mark found
		// stop movement
		motion_stop();
 8000fb4:	f7ff ffbe 	bl	8000f34 <motion_stop>
		return;
 8000fb8:	e00d      	b.n	8000fd6 <motion_isr+0x7a>
	}

	// line follower ISR
	// continue to follow line
	err = lfollower_isr();
 8000fba:	f7ff fe73 	bl	8000ca4 <lfollower_isr>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	if(err)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <motion_isr+0x7a>
	{
		// signal motion error
		motion_status = MOT_ERR;
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <motion_isr+0x80>)
 8000fca:	2205      	movs	r2, #5
 8000fcc:	701a      	strb	r2, [r3, #0]

		// error following line
		// stop movement
		motion_stop();
 8000fce:	f7ff ffb1 	bl	8000f34 <motion_stop>
 8000fd2:	e000      	b.n	8000fd6 <motion_isr+0x7a>
			return;
 8000fd4:	bf00      	nop
	}
}
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000030 	.word	0x20000030
 8000fe0:	20000284 	.word	0x20000284

08000fe4 <motor_init>:
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4803      	ldr	r0, [pc, #12]	; (8001000 <motor_init+0x1c>)
 8000ff4:	f004 f98c 	bl	8005310 <HAL_TIM_PWM_Start>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200004b4 	.word	0x200004b4

08001004 <motor_kill>:
@brief	Stops PWM generation to a given motor
@param	Motor to be killed
@retval none
******************************************************************************/
void motor_kill(motor_st *m)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <motor_kill+0x28>)
 8001014:	f004 fa76 	bl	8005504 <HAL_TIM_PWM_Stop>
	// disable IN pins
	motor_control(m,  0, MOTOR_STOP);
 8001018:	2202      	movs	r2, #2
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f807 	bl	8001030 <motor_control>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200004b4 	.word	0x200004b4

08001030 <motor_control>:
		New PWM duty cycle
		Direction of motor rotation
@retval none
******************************************************************************/
void motor_control(motor_st *m,  uint8_t dc, motor_dir_e dir)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
 800103c:	4613      	mov	r3, r2
 800103e:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6858      	ldr	r0, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	8919      	ldrh	r1, [r3, #8]
 8001048:	78bb      	ldrb	r3, [r7, #2]
 800104a:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <motor_control+0x58>)
 800104c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001050:	461a      	mov	r2, r3
 8001052:	f002 fd0d 	bl	8003a70 <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68d8      	ldr	r0, [r3, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8a19      	ldrh	r1, [r3, #16]
 800105e:	78bb      	ldrb	r3, [r7, #2]
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <motor_control+0x58>)
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	461a      	mov	r2, r3
 800106a:	f002 fd01 	bl	8003a70 <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	78fa      	ldrb	r2, [r7, #3]
 8001076:	b292      	uxth	r2, r2
 8001078:	4619      	mov	r1, r3
 800107a:	4804      	ldr	r0, [pc, #16]	; (800108c <motor_control+0x5c>)
 800107c:	f000 fdfa 	bl	8001c74 <set_pwm>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	08009b58 	.word	0x08009b58
 800108c:	200004b4 	.word	0x200004b4

08001090 <move_start>:
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <move_start+0x1c>)
 8001096:	f7ff ffa5 	bl	8000fe4 <motor_init>
	motor_init(&motor_left);
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <move_start+0x20>)
 800109c:	f7ff ffa2 	bl	8000fe4 <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <move_start+0x24>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000034 	.word	0x20000034
 80010b0:	20000048 	.word	0x20000048
 80010b4:	20000258 	.word	0x20000258

080010b8 <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <move_stop+0x1c>)
 80010be:	f7ff ffa1 	bl	8001004 <motor_kill>
	motor_kill(&motor_left);
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <move_stop+0x20>)
 80010c4:	f7ff ff9e 	bl	8001004 <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <move_stop+0x24>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000034 	.word	0x20000034
 80010d8:	20000048 	.word	0x20000048
 80010dc:	20000258 	.word	0x20000258

080010e0 <move_control>:
@brief	Controls movement, setting speeds on each motor.
@param	Left and right motor speeds, respectively
@retval none
******************************************************************************/
void move_control(float speedL, float speedR)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80010ea:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <move_control+0xd0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 80010f6:	f7ff ffcb 	bl	8001090 <move_start>
	// speedL and speedR are PWM values, from -1 to +1
	// since dirL and dirR are uint8_t, speed values are truncated
	// so, by adding 0.99 (number less than 1) we get:
	// dirX = 0 if speedX is negative
	// dirX = 1 if speedX is positive
	uint8_t dirL = 0.99 + speedL;
 80010fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001102:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80011a0 <move_control+0xc0>
 8001106:	ee37 7b06 	vadd.f64	d7, d7, d6
 800110a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800110e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001112:	793b      	ldrb	r3, [r7, #4]
 8001114:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 8001116:	edd7 7a02 	vldr	s15, [r7, #8]
 800111a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800111e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80011a0 <move_control+0xc0>
 8001122:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001126:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800112a:	edc7 7a01 	vstr	s15, [r7, #4]
 800112e:	793b      	ldrb	r3, [r7, #4]
 8001130:	75bb      	strb	r3, [r7, #22]

	// dirL and dirR (motor_dir_e) are:
	// 0 -> motor moving BACKWARDS (MOTOR_BACKWARD)
	// 1 -> motor moving FORWARD (MOTOR_FORWARD)
	motor_control(&motor_right, fabs(speedR) * 100, (motor_dir_e)(dirR & 0x01));
 8001132:	edd7 7a02 	vldr	s15, [r7, #8]
 8001136:	eef0 7ae7 	vabs.f32	s15, s15
 800113a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800113e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80011a8 <move_control+0xc8>
 8001142:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001146:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800114a:	edc7 7a01 	vstr	s15, [r7, #4]
 800114e:	793b      	ldrb	r3, [r7, #4]
 8001150:	b2d9      	uxtb	r1, r3
 8001152:	7dbb      	ldrb	r3, [r7, #22]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	4815      	ldr	r0, [pc, #84]	; (80011b4 <move_control+0xd4>)
 800115e:	f7ff ff67 	bl	8001030 <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, (motor_dir_e)(dirL & 0x01));
 8001162:	edd7 7a03 	vldr	s15, [r7, #12]
 8001166:	eef0 7ae7 	vabs.f32	s15, s15
 800116a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800116e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80011a8 <move_control+0xc8>
 8001172:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001176:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800117a:	edc7 7a01 	vstr	s15, [r7, #4]
 800117e:	793b      	ldrb	r3, [r7, #4]
 8001180:	b2d9      	uxtb	r1, r3
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	480a      	ldr	r0, [pc, #40]	; (80011b8 <move_control+0xd8>)
 800118e:	f7ff ff4f 	bl	8001030 <motor_control>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	7ae147ae 	.word	0x7ae147ae
 80011a4:	3fefae14 	.word	0x3fefae14
 80011a8:	00000000 	.word	0x00000000
 80011ac:	40590000 	.word	0x40590000
 80011b0:	20000258 	.word	0x20000258
 80011b4:	20000034 	.word	0x20000034
 80011b8:	20000048 	.word	0x20000048

080011bc <pid_calcule>:
@param	PID struct
		inputs to the controller, in1 and in2
@retval none
******************************************************************************/
void pid_calcule(pid_st* pid, float in1, float in2)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80011c8:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 80011cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80011d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	ed93 7a05 	vldr	s14, [r3, #20]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	edd3 6a03 	vldr	s13, [r3, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	edd3 7a04 	vldr	s15, [r3, #16]
 800120e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	edd3 7a08 	vldr	s15, [r3, #32]
 800121c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80012d0 <pid_calcule+0x114>
 8001220:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	edd3 7a03 	vldr	s15, [r3, #12]
 800123a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	edd3 6a01 	vldr	s13, [r3, #4]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	edd3 7a05 	vldr	s15, [r3, #20]
 800124a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800124e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	edd3 7a07 	vldr	s15, [r3, #28]
 8001258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	69da      	ldr	r2, [r3, #28]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800127e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001286:	dd08      	ble.n	800129a <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	699a      	ldr	r2, [r3, #24]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	615a      	str	r2, [r3, #20]
	{
		pid->u = pid->u_sat_b;
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
	}
}
 8001298:	e013      	b.n	80012c2 <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80012a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	d400      	bmi.n	80012b2 <pid_calcule+0xf6>
}
 80012b0:	e007      	b.n	80012c2 <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	615a      	str	r2, [r3, #20]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	3e99999a 	.word	0x3e99999a

080012d4 <qtr_init>:
@brief 	Starts storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&ADC_QTR_DMA, qtr_sens, QTR_SENS_NUM);
 80012d8:	2206      	movs	r2, #6
 80012da:	4903      	ldr	r1, [pc, #12]	; (80012e8 <qtr_init+0x14>)
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <qtr_init+0x18>)
 80012de:	f001 f89b 	bl	8002418 <HAL_ADC_Start_DMA>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000025c 	.word	0x2000025c
 80012ec:	20000338 	.word	0x20000338

080012f0 <qtr_kill>:
@brief 	Stops storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_kill(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&ADC_QTR_DMA);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <qtr_kill+0x10>)
 80012f6:	f001 f989 	bl	800260c <HAL_ADC_Stop_DMA>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000338 	.word	0x20000338
 8001304:	00000000 	.word	0x00000000

08001308 <qtr_get_digital>:
@param	Sensor
@retval	Digital/analog value of the requested sensor
******************************************************************************/
// QTR get sensor digital value
uint8_t qtr_get_digital(qtr_e sensor)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]) > ANALOG_HI_VOLT);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4a16      	ldr	r2, [pc, #88]	; (8001370 <qtr_get_digital+0x68>)
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001322:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001358 <qtr_get_digital+0x50>
 8001326:	ee27 6b06 	vmul.f64	d6, d7, d6
 800132a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001360 <qtr_get_digital+0x58>
 800132e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001332:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001368 <qtr_get_digital+0x60>
 8001336:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	bfcc      	ite	gt
 8001340:	2301      	movgt	r3, #1
 8001342:	2300      	movle	r3, #0
 8001344:	b2db      	uxtb	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	f3af 8000 	nop.w
 8001358:	66666666 	.word	0x66666666
 800135c:	400a6666 	.word	0x400a6666
 8001360:	00000000 	.word	0x00000000
 8001364:	40affe00 	.word	0x40affe00
 8001368:	9999999a 	.word	0x9999999a
 800136c:	40039999 	.word	0x40039999
 8001370:	2000025c 	.word	0x2000025c
 8001374:	00000000 	.word	0x00000000

08001378 <qtr_get_analog>:

// QTR get sensor analog value
float qtr_get_analog(qtr_e sensor)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <qtr_get_analog+0x50>)
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001392:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80013b8 <qtr_get_analog+0x40>
 8001396:	ee27 6b06 	vmul.f64	d6, d7, d6
 800139a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80013c0 <qtr_get_analog+0x48>
 800139e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80013a6:	eeb0 0a67 	vmov.f32	s0, s15
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	f3af 8000 	nop.w
 80013b8:	66666666 	.word	0x66666666
 80013bc:	400a6666 	.word	0x400a6666
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40affe00 	.word	0x40affe00
 80013c8:	2000025c 	.word	0x2000025c

080013cc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_SPI3_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <MX_SPI3_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_SPI3_Init+0x74>)
 80013d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_SPI3_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <MX_SPI3_Init+0x74>)
 80013e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_SPI3_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_SPI3_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_SPI3_Init+0x74>)
 80013fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_SPI3_Init+0x74>)
 8001402:	2218      	movs	r2, #24
 8001404:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_SPI3_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_SPI3_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_SPI3_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_SPI3_Init+0x74>)
 800141a:	2207      	movs	r2, #7
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_SPI3_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_SPI3_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_SPI3_Init+0x74>)
 800142c:	f003 fc50 	bl	8004cd0 <HAL_SPI_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001436:	f7ff fd57 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200003e0 	.word	0x200003e0
 8001444:	40003c00 	.word	0x40003c00

08001448 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <HAL_SPI_MspInit+0x8c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d130      	bne.n	80014cc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <HAL_SPI_MspInit+0x90>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_SPI_MspInit+0x90>)
 8001470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_SPI_MspInit+0x90>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_SPI_MspInit+0x90>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <HAL_SPI_MspInit+0x90>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_SPI_MspInit+0x90>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800149a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ac:	2306      	movs	r3, #6
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_SPI_MspInit+0x94>)
 80014b8:	f002 f916 	bl	80036e8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	2033      	movs	r0, #51	; 0x33
 80014c2:	f001 fcd0 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80014c6:	2033      	movs	r0, #51	; 0x33
 80014c8:	f001 fce9 	bl	8002e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40003c00 	.word	0x40003c00
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020800 	.word	0x40020800

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x44>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_MspInit+0x44>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_MspInit+0x44>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x44>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x44>)
 8001504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x44>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>
	...

08001530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  // blink LED RED
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <HardFault_Handler+0x18>)
 800153a:	f002 fab2 	bl	8003aa2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800153e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001542:	f000 fdbf 	bl	80020c4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001546:	e7f5      	b.n	8001534 <HardFault_Handler+0x4>
 8001548:	40020400 	.word	0x40020400

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f000 fd7a 	bl	8002084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <ADC_IRQHandler+0x14>)
 800159a:	f000 fdfb 	bl	8002194 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800159e:	4803      	ldr	r0, [pc, #12]	; (80015ac <ADC_IRQHandler+0x18>)
 80015a0:	f000 fdf8 	bl	8002194 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000290 	.word	0x20000290
 80015ac:	20000338 	.word	0x20000338

080015b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM3_IRQHandler+0x10>)
 80015b6:	f004 f825 	bl	8005604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000500 	.word	0x20000500

080015c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <TIM4_IRQHandler+0x10>)
 80015ca:	f004 f81b 	bl	8005604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200004b4 	.word	0x200004b4

080015d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <USART1_IRQHandler+0x10>)
 80015de:	f004 ffe7 	bl	80065b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000071c 	.word	0x2000071c

080015ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <USART3_IRQHandler+0x10>)
 80015f2:	f004 ffdd 	bl	80065b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000598 	.word	0x20000598

08001600 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <SPI3_IRQHandler+0x10>)
 8001606:	f003 fc0f 	bl	8004e28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200003e0 	.word	0x200003e0

08001614 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <TIM6_DAC_IRQHandler+0x10>)
 800161a:	f003 fff3 	bl	8005604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000054c 	.word	0x2000054c

08001628 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA2_Stream1_IRQHandler+0x10>)
 800162e:	f001 fdf1 	bl	8003214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002d8 	.word	0x200002d8

0800163c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA2_Stream2_IRQHandler+0x10>)
 8001642:	f001 fde7 	bl	8003214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000380 	.word	0x20000380

08001650 <stop_detector_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void stop_detector_init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	// start Obstacle detector ADC DMA
	HAL_ADC_Start_DMA(&OBS_DETECTOR_ADC_DMA, &obs_distance, 1);
 8001654:	2201      	movs	r2, #1
 8001656:	4904      	ldr	r1, [pc, #16]	; (8001668 <stop_detector_init+0x18>)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <stop_detector_init+0x1c>)
 800165a:	f000 fedd 	bl	8002418 <HAL_ADC_Start_DMA>
	// stop detector enabled
	stop_detector_status = 1;
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <stop_detector_init+0x20>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000274 	.word	0x20000274
 800166c:	20000290 	.word	0x20000290
 8001670:	20000278 	.word	0x20000278

08001674 <stop_detector_deInit>:

void stop_detector_deInit(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	// stop Obstacle detector ADC DMA
	HAL_ADC_Stop_DMA(&OBS_DETECTOR_ADC_DMA);
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <stop_detector_deInit+0x14>)
 800167a:	f000 ffc7 	bl	800260c <HAL_ADC_Stop_DMA>
	// stop detector disabled
	stop_detector_status = 0;
 800167e:	4b03      	ldr	r3, [pc, #12]	; (800168c <stop_detector_deInit+0x18>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000290 	.word	0x20000290
 800168c:	20000278 	.word	0x20000278

08001690 <stop_detector_isr>:
		 	 - R (right sensor)
@param	none
@retval	none
******************************************************************************/
uint8_t stop_detector_isr()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
	// previous sensor values
	static uint8_t sens_prev = 0;
	// current sensor values
	uint8_t sens = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]

	// Digital value of distance
	static uint32_t old_obs_distance = 0;
	uint8_t obs_found_flag = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	71bb      	strb	r3, [r7, #6]

	// is stop detector ON?
	if(stop_detector_status == 0)
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <stop_detector_isr+0x9c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <stop_detector_isr+0x1a>
		// return all ok
		return 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e03b      	b.n	8001722 <stop_detector_isr+0x92>

	// ***** Check Stop Marks Detector *****
	// if SENSOR_L enabled sens = 0000 0001 (1)
	// if SENSOR_L disabled sens = 0000 0000 (0)
	sens = qtr_get_digital(ST_SENSOR_L);
 80016aa:	2005      	movs	r0, #5
 80016ac:	f7ff fe2c 	bl	8001308 <qtr_get_digital>
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]

	// rotate left one bit
	// SENSOR_L enabled: sens = 0000 0010
	// SENSOR_L disabled: sens = 0000 0000
	sens = sens << 1;
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	71fb      	strb	r3, [r7, #7]

	// SENSOR_L enabled:
		// if SENSOR_R enabled sens = 0000 0011 (3)
		// if SENSOR_R disabled sens = 0000 0010 (2)
	sens += qtr_get_digital(ST_SENSOR_R);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff fe24 	bl	8001308 <qtr_get_digital>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4413      	add	r3, r2
 80016c8:	71fb      	strb	r3, [r7, #7]

	// both sensors enabled
	if(sens == 3)// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> check this
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d101      	bne.n	80016d4 <stop_detector_isr+0x44>
		// return cross found error
		return E_ST_CROSS_FOUND;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e026      	b.n	8001722 <stop_detector_isr+0x92>

	// current sensors value equal to the previous sensor values
	// and only one sensor enabled
	else if((sens == sens_prev) && (sens != 0))
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <stop_detector_isr+0xa0>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	79fa      	ldrb	r2, [r7, #7]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d104      	bne.n	80016e8 <stop_detector_isr+0x58>
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <stop_detector_isr+0x58>
		// return room found error
		return E_ST_ROOM_FOUND;
 80016e4:	2302      	movs	r3, #2
 80016e6:	e01c      	b.n	8001722 <stop_detector_isr+0x92>

	// ***** Check Obstacle Detector *****
	// Obstacle found flag update
	obs_found_flag = OBS_TOO_CLOSE(obs_distance, old_obs_distance);
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <stop_detector_isr+0xa4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f240 4272 	movw	r2, #1138	; 0x472
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d907      	bls.n	8001704 <stop_detector_isr+0x74>
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <stop_detector_isr+0xa8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f240 4272 	movw	r2, #1138	; 0x472
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <stop_detector_isr+0x74>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <stop_detector_isr+0x76>
 8001704:	2300      	movs	r3, #0
 8001706:	71bb      	strb	r3, [r7, #6]
														obs_found_flag);
	UART_puts(str);
#endif // !_DEBUG_

	// update old distance variable
	old_obs_distance = obs_distance;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <stop_detector_isr+0xa4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <stop_detector_isr+0xa8>)
 800170e:	6013      	str	r3, [r2, #0]

	if(obs_found_flag)
 8001710:	79bb      	ldrb	r3, [r7, #6]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <stop_detector_isr+0x8a>
		// return obstacle found error
		return E_ST_OBS_FOUND;
 8001716:	2303      	movs	r3, #3
 8001718:	e003      	b.n	8001722 <stop_detector_isr+0x92>

	// update sensors value
	sens_prev = sens;
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <stop_detector_isr+0xa0>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	7013      	strb	r3, [r2, #0]

	return EXIT_SUCCESS;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000278 	.word	0x20000278
 8001730:	20000279 	.word	0x20000279
 8001734:	20000274 	.word	0x20000274
 8001738:	2000027c 	.word	0x2000027c

0800173c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	return 1;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_kill>:

int _kill(int pid, int sig)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001756:	f005 fd7d 	bl	8007254 <__errno>
 800175a:	4603      	mov	r3, r0
 800175c:	2216      	movs	r2, #22
 800175e:	601a      	str	r2, [r3, #0]
	return -1;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_exit>:

void _exit (int status)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ffe7 	bl	800174c <_kill>
	while (1) {}		/* Make sure we hang here */
 800177e:	e7fe      	b.n	800177e <_exit+0x12>

08001780 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e00a      	b.n	80017a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001792:	f3af 8000 	nop.w
 8001796:	4601      	mov	r1, r0
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60ba      	str	r2, [r7, #8]
 800179e:	b2ca      	uxtb	r2, r1
 80017a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbf0      	blt.n	8001792 <_read+0x12>
	}

return len;
 80017b0:	687b      	ldr	r3, [r7, #4]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	e009      	b.n	80017e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf1      	blt.n	80017cc <_write+0x12>
	}
	return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_close>:

int _close(int file)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	return -1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181a:	605a      	str	r2, [r3, #4]
	return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_isatty>:

int _isatty(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
	return 1;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
	return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f005 fce2 	bl	8007254 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20080000 	.word	0x20080000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	20000280 	.word	0x20000280
 80018c4:	200007c8 	.word	0x200007c8

080018c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <test_motion>:

/******************************************************************************
Test motion module
******************************************************************************/
void test_motion(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	// start movement
	motion_start();
 80018f0:	f7ff fb00 	bl	8000ef4 <motion_start>

	// while motion is ON
	while(motion_status == MOT_ON)
 80018f4:	bf00      	nop
 80018f6:	4b03      	ldr	r3, [pc, #12]	; (8001904 <test_motion+0x18>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0fb      	beq.n	80018f6 <test_motion+0xa>
		;
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000030 	.word	0x20000030

08001908 <test_modules>:

/******************************************************************************
Test modules functions
******************************************************************************/
int test_modules(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
	int err = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
//		test_lf_print_qtr();

//	while(1)
//		test_timeout(10);

	test_motion();
 8001912:	f7ff ffeb 	bl	80018ec <test_motion>
//	test_motion();

//	err = test_rfid();
//	test_debounce();

	return err;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <MX_TIM3_Init+0x98>)
 8001940:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <MX_TIM3_Init+0x9c>)
 8001942:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000-1;
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_TIM3_Init+0x98>)
 8001946:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800194a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_TIM3_Init+0x98>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1800-1;
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <MX_TIM3_Init+0x98>)
 8001954:	f240 7207 	movw	r2, #1799	; 0x707
 8001958:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_TIM3_Init+0x98>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_TIM3_Init+0x98>)
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <MX_TIM3_Init+0x98>)
 8001968:	f003 fb7d 	bl	8005066 <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001972:	f7ff fab9 	bl	8000ee8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	4619      	mov	r1, r3
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <MX_TIM3_Init+0x98>)
 8001984:	f004 f86e 	bl	8005a64 <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800198e:	f7ff faab 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001992:	2320      	movs	r3, #32
 8001994:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <MX_TIM3_Init+0x98>)
 80019a0:	f004 fd0c 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80019aa:	f7ff fa9d 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000500 	.word	0x20000500
 80019bc:	40000400 	.word	0x40000400

080019c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <MX_TIM4_Init+0xc0>)
 80019e6:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <MX_TIM4_Init+0xc4>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <MX_TIM4_Init+0xc0>)
 80019ec:	226b      	movs	r2, #107	; 0x6b
 80019ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <MX_TIM4_Init+0xc0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <MX_TIM4_Init+0xc0>)
 80019f8:	2264      	movs	r2, #100	; 0x64
 80019fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <MX_TIM4_Init+0xc0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <MX_TIM4_Init+0xc0>)
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a08:	481d      	ldr	r0, [pc, #116]	; (8001a80 <MX_TIM4_Init+0xc0>)
 8001a0a:	f003 fc2a 	bl	8005262 <HAL_TIM_PWM_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001a14:	f7ff fa68 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	4816      	ldr	r0, [pc, #88]	; (8001a80 <MX_TIM4_Init+0xc0>)
 8001a28:	f004 fcc8 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001a32:	f7ff fa59 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a36:	2360      	movs	r3, #96	; 0x60
 8001a38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	2208      	movs	r2, #8
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_TIM4_Init+0xc0>)
 8001a4e:	f003 fef9 	bl	8005844 <HAL_TIM_PWM_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001a58:	f7ff fa46 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	220c      	movs	r2, #12
 8001a60:	4619      	mov	r1, r3
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <MX_TIM4_Init+0xc0>)
 8001a64:	f003 feee 	bl	8005844 <HAL_TIM_PWM_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001a6e:	f7ff fa3b 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a72:	4803      	ldr	r0, [pc, #12]	; (8001a80 <MX_TIM4_Init+0xc0>)
 8001a74:	f000 f8a6 	bl	8001bc4 <HAL_TIM_MspPostInit>

}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200004b4 	.word	0x200004b4
 8001a84:	40000800 	.word	0x40000800

08001a88 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <MX_TIM6_Init+0x64>)
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <MX_TIM6_Init+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <MX_TIM6_Init+0x64>)
 8001aa0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001aa4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_TIM6_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_TIM6_Init+0x64>)
 8001aae:	2263      	movs	r2, #99	; 0x63
 8001ab0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_TIM6_Init+0x64>)
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <MX_TIM6_Init+0x64>)
 8001aba:	f003 fad4 	bl	8005066 <HAL_TIM_Base_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ac4:	f7ff fa10 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_TIM6_Init+0x64>)
 8001ad6:	f004 fc71 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ae0:	f7ff fa02 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000054c 	.word	0x2000054c
 8001af0:	40001000 	.word	0x40001000

08001af4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1a      	ldr	r2, [pc, #104]	; (8001b6c <HAL_TIM_Base_MspInit+0x78>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d114      	bne.n	8001b30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_TIM_Base_MspInit+0x7c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <HAL_TIM_Base_MspInit+0x7c>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_TIM_Base_MspInit+0x7c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	201d      	movs	r0, #29
 8001b24:	f001 f99f 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b28:	201d      	movs	r0, #29
 8001b2a:	f001 f9b8 	bl	8002e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b2e:	e018      	b.n	8001b62 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0f      	ldr	r2, [pc, #60]	; (8001b74 <HAL_TIM_Base_MspInit+0x80>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d113      	bne.n	8001b62 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_TIM_Base_MspInit+0x7c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <HAL_TIM_Base_MspInit+0x7c>)
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_TIM_Base_MspInit+0x7c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2036      	movs	r0, #54	; 0x36
 8001b58:	f001 f985 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b5c:	2036      	movs	r0, #54	; 0x36
 8001b5e:	f001 f99e 	bl	8002e9e <HAL_NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40001000 	.word	0x40001000

08001b78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_TIM_PWM_MspInit+0x44>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d113      	bne.n	8001bb2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x48>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x48>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x48>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	201e      	movs	r0, #30
 8001ba8:	f001 f95d 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bac:	201e      	movs	r0, #30
 8001bae:	f001 f976 	bl	8002e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40000800 	.word	0x40000800
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <HAL_TIM_MspPostInit+0xa0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d139      	bne.n	8001c5a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_TIM_MspPostInit+0xa4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <HAL_TIM_MspPostInit+0xa4>)
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_TIM_MspPostInit+0xa4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_TIM_MspPostInit+0xa4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <HAL_TIM_MspPostInit+0xa4>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_TIM_MspPostInit+0xa4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 8001c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	480e      	ldr	r0, [pc, #56]	; (8001c6c <HAL_TIM_MspPostInit+0xa8>)
 8001c34:	f001 fd58 	bl	80036e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 8001c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <HAL_TIM_MspPostInit+0xac>)
 8001c56:	f001 fd47 	bl	80036e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40000800 	.word	0x40000800
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40020400 	.word	0x40020400

08001c74 <set_pwm>:
  }
}

/* USER CODE BEGIN 1 */
void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t dc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d104      	bne.n	8001c94 <set_pwm+0x20>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	883a      	ldrh	r2, [r7, #0]
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c92:	e023      	b.n	8001cdc <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d104      	bne.n	8001ca4 <set_pwm+0x30>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	883b      	ldrh	r3, [r7, #0]
 8001ca0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ca2:	e01b      	b.n	8001cdc <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d104      	bne.n	8001cb4 <set_pwm+0x40>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	883b      	ldrh	r3, [r7, #0]
 8001cb0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001cb2:	e013      	b.n	8001cdc <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d104      	bne.n	8001cc4 <set_pwm+0x50>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	883b      	ldrh	r3, [r7, #0]
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001cc2:	e00b      	b.n	8001cdc <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001cc4:	887b      	ldrh	r3, [r7, #2]
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d104      	bne.n	8001cd4 <set_pwm+0x60>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	883b      	ldrh	r3, [r7, #0]
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001cd2:	e003      	b.n	8001cdc <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	883b      	ldrh	r3, [r7, #0]
 8001cda:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	if(htim == &TIM_MOTION)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d102      	bne.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x16>
	{// enters every 10ms
		// line follower PID and stop_sensors
		motion_isr();
 8001cf8:	f7ff f930 	bl	8000f5c <motion_isr>
	}
	else if(htim == &TIM_DEBOUNCE)
	{
		debounce_isr();
	}
}
 8001cfc:	e011      	b.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x3a>
	else if(htim == &TIM_TIMEOUTS)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d107      	bne.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0x2e>
		timeout_isr();
 8001d06:	f000 f853 	bl	8001db0 <timeout_isr>
		write_led(LBLUE, 1);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	4809      	ldr	r0, [pc, #36]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d10:	f001 feae 	bl	8003a70 <HAL_GPIO_WritePin>
}
 8001d14:	e005      	b.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x3a>
	else if(htim == &TIM_DEBOUNCE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x3a>
		debounce_isr();
 8001d1e:	f7fe fea5 	bl	8000a6c <debounce_isr>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000054c 	.word	0x2000054c
 8001d30:	20000500 	.word	0x20000500
 8001d34:	40020400 	.word	0x40020400

08001d38 <timeout_start>:

/******************************************************************************
Timeout Start
******************************************************************************/
void timeout_start(int time_sec)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	// update timeout timer reload
	if(time_sec > MAX_TIMEOUT)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b24      	cmp	r3, #36	; 0x24
 8001d44:	dd04      	ble.n	8001d50 <timeout_start+0x18>
	{
//		TIM_TIMEOUTS.Init.Prescaler = x - 1;
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * MAX_TIMEOUT) - 1;
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <timeout_start+0x5c>)
 8001d48:	f64f 521f 	movw	r2, #64799	; 0xfd1f
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	e008      	b.n	8001d62 <timeout_start+0x2a>
//		timeout_cycles = time_sec ...
	}
	else
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * time_sec) - 1; // >>>>>>>>>>>>> check this
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <timeout_start+0x5c>)
 8001d60:	60da      	str	r2, [r3, #12]

	// init Timer
	if(HAL_TIM_Base_Init(&TIM_TIMEOUTS) != HAL_OK)
 8001d62:	480c      	ldr	r0, [pc, #48]	; (8001d94 <timeout_start+0x5c>)
 8001d64:	f003 f97f 	bl	8005066 <HAL_TIM_Base_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <timeout_start+0x3c>
		// init error
		Error_Handler();
 8001d6e:	f7ff f8bb 	bl	8000ee8 <Error_Handler>
		// clear TIM_SR_UIF TIM flag
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
		// start timeout Timer
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
	}
}
 8001d72:	e00a      	b.n	8001d8a <timeout_start+0x52>
		timeout_flag = 0;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <timeout_start+0x60>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <timeout_start+0x5c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0201 	mvn.w	r2, #1
 8001d82:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <timeout_start+0x5c>)
 8001d86:	f003 f9c5 	bl	8005114 <HAL_TIM_Base_Start_IT>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000500 	.word	0x20000500
 8001d98:	20000284 	.word	0x20000284

08001d9c <timeout_stop>:

/******************************************************************************
Timeout Stop
******************************************************************************/
void timeout_stop(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	// stop timeout Timer
	HAL_TIM_Base_Stop_IT(&TIM_TIMEOUTS);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <timeout_stop+0x10>)
 8001da2:	f003 fa2f 	bl	8005204 <HAL_TIM_Base_Stop_IT>
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000500 	.word	0x20000500

08001db0 <timeout_isr>:

/******************************************************************************
Timeout ISR
******************************************************************************/
void timeout_isr(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	// set timeout flag
	timeout_flag = 1;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <timeout_isr+0x14>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
	// stop generating timeouts
	timeout_stop();
 8001dba:	f7ff ffef 	bl	8001d9c <timeout_stop>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000284 	.word	0x20000284

08001dc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001dce:	4a15      	ldr	r2, [pc, #84]	; (8001e24 <MX_USART1_UART_Init+0x5c>)
 8001dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001dd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001dee:	220c      	movs	r2, #12
 8001df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_USART1_UART_Init+0x58>)
 8001e0c:	f004 fb82 	bl	8006514 <HAL_UART_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e16:	f7ff f867 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000071c 	.word	0x2000071c
 8001e24:	40011000 	.word	0x40011000

08001e28 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <MX_USART3_UART_Init+0x5c>)
 8001e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e4e:	220c      	movs	r2, #12
 8001e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_USART3_UART_Init+0x58>)
 8001e6c:	f004 fb52 	bl	8006514 <HAL_UART_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e76:	f7ff f837 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000598 	.word	0x20000598
 8001e84:	40004800 	.word	0x40004800

08001e88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08c      	sub	sp, #48	; 0x30
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a3f      	ldr	r2, [pc, #252]	; (8001fa4 <HAL_UART_MspInit+0x11c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d141      	bne.n	8001f2e <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a3e      	ldr	r2, [pc, #248]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001eb0:	f043 0310 	orr.w	r3, r3, #16
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a38      	ldr	r2, [pc, #224]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUET_RX_Pin;
 8001eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001eec:	2304      	movs	r3, #4
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	482d      	ldr	r0, [pc, #180]	; (8001fac <HAL_UART_MspInit+0x124>)
 8001ef8:	f001 fbf6 	bl	80036e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 8001efc:	2340      	movs	r3, #64	; 0x40
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	4825      	ldr	r0, [pc, #148]	; (8001fac <HAL_UART_MspInit+0x124>)
 8001f18:	f001 fbe6 	bl	80036e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2025      	movs	r0, #37	; 0x25
 8001f22:	f000 ffa0 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f26:	2025      	movs	r0, #37	; 0x25
 8001f28:	f000 ffb9 	bl	8002e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f2c:	e035      	b.n	8001f9a <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <HAL_UART_MspInit+0x128>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d130      	bne.n	8001f9a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f42:	6413      	str	r3, [r2, #64]	; 0x40
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001f56:	f043 0308 	orr.w	r3, r3, #8
 8001f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_UART_MspInit+0x120>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <HAL_UART_MspInit+0x12c>)
 8001f86:	f001 fbaf 	bl	80036e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2027      	movs	r0, #39	; 0x27
 8001f90:	f000 ff69 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f94:	2027      	movs	r0, #39	; 0x27
 8001f96:	f000 ff82 	bl	8002e9e <HAL_NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3730      	adds	r7, #48	; 0x30
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40011000 	.word	0x40011000
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40004800 	.word	0x40004800
 8001fb4:	40020c00 	.word	0x40020c00

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fbc:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fbe:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fc0:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fd4:	4c0b      	ldr	r4, [pc, #44]	; (8002004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fe2:	f7ff fc71 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f005 f93b 	bl	8007260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7fe feb3 	bl	8000d54 <main>
  bx  lr    
 8001fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8001ffc:	08009f74 	.word	0x08009f74
  ldr r2, =_sbss
 8002000:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002004:	200007c8 	.word	0x200007c8

08002008 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <CAN1_RX0_IRQHandler>

0800200a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200e:	2003      	movs	r0, #3
 8002010:	f000 ff1e 	bl	8002e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002014:	2000      	movs	r0, #0
 8002016:	f000 f805 	bl	8002024 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800201a:	f7ff fa61 	bl	80014e0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x54>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x58>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f000 ff39 	bl	8002eba <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00e      	b.n	8002070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d80a      	bhi.n	800206e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f000 ff01 	bl	8002e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <HAL_InitTick+0x5c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000005c 	.word	0x2000005c
 800207c:	20000064 	.word	0x20000064
 8002080:	20000060 	.word	0x20000060

08002084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x20>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x24>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_IncTick+0x24>)
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000064 	.word	0x20000064
 80020a8:	200007b4 	.word	0x200007b4

080020ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return uwTick;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_GetTick+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	200007b4 	.word	0x200007b4

080020c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020cc:	f7ff ffee 	bl	80020ac <HAL_GetTick>
 80020d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d005      	beq.n	80020ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_Delay+0x44>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ea:	bf00      	nop
 80020ec:	f7ff ffde 	bl	80020ac <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d8f7      	bhi.n	80020ec <HAL_Delay+0x28>
  {
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000064 	.word	0x20000064

0800210c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e031      	b.n	8002186 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fb46 	bl	80007bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d116      	bne.n	8002178 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_ADC_Init+0x84>)
 8002150:	4013      	ands	r3, r2
 8002152:	f043 0202 	orr.w	r2, r3, #2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fc22 	bl	80029a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
 8002176:	e001      	b.n	800217c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	ffffeefd 	.word	0xffffeefd

08002194 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d049      	beq.n	800226a <HAL_ADC_IRQHandler+0xd6>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d046      	beq.n	800226a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d12b      	bne.n	800225a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002206:	2b00      	cmp	r3, #0
 8002208:	d127      	bne.n	800225a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002222:	2b00      	cmp	r3, #0
 8002224:	d119      	bne.n	800225a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0220 	bic.w	r2, r2, #32
 8002234:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fa30 	bl	80026c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0212 	mvn.w	r2, #18
 8002268:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b04      	cmp	r3, #4
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	2b80      	cmp	r3, #128	; 0x80
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d057      	beq.n	800234c <HAL_ADC_IRQHandler+0x1b8>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d054      	beq.n	800234c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d139      	bne.n	800233c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d12b      	bne.n	800233c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d124      	bne.n	800233c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11d      	bne.n	800233c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002304:	2b00      	cmp	r3, #0
 8002306:	d119      	bne.n	800233c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002316:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fcad 	bl	8002c9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f06f 020c 	mvn.w	r2, #12
 800234a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d017      	beq.n	80023ae <HAL_ADC_IRQHandler+0x21a>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d014      	beq.n	80023ae <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d10d      	bne.n	80023ae <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f9a2 	bl	80026e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0201 	mvn.w	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d015      	beq.n	800240e <HAL_ADC_IRQHandler+0x27a>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d012      	beq.n	800240e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	f043 0202 	orr.w	r2, r3, #2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0220 	mvn.w	r2, #32
 80023fc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f97c 	bl	80026fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0220 	mvn.w	r2, #32
 800240c:	601a      	str	r2, [r3, #0]
  }
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_ADC_Start_DMA+0x1e>
 8002432:	2302      	movs	r3, #2
 8002434:	e0d4      	b.n	80025e0 <HAL_ADC_Start_DMA+0x1c8>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d018      	beq.n	800247e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800245c:	4b62      	ldr	r3, [pc, #392]	; (80025e8 <HAL_ADC_Start_DMA+0x1d0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a62      	ldr	r2, [pc, #392]	; (80025ec <HAL_ADC_Start_DMA+0x1d4>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0c9a      	lsrs	r2, r3, #18
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002470:	e002      	b.n	8002478 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3b01      	subs	r3, #1
 8002476:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f9      	bne.n	8002472 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 809c 	bne.w	80025c6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002492:	4b57      	ldr	r3, [pc, #348]	; (80025f0 <HAL_ADC_Start_DMA+0x1d8>)
 8002494:	4013      	ands	r3, r2
 8002496:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c8:	d106      	bne.n	80024d8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f023 0206 	bic.w	r2, r3, #6
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	645a      	str	r2, [r3, #68]	; 0x44
 80024d6:	e002      	b.n	80024de <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	4a42      	ldr	r2, [pc, #264]	; (80025f4 <HAL_ADC_Start_DMA+0x1dc>)
 80024ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	4a41      	ldr	r2, [pc, #260]	; (80025f8 <HAL_ADC_Start_DMA+0x1e0>)
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	4a40      	ldr	r2, [pc, #256]	; (80025fc <HAL_ADC_Start_DMA+0x1e4>)
 80024fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002506:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002516:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002526:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	334c      	adds	r3, #76	; 0x4c
 8002532:	4619      	mov	r1, r3
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f000 fd7a 	bl	8003030 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <HAL_ADC_Start_DMA+0x1e8>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10f      	bne.n	8002568 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d143      	bne.n	80025de <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	e03a      	b.n	80025de <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a25      	ldr	r2, [pc, #148]	; (8002604 <HAL_ADC_Start_DMA+0x1ec>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10e      	bne.n	8002590 <HAL_ADC_Start_DMA+0x178>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d107      	bne.n	8002590 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800258e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_ADC_Start_DMA+0x1e8>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d120      	bne.n	80025de <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a19      	ldr	r2, [pc, #100]	; (8002608 <HAL_ADC_Start_DMA+0x1f0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d11b      	bne.n	80025de <HAL_ADC_Start_DMA+0x1c6>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d114      	bne.n	80025de <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	e00b      	b.n	80025de <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0210 	orr.w	r2, r3, #16
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	2000005c 	.word	0x2000005c
 80025ec:	431bde83 	.word	0x431bde83
 80025f0:	fffff8fe 	.word	0xfffff8fe
 80025f4:	08002b99 	.word	0x08002b99
 80025f8:	08002c53 	.word	0x08002c53
 80025fc:	08002c6f 	.word	0x08002c6f
 8002600:	40012300 	.word	0x40012300
 8002604:	40012000 	.word	0x40012000
 8002608:	40012200 	.word	0x40012200

0800260c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADC_Stop_DMA+0x1a>
 8002622:	2302      	movs	r3, #2
 8002624:	e046      	b.n	80026b4 <HAL_ADC_Stop_DMA+0xa8>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d12e      	bne.n	80026aa <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800265a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d10f      	bne.n	800268a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fd3e 	bl	80030f0 <HAL_DMA_Abort>
 8002674:	4603      	mov	r3, r0
 8002676:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002698:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_ADC_Stop_DMA+0xb0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	ffffeefe 	.word	0xffffeefe

080026c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1c>
 8002728:	2302      	movs	r3, #2
 800272a:	e12a      	b.n	8002982 <HAL_ADC_ConfigChannel+0x272>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b09      	cmp	r3, #9
 800273a:	d93a      	bls.n	80027b2 <HAL_ADC_ConfigChannel+0xa2>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002744:	d035      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68d9      	ldr	r1, [r3, #12]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	3b1e      	subs	r3, #30
 800275c:	2207      	movs	r2, #7
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	400a      	ands	r2, r1
 800276a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a87      	ldr	r2, [pc, #540]	; (8002990 <HAL_ADC_ConfigChannel+0x280>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10a      	bne.n	800278c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	061a      	lsls	r2, r3, #24
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800278a:	e035      	b.n	80027f8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68d9      	ldr	r1, [r3, #12]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4403      	add	r3, r0
 80027a4:	3b1e      	subs	r3, #30
 80027a6:	409a      	lsls	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027b0:	e022      	b.n	80027f8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6919      	ldr	r1, [r3, #16]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	2207      	movs	r2, #7
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43da      	mvns	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	400a      	ands	r2, r1
 80027d4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6919      	ldr	r1, [r3, #16]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	4603      	mov	r3, r0
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4403      	add	r3, r0
 80027ee:	409a      	lsls	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d824      	bhi.n	800284a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	3b05      	subs	r3, #5
 8002812:	221f      	movs	r2, #31
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43da      	mvns	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	400a      	ands	r2, r1
 8002820:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	4618      	mov	r0, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3b05      	subs	r3, #5
 800283c:	fa00 f203 	lsl.w	r2, r0, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	635a      	str	r2, [r3, #52]	; 0x34
 8002848:	e04c      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d824      	bhi.n	800289c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b23      	subs	r3, #35	; 0x23
 8002864:	221f      	movs	r2, #31
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	400a      	ands	r2, r1
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3b23      	subs	r3, #35	; 0x23
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
 800289a:	e023      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b41      	subs	r3, #65	; 0x41
 80028ae:	221f      	movs	r2, #31
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43da      	mvns	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	400a      	ands	r2, r1
 80028bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	3b41      	subs	r3, #65	; 0x41
 80028d8:	fa00 f203 	lsl.w	r2, r0, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <HAL_ADC_ConfigChannel+0x284>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d10a      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x1f4>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f6:	d105      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <HAL_ADC_ConfigChannel+0x288>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a26      	ldr	r2, [pc, #152]	; (8002998 <HAL_ADC_ConfigChannel+0x288>)
 80028fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002902:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <HAL_ADC_ConfigChannel+0x284>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d109      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x212>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b12      	cmp	r3, #18
 8002914:	d105      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_ADC_ConfigChannel+0x288>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_ADC_ConfigChannel+0x288>)
 800291c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002920:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_ADC_ConfigChannel+0x284>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d125      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x268>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a17      	ldr	r2, [pc, #92]	; (8002990 <HAL_ADC_ConfigChannel+0x280>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d003      	beq.n	800293e <HAL_ADC_ConfigChannel+0x22e>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b11      	cmp	r3, #17
 800293c:	d11c      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_ADC_ConfigChannel+0x288>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a15      	ldr	r2, [pc, #84]	; (8002998 <HAL_ADC_ConfigChannel+0x288>)
 8002944:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002948:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_ADC_ConfigChannel+0x280>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d111      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_ADC_ConfigChannel+0x28c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_ADC_ConfigChannel+0x290>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9a      	lsrs	r2, r3, #18
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800296a:	e002      	b.n	8002972 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3b01      	subs	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f9      	bne.n	800296c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	10000012 	.word	0x10000012
 8002994:	40012000 	.word	0x40012000
 8002998:	40012300 	.word	0x40012300
 800299c:	2000005c 	.word	0x2000005c
 80029a0:	431bde83 	.word	0x431bde83

080029a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029ac:	4b78      	ldr	r3, [pc, #480]	; (8002b90 <ADC_Init+0x1ec>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <ADC_Init+0x1ec>)
 80029b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029b8:	4b75      	ldr	r3, [pc, #468]	; (8002b90 <ADC_Init+0x1ec>)
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4973      	ldr	r1, [pc, #460]	; (8002b90 <ADC_Init+0x1ec>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	021a      	lsls	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6899      	ldr	r1, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	4a58      	ldr	r2, [pc, #352]	; (8002b94 <ADC_Init+0x1f0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	e00f      	b.n	8002a9e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0202 	bic.w	r2, r2, #2
 8002aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	005a      	lsls	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ada:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	3b01      	subs	r3, #1
 8002af8:	035a      	lsls	r2, r3, #13
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	e007      	b.n	8002b14 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	051a      	lsls	r2, r3, #20
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6899      	ldr	r1, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b56:	025a      	lsls	r2, r3, #9
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6899      	ldr	r1, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	029a      	lsls	r2, r3, #10
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40012300 	.word	0x40012300
 8002b94:	0f000001 	.word	0x0f000001

08002b98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d13c      	bne.n	8002c2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d12b      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d127      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d119      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0220 	bic.w	r2, r2, #32
 8002bfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff fd4b 	bl	80026c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c2a:	e00e      	b.n	8002c4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff fd5f 	bl	80026fc <HAL_ADC_ErrorCallback>
}
 8002c3e:	e004      	b.n	8002c4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fd37 	bl	80026d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f043 0204 	orr.w	r2, r3, #4
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f7ff fd34 	bl	80026fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x40>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cde:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	60d3      	str	r3, [r2, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00
 8002cf4:	05fa0000 	.word	0x05fa0000

08002cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <__NVIC_GetPriorityGrouping+0x18>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	f003 0307 	and.w	r3, r3, #7
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db0b      	blt.n	8002d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	4907      	ldr	r1, [pc, #28]	; (8002d4c <__NVIC_EnableIRQ+0x38>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2001      	movs	r0, #1
 8002d36:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e100 	.word	0xe000e100

08002d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	6039      	str	r1, [r7, #0]
 8002d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	db0a      	blt.n	8002d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	490c      	ldr	r1, [pc, #48]	; (8002d9c <__NVIC_SetPriority+0x4c>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	440b      	add	r3, r1
 8002d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d78:	e00a      	b.n	8002d90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4908      	ldr	r1, [pc, #32]	; (8002da0 <__NVIC_SetPriority+0x50>)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	3b04      	subs	r3, #4
 8002d88:	0112      	lsls	r2, r2, #4
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	761a      	strb	r2, [r3, #24]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000e100 	.word	0xe000e100
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f1c3 0307 	rsb	r3, r3, #7
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	bf28      	it	cs
 8002dc2:	2304      	movcs	r3, #4
 8002dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d902      	bls.n	8002dd4 <NVIC_EncodePriority+0x30>
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3b03      	subs	r3, #3
 8002dd2:	e000      	b.n	8002dd6 <NVIC_EncodePriority+0x32>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	401a      	ands	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43d9      	mvns	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	4313      	orrs	r3, r2
         );
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3724      	adds	r7, #36	; 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e1c:	d301      	bcc.n	8002e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00f      	b.n	8002e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <SysTick_Config+0x40>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f7ff ff8e 	bl	8002d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <SysTick_Config+0x40>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <SysTick_Config+0x40>)
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	e000e010 	.word	0xe000e010

08002e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff29 	bl	8002cb0 <__NVIC_SetPriorityGrouping>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e78:	f7ff ff3e 	bl	8002cf8 <__NVIC_GetPriorityGrouping>
 8002e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7ff ff8e 	bl	8002da4 <NVIC_EncodePriority>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff5d 	bl	8002d50 <__NVIC_SetPriority>
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff31 	bl	8002d14 <__NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ffa2 	bl	8002e0c <SysTick_Config>
 8002ec8:	4603      	mov	r3, r0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ee0:	f7ff f8e4 	bl	80020ac <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e099      	b.n	8003024 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f10:	e00f      	b.n	8002f32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f12:	f7ff f8cb 	bl	80020ac <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d908      	bls.n	8002f32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e078      	b.n	8003024 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e8      	bne.n	8002f12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4b38      	ldr	r3, [pc, #224]	; (800302c <HAL_DMA_Init+0x158>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d107      	bne.n	8002f9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	4313      	orrs	r3, r2
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0307 	bic.w	r3, r3, #7
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d117      	bne.n	8002ff6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fb09 	bl	80035f0 <DMA_CheckFifoParam>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e016      	b.n	8003024 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fac0 	bl	8003584 <DMA_CalcBaseAndBitshift>
 8003004:	4603      	mov	r3, r0
 8003006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	223f      	movs	r2, #63	; 0x3f
 800300e:	409a      	lsls	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	e010803f 	.word	0xe010803f

08003030 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_DMA_Start_IT+0x26>
 8003052:	2302      	movs	r3, #2
 8003054:	e048      	b.n	80030e8 <HAL_DMA_Start_IT+0xb8>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d137      	bne.n	80030da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa52 	bl	8003528 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	223f      	movs	r2, #63	; 0x3f
 800308a:	409a      	lsls	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0216 	orr.w	r2, r2, #22
 800309e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0208 	orr.w	r2, r2, #8
 80030c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e005      	b.n	80030e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
 80030e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030fe:	f7fe ffd5 	bl	80020ac <HAL_GetTick>
 8003102:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d008      	beq.n	8003122 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e052      	b.n	80031c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0216 	bic.w	r2, r2, #22
 8003130:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003140:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d103      	bne.n	8003152 <HAL_DMA_Abort+0x62>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0208 	bic.w	r2, r2, #8
 8003160:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003172:	e013      	b.n	800319c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003174:	f7fe ff9a 	bl	80020ac <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b05      	cmp	r3, #5
 8003180:	d90c      	bls.n	800319c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2203      	movs	r2, #3
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e015      	b.n	80031c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e4      	bne.n	8003174 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	223f      	movs	r2, #63	; 0x3f
 80031b0:	409a      	lsls	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2280      	movs	r2, #128	; 0x80
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00c      	b.n	8003208 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2205      	movs	r2, #5
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003220:	4b92      	ldr	r3, [pc, #584]	; (800346c <HAL_DMA_IRQHandler+0x258>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a92      	ldr	r2, [pc, #584]	; (8003470 <HAL_DMA_IRQHandler+0x25c>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0a9b      	lsrs	r3, r3, #10
 800322c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	2208      	movs	r2, #8
 8003240:	409a      	lsls	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01a      	beq.n	8003280 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	2208      	movs	r2, #8
 800326e:	409a      	lsls	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	2201      	movs	r2, #1
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	2201      	movs	r2, #1
 80032a4:	409a      	lsls	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0202 	orr.w	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	2204      	movs	r2, #4
 80032bc:	409a      	lsls	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d012      	beq.n	80032ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2204      	movs	r2, #4
 80032da:	409a      	lsls	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	2210      	movs	r2, #16
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d043      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d03c      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2210      	movs	r2, #16
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d018      	beq.n	8003356 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d108      	bne.n	8003344 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d024      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
 8003342:	e01f      	b.n	8003384 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
 8003354:	e016      	b.n	8003384 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0208 	bic.w	r2, r2, #8
 8003372:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	2220      	movs	r2, #32
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 808e 	beq.w	80034b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8086 	beq.w	80034b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	2220      	movs	r2, #32
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d136      	bne.n	800342c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0216 	bic.w	r2, r2, #22
 80033cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <HAL_DMA_IRQHandler+0x1da>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0208 	bic.w	r2, r2, #8
 80033fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	223f      	movs	r2, #63	; 0x3f
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341e:	2b00      	cmp	r3, #0
 8003420:	d07d      	beq.n	800351e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
        }
        return;
 800342a:	e078      	b.n	800351e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01c      	beq.n	8003474 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d108      	bne.n	800345a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	2b00      	cmp	r3, #0
 800344e:	d030      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
 8003458:	e02b      	b.n	80034b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d027      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
 800346a:	e022      	b.n	80034b2 <HAL_DMA_IRQHandler+0x29e>
 800346c:	2000005c 	.word	0x2000005c
 8003470:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10f      	bne.n	80034a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0210 	bic.w	r2, r2, #16
 8003490:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d032      	beq.n	8003520 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d022      	beq.n	800350c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2205      	movs	r2, #5
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3301      	adds	r3, #1
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d307      	bcc.n	80034fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f2      	bne.n	80034de <HAL_DMA_IRQHandler+0x2ca>
 80034f8:	e000      	b.n	80034fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
 800351c:	e000      	b.n	8003520 <HAL_DMA_IRQHandler+0x30c>
        return;
 800351e:	bf00      	nop
    }
  }
}
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop

08003528 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003544:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d108      	bne.n	8003568 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003566:	e007      	b.n	8003578 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3b10      	subs	r3, #16
 8003594:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <DMA_CalcBaseAndBitshift+0x60>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <DMA_CalcBaseAndBitshift+0x64>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d908      	bls.n	80035c4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <DMA_CalcBaseAndBitshift+0x68>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	1d1a      	adds	r2, r3, #4
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	659a      	str	r2, [r3, #88]	; 0x58
 80035c2:	e006      	b.n	80035d2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <DMA_CalcBaseAndBitshift+0x68>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	aaaaaaab 	.word	0xaaaaaaab
 80035e8:	08009b78 	.word	0x08009b78
 80035ec:	fffffc00 	.word	0xfffffc00

080035f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11f      	bne.n	800364a <DMA_CheckFifoParam+0x5a>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d856      	bhi.n	80036be <DMA_CheckFifoParam+0xce>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <DMA_CheckFifoParam+0x28>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	0800363b 	.word	0x0800363b
 8003620:	08003629 	.word	0x08003629
 8003624:	080036bf 	.word	0x080036bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d046      	beq.n	80036c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e043      	b.n	80036c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003642:	d140      	bne.n	80036c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003648:	e03d      	b.n	80036c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003652:	d121      	bne.n	8003698 <DMA_CheckFifoParam+0xa8>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d837      	bhi.n	80036ca <DMA_CheckFifoParam+0xda>
 800365a:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <DMA_CheckFifoParam+0x70>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	08003671 	.word	0x08003671
 8003664:	08003677 	.word	0x08003677
 8003668:	08003671 	.word	0x08003671
 800366c:	08003689 	.word	0x08003689
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e030      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d025      	beq.n	80036ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003686:	e022      	b.n	80036ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003690:	d11f      	bne.n	80036d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003696:	e01c      	b.n	80036d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d903      	bls.n	80036a6 <DMA_CheckFifoParam+0xb6>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d003      	beq.n	80036ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036a4:	e018      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
      break;
 80036aa:	e015      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00e      	beq.n	80036d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      break;
 80036bc:	e00b      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      break;
 80036be:	bf00      	nop
 80036c0:	e00a      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e008      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
 80036c8:	e006      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
 80036cc:	e004      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ce:	bf00      	nop
 80036d0:	e002      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036d6:	bf00      	nop
    }
  } 
  
  return status; 
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	e175      	b.n	80039f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003708:	2201      	movs	r2, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	429a      	cmp	r2, r3
 8003722:	f040 8164 	bne.w	80039ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d00b      	beq.n	8003746 <HAL_GPIO_Init+0x5e>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d007      	beq.n	8003746 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800373a:	2b11      	cmp	r3, #17
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b12      	cmp	r3, #18
 8003744:	d130      	bne.n	80037a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	2203      	movs	r2, #3
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800377c:	2201      	movs	r2, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 0201 	and.w	r2, r3, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2203      	movs	r2, #3
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x100>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b12      	cmp	r3, #18
 80037e6:	d123      	bne.n	8003830 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	08da      	lsrs	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3208      	adds	r2, #8
 80037f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	220f      	movs	r2, #15
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	08da      	lsrs	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3208      	adds	r2, #8
 800382a:	69b9      	ldr	r1, [r7, #24]
 800382c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2203      	movs	r2, #3
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0203 	and.w	r2, r3, #3
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80be 	beq.w	80039ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003872:	4b66      	ldr	r3, [pc, #408]	; (8003a0c <HAL_GPIO_Init+0x324>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	4a65      	ldr	r2, [pc, #404]	; (8003a0c <HAL_GPIO_Init+0x324>)
 8003878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800387c:	6453      	str	r3, [r2, #68]	; 0x44
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <HAL_GPIO_Init+0x324>)
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800388a:	4a61      	ldr	r2, [pc, #388]	; (8003a10 <HAL_GPIO_Init+0x328>)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	089b      	lsrs	r3, r3, #2
 8003890:	3302      	adds	r3, #2
 8003892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	220f      	movs	r2, #15
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <HAL_GPIO_Init+0x32c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d037      	beq.n	8003926 <HAL_GPIO_Init+0x23e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a57      	ldr	r2, [pc, #348]	; (8003a18 <HAL_GPIO_Init+0x330>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d031      	beq.n	8003922 <HAL_GPIO_Init+0x23a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a56      	ldr	r2, [pc, #344]	; (8003a1c <HAL_GPIO_Init+0x334>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d02b      	beq.n	800391e <HAL_GPIO_Init+0x236>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a55      	ldr	r2, [pc, #340]	; (8003a20 <HAL_GPIO_Init+0x338>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d025      	beq.n	800391a <HAL_GPIO_Init+0x232>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a54      	ldr	r2, [pc, #336]	; (8003a24 <HAL_GPIO_Init+0x33c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01f      	beq.n	8003916 <HAL_GPIO_Init+0x22e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a53      	ldr	r2, [pc, #332]	; (8003a28 <HAL_GPIO_Init+0x340>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d019      	beq.n	8003912 <HAL_GPIO_Init+0x22a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_GPIO_Init+0x344>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_GPIO_Init+0x226>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a51      	ldr	r2, [pc, #324]	; (8003a30 <HAL_GPIO_Init+0x348>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00d      	beq.n	800390a <HAL_GPIO_Init+0x222>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a50      	ldr	r2, [pc, #320]	; (8003a34 <HAL_GPIO_Init+0x34c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <HAL_GPIO_Init+0x21e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4f      	ldr	r2, [pc, #316]	; (8003a38 <HAL_GPIO_Init+0x350>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <HAL_GPIO_Init+0x21a>
 80038fe:	2309      	movs	r3, #9
 8003900:	e012      	b.n	8003928 <HAL_GPIO_Init+0x240>
 8003902:	230a      	movs	r3, #10
 8003904:	e010      	b.n	8003928 <HAL_GPIO_Init+0x240>
 8003906:	2308      	movs	r3, #8
 8003908:	e00e      	b.n	8003928 <HAL_GPIO_Init+0x240>
 800390a:	2307      	movs	r3, #7
 800390c:	e00c      	b.n	8003928 <HAL_GPIO_Init+0x240>
 800390e:	2306      	movs	r3, #6
 8003910:	e00a      	b.n	8003928 <HAL_GPIO_Init+0x240>
 8003912:	2305      	movs	r3, #5
 8003914:	e008      	b.n	8003928 <HAL_GPIO_Init+0x240>
 8003916:	2304      	movs	r3, #4
 8003918:	e006      	b.n	8003928 <HAL_GPIO_Init+0x240>
 800391a:	2303      	movs	r3, #3
 800391c:	e004      	b.n	8003928 <HAL_GPIO_Init+0x240>
 800391e:	2302      	movs	r3, #2
 8003920:	e002      	b.n	8003928 <HAL_GPIO_Init+0x240>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_GPIO_Init+0x240>
 8003926:	2300      	movs	r3, #0
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	f002 0203 	and.w	r2, r2, #3
 800392e:	0092      	lsls	r2, r2, #2
 8003930:	4093      	lsls	r3, r2
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003938:	4935      	ldr	r1, [pc, #212]	; (8003a10 <HAL_GPIO_Init+0x328>)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	3302      	adds	r3, #2
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003946:	4b3d      	ldr	r3, [pc, #244]	; (8003a3c <HAL_GPIO_Init+0x354>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800396a:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <HAL_GPIO_Init+0x354>)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003970:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <HAL_GPIO_Init+0x354>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003994:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <HAL_GPIO_Init+0x354>)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800399a:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_GPIO_Init+0x354>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039be:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <HAL_GPIO_Init+0x354>)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039c4:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <HAL_GPIO_Init+0x354>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <HAL_GPIO_Init+0x354>)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3301      	adds	r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b0f      	cmp	r3, #15
 80039f8:	f67f ae86 	bls.w	8003708 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	3724      	adds	r7, #36	; 0x24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40013800 	.word	0x40013800
 8003a14:	40020000 	.word	0x40020000
 8003a18:	40020400 	.word	0x40020400
 8003a1c:	40020800 	.word	0x40020800
 8003a20:	40020c00 	.word	0x40020c00
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40021400 	.word	0x40021400
 8003a2c:	40021800 	.word	0x40021800
 8003a30:	40021c00 	.word	0x40021c00
 8003a34:	40022000 	.word	0x40022000
 8003a38:	40022400 	.word	0x40022400
 8003a3c:	40013c00 	.word	0x40013c00

08003a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e001      	b.n	8003a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a80:	787b      	ldrb	r3, [r7, #1]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a86:	887a      	ldrh	r2, [r7, #2]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a8c:	e003      	b.n	8003a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a8e:	887b      	ldrh	r3, [r7, #2]
 8003a90:	041a      	lsls	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	619a      	str	r2, [r3, #24]
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	041a      	lsls	r2, r3, #16
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	887b      	ldrh	r3, [r7, #2]
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	619a      	str	r2, [r3, #24]
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	4b23      	ldr	r3, [pc, #140]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b06:	f7fe fad1 	bl	80020ac <HAL_GetTick>
 8003b0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b0c:	e009      	b.n	8003b22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b0e:	f7fe facd 	bl	80020ac <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b1c:	d901      	bls.n	8003b22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e022      	b.n	8003b68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b22:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2e:	d1ee      	bne.n	8003b0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b3c:	f7fe fab6 	bl	80020ac <HAL_GetTick>
 8003b40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b42:	e009      	b.n	8003b58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b44:	f7fe fab2 	bl	80020ac <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b52:	d901      	bls.n	8003b58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e007      	b.n	8003b68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b64:	d1ee      	bne.n	8003b44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40007000 	.word	0x40007000

08003b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b80:	2300      	movs	r3, #0
 8003b82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e29b      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8087 	beq.w	8003caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b9c:	4b96      	ldr	r3, [pc, #600]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d00c      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba8:	4b93      	ldr	r3, [pc, #588]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d112      	bne.n	8003bda <HAL_RCC_OscConfig+0x62>
 8003bb4:	4b90      	ldr	r3, [pc, #576]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc0:	d10b      	bne.n	8003bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc2:	4b8d      	ldr	r3, [pc, #564]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d06c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x130>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d168      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e275      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x7a>
 8003be4:	4b84      	ldr	r3, [pc, #528]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a83      	ldr	r2, [pc, #524]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e02e      	b.n	8003c50 <HAL_RCC_OscConfig+0xd8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x9c>
 8003bfa:	4b7f      	ldr	r3, [pc, #508]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a7e      	ldr	r2, [pc, #504]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7b      	ldr	r2, [pc, #492]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e01d      	b.n	8003c50 <HAL_RCC_OscConfig+0xd8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0xc0>
 8003c1e:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a75      	ldr	r2, [pc, #468]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b73      	ldr	r3, [pc, #460]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a72      	ldr	r2, [pc, #456]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0xd8>
 8003c38:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a6e      	ldr	r2, [pc, #440]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b6c      	ldr	r3, [pc, #432]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6b      	ldr	r2, [pc, #428]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fa28 	bl	80020ac <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe fa24 	bl	80020ac <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e229      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0xe8>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe fa14 	bl	80020ac <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe fa10 	bl	80020ac <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e215      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x110>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d069      	beq.n	8003d8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cb6:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d11c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x190>
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d116      	bne.n	8003d08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x17a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e1e9      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	493d      	ldr	r1, [pc, #244]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d06:	e040      	b.n	8003d8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d023      	beq.n	8003d58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d10:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a38      	ldr	r2, [pc, #224]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f9c6 	bl	80020ac <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d24:	f7fe f9c2 	bl	80020ac <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e1c7      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d42:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4929      	ldr	r1, [pc, #164]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]
 8003d56:	e018      	b.n	8003d8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d58:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe f9a2 	bl	80020ac <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6c:	f7fe f99e 	bl	80020ac <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1a3      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d038      	beq.n	8003e08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d019      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da2:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003daa:	f7fe f97f 	bl	80020ac <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db2:	f7fe f97b 	bl	80020ac <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e180      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x23a>
 8003dd0:	e01a      	b.n	8003e08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd6:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fe f965 	bl	80020ac <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de6:	f7fe f961 	bl	80020ac <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d903      	bls.n	8003dfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e166      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
 8003df8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	4b92      	ldr	r3, [pc, #584]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ee      	bne.n	8003de6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80a4 	beq.w	8003f5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e16:	4b8c      	ldr	r3, [pc, #560]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	4b89      	ldr	r3, [pc, #548]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a88      	ldr	r2, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2e:	4b86      	ldr	r3, [pc, #536]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3e:	4b83      	ldr	r3, [pc, #524]	; (800404c <HAL_RCC_OscConfig+0x4d4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d118      	bne.n	8003e7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e4a:	4b80      	ldr	r3, [pc, #512]	; (800404c <HAL_RCC_OscConfig+0x4d4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a7f      	ldr	r2, [pc, #508]	; (800404c <HAL_RCC_OscConfig+0x4d4>)
 8003e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e56:	f7fe f929 	bl	80020ac <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5e:	f7fe f925 	bl	80020ac <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b64      	cmp	r3, #100	; 0x64
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e12a      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e70:	4b76      	ldr	r3, [pc, #472]	; (800404c <HAL_RCC_OscConfig+0x4d4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_OscConfig+0x31a>
 8003e84:	4b70      	ldr	r3, [pc, #448]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a6f      	ldr	r2, [pc, #444]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	e02d      	b.n	8003eee <HAL_RCC_OscConfig+0x376>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x33c>
 8003e9a:	4b6b      	ldr	r3, [pc, #428]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	4a6a      	ldr	r2, [pc, #424]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea6:	4b68      	ldr	r3, [pc, #416]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a67      	ldr	r2, [pc, #412]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	f023 0304 	bic.w	r3, r3, #4
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	e01c      	b.n	8003eee <HAL_RCC_OscConfig+0x376>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d10c      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x35e>
 8003ebc:	4b62      	ldr	r3, [pc, #392]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a61      	ldr	r2, [pc, #388]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003ec2:	f043 0304 	orr.w	r3, r3, #4
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a5e      	ldr	r2, [pc, #376]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	e00b      	b.n	8003eee <HAL_RCC_OscConfig+0x376>
 8003ed6:	4b5c      	ldr	r3, [pc, #368]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a5b      	ldr	r2, [pc, #364]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee2:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a58      	ldr	r2, [pc, #352]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003ee8:	f023 0304 	bic.w	r3, r3, #4
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d015      	beq.n	8003f22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fe f8d9 	bl	80020ac <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fe f8d5 	bl	80020ac <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e0d8      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	4b4c      	ldr	r3, [pc, #304]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0ee      	beq.n	8003efe <HAL_RCC_OscConfig+0x386>
 8003f20:	e014      	b.n	8003f4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fe f8c3 	bl	80020ac <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fe f8bf 	bl	80020ac <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e0c2      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f40:	4b41      	ldr	r3, [pc, #260]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ee      	bne.n	8003f2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d105      	bne.n	8003f5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4a3c      	ldr	r2, [pc, #240]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80ae 	beq.w	80040c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f68:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d06d      	beq.n	8004050 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d14b      	bne.n	8004014 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b32      	ldr	r3, [pc, #200]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a31      	ldr	r2, [pc, #196]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fe f890 	bl	80020ac <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe f88c 	bl	80020ac <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e091      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	4b29      	ldr	r3, [pc, #164]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	071b      	lsls	r3, r3, #28
 8003fda:	491b      	ldr	r1, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fe f85e 	bl	80020ac <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fe f85a 	bl	80020ac <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e05f      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x47c>
 8004012:	e057      	b.n	80040c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 800401a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fe f844 	bl	80020ac <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fe f840 	bl	80020ac <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e045      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_RCC_OscConfig+0x4d0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x4b0>
 8004046:	e03d      	b.n	80040c4 <HAL_RCC_OscConfig+0x54c>
 8004048:	40023800 	.word	0x40023800
 800404c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004050:	4b1f      	ldr	r3, [pc, #124]	; (80040d0 <HAL_RCC_OscConfig+0x558>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d030      	beq.n	80040c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d129      	bne.n	80040c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d122      	bne.n	80040c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004080:	4013      	ands	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004086:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004088:	4293      	cmp	r3, r2
 800408a:	d119      	bne.n	80040c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	3b01      	subs	r3, #1
 800409a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d10f      	bne.n	80040c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d107      	bne.n	80040c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800

080040d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0d0      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b6a      	ldr	r3, [pc, #424]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d910      	bls.n	800411c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b67      	ldr	r3, [pc, #412]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 020f 	bic.w	r2, r3, #15
 8004102:	4965      	ldr	r1, [pc, #404]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b63      	ldr	r3, [pc, #396]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0b8      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d020      	beq.n	800416a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004134:	4b59      	ldr	r3, [pc, #356]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4a58      	ldr	r2, [pc, #352]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 800413a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800413e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800414c:	4b53      	ldr	r3, [pc, #332]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4a52      	ldr	r2, [pc, #328]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004156:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004158:	4b50      	ldr	r3, [pc, #320]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	494d      	ldr	r1, [pc, #308]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d040      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b47      	ldr	r3, [pc, #284]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d115      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e07f      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004196:	4b41      	ldr	r3, [pc, #260]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e073      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a6:	4b3d      	ldr	r3, [pc, #244]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e06b      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b6:	4b39      	ldr	r3, [pc, #228]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4936      	ldr	r1, [pc, #216]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c8:	f7fd ff70 	bl	80020ac <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7fd ff6c 	bl	80020ac <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e053      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	4b2d      	ldr	r3, [pc, #180]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 020c 	and.w	r2, r3, #12
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d1eb      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041f8:	4b27      	ldr	r3, [pc, #156]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d210      	bcs.n	8004228 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004206:	4b24      	ldr	r3, [pc, #144]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 020f 	bic.w	r2, r3, #15
 800420e:	4922      	ldr	r1, [pc, #136]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e032      	b.n	800428e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4916      	ldr	r1, [pc, #88]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	490e      	ldr	r1, [pc, #56]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004266:	f000 f821 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 800426a:	4602      	mov	r2, r0
 800426c:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	490a      	ldr	r1, [pc, #40]	; (80042a0 <HAL_RCC_ClockConfig+0x1cc>)
 8004278:	5ccb      	ldrb	r3, [r1, r3]
 800427a:	fa22 f303 	lsr.w	r3, r2, r3
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1d4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fd fecc 	bl	8002024 <HAL_InitTick>

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40023c00 	.word	0x40023c00
 800429c:	40023800 	.word	0x40023800
 80042a0:	08009b60 	.word	0x08009b60
 80042a4:	2000005c 	.word	0x2000005c
 80042a8:	20000060 	.word	0x20000060

080042ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ac:	b5b0      	push	{r4, r5, r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042b2:	2100      	movs	r1, #0
 80042b4:	6079      	str	r1, [r7, #4]
 80042b6:	2100      	movs	r1, #0
 80042b8:	60f9      	str	r1, [r7, #12]
 80042ba:	2100      	movs	r1, #0
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80042be:	2100      	movs	r1, #0
 80042c0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c2:	4952      	ldr	r1, [pc, #328]	; (800440c <HAL_RCC_GetSysClockFreq+0x160>)
 80042c4:	6889      	ldr	r1, [r1, #8]
 80042c6:	f001 010c 	and.w	r1, r1, #12
 80042ca:	2908      	cmp	r1, #8
 80042cc:	d00d      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x3e>
 80042ce:	2908      	cmp	r1, #8
 80042d0:	f200 8094 	bhi.w	80043fc <HAL_RCC_GetSysClockFreq+0x150>
 80042d4:	2900      	cmp	r1, #0
 80042d6:	d002      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0x32>
 80042d8:	2904      	cmp	r1, #4
 80042da:	d003      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x38>
 80042dc:	e08e      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042de:	4b4c      	ldr	r3, [pc, #304]	; (8004410 <HAL_RCC_GetSysClockFreq+0x164>)
 80042e0:	60bb      	str	r3, [r7, #8]
      break;
 80042e2:	e08e      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042e4:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <HAL_RCC_GetSysClockFreq+0x168>)
 80042e6:	60bb      	str	r3, [r7, #8]
      break;
 80042e8:	e08b      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042ea:	4948      	ldr	r1, [pc, #288]	; (800440c <HAL_RCC_GetSysClockFreq+0x160>)
 80042ec:	6849      	ldr	r1, [r1, #4]
 80042ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80042f2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042f4:	4945      	ldr	r1, [pc, #276]	; (800440c <HAL_RCC_GetSysClockFreq+0x160>)
 80042f6:	6849      	ldr	r1, [r1, #4]
 80042f8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80042fc:	2900      	cmp	r1, #0
 80042fe:	d024      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004300:	4942      	ldr	r1, [pc, #264]	; (800440c <HAL_RCC_GetSysClockFreq+0x160>)
 8004302:	6849      	ldr	r1, [r1, #4]
 8004304:	0989      	lsrs	r1, r1, #6
 8004306:	4608      	mov	r0, r1
 8004308:	f04f 0100 	mov.w	r1, #0
 800430c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004310:	f04f 0500 	mov.w	r5, #0
 8004314:	ea00 0204 	and.w	r2, r0, r4
 8004318:	ea01 0305 	and.w	r3, r1, r5
 800431c:	493d      	ldr	r1, [pc, #244]	; (8004414 <HAL_RCC_GetSysClockFreq+0x168>)
 800431e:	fb01 f003 	mul.w	r0, r1, r3
 8004322:	2100      	movs	r1, #0
 8004324:	fb01 f102 	mul.w	r1, r1, r2
 8004328:	1844      	adds	r4, r0, r1
 800432a:	493a      	ldr	r1, [pc, #232]	; (8004414 <HAL_RCC_GetSysClockFreq+0x168>)
 800432c:	fba2 0101 	umull	r0, r1, r2, r1
 8004330:	1863      	adds	r3, r4, r1
 8004332:	4619      	mov	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	461a      	mov	r2, r3
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	f7fb ffd8 	bl	80002f0 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4613      	mov	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	e04a      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434a:	4b30      	ldr	r3, [pc, #192]	; (800440c <HAL_RCC_GetSysClockFreq+0x160>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	099b      	lsrs	r3, r3, #6
 8004350:	461a      	mov	r2, r3
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	f240 10ff 	movw	r0, #511	; 0x1ff
 800435a:	f04f 0100 	mov.w	r1, #0
 800435e:	ea02 0400 	and.w	r4, r2, r0
 8004362:	ea03 0501 	and.w	r5, r3, r1
 8004366:	4620      	mov	r0, r4
 8004368:	4629      	mov	r1, r5
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	014b      	lsls	r3, r1, #5
 8004374:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004378:	0142      	lsls	r2, r0, #5
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	1b00      	subs	r0, r0, r4
 8004380:	eb61 0105 	sbc.w	r1, r1, r5
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	018b      	lsls	r3, r1, #6
 800438e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004392:	0182      	lsls	r2, r0, #6
 8004394:	1a12      	subs	r2, r2, r0
 8004396:	eb63 0301 	sbc.w	r3, r3, r1
 800439a:	f04f 0000 	mov.w	r0, #0
 800439e:	f04f 0100 	mov.w	r1, #0
 80043a2:	00d9      	lsls	r1, r3, #3
 80043a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043a8:	00d0      	lsls	r0, r2, #3
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	1912      	adds	r2, r2, r4
 80043b0:	eb45 0303 	adc.w	r3, r5, r3
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	f04f 0100 	mov.w	r1, #0
 80043bc:	0299      	lsls	r1, r3, #10
 80043be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043c2:	0290      	lsls	r0, r2, #10
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	461a      	mov	r2, r3
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	f7fb ff8c 	bl	80002f0 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4613      	mov	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HAL_RCC_GetSysClockFreq+0x160>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	3301      	adds	r3, #1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	60bb      	str	r3, [r7, #8]
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <HAL_RCC_GetSysClockFreq+0x164>)
 80043fe:	60bb      	str	r3, [r7, #8]
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	68bb      	ldr	r3, [r7, #8]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bdb0      	pop	{r4, r5, r7, pc}
 800440c:	40023800 	.word	0x40023800
 8004410:	00f42400 	.word	0x00f42400
 8004414:	017d7840 	.word	0x017d7840

08004418 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800441c:	4b03      	ldr	r3, [pc, #12]	; (800442c <HAL_RCC_GetHCLKFreq+0x14>)
 800441e:	681b      	ldr	r3, [r3, #0]
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	2000005c 	.word	0x2000005c

08004430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004434:	f7ff fff0 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0a9b      	lsrs	r3, r3, #10
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4903      	ldr	r1, [pc, #12]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40023800 	.word	0x40023800
 8004454:	08009b70 	.word	0x08009b70

08004458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800445c:	f7ff ffdc 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0b5b      	lsrs	r3, r3, #13
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4903      	ldr	r1, [pc, #12]	; (800447c <HAL_RCC_GetPCLK2Freq+0x24>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	08009b70 	.word	0x08009b70

08004480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d012      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044a8:	4b69      	ldr	r3, [pc, #420]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a68      	ldr	r2, [pc, #416]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044b2:	6093      	str	r3, [r2, #8]
 80044b4:	4b66      	ldr	r3, [pc, #408]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044bc:	4964      	ldr	r1, [pc, #400]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d017      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044da:	4b5d      	ldr	r3, [pc, #372]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	4959      	ldr	r1, [pc, #356]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f8:	d101      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044fa:	2301      	movs	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004506:	2301      	movs	r3, #1
 8004508:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d017      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004516:	4b4e      	ldr	r3, [pc, #312]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800451c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	494a      	ldr	r1, [pc, #296]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004534:	d101      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004536:	2301      	movs	r3, #1
 8004538:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 808b 	beq.w	800467a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004564:	4b3a      	ldr	r3, [pc, #232]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	4a39      	ldr	r2, [pc, #228]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456e:	6413      	str	r3, [r2, #64]	; 0x40
 8004570:	4b37      	ldr	r3, [pc, #220]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800457c:	4b35      	ldr	r3, [pc, #212]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a34      	ldr	r2, [pc, #208]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004588:	f7fd fd90 	bl	80020ac <HAL_GetTick>
 800458c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004590:	f7fd fd8c 	bl	80020ac <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	; 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e38f      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045a2:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ae:	4b28      	ldr	r3, [pc, #160]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d035      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d02e      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045cc:	4b20      	ldr	r3, [pc, #128]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045d6:	4b1e      	ldr	r3, [pc, #120]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	4a1d      	ldr	r2, [pc, #116]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045e2:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	4a1a      	ldr	r2, [pc, #104]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045ee:	4a18      	ldr	r2, [pc, #96]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045f4:	4b16      	ldr	r3, [pc, #88]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d114      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fd fd54 	bl	80020ac <HAL_GetTick>
 8004604:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004606:	e00a      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004608:	f7fd fd50 	bl	80020ac <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	; 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e351      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461e:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0ee      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004636:	d111      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004646:	400b      	ands	r3, r1
 8004648:	4901      	ldr	r1, [pc, #4]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
 800464e:	e00b      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004650:	40023800 	.word	0x40023800
 8004654:	40007000 	.word	0x40007000
 8004658:	0ffffcff 	.word	0x0ffffcff
 800465c:	4bb3      	ldr	r3, [pc, #716]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4ab2      	ldr	r2, [pc, #712]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004662:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004666:	6093      	str	r3, [r2, #8]
 8004668:	4bb0      	ldr	r3, [pc, #704]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004674:	49ad      	ldr	r1, [pc, #692]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004676:	4313      	orrs	r3, r2
 8004678:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b00      	cmp	r3, #0
 8004684:	d010      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004686:	4ba9      	ldr	r3, [pc, #676]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800468c:	4aa7      	ldr	r2, [pc, #668]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800468e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004692:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004696:	4ba5      	ldr	r3, [pc, #660]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004698:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	49a2      	ldr	r1, [pc, #648]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b4:	4b9d      	ldr	r3, [pc, #628]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c2:	499a      	ldr	r1, [pc, #616]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046d6:	4b95      	ldr	r3, [pc, #596]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e4:	4991      	ldr	r1, [pc, #580]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046f8:	4b8c      	ldr	r3, [pc, #560]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004706:	4989      	ldr	r1, [pc, #548]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800471a:	4b84      	ldr	r3, [pc, #528]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	4980      	ldr	r1, [pc, #512]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800473c:	4b7b      	ldr	r3, [pc, #492]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	f023 0203 	bic.w	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	4978      	ldr	r1, [pc, #480]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800475e:	4b73      	ldr	r3, [pc, #460]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	f023 020c 	bic.w	r2, r3, #12
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476c:	496f      	ldr	r1, [pc, #444]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004780:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478e:	4967      	ldr	r1, [pc, #412]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047a2:	4b62      	ldr	r3, [pc, #392]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b0:	495e      	ldr	r1, [pc, #376]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047c4:	4b59      	ldr	r3, [pc, #356]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	4956      	ldr	r1, [pc, #344]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047e6:	4b51      	ldr	r3, [pc, #324]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	494d      	ldr	r1, [pc, #308]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004808:	4b48      	ldr	r3, [pc, #288]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004816:	4945      	ldr	r1, [pc, #276]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800482a:	4b40      	ldr	r3, [pc, #256]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004838:	493c      	ldr	r1, [pc, #240]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800484c:	4b37      	ldr	r3, [pc, #220]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800485a:	4934      	ldr	r1, [pc, #208]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d011      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800486e:	4b2f      	ldr	r3, [pc, #188]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487c:	492b      	ldr	r1, [pc, #172]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800488c:	d101      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800488e:	2301      	movs	r3, #1
 8004890:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800489e:	2301      	movs	r3, #1
 80048a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ae:	4b1f      	ldr	r3, [pc, #124]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048bc:	491b      	ldr	r1, [pc, #108]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048d0:	4b16      	ldr	r3, [pc, #88]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048e0:	4912      	ldr	r1, [pc, #72]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00b      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048f4:	4b0d      	ldr	r3, [pc, #52]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004904:	4909      	ldr	r1, [pc, #36]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00f      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004918:	4b04      	ldr	r3, [pc, #16]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800491a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800491e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	e002      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	4986      	ldr	r1, [pc, #536]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00b      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004944:	4b81      	ldr	r3, [pc, #516]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800494a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004954:	497d      	ldr	r1, [pc, #500]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d006      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80d6 	beq.w	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004970:	4b76      	ldr	r3, [pc, #472]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a75      	ldr	r2, [pc, #468]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004976:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800497a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497c:	f7fd fb96 	bl	80020ac <HAL_GetTick>
 8004980:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004984:	f7fd fb92 	bl	80020ac <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e195      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004996:	4b6d      	ldr	r3, [pc, #436]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d021      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d11d      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049b6:	4b65      	ldr	r3, [pc, #404]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049bc:	0c1b      	lsrs	r3, r3, #16
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049c4:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ca:	0e1b      	lsrs	r3, r3, #24
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	019a      	lsls	r2, r3, #6
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	061b      	lsls	r3, r3, #24
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	071b      	lsls	r3, r3, #28
 80049ea:	4958      	ldr	r1, [pc, #352]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a06:	d00a      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02e      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a1c:	d129      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a1e:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a2c:	4b47      	ldr	r3, [pc, #284]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a32:	0f1b      	lsrs	r3, r3, #28
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	019a      	lsls	r2, r3, #6
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	071b      	lsls	r3, r3, #28
 8004a52:	493e      	ldr	r1, [pc, #248]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a5a:	4b3c      	ldr	r3, [pc, #240]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a60:	f023 021f 	bic.w	r2, r3, #31
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	4938      	ldr	r1, [pc, #224]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01d      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a7e:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a84:	0e1b      	lsrs	r3, r3, #24
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a8c:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a92:	0f1b      	lsrs	r3, r3, #28
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	019a      	lsls	r2, r3, #6
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	041b      	lsls	r3, r3, #16
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	071b      	lsls	r3, r3, #28
 8004ab2:	4926      	ldr	r1, [pc, #152]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d011      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	019a      	lsls	r2, r3, #6
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	071b      	lsls	r3, r3, #28
 8004ae2:	491a      	ldr	r1, [pc, #104]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aea:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af6:	f7fd fad9 	bl	80020ac <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004afe:	f7fd fad5 	bl	80020ac <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b64      	cmp	r3, #100	; 0x64
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e0d8      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b10:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	f040 80ce 	bne.w	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b30:	f7fd fabc 	bl	80020ac <HAL_GetTick>
 8004b34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b36:	e00b      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b38:	f7fd fab8 	bl	80020ac <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d904      	bls.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e0bb      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b50:	4b5e      	ldr	r3, [pc, #376]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5c:	d0ec      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d02e      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d12a      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b86:	4b51      	ldr	r3, [pc, #324]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b94:	4b4d      	ldr	r3, [pc, #308]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	0f1b      	lsrs	r3, r3, #28
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	019a      	lsls	r2, r3, #6
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	041b      	lsls	r3, r3, #16
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	4944      	ldr	r1, [pc, #272]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bc2:	4b42      	ldr	r3, [pc, #264]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	493d      	ldr	r1, [pc, #244]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d022      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf0:	d11d      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	0e1b      	lsrs	r3, r3, #24
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c00:	4b32      	ldr	r3, [pc, #200]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	0f1b      	lsrs	r3, r3, #28
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	019a      	lsls	r2, r3, #6
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	071b      	lsls	r3, r3, #28
 8004c26:	4929      	ldr	r1, [pc, #164]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d028      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	0e1b      	lsrs	r3, r3, #24
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	0c1b      	lsrs	r3, r3, #16
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	019a      	lsls	r2, r3, #6
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	431a      	orrs	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	071b      	lsls	r3, r3, #28
 8004c6e:	4917      	ldr	r1, [pc, #92]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c76:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	4911      	ldr	r1, [pc, #68]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fd fa08 	bl	80020ac <HAL_GetTick>
 8004c9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ca0:	f7fd fa04 	bl	80020ac <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	; 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e007      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cbe:	d1ef      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800

08004cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e09d      	b.n	8004e1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d108      	bne.n	8004cfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf2:	d009      	beq.n	8004d08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	61da      	str	r2, [r3, #28]
 8004cfa:	e005      	b.n	8004d08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fc fb90 	bl	8001448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d48:	d902      	bls.n	8004d50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	e002      	b.n	8004d56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d5e:	d007      	beq.n	8004d70 <HAL_SPI_Init+0xa0>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	ea42 0103 	orr.w	r1, r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	0c1b      	lsrs	r3, r3, #16
 8004dcc:	f003 0204 	and.w	r2, r3, #4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004dec:	ea42 0103 	orr.w	r1, r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10f      	bne.n	8004e6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	099b      	lsrs	r3, r3, #6
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
    return;
 8004e6a:	e0d7      	b.n	800501c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_SPI_IRQHandler+0x66>
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	09db      	lsrs	r3, r3, #7
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
    return;
 8004e8c:	e0c6      	b.n	800501c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <HAL_SPI_IRQHandler+0x8c>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	099b      	lsrs	r3, r3, #6
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80b4 	beq.w	800501c <HAL_SPI_IRQHandler+0x1f4>
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80ad 	beq.w	800501c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	099b      	lsrs	r3, r3, #6
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d023      	beq.n	8004f16 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d011      	beq.n	8004efe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ede:	f043 0204 	orr.w	r2, r3, #4
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	e00b      	b.n	8004f16 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	693b      	ldr	r3, [r7, #16]
        return;
 8004f14:	e082      	b.n	800501c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d014      	beq.n	8004f4c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f26:	f043 0201 	orr.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00c      	beq.n	8004f72 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5c:	f043 0208 	orr.w	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f64:	2300      	movs	r3, #0
 8004f66:	60bb      	str	r3, [r7, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d04f      	beq.n	800501a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f88:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d104      	bne.n	8004fa6 <HAL_SPI_IRQHandler+0x17e>
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d034      	beq.n	8005010 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0203 	bic.w	r2, r2, #3
 8004fb4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d011      	beq.n	8004fe2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	4a18      	ldr	r2, [pc, #96]	; (8005024 <HAL_SPI_IRQHandler+0x1fc>)
 8004fc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fe f900 	bl	80031d0 <HAL_DMA_Abort_IT>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d016      	beq.n	8005018 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	4a0d      	ldr	r2, [pc, #52]	; (8005024 <HAL_SPI_IRQHandler+0x1fc>)
 8004ff0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe f8ea 	bl	80031d0 <HAL_DMA_Abort_IT>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800500e:	e003      	b.n	8005018 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f809 	bl	8005028 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005016:	e000      	b.n	800501a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005018:	bf00      	nop
    return;
 800501a:	bf00      	nop
  }
}
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	0800503d 	.word	0x0800503d

08005028 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff ffe5 	bl	8005028 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e049      	b.n	800510c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7fc fd31 	bl	8001af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f000 fdcb 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d001      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e054      	b.n	80051d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a26      	ldr	r2, [pc, #152]	; (80051e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d022      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d01d      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a22      	ldr	r2, [pc, #136]	; (80051e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d018      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a21      	ldr	r2, [pc, #132]	; (80051ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00e      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_TIM_Base_Start_IT+0x80>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <HAL_TIM_Base_Start_IT+0xe8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d115      	bne.n	80051c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	4b19      	ldr	r3, [pc, #100]	; (8005200 <HAL_TIM_Base_Start_IT+0xec>)
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d015      	beq.n	80051d2 <HAL_TIM_Base_Start_IT+0xbe>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d011      	beq.n	80051d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051be:	e008      	b.n	80051d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e000      	b.n	80051d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40010400 	.word	0x40010400
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40001800 	.word	0x40001800
 8005200:	00010007 	.word	0x00010007

08005204 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0201 	bic.w	r2, r2, #1
 800521a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a1a      	ldr	r2, [r3, #32]
 8005222:	f241 1311 	movw	r3, #4369	; 0x1111
 8005226:	4013      	ands	r3, r2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10f      	bne.n	800524c <HAL_TIM_Base_Stop_IT+0x48>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a1a      	ldr	r2, [r3, #32]
 8005232:	f240 4344 	movw	r3, #1092	; 0x444
 8005236:	4013      	ands	r3, r2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d107      	bne.n	800524c <HAL_TIM_Base_Stop_IT+0x48>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e049      	b.n	8005308 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7fc fc75 	bl	8001b78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f000 fccd 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <HAL_TIM_PWM_Start+0x24>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	bf14      	ite	ne
 800532c:	2301      	movne	r3, #1
 800532e:	2300      	moveq	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	e03c      	b.n	80053ae <HAL_TIM_PWM_Start+0x9e>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b04      	cmp	r3, #4
 8005338:	d109      	bne.n	800534e <HAL_TIM_PWM_Start+0x3e>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b01      	cmp	r3, #1
 8005344:	bf14      	ite	ne
 8005346:	2301      	movne	r3, #1
 8005348:	2300      	moveq	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	e02f      	b.n	80053ae <HAL_TIM_PWM_Start+0x9e>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d109      	bne.n	8005368 <HAL_TIM_PWM_Start+0x58>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e022      	b.n	80053ae <HAL_TIM_PWM_Start+0x9e>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b0c      	cmp	r3, #12
 800536c:	d109      	bne.n	8005382 <HAL_TIM_PWM_Start+0x72>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	bf14      	ite	ne
 800537a:	2301      	movne	r3, #1
 800537c:	2300      	moveq	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e015      	b.n	80053ae <HAL_TIM_PWM_Start+0x9e>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b10      	cmp	r3, #16
 8005386:	d109      	bne.n	800539c <HAL_TIM_PWM_Start+0x8c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e008      	b.n	80053ae <HAL_TIM_PWM_Start+0x9e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	bf14      	ite	ne
 80053a8:	2301      	movne	r3, #1
 80053aa:	2300      	moveq	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e092      	b.n	80054dc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Start+0xb6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c4:	e023      	b.n	800540e <HAL_TIM_PWM_Start+0xfe>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Start+0xc6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d4:	e01b      	b.n	800540e <HAL_TIM_PWM_Start+0xfe>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_PWM_Start+0xd6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e4:	e013      	b.n	800540e <HAL_TIM_PWM_Start+0xfe>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b0c      	cmp	r3, #12
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_PWM_Start+0xe6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053f4:	e00b      	b.n	800540e <HAL_TIM_PWM_Start+0xfe>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_PWM_Start+0xf6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005404:	e003      	b.n	800540e <HAL_TIM_PWM_Start+0xfe>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2201      	movs	r2, #1
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 ffaa 	bl	8006370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a30      	ldr	r2, [pc, #192]	; (80054e4 <HAL_TIM_PWM_Start+0x1d4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <HAL_TIM_PWM_Start+0x120>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a2f      	ldr	r2, [pc, #188]	; (80054e8 <HAL_TIM_PWM_Start+0x1d8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d101      	bne.n	8005434 <HAL_TIM_PWM_Start+0x124>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <HAL_TIM_PWM_Start+0x126>
 8005434:	2300      	movs	r3, #0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005448:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a25      	ldr	r2, [pc, #148]	; (80054e4 <HAL_TIM_PWM_Start+0x1d4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_TIM_PWM_Start+0x18a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d01d      	beq.n	800549a <HAL_TIM_PWM_Start+0x18a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a22      	ldr	r2, [pc, #136]	; (80054ec <HAL_TIM_PWM_Start+0x1dc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_TIM_PWM_Start+0x18a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a20      	ldr	r2, [pc, #128]	; (80054f0 <HAL_TIM_PWM_Start+0x1e0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_TIM_PWM_Start+0x18a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <HAL_TIM_PWM_Start+0x1e4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_TIM_PWM_Start+0x18a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <HAL_TIM_PWM_Start+0x1d8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_TIM_PWM_Start+0x18a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1b      	ldr	r2, [pc, #108]	; (80054f8 <HAL_TIM_PWM_Start+0x1e8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_TIM_PWM_Start+0x18a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a19      	ldr	r2, [pc, #100]	; (80054fc <HAL_TIM_PWM_Start+0x1ec>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d115      	bne.n	80054c6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	4b17      	ldr	r3, [pc, #92]	; (8005500 <HAL_TIM_PWM_Start+0x1f0>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b06      	cmp	r3, #6
 80054aa:	d015      	beq.n	80054d8 <HAL_TIM_PWM_Start+0x1c8>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b2:	d011      	beq.n	80054d8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c4:	e008      	b.n	80054d8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e000      	b.n	80054da <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40010400 	.word	0x40010400
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	40000c00 	.word	0x40000c00
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40001800 	.word	0x40001800
 8005500:	00010007 	.word	0x00010007

08005504 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f000 ff2a 	bl	8006370 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a36      	ldr	r2, [pc, #216]	; (80055fc <HAL_TIM_PWM_Stop+0xf8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_TIM_PWM_Stop+0x2c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a35      	ldr	r2, [pc, #212]	; (8005600 <HAL_TIM_PWM_Stop+0xfc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d101      	bne.n	8005534 <HAL_TIM_PWM_Stop+0x30>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_TIM_PWM_Stop+0x32>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d017      	beq.n	800556a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	f241 1311 	movw	r3, #4369	; 0x1111
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10f      	bne.n	800556a <HAL_TIM_PWM_Stop+0x66>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a1a      	ldr	r2, [r3, #32]
 8005550:	f240 4344 	movw	r3, #1092	; 0x444
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <HAL_TIM_PWM_Stop+0x66>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6a1a      	ldr	r2, [r3, #32]
 8005570:	f241 1311 	movw	r3, #4369	; 0x1111
 8005574:	4013      	ands	r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10f      	bne.n	800559a <HAL_TIM_PWM_Stop+0x96>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	f240 4344 	movw	r3, #1092	; 0x444
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d107      	bne.n	800559a <HAL_TIM_PWM_Stop+0x96>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0201 	bic.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d104      	bne.n	80055aa <HAL_TIM_PWM_Stop+0xa6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a8:	e023      	b.n	80055f2 <HAL_TIM_PWM_Stop+0xee>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Stop+0xb6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055b8:	e01b      	b.n	80055f2 <HAL_TIM_PWM_Stop+0xee>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d104      	bne.n	80055ca <HAL_TIM_PWM_Stop+0xc6>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c8:	e013      	b.n	80055f2 <HAL_TIM_PWM_Stop+0xee>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b0c      	cmp	r3, #12
 80055ce:	d104      	bne.n	80055da <HAL_TIM_PWM_Stop+0xd6>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055d8:	e00b      	b.n	80055f2 <HAL_TIM_PWM_Stop+0xee>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d104      	bne.n	80055ea <HAL_TIM_PWM_Stop+0xe6>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055e8:	e003      	b.n	80055f2 <HAL_TIM_PWM_Stop+0xee>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40010000 	.word	0x40010000
 8005600:	40010400 	.word	0x40010400

08005604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b02      	cmp	r3, #2
 8005618:	d122      	bne.n	8005660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b02      	cmp	r3, #2
 8005626:	d11b      	bne.n	8005660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0202 	mvn.w	r2, #2
 8005630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fadc 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 800564c:	e005      	b.n	800565a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 face 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fadf 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b04      	cmp	r3, #4
 800566c:	d122      	bne.n	80056b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b04      	cmp	r3, #4
 800567a:	d11b      	bne.n	80056b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0204 	mvn.w	r2, #4
 8005684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fab2 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 80056a0:	e005      	b.n	80056ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 faa4 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fab5 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d122      	bne.n	8005708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d11b      	bne.n	8005708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0208 	mvn.w	r2, #8
 80056d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2204      	movs	r2, #4
 80056de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fa88 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 80056f4:	e005      	b.n	8005702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fa7a 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fa8b 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b10      	cmp	r3, #16
 8005714:	d122      	bne.n	800575c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b10      	cmp	r3, #16
 8005722:	d11b      	bne.n	800575c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f06f 0210 	mvn.w	r2, #16
 800572c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2208      	movs	r2, #8
 8005732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa5e 	bl	8005c04 <HAL_TIM_IC_CaptureCallback>
 8005748:	e005      	b.n	8005756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fa50 	bl	8005bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fa61 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0201 	mvn.w	r2, #1
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fc fab0 	bl	8001ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b80      	cmp	r3, #128	; 0x80
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fe9c 	bl	80064ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c2:	d10e      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b80      	cmp	r3, #128	; 0x80
 80057d0:	d107      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fe8f 	bl	8006500 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d10e      	bne.n	800580e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b40      	cmp	r3, #64	; 0x40
 80057fc:	d107      	bne.n	800580e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fa0f 	bl	8005c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b20      	cmp	r3, #32
 800581a:	d10e      	bne.n	800583a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b20      	cmp	r3, #32
 8005828:	d107      	bne.n	800583a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f06f 0220 	mvn.w	r2, #32
 8005832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fe4f 	bl	80064d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800585a:	2302      	movs	r3, #2
 800585c:	e0fd      	b.n	8005a5a <HAL_TIM_PWM_ConfigChannel+0x216>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b14      	cmp	r3, #20
 800586a:	f200 80f0 	bhi.w	8005a4e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800586e:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	080058c9 	.word	0x080058c9
 8005878:	08005a4f 	.word	0x08005a4f
 800587c:	08005a4f 	.word	0x08005a4f
 8005880:	08005a4f 	.word	0x08005a4f
 8005884:	08005909 	.word	0x08005909
 8005888:	08005a4f 	.word	0x08005a4f
 800588c:	08005a4f 	.word	0x08005a4f
 8005890:	08005a4f 	.word	0x08005a4f
 8005894:	0800594b 	.word	0x0800594b
 8005898:	08005a4f 	.word	0x08005a4f
 800589c:	08005a4f 	.word	0x08005a4f
 80058a0:	08005a4f 	.word	0x08005a4f
 80058a4:	0800598b 	.word	0x0800598b
 80058a8:	08005a4f 	.word	0x08005a4f
 80058ac:	08005a4f 	.word	0x08005a4f
 80058b0:	08005a4f 	.word	0x08005a4f
 80058b4:	080059cd 	.word	0x080059cd
 80058b8:	08005a4f 	.word	0x08005a4f
 80058bc:	08005a4f 	.word	0x08005a4f
 80058c0:	08005a4f 	.word	0x08005a4f
 80058c4:	08005a0d 	.word	0x08005a0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fa56 	bl	8005d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0208 	orr.w	r2, r2, #8
 80058e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0204 	bic.w	r2, r2, #4
 80058f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6999      	ldr	r1, [r3, #24]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	619a      	str	r2, [r3, #24]
      break;
 8005906:	e0a3      	b.n	8005a50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 faa8 	bl	8005e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6999      	ldr	r1, [r3, #24]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	021a      	lsls	r2, r3, #8
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	619a      	str	r2, [r3, #24]
      break;
 8005948:	e082      	b.n	8005a50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68b9      	ldr	r1, [r7, #8]
 8005950:	4618      	mov	r0, r3
 8005952:	f000 faff 	bl	8005f54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0208 	orr.w	r2, r2, #8
 8005964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69da      	ldr	r2, [r3, #28]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0204 	bic.w	r2, r2, #4
 8005974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69d9      	ldr	r1, [r3, #28]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	61da      	str	r2, [r3, #28]
      break;
 8005988:	e062      	b.n	8005a50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fb55 	bl	8006040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69da      	ldr	r2, [r3, #28]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69d9      	ldr	r1, [r3, #28]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	021a      	lsls	r2, r3, #8
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	61da      	str	r2, [r3, #28]
      break;
 80059ca:	e041      	b.n	8005a50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fb8c 	bl	80060f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0208 	orr.w	r2, r2, #8
 80059e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0204 	bic.w	r2, r2, #4
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a0a:	e021      	b.n	8005a50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fbbe 	bl	8006194 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	021a      	lsls	r2, r3, #8
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a4c:	e000      	b.n	8005a50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005a4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop

08005a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_TIM_ConfigClockSource+0x18>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e0b3      	b.n	8005be4 <HAL_TIM_ConfigClockSource+0x180>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4b55      	ldr	r3, [pc, #340]	; (8005bec <HAL_TIM_ConfigClockSource+0x188>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab4:	d03e      	beq.n	8005b34 <HAL_TIM_ConfigClockSource+0xd0>
 8005ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aba:	f200 8087 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x168>
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	f000 8085 	beq.w	8005bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aca:	d87f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x168>
 8005acc:	2b70      	cmp	r3, #112	; 0x70
 8005ace:	d01a      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0xa2>
 8005ad0:	2b70      	cmp	r3, #112	; 0x70
 8005ad2:	d87b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x168>
 8005ad4:	2b60      	cmp	r3, #96	; 0x60
 8005ad6:	d050      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x116>
 8005ad8:	2b60      	cmp	r3, #96	; 0x60
 8005ada:	d877      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x168>
 8005adc:	2b50      	cmp	r3, #80	; 0x50
 8005ade:	d03c      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xf6>
 8005ae0:	2b50      	cmp	r3, #80	; 0x50
 8005ae2:	d873      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x168>
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d058      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x136>
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	d86f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x168>
 8005aec:	2b30      	cmp	r3, #48	; 0x30
 8005aee:	d064      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x156>
 8005af0:	2b30      	cmp	r3, #48	; 0x30
 8005af2:	d86b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x168>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d060      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x156>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d867      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x168>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d05c      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x156>
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d05a      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b04:	e062      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6899      	ldr	r1, [r3, #8]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f000 fc0b 	bl	8006330 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	609a      	str	r2, [r3, #8]
      break;
 8005b32:	e04e      	b.n	8005bd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f000 fbf4 	bl	8006330 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b56:	609a      	str	r2, [r3, #8]
      break;
 8005b58:	e03b      	b.n	8005bd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	461a      	mov	r2, r3
 8005b68:	f000 fb68 	bl	800623c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2150      	movs	r1, #80	; 0x50
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fbc1 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005b78:	e02b      	b.n	8005bd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 fb87 	bl	800629a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2160      	movs	r1, #96	; 0x60
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fbb1 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005b98:	e01b      	b.n	8005bd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 fb48 	bl	800623c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2140      	movs	r1, #64	; 0x40
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fba1 	bl	80062fa <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e00b      	b.n	8005bd2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f000 fb98 	bl	80062fa <TIM_ITRx_SetConfig>
        break;
 8005bca:	e002      	b.n	8005bd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bcc:	bf00      	nop
 8005bce:	e000      	b.n	8005bd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	fffeff88 	.word	0xfffeff88

08005bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a40      	ldr	r2, [pc, #256]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5e:	d00f      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a3d      	ldr	r2, [pc, #244]	; (8005d58 <TIM_Base_SetConfig+0x118>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3c      	ldr	r2, [pc, #240]	; (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3b      	ldr	r2, [pc, #236]	; (8005d60 <TIM_Base_SetConfig+0x120>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3a      	ldr	r2, [pc, #232]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2f      	ldr	r2, [pc, #188]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d02b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d027      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2c      	ldr	r2, [pc, #176]	; (8005d58 <TIM_Base_SetConfig+0x118>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d023      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01f      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <TIM_Base_SetConfig+0x120>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d017      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a28      	ldr	r2, [pc, #160]	; (8005d68 <TIM_Base_SetConfig+0x128>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a27      	ldr	r2, [pc, #156]	; (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00f      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a26      	ldr	r2, [pc, #152]	; (8005d70 <TIM_Base_SetConfig+0x130>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00b      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a25      	ldr	r2, [pc, #148]	; (8005d74 <TIM_Base_SetConfig+0x134>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d007      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a24      	ldr	r2, [pc, #144]	; (8005d78 <TIM_Base_SetConfig+0x138>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a23      	ldr	r2, [pc, #140]	; (8005d7c <TIM_Base_SetConfig+0x13c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d108      	bne.n	8005d04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a0a      	ldr	r2, [pc, #40]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0c      	ldr	r2, [pc, #48]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d103      	bne.n	8005d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	615a      	str	r2, [r3, #20]
}
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800
 8005d60:	40000c00 	.word	0x40000c00
 8005d64:	40010400 	.word	0x40010400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800
 8005d74:	40001800 	.word	0x40001800
 8005d78:	40001c00 	.word	0x40001c00
 8005d7c:	40002000 	.word	0x40002000

08005d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4b2b      	ldr	r3, [pc, #172]	; (8005e58 <TIM_OC1_SetConfig+0xd8>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0303 	bic.w	r3, r3, #3
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f023 0302 	bic.w	r3, r3, #2
 8005dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a21      	ldr	r2, [pc, #132]	; (8005e5c <TIM_OC1_SetConfig+0xdc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_OC1_SetConfig+0x64>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a20      	ldr	r2, [pc, #128]	; (8005e60 <TIM_OC1_SetConfig+0xe0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d10c      	bne.n	8005dfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0308 	bic.w	r3, r3, #8
 8005dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f023 0304 	bic.w	r3, r3, #4
 8005dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <TIM_OC1_SetConfig+0xdc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d003      	beq.n	8005e0e <TIM_OC1_SetConfig+0x8e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <TIM_OC1_SetConfig+0xe0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d111      	bne.n	8005e32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	621a      	str	r2, [r3, #32]
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	fffeff8f 	.word	0xfffeff8f
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	40010400 	.word	0x40010400

08005e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0210 	bic.w	r2, r3, #16
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <TIM_OC2_SetConfig+0xe4>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0320 	bic.w	r3, r3, #32
 8005eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a23      	ldr	r2, [pc, #140]	; (8005f4c <TIM_OC2_SetConfig+0xe8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC2_SetConfig+0x68>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <TIM_OC2_SetConfig+0xec>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d10d      	bne.n	8005ee8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a18      	ldr	r2, [pc, #96]	; (8005f4c <TIM_OC2_SetConfig+0xe8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC2_SetConfig+0x94>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a17      	ldr	r2, [pc, #92]	; (8005f50 <TIM_OC2_SetConfig+0xec>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d113      	bne.n	8005f20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	feff8fff 	.word	0xfeff8fff
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40010400 	.word	0x40010400

08005f54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4b2d      	ldr	r3, [pc, #180]	; (8006034 <TIM_OC3_SetConfig+0xe0>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a22      	ldr	r2, [pc, #136]	; (8006038 <TIM_OC3_SetConfig+0xe4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC3_SetConfig+0x66>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a21      	ldr	r2, [pc, #132]	; (800603c <TIM_OC3_SetConfig+0xe8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d10d      	bne.n	8005fd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a17      	ldr	r2, [pc, #92]	; (8006038 <TIM_OC3_SetConfig+0xe4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_OC3_SetConfig+0x92>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a16      	ldr	r2, [pc, #88]	; (800603c <TIM_OC3_SetConfig+0xe8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d113      	bne.n	800600e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	621a      	str	r2, [r3, #32]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	fffeff8f 	.word	0xfffeff8f
 8006038:	40010000 	.word	0x40010000
 800603c:	40010400 	.word	0x40010400

08006040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4b1e      	ldr	r3, [pc, #120]	; (80060e4 <TIM_OC4_SetConfig+0xa4>)
 800606c:	4013      	ands	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800608a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <TIM_OC4_SetConfig+0xa8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC4_SetConfig+0x68>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a12      	ldr	r2, [pc, #72]	; (80060ec <TIM_OC4_SetConfig+0xac>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d109      	bne.n	80060bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	019b      	lsls	r3, r3, #6
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	feff8fff 	.word	0xfeff8fff
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40010400 	.word	0x40010400

080060f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <TIM_OC5_SetConfig+0x98>)
 800611c:	4013      	ands	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a12      	ldr	r2, [pc, #72]	; (800618c <TIM_OC5_SetConfig+0x9c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_OC5_SetConfig+0x5e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a11      	ldr	r2, [pc, #68]	; (8006190 <TIM_OC5_SetConfig+0xa0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d109      	bne.n	8006162 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006154:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	621a      	str	r2, [r3, #32]
}
 800617c:	bf00      	nop
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	fffeff8f 	.word	0xfffeff8f
 800618c:	40010000 	.word	0x40010000
 8006190:	40010400 	.word	0x40010400

08006194 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4b1c      	ldr	r3, [pc, #112]	; (8006230 <TIM_OC6_SetConfig+0x9c>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	051b      	lsls	r3, r3, #20
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a13      	ldr	r2, [pc, #76]	; (8006234 <TIM_OC6_SetConfig+0xa0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC6_SetConfig+0x60>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a12      	ldr	r2, [pc, #72]	; (8006238 <TIM_OC6_SetConfig+0xa4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d109      	bne.n	8006208 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	029b      	lsls	r3, r3, #10
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	feff8fff 	.word	0xfeff8fff
 8006234:	40010000 	.word	0x40010000
 8006238:	40010400 	.word	0x40010400

0800623c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 030a 	bic.w	r3, r3, #10
 8006278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0210 	bic.w	r2, r3, #16
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	031b      	lsls	r3, r3, #12
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b085      	sub	sp, #20
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	f043 0307 	orr.w	r3, r3, #7
 800631c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	609a      	str	r2, [r3, #8]
}
 8006324:	bf00      	nop
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800634a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	021a      	lsls	r2, r3, #8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	431a      	orrs	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4313      	orrs	r3, r2
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	609a      	str	r2, [r3, #8]
}
 8006364:	bf00      	nop
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2201      	movs	r2, #1
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a1a      	ldr	r2, [r3, #32]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	43db      	mvns	r3, r3
 8006392:	401a      	ands	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	fa01 f303 	lsl.w	r3, r1, r3
 80063a8:	431a      	orrs	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e06d      	b.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a30      	ldr	r2, [pc, #192]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d004      	beq.n	8006408 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a2f      	ldr	r2, [pc, #188]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d108      	bne.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800640e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006420:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a20      	ldr	r2, [pc, #128]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d022      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006446:	d01d      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d018      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1c      	ldr	r2, [pc, #112]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d013      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00e      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a16      	ldr	r2, [pc, #88]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d004      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d10c      	bne.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800648a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	4313      	orrs	r3, r2
 8006494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40010400 	.word	0x40010400
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40000800 	.word	0x40000800
 80064cc:	40000c00 	.word	0x40000c00
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40001800 	.word	0x40001800

080064d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e040      	b.n	80065a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fb fca6 	bl	8001e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2224      	movs	r2, #36	; 0x24
 8006540:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0201 	bic.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fa56 	bl	8006a04 <UART_SetConfig>
 8006558:	4603      	mov	r3, r0
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e022      	b.n	80065a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fcac 	bl	8006ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800657e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800658e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fd33 	bl	800700c <UART_CheckIdleState>
 80065a6:	4603      	mov	r3, r0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80065d6:	4013      	ands	r3, r2
 80065d8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d113      	bne.n	8006608 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 81cc 	beq.w	8006996 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
      }
      return;
 8006606:	e1c6      	b.n	8006996 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 80e3 	beq.w	80067d6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d105      	bne.n	8006626 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	4ba5      	ldr	r3, [pc, #660]	; (80068b4 <HAL_UART_IRQHandler+0x304>)
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80d8 	beq.w	80067d6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d010      	beq.n	8006652 <HAL_UART_IRQHandler+0xa2>
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2201      	movs	r2, #1
 8006640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006648:	f043 0201 	orr.w	r2, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d010      	beq.n	800667e <HAL_UART_IRQHandler+0xce>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2202      	movs	r2, #2
 800666c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006674:	f043 0204 	orr.w	r2, r3, #4
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	d010      	beq.n	80066aa <HAL_UART_IRQHandler+0xfa>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00b      	beq.n	80066aa <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2204      	movs	r2, #4
 8006698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a0:	f043 0202 	orr.w	r2, r3, #2
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d015      	beq.n	80066e0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2208      	movs	r2, #8
 80066ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d6:	f043 0208 	orr.w	r2, r3, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d011      	beq.n	800670e <HAL_UART_IRQHandler+0x15e>
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00c      	beq.n	800670e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006704:	f043 0220 	orr.w	r2, r3, #32
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8140 	beq.w	800699a <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00c      	beq.n	800673e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006744:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d004      	beq.n	800675e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800675a:	2b00      	cmp	r3, #0
 800675c:	d031      	beq.n	80067c2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fd19 	bl	8007196 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d123      	bne.n	80067ba <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006780:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006786:	2b00      	cmp	r3, #0
 8006788:	d013      	beq.n	80067b2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678e:	4a4a      	ldr	r2, [pc, #296]	; (80068b8 <HAL_UART_IRQHandler+0x308>)
 8006790:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006796:	4618      	mov	r0, r3
 8006798:	f7fc fd1a 	bl	80031d0 <HAL_DMA_Abort_IT>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d017      	beq.n	80067d2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80067ac:	4610      	mov	r0, r2
 80067ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b0:	e00f      	b.n	80067d2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f906 	bl	80069c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b8:	e00b      	b.n	80067d2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f902 	bl	80069c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c0:	e007      	b.n	80067d2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f8fe 	bl	80069c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80067d0:	e0e3      	b.n	800699a <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d2:	bf00      	nop
    return;
 80067d4:	e0e1      	b.n	800699a <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067da:	2b01      	cmp	r3, #1
 80067dc:	f040 80a7 	bne.w	800692e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 80a1 	beq.w	800692e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 809b 	beq.w	800692e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2210      	movs	r2, #16
 80067fe:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d156      	bne.n	80068bc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006818:	893b      	ldrh	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80bf 	beq.w	800699e <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006826:	893a      	ldrh	r2, [r7, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	f080 80b8 	bcs.w	800699e <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	893a      	ldrh	r2, [r7, #8]
 8006832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006840:	d02a      	beq.n	8006898 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006850:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0201 	bic.w	r2, r2, #1
 8006860:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006870:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0210 	bic.w	r2, r2, #16
 800688c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	4618      	mov	r0, r3
 8006894:	f7fc fc2c 	bl	80030f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f893 	bl	80069d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068b2:	e074      	b.n	800699e <HAL_UART_IRQHandler+0x3ee>
 80068b4:	04000120 	.word	0x04000120
 80068b8:	080071f5 	.word	0x080071f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d063      	beq.n	80069a2 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 80068da:	897b      	ldrh	r3, [r7, #10]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d060      	beq.n	80069a2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068ee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0201 	bic.w	r2, r2, #1
 80068fe:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0210 	bic.w	r2, r2, #16
 8006920:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006922:	897b      	ldrh	r3, [r7, #10]
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f856 	bl	80069d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800692c:	e039      	b.n	80069a2 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00d      	beq.n	8006954 <HAL_UART_IRQHandler+0x3a4>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800694a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f84f 	bl	80069f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006952:	e029      	b.n	80069a8 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00d      	beq.n	800697a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01a      	beq.n	80069a6 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
    }
    return;
 8006978:	e015      	b.n	80069a6 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006980:	2b00      	cmp	r3, #0
 8006982:	d011      	beq.n	80069a8 <HAL_UART_IRQHandler+0x3f8>
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fc46 	bl	8007220 <UART_EndTransmit_IT>
    return;
 8006994:	e008      	b.n	80069a8 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006996:	bf00      	nop
 8006998:	e006      	b.n	80069a8 <HAL_UART_IRQHandler+0x3f8>
    return;
 800699a:	bf00      	nop
 800699c:	e004      	b.n	80069a8 <HAL_UART_IRQHandler+0x3f8>
      return;
 800699e:	bf00      	nop
 80069a0:	e002      	b.n	80069a8 <HAL_UART_IRQHandler+0x3f8>
      return;
 80069a2:	bf00      	nop
 80069a4:	e000      	b.n	80069a8 <HAL_UART_IRQHandler+0x3f8>
    return;
 80069a6:	bf00      	nop
  }

}
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop

080069b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4ba7      	ldr	r3, [pc, #668]	; (8006ccc <UART_SetConfig+0x2c8>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	6979      	ldr	r1, [r7, #20]
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a95      	ldr	r2, [pc, #596]	; (8006cd0 <UART_SetConfig+0x2cc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d120      	bne.n	8006ac2 <UART_SetConfig+0xbe>
 8006a80:	4b94      	ldr	r3, [pc, #592]	; (8006cd4 <UART_SetConfig+0x2d0>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d816      	bhi.n	8006abc <UART_SetConfig+0xb8>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <UART_SetConfig+0x90>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006aa5 	.word	0x08006aa5
 8006a98:	08006ab1 	.word	0x08006ab1
 8006a9c:	08006aab 	.word	0x08006aab
 8006aa0:	08006ab7 	.word	0x08006ab7
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e14f      	b.n	8006d4a <UART_SetConfig+0x346>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	77fb      	strb	r3, [r7, #31]
 8006aae:	e14c      	b.n	8006d4a <UART_SetConfig+0x346>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e149      	b.n	8006d4a <UART_SetConfig+0x346>
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e146      	b.n	8006d4a <UART_SetConfig+0x346>
 8006abc:	2310      	movs	r3, #16
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	e143      	b.n	8006d4a <UART_SetConfig+0x346>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a84      	ldr	r2, [pc, #528]	; (8006cd8 <UART_SetConfig+0x2d4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d132      	bne.n	8006b32 <UART_SetConfig+0x12e>
 8006acc:	4b81      	ldr	r3, [pc, #516]	; (8006cd4 <UART_SetConfig+0x2d0>)
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad2:	f003 030c 	and.w	r3, r3, #12
 8006ad6:	2b0c      	cmp	r3, #12
 8006ad8:	d828      	bhi.n	8006b2c <UART_SetConfig+0x128>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <UART_SetConfig+0xdc>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006b15 	.word	0x08006b15
 8006ae4:	08006b2d 	.word	0x08006b2d
 8006ae8:	08006b2d 	.word	0x08006b2d
 8006aec:	08006b2d 	.word	0x08006b2d
 8006af0:	08006b21 	.word	0x08006b21
 8006af4:	08006b2d 	.word	0x08006b2d
 8006af8:	08006b2d 	.word	0x08006b2d
 8006afc:	08006b2d 	.word	0x08006b2d
 8006b00:	08006b1b 	.word	0x08006b1b
 8006b04:	08006b2d 	.word	0x08006b2d
 8006b08:	08006b2d 	.word	0x08006b2d
 8006b0c:	08006b2d 	.word	0x08006b2d
 8006b10:	08006b27 	.word	0x08006b27
 8006b14:	2300      	movs	r3, #0
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e117      	b.n	8006d4a <UART_SetConfig+0x346>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e114      	b.n	8006d4a <UART_SetConfig+0x346>
 8006b20:	2304      	movs	r3, #4
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	e111      	b.n	8006d4a <UART_SetConfig+0x346>
 8006b26:	2308      	movs	r3, #8
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e10e      	b.n	8006d4a <UART_SetConfig+0x346>
 8006b2c:	2310      	movs	r3, #16
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e10b      	b.n	8006d4a <UART_SetConfig+0x346>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a69      	ldr	r2, [pc, #420]	; (8006cdc <UART_SetConfig+0x2d8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d120      	bne.n	8006b7e <UART_SetConfig+0x17a>
 8006b3c:	4b65      	ldr	r3, [pc, #404]	; (8006cd4 <UART_SetConfig+0x2d0>)
 8006b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b46:	2b30      	cmp	r3, #48	; 0x30
 8006b48:	d013      	beq.n	8006b72 <UART_SetConfig+0x16e>
 8006b4a:	2b30      	cmp	r3, #48	; 0x30
 8006b4c:	d814      	bhi.n	8006b78 <UART_SetConfig+0x174>
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	d009      	beq.n	8006b66 <UART_SetConfig+0x162>
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d810      	bhi.n	8006b78 <UART_SetConfig+0x174>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <UART_SetConfig+0x15c>
 8006b5a:	2b10      	cmp	r3, #16
 8006b5c:	d006      	beq.n	8006b6c <UART_SetConfig+0x168>
 8006b5e:	e00b      	b.n	8006b78 <UART_SetConfig+0x174>
 8006b60:	2300      	movs	r3, #0
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e0f1      	b.n	8006d4a <UART_SetConfig+0x346>
 8006b66:	2302      	movs	r3, #2
 8006b68:	77fb      	strb	r3, [r7, #31]
 8006b6a:	e0ee      	b.n	8006d4a <UART_SetConfig+0x346>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	77fb      	strb	r3, [r7, #31]
 8006b70:	e0eb      	b.n	8006d4a <UART_SetConfig+0x346>
 8006b72:	2308      	movs	r3, #8
 8006b74:	77fb      	strb	r3, [r7, #31]
 8006b76:	e0e8      	b.n	8006d4a <UART_SetConfig+0x346>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	77fb      	strb	r3, [r7, #31]
 8006b7c:	e0e5      	b.n	8006d4a <UART_SetConfig+0x346>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a57      	ldr	r2, [pc, #348]	; (8006ce0 <UART_SetConfig+0x2dc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d120      	bne.n	8006bca <UART_SetConfig+0x1c6>
 8006b88:	4b52      	ldr	r3, [pc, #328]	; (8006cd4 <UART_SetConfig+0x2d0>)
 8006b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b92:	2bc0      	cmp	r3, #192	; 0xc0
 8006b94:	d013      	beq.n	8006bbe <UART_SetConfig+0x1ba>
 8006b96:	2bc0      	cmp	r3, #192	; 0xc0
 8006b98:	d814      	bhi.n	8006bc4 <UART_SetConfig+0x1c0>
 8006b9a:	2b80      	cmp	r3, #128	; 0x80
 8006b9c:	d009      	beq.n	8006bb2 <UART_SetConfig+0x1ae>
 8006b9e:	2b80      	cmp	r3, #128	; 0x80
 8006ba0:	d810      	bhi.n	8006bc4 <UART_SetConfig+0x1c0>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <UART_SetConfig+0x1a8>
 8006ba6:	2b40      	cmp	r3, #64	; 0x40
 8006ba8:	d006      	beq.n	8006bb8 <UART_SetConfig+0x1b4>
 8006baa:	e00b      	b.n	8006bc4 <UART_SetConfig+0x1c0>
 8006bac:	2300      	movs	r3, #0
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e0cb      	b.n	8006d4a <UART_SetConfig+0x346>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	77fb      	strb	r3, [r7, #31]
 8006bb6:	e0c8      	b.n	8006d4a <UART_SetConfig+0x346>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e0c5      	b.n	8006d4a <UART_SetConfig+0x346>
 8006bbe:	2308      	movs	r3, #8
 8006bc0:	77fb      	strb	r3, [r7, #31]
 8006bc2:	e0c2      	b.n	8006d4a <UART_SetConfig+0x346>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	77fb      	strb	r3, [r7, #31]
 8006bc8:	e0bf      	b.n	8006d4a <UART_SetConfig+0x346>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a45      	ldr	r2, [pc, #276]	; (8006ce4 <UART_SetConfig+0x2e0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d125      	bne.n	8006c20 <UART_SetConfig+0x21c>
 8006bd4:	4b3f      	ldr	r3, [pc, #252]	; (8006cd4 <UART_SetConfig+0x2d0>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be2:	d017      	beq.n	8006c14 <UART_SetConfig+0x210>
 8006be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be8:	d817      	bhi.n	8006c1a <UART_SetConfig+0x216>
 8006bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bee:	d00b      	beq.n	8006c08 <UART_SetConfig+0x204>
 8006bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf4:	d811      	bhi.n	8006c1a <UART_SetConfig+0x216>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <UART_SetConfig+0x1fe>
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfe:	d006      	beq.n	8006c0e <UART_SetConfig+0x20a>
 8006c00:	e00b      	b.n	8006c1a <UART_SetConfig+0x216>
 8006c02:	2300      	movs	r3, #0
 8006c04:	77fb      	strb	r3, [r7, #31]
 8006c06:	e0a0      	b.n	8006d4a <UART_SetConfig+0x346>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	77fb      	strb	r3, [r7, #31]
 8006c0c:	e09d      	b.n	8006d4a <UART_SetConfig+0x346>
 8006c0e:	2304      	movs	r3, #4
 8006c10:	77fb      	strb	r3, [r7, #31]
 8006c12:	e09a      	b.n	8006d4a <UART_SetConfig+0x346>
 8006c14:	2308      	movs	r3, #8
 8006c16:	77fb      	strb	r3, [r7, #31]
 8006c18:	e097      	b.n	8006d4a <UART_SetConfig+0x346>
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	77fb      	strb	r3, [r7, #31]
 8006c1e:	e094      	b.n	8006d4a <UART_SetConfig+0x346>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a30      	ldr	r2, [pc, #192]	; (8006ce8 <UART_SetConfig+0x2e4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d125      	bne.n	8006c76 <UART_SetConfig+0x272>
 8006c2a:	4b2a      	ldr	r3, [pc, #168]	; (8006cd4 <UART_SetConfig+0x2d0>)
 8006c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c38:	d017      	beq.n	8006c6a <UART_SetConfig+0x266>
 8006c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3e:	d817      	bhi.n	8006c70 <UART_SetConfig+0x26c>
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c44:	d00b      	beq.n	8006c5e <UART_SetConfig+0x25a>
 8006c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4a:	d811      	bhi.n	8006c70 <UART_SetConfig+0x26c>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <UART_SetConfig+0x254>
 8006c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c54:	d006      	beq.n	8006c64 <UART_SetConfig+0x260>
 8006c56:	e00b      	b.n	8006c70 <UART_SetConfig+0x26c>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e075      	b.n	8006d4a <UART_SetConfig+0x346>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	77fb      	strb	r3, [r7, #31]
 8006c62:	e072      	b.n	8006d4a <UART_SetConfig+0x346>
 8006c64:	2304      	movs	r3, #4
 8006c66:	77fb      	strb	r3, [r7, #31]
 8006c68:	e06f      	b.n	8006d4a <UART_SetConfig+0x346>
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	77fb      	strb	r3, [r7, #31]
 8006c6e:	e06c      	b.n	8006d4a <UART_SetConfig+0x346>
 8006c70:	2310      	movs	r3, #16
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	e069      	b.n	8006d4a <UART_SetConfig+0x346>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a1c      	ldr	r2, [pc, #112]	; (8006cec <UART_SetConfig+0x2e8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d137      	bne.n	8006cf0 <UART_SetConfig+0x2ec>
 8006c80:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <UART_SetConfig+0x2d0>)
 8006c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c8e:	d017      	beq.n	8006cc0 <UART_SetConfig+0x2bc>
 8006c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c94:	d817      	bhi.n	8006cc6 <UART_SetConfig+0x2c2>
 8006c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c9a:	d00b      	beq.n	8006cb4 <UART_SetConfig+0x2b0>
 8006c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca0:	d811      	bhi.n	8006cc6 <UART_SetConfig+0x2c2>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <UART_SetConfig+0x2aa>
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006caa:	d006      	beq.n	8006cba <UART_SetConfig+0x2b6>
 8006cac:	e00b      	b.n	8006cc6 <UART_SetConfig+0x2c2>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	77fb      	strb	r3, [r7, #31]
 8006cb2:	e04a      	b.n	8006d4a <UART_SetConfig+0x346>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	e047      	b.n	8006d4a <UART_SetConfig+0x346>
 8006cba:	2304      	movs	r3, #4
 8006cbc:	77fb      	strb	r3, [r7, #31]
 8006cbe:	e044      	b.n	8006d4a <UART_SetConfig+0x346>
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e041      	b.n	8006d4a <UART_SetConfig+0x346>
 8006cc6:	2310      	movs	r3, #16
 8006cc8:	77fb      	strb	r3, [r7, #31]
 8006cca:	e03e      	b.n	8006d4a <UART_SetConfig+0x346>
 8006ccc:	efff69f3 	.word	0xefff69f3
 8006cd0:	40011000 	.word	0x40011000
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	40004400 	.word	0x40004400
 8006cdc:	40004800 	.word	0x40004800
 8006ce0:	40004c00 	.word	0x40004c00
 8006ce4:	40005000 	.word	0x40005000
 8006ce8:	40011400 	.word	0x40011400
 8006cec:	40007800 	.word	0x40007800
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a71      	ldr	r2, [pc, #452]	; (8006ebc <UART_SetConfig+0x4b8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d125      	bne.n	8006d46 <UART_SetConfig+0x342>
 8006cfa:	4b71      	ldr	r3, [pc, #452]	; (8006ec0 <UART_SetConfig+0x4bc>)
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d08:	d017      	beq.n	8006d3a <UART_SetConfig+0x336>
 8006d0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d0e:	d817      	bhi.n	8006d40 <UART_SetConfig+0x33c>
 8006d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d14:	d00b      	beq.n	8006d2e <UART_SetConfig+0x32a>
 8006d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1a:	d811      	bhi.n	8006d40 <UART_SetConfig+0x33c>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <UART_SetConfig+0x324>
 8006d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d24:	d006      	beq.n	8006d34 <UART_SetConfig+0x330>
 8006d26:	e00b      	b.n	8006d40 <UART_SetConfig+0x33c>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	77fb      	strb	r3, [r7, #31]
 8006d2c:	e00d      	b.n	8006d4a <UART_SetConfig+0x346>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	77fb      	strb	r3, [r7, #31]
 8006d32:	e00a      	b.n	8006d4a <UART_SetConfig+0x346>
 8006d34:	2304      	movs	r3, #4
 8006d36:	77fb      	strb	r3, [r7, #31]
 8006d38:	e007      	b.n	8006d4a <UART_SetConfig+0x346>
 8006d3a:	2308      	movs	r3, #8
 8006d3c:	77fb      	strb	r3, [r7, #31]
 8006d3e:	e004      	b.n	8006d4a <UART_SetConfig+0x346>
 8006d40:	2310      	movs	r3, #16
 8006d42:	77fb      	strb	r3, [r7, #31]
 8006d44:	e001      	b.n	8006d4a <UART_SetConfig+0x346>
 8006d46:	2310      	movs	r3, #16
 8006d48:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d52:	d15b      	bne.n	8006e0c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006d54:	7ffb      	ldrb	r3, [r7, #31]
 8006d56:	2b08      	cmp	r3, #8
 8006d58:	d827      	bhi.n	8006daa <UART_SetConfig+0x3a6>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <UART_SetConfig+0x35c>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006d85 	.word	0x08006d85
 8006d64:	08006d8d 	.word	0x08006d8d
 8006d68:	08006d95 	.word	0x08006d95
 8006d6c:	08006dab 	.word	0x08006dab
 8006d70:	08006d9b 	.word	0x08006d9b
 8006d74:	08006dab 	.word	0x08006dab
 8006d78:	08006dab 	.word	0x08006dab
 8006d7c:	08006dab 	.word	0x08006dab
 8006d80:	08006da3 	.word	0x08006da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d84:	f7fd fb54 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 8006d88:	61b8      	str	r0, [r7, #24]
        break;
 8006d8a:	e013      	b.n	8006db4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d8c:	f7fd fb64 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8006d90:	61b8      	str	r0, [r7, #24]
        break;
 8006d92:	e00f      	b.n	8006db4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d94:	4b4b      	ldr	r3, [pc, #300]	; (8006ec4 <UART_SetConfig+0x4c0>)
 8006d96:	61bb      	str	r3, [r7, #24]
        break;
 8006d98:	e00c      	b.n	8006db4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d9a:	f7fd fa87 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8006d9e:	61b8      	str	r0, [r7, #24]
        break;
 8006da0:	e008      	b.n	8006db4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006da6:	61bb      	str	r3, [r7, #24]
        break;
 8006da8:	e004      	b.n	8006db4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	77bb      	strb	r3, [r7, #30]
        break;
 8006db2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d074      	beq.n	8006ea4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	005a      	lsls	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	441a      	add	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b0f      	cmp	r3, #15
 8006dd6:	d916      	bls.n	8006e06 <UART_SetConfig+0x402>
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dde:	d212      	bcs.n	8006e06 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f023 030f 	bic.w	r3, r3, #15
 8006de8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	89fb      	ldrh	r3, [r7, #14]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	89fa      	ldrh	r2, [r7, #14]
 8006e02:	60da      	str	r2, [r3, #12]
 8006e04:	e04e      	b.n	8006ea4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	77bb      	strb	r3, [r7, #30]
 8006e0a:	e04b      	b.n	8006ea4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e0c:	7ffb      	ldrb	r3, [r7, #31]
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d827      	bhi.n	8006e62 <UART_SetConfig+0x45e>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <UART_SetConfig+0x414>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e3d 	.word	0x08006e3d
 8006e1c:	08006e45 	.word	0x08006e45
 8006e20:	08006e4d 	.word	0x08006e4d
 8006e24:	08006e63 	.word	0x08006e63
 8006e28:	08006e53 	.word	0x08006e53
 8006e2c:	08006e63 	.word	0x08006e63
 8006e30:	08006e63 	.word	0x08006e63
 8006e34:	08006e63 	.word	0x08006e63
 8006e38:	08006e5b 	.word	0x08006e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e3c:	f7fd faf8 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 8006e40:	61b8      	str	r0, [r7, #24]
        break;
 8006e42:	e013      	b.n	8006e6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e44:	f7fd fb08 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8006e48:	61b8      	str	r0, [r7, #24]
        break;
 8006e4a:	e00f      	b.n	8006e6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e4c:	4b1d      	ldr	r3, [pc, #116]	; (8006ec4 <UART_SetConfig+0x4c0>)
 8006e4e:	61bb      	str	r3, [r7, #24]
        break;
 8006e50:	e00c      	b.n	8006e6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e52:	f7fd fa2b 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8006e56:	61b8      	str	r0, [r7, #24]
        break;
 8006e58:	e008      	b.n	8006e6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e5e:	61bb      	str	r3, [r7, #24]
        break;
 8006e60:	e004      	b.n	8006e6c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	77bb      	strb	r3, [r7, #30]
        break;
 8006e6a:	bf00      	nop
    }

    if (pclk != 0U)
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d018      	beq.n	8006ea4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	085a      	lsrs	r2, r3, #1
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	441a      	add	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b0f      	cmp	r3, #15
 8006e8c:	d908      	bls.n	8006ea0 <UART_SetConfig+0x49c>
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e94:	d204      	bcs.n	8006ea0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	e001      	b.n	8006ea4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006eb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40007c00 	.word	0x40007c00
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	00f42400 	.word	0x00f42400

08006ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	f003 0308 	and.w	r3, r3, #8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01a      	beq.n	8006fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc6:	d10a      	bne.n	8006fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	605a      	str	r2, [r3, #4]
  }
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af02      	add	r7, sp, #8
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800701c:	f7fb f846 	bl	80020ac <HAL_GetTick>
 8007020:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b08      	cmp	r3, #8
 800702e:	d10e      	bne.n	800704e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f82d 	bl	800709e <UART_WaitOnFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e023      	b.n	8007096 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b04      	cmp	r3, #4
 800705a:	d10e      	bne.n	800707a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800705c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f817 	bl	800709e <UART_WaitOnFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e00d      	b.n	8007096 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	603b      	str	r3, [r7, #0]
 80070aa:	4613      	mov	r3, r2
 80070ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ae:	e05e      	b.n	800716e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d05a      	beq.n	800716e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b8:	f7fa fff8 	bl	80020ac <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d302      	bcc.n	80070ce <UART_WaitOnFlagUntilTimeout+0x30>
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d11b      	bne.n	8007106 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0201 	bic.w	r2, r2, #1
 80070ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2220      	movs	r2, #32
 80070f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e043      	b.n	800718e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d02c      	beq.n	800716e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800711e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007122:	d124      	bne.n	800716e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800712c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800713c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0201 	bic.w	r2, r2, #1
 800714c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2220      	movs	r2, #32
 8007152:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2220      	movs	r2, #32
 800715e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e00f      	b.n	800718e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69da      	ldr	r2, [r3, #28]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	4013      	ands	r3, r2
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	429a      	cmp	r2, r3
 800717c:	bf0c      	ite	eq
 800717e:	2301      	moveq	r3, #1
 8007180:	2300      	movne	r3, #0
 8007182:	b2db      	uxtb	r3, r3
 8007184:	461a      	mov	r2, r3
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	429a      	cmp	r2, r3
 800718a:	d091      	beq.n	80070b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80071ac:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0201 	bic.w	r2, r2, #1
 80071bc:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d107      	bne.n	80071d6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0210 	bic.w	r2, r2, #16
 80071d4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7ff fbd6 	bl	80069c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007236:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff fbb3 	bl	80069b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <__errno>:
 8007254:	4b01      	ldr	r3, [pc, #4]	; (800725c <__errno+0x8>)
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20000068 	.word	0x20000068

08007260 <__libc_init_array>:
 8007260:	b570      	push	{r4, r5, r6, lr}
 8007262:	4d0d      	ldr	r5, [pc, #52]	; (8007298 <__libc_init_array+0x38>)
 8007264:	4c0d      	ldr	r4, [pc, #52]	; (800729c <__libc_init_array+0x3c>)
 8007266:	1b64      	subs	r4, r4, r5
 8007268:	10a4      	asrs	r4, r4, #2
 800726a:	2600      	movs	r6, #0
 800726c:	42a6      	cmp	r6, r4
 800726e:	d109      	bne.n	8007284 <__libc_init_array+0x24>
 8007270:	4d0b      	ldr	r5, [pc, #44]	; (80072a0 <__libc_init_array+0x40>)
 8007272:	4c0c      	ldr	r4, [pc, #48]	; (80072a4 <__libc_init_array+0x44>)
 8007274:	f002 fc62 	bl	8009b3c <_init>
 8007278:	1b64      	subs	r4, r4, r5
 800727a:	10a4      	asrs	r4, r4, #2
 800727c:	2600      	movs	r6, #0
 800727e:	42a6      	cmp	r6, r4
 8007280:	d105      	bne.n	800728e <__libc_init_array+0x2e>
 8007282:	bd70      	pop	{r4, r5, r6, pc}
 8007284:	f855 3b04 	ldr.w	r3, [r5], #4
 8007288:	4798      	blx	r3
 800728a:	3601      	adds	r6, #1
 800728c:	e7ee      	b.n	800726c <__libc_init_array+0xc>
 800728e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007292:	4798      	blx	r3
 8007294:	3601      	adds	r6, #1
 8007296:	e7f2      	b.n	800727e <__libc_init_array+0x1e>
 8007298:	08009f6c 	.word	0x08009f6c
 800729c:	08009f6c 	.word	0x08009f6c
 80072a0:	08009f6c 	.word	0x08009f6c
 80072a4:	08009f70 	.word	0x08009f70

080072a8 <malloc>:
 80072a8:	4b02      	ldr	r3, [pc, #8]	; (80072b4 <malloc+0xc>)
 80072aa:	4601      	mov	r1, r0
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	f000 b85b 	b.w	8007368 <_malloc_r>
 80072b2:	bf00      	nop
 80072b4:	20000068 	.word	0x20000068

080072b8 <memset>:
 80072b8:	4402      	add	r2, r0
 80072ba:	4603      	mov	r3, r0
 80072bc:	4293      	cmp	r3, r2
 80072be:	d100      	bne.n	80072c2 <memset+0xa>
 80072c0:	4770      	bx	lr
 80072c2:	f803 1b01 	strb.w	r1, [r3], #1
 80072c6:	e7f9      	b.n	80072bc <memset+0x4>

080072c8 <_free_r>:
 80072c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ca:	2900      	cmp	r1, #0
 80072cc:	d048      	beq.n	8007360 <_free_r+0x98>
 80072ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d2:	9001      	str	r0, [sp, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f1a1 0404 	sub.w	r4, r1, #4
 80072da:	bfb8      	it	lt
 80072dc:	18e4      	addlt	r4, r4, r3
 80072de:	f001 fb13 	bl	8008908 <__malloc_lock>
 80072e2:	4a20      	ldr	r2, [pc, #128]	; (8007364 <_free_r+0x9c>)
 80072e4:	9801      	ldr	r0, [sp, #4]
 80072e6:	6813      	ldr	r3, [r2, #0]
 80072e8:	4615      	mov	r5, r2
 80072ea:	b933      	cbnz	r3, 80072fa <_free_r+0x32>
 80072ec:	6063      	str	r3, [r4, #4]
 80072ee:	6014      	str	r4, [r2, #0]
 80072f0:	b003      	add	sp, #12
 80072f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072f6:	f001 bb0d 	b.w	8008914 <__malloc_unlock>
 80072fa:	42a3      	cmp	r3, r4
 80072fc:	d90b      	bls.n	8007316 <_free_r+0x4e>
 80072fe:	6821      	ldr	r1, [r4, #0]
 8007300:	1862      	adds	r2, r4, r1
 8007302:	4293      	cmp	r3, r2
 8007304:	bf04      	itt	eq
 8007306:	681a      	ldreq	r2, [r3, #0]
 8007308:	685b      	ldreq	r3, [r3, #4]
 800730a:	6063      	str	r3, [r4, #4]
 800730c:	bf04      	itt	eq
 800730e:	1852      	addeq	r2, r2, r1
 8007310:	6022      	streq	r2, [r4, #0]
 8007312:	602c      	str	r4, [r5, #0]
 8007314:	e7ec      	b.n	80072f0 <_free_r+0x28>
 8007316:	461a      	mov	r2, r3
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b10b      	cbz	r3, 8007320 <_free_r+0x58>
 800731c:	42a3      	cmp	r3, r4
 800731e:	d9fa      	bls.n	8007316 <_free_r+0x4e>
 8007320:	6811      	ldr	r1, [r2, #0]
 8007322:	1855      	adds	r5, r2, r1
 8007324:	42a5      	cmp	r5, r4
 8007326:	d10b      	bne.n	8007340 <_free_r+0x78>
 8007328:	6824      	ldr	r4, [r4, #0]
 800732a:	4421      	add	r1, r4
 800732c:	1854      	adds	r4, r2, r1
 800732e:	42a3      	cmp	r3, r4
 8007330:	6011      	str	r1, [r2, #0]
 8007332:	d1dd      	bne.n	80072f0 <_free_r+0x28>
 8007334:	681c      	ldr	r4, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	6053      	str	r3, [r2, #4]
 800733a:	4421      	add	r1, r4
 800733c:	6011      	str	r1, [r2, #0]
 800733e:	e7d7      	b.n	80072f0 <_free_r+0x28>
 8007340:	d902      	bls.n	8007348 <_free_r+0x80>
 8007342:	230c      	movs	r3, #12
 8007344:	6003      	str	r3, [r0, #0]
 8007346:	e7d3      	b.n	80072f0 <_free_r+0x28>
 8007348:	6825      	ldr	r5, [r4, #0]
 800734a:	1961      	adds	r1, r4, r5
 800734c:	428b      	cmp	r3, r1
 800734e:	bf04      	itt	eq
 8007350:	6819      	ldreq	r1, [r3, #0]
 8007352:	685b      	ldreq	r3, [r3, #4]
 8007354:	6063      	str	r3, [r4, #4]
 8007356:	bf04      	itt	eq
 8007358:	1949      	addeq	r1, r1, r5
 800735a:	6021      	streq	r1, [r4, #0]
 800735c:	6054      	str	r4, [r2, #4]
 800735e:	e7c7      	b.n	80072f0 <_free_r+0x28>
 8007360:	b003      	add	sp, #12
 8007362:	bd30      	pop	{r4, r5, pc}
 8007364:	20000288 	.word	0x20000288

08007368 <_malloc_r>:
 8007368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736a:	1ccd      	adds	r5, r1, #3
 800736c:	f025 0503 	bic.w	r5, r5, #3
 8007370:	3508      	adds	r5, #8
 8007372:	2d0c      	cmp	r5, #12
 8007374:	bf38      	it	cc
 8007376:	250c      	movcc	r5, #12
 8007378:	2d00      	cmp	r5, #0
 800737a:	4606      	mov	r6, r0
 800737c:	db01      	blt.n	8007382 <_malloc_r+0x1a>
 800737e:	42a9      	cmp	r1, r5
 8007380:	d903      	bls.n	800738a <_malloc_r+0x22>
 8007382:	230c      	movs	r3, #12
 8007384:	6033      	str	r3, [r6, #0]
 8007386:	2000      	movs	r0, #0
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738a:	f001 fabd 	bl	8008908 <__malloc_lock>
 800738e:	4921      	ldr	r1, [pc, #132]	; (8007414 <_malloc_r+0xac>)
 8007390:	680a      	ldr	r2, [r1, #0]
 8007392:	4614      	mov	r4, r2
 8007394:	b99c      	cbnz	r4, 80073be <_malloc_r+0x56>
 8007396:	4f20      	ldr	r7, [pc, #128]	; (8007418 <_malloc_r+0xb0>)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	b923      	cbnz	r3, 80073a6 <_malloc_r+0x3e>
 800739c:	4621      	mov	r1, r4
 800739e:	4630      	mov	r0, r6
 80073a0:	f000 fc80 	bl	8007ca4 <_sbrk_r>
 80073a4:	6038      	str	r0, [r7, #0]
 80073a6:	4629      	mov	r1, r5
 80073a8:	4630      	mov	r0, r6
 80073aa:	f000 fc7b 	bl	8007ca4 <_sbrk_r>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d123      	bne.n	80073fa <_malloc_r+0x92>
 80073b2:	230c      	movs	r3, #12
 80073b4:	6033      	str	r3, [r6, #0]
 80073b6:	4630      	mov	r0, r6
 80073b8:	f001 faac 	bl	8008914 <__malloc_unlock>
 80073bc:	e7e3      	b.n	8007386 <_malloc_r+0x1e>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	1b5b      	subs	r3, r3, r5
 80073c2:	d417      	bmi.n	80073f4 <_malloc_r+0x8c>
 80073c4:	2b0b      	cmp	r3, #11
 80073c6:	d903      	bls.n	80073d0 <_malloc_r+0x68>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	441c      	add	r4, r3
 80073cc:	6025      	str	r5, [r4, #0]
 80073ce:	e004      	b.n	80073da <_malloc_r+0x72>
 80073d0:	6863      	ldr	r3, [r4, #4]
 80073d2:	42a2      	cmp	r2, r4
 80073d4:	bf0c      	ite	eq
 80073d6:	600b      	streq	r3, [r1, #0]
 80073d8:	6053      	strne	r3, [r2, #4]
 80073da:	4630      	mov	r0, r6
 80073dc:	f001 fa9a 	bl	8008914 <__malloc_unlock>
 80073e0:	f104 000b 	add.w	r0, r4, #11
 80073e4:	1d23      	adds	r3, r4, #4
 80073e6:	f020 0007 	bic.w	r0, r0, #7
 80073ea:	1ac2      	subs	r2, r0, r3
 80073ec:	d0cc      	beq.n	8007388 <_malloc_r+0x20>
 80073ee:	1a1b      	subs	r3, r3, r0
 80073f0:	50a3      	str	r3, [r4, r2]
 80073f2:	e7c9      	b.n	8007388 <_malloc_r+0x20>
 80073f4:	4622      	mov	r2, r4
 80073f6:	6864      	ldr	r4, [r4, #4]
 80073f8:	e7cc      	b.n	8007394 <_malloc_r+0x2c>
 80073fa:	1cc4      	adds	r4, r0, #3
 80073fc:	f024 0403 	bic.w	r4, r4, #3
 8007400:	42a0      	cmp	r0, r4
 8007402:	d0e3      	beq.n	80073cc <_malloc_r+0x64>
 8007404:	1a21      	subs	r1, r4, r0
 8007406:	4630      	mov	r0, r6
 8007408:	f000 fc4c 	bl	8007ca4 <_sbrk_r>
 800740c:	3001      	adds	r0, #1
 800740e:	d1dd      	bne.n	80073cc <_malloc_r+0x64>
 8007410:	e7cf      	b.n	80073b2 <_malloc_r+0x4a>
 8007412:	bf00      	nop
 8007414:	20000288 	.word	0x20000288
 8007418:	2000028c 	.word	0x2000028c

0800741c <__cvt>:
 800741c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741e:	ed2d 8b02 	vpush	{d8}
 8007422:	eeb0 8b40 	vmov.f64	d8, d0
 8007426:	b085      	sub	sp, #20
 8007428:	4617      	mov	r7, r2
 800742a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800742c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800742e:	ee18 2a90 	vmov	r2, s17
 8007432:	f025 0520 	bic.w	r5, r5, #32
 8007436:	2a00      	cmp	r2, #0
 8007438:	bfb6      	itet	lt
 800743a:	222d      	movlt	r2, #45	; 0x2d
 800743c:	2200      	movge	r2, #0
 800743e:	eeb1 8b40 	vneglt.f64	d8, d0
 8007442:	2d46      	cmp	r5, #70	; 0x46
 8007444:	460c      	mov	r4, r1
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	d004      	beq.n	8007454 <__cvt+0x38>
 800744a:	2d45      	cmp	r5, #69	; 0x45
 800744c:	d100      	bne.n	8007450 <__cvt+0x34>
 800744e:	3401      	adds	r4, #1
 8007450:	2102      	movs	r1, #2
 8007452:	e000      	b.n	8007456 <__cvt+0x3a>
 8007454:	2103      	movs	r1, #3
 8007456:	ab03      	add	r3, sp, #12
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	ab02      	add	r3, sp, #8
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4622      	mov	r2, r4
 8007460:	4633      	mov	r3, r6
 8007462:	eeb0 0b48 	vmov.f64	d0, d8
 8007466:	f000 fcbb 	bl	8007de0 <_dtoa_r>
 800746a:	2d47      	cmp	r5, #71	; 0x47
 800746c:	d109      	bne.n	8007482 <__cvt+0x66>
 800746e:	07fb      	lsls	r3, r7, #31
 8007470:	d407      	bmi.n	8007482 <__cvt+0x66>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007476:	1a1b      	subs	r3, r3, r0
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	b005      	add	sp, #20
 800747c:	ecbd 8b02 	vpop	{d8}
 8007480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007482:	2d46      	cmp	r5, #70	; 0x46
 8007484:	eb00 0204 	add.w	r2, r0, r4
 8007488:	d10c      	bne.n	80074a4 <__cvt+0x88>
 800748a:	7803      	ldrb	r3, [r0, #0]
 800748c:	2b30      	cmp	r3, #48	; 0x30
 800748e:	d107      	bne.n	80074a0 <__cvt+0x84>
 8007490:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007498:	bf1c      	itt	ne
 800749a:	f1c4 0401 	rsbne	r4, r4, #1
 800749e:	6034      	strne	r4, [r6, #0]
 80074a0:	6833      	ldr	r3, [r6, #0]
 80074a2:	441a      	add	r2, r3
 80074a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ac:	bf08      	it	eq
 80074ae:	9203      	streq	r2, [sp, #12]
 80074b0:	2130      	movs	r1, #48	; 0x30
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d2dc      	bcs.n	8007472 <__cvt+0x56>
 80074b8:	1c5c      	adds	r4, r3, #1
 80074ba:	9403      	str	r4, [sp, #12]
 80074bc:	7019      	strb	r1, [r3, #0]
 80074be:	e7f8      	b.n	80074b2 <__cvt+0x96>

080074c0 <__exponent>:
 80074c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074c2:	4603      	mov	r3, r0
 80074c4:	2900      	cmp	r1, #0
 80074c6:	bfb8      	it	lt
 80074c8:	4249      	neglt	r1, r1
 80074ca:	f803 2b02 	strb.w	r2, [r3], #2
 80074ce:	bfb4      	ite	lt
 80074d0:	222d      	movlt	r2, #45	; 0x2d
 80074d2:	222b      	movge	r2, #43	; 0x2b
 80074d4:	2909      	cmp	r1, #9
 80074d6:	7042      	strb	r2, [r0, #1]
 80074d8:	dd2a      	ble.n	8007530 <__exponent+0x70>
 80074da:	f10d 0407 	add.w	r4, sp, #7
 80074de:	46a4      	mov	ip, r4
 80074e0:	270a      	movs	r7, #10
 80074e2:	46a6      	mov	lr, r4
 80074e4:	460a      	mov	r2, r1
 80074e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80074ea:	fb07 1516 	mls	r5, r7, r6, r1
 80074ee:	3530      	adds	r5, #48	; 0x30
 80074f0:	2a63      	cmp	r2, #99	; 0x63
 80074f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80074f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80074fa:	4631      	mov	r1, r6
 80074fc:	dcf1      	bgt.n	80074e2 <__exponent+0x22>
 80074fe:	3130      	adds	r1, #48	; 0x30
 8007500:	f1ae 0502 	sub.w	r5, lr, #2
 8007504:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007508:	1c44      	adds	r4, r0, #1
 800750a:	4629      	mov	r1, r5
 800750c:	4561      	cmp	r1, ip
 800750e:	d30a      	bcc.n	8007526 <__exponent+0x66>
 8007510:	f10d 0209 	add.w	r2, sp, #9
 8007514:	eba2 020e 	sub.w	r2, r2, lr
 8007518:	4565      	cmp	r5, ip
 800751a:	bf88      	it	hi
 800751c:	2200      	movhi	r2, #0
 800751e:	4413      	add	r3, r2
 8007520:	1a18      	subs	r0, r3, r0
 8007522:	b003      	add	sp, #12
 8007524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800752a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800752e:	e7ed      	b.n	800750c <__exponent+0x4c>
 8007530:	2330      	movs	r3, #48	; 0x30
 8007532:	3130      	adds	r1, #48	; 0x30
 8007534:	7083      	strb	r3, [r0, #2]
 8007536:	70c1      	strb	r1, [r0, #3]
 8007538:	1d03      	adds	r3, r0, #4
 800753a:	e7f1      	b.n	8007520 <__exponent+0x60>
 800753c:	0000      	movs	r0, r0
	...

08007540 <_printf_float>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	b08b      	sub	sp, #44	; 0x2c
 8007546:	460c      	mov	r4, r1
 8007548:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800754c:	4616      	mov	r6, r2
 800754e:	461f      	mov	r7, r3
 8007550:	4605      	mov	r5, r0
 8007552:	f001 f9c7 	bl	80088e4 <_localeconv_r>
 8007556:	f8d0 b000 	ldr.w	fp, [r0]
 800755a:	4658      	mov	r0, fp
 800755c:	f7f8 fe70 	bl	8000240 <strlen>
 8007560:	2300      	movs	r3, #0
 8007562:	9308      	str	r3, [sp, #32]
 8007564:	f8d8 3000 	ldr.w	r3, [r8]
 8007568:	f894 9018 	ldrb.w	r9, [r4, #24]
 800756c:	6822      	ldr	r2, [r4, #0]
 800756e:	3307      	adds	r3, #7
 8007570:	f023 0307 	bic.w	r3, r3, #7
 8007574:	f103 0108 	add.w	r1, r3, #8
 8007578:	f8c8 1000 	str.w	r1, [r8]
 800757c:	4682      	mov	sl, r0
 800757e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007582:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007586:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80077e8 <_printf_float+0x2a8>
 800758a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800758e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007592:	eeb4 6b47 	vcmp.f64	d6, d7
 8007596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759a:	dd24      	ble.n	80075e6 <_printf_float+0xa6>
 800759c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80075a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a4:	d502      	bpl.n	80075ac <_printf_float+0x6c>
 80075a6:	232d      	movs	r3, #45	; 0x2d
 80075a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ac:	4b90      	ldr	r3, [pc, #576]	; (80077f0 <_printf_float+0x2b0>)
 80075ae:	4891      	ldr	r0, [pc, #580]	; (80077f4 <_printf_float+0x2b4>)
 80075b0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80075b4:	bf94      	ite	ls
 80075b6:	4698      	movls	r8, r3
 80075b8:	4680      	movhi	r8, r0
 80075ba:	2303      	movs	r3, #3
 80075bc:	6123      	str	r3, [r4, #16]
 80075be:	f022 0204 	bic.w	r2, r2, #4
 80075c2:	2300      	movs	r3, #0
 80075c4:	6022      	str	r2, [r4, #0]
 80075c6:	9304      	str	r3, [sp, #16]
 80075c8:	9700      	str	r7, [sp, #0]
 80075ca:	4633      	mov	r3, r6
 80075cc:	aa09      	add	r2, sp, #36	; 0x24
 80075ce:	4621      	mov	r1, r4
 80075d0:	4628      	mov	r0, r5
 80075d2:	f000 f9d3 	bl	800797c <_printf_common>
 80075d6:	3001      	adds	r0, #1
 80075d8:	f040 808a 	bne.w	80076f0 <_printf_float+0x1b0>
 80075dc:	f04f 30ff 	mov.w	r0, #4294967295
 80075e0:	b00b      	add	sp, #44	; 0x2c
 80075e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e6:	eeb4 0b40 	vcmp.f64	d0, d0
 80075ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ee:	d709      	bvc.n	8007604 <_printf_float+0xc4>
 80075f0:	ee10 3a90 	vmov	r3, s1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bfbc      	itt	lt
 80075f8:	232d      	movlt	r3, #45	; 0x2d
 80075fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075fe:	487e      	ldr	r0, [pc, #504]	; (80077f8 <_printf_float+0x2b8>)
 8007600:	4b7e      	ldr	r3, [pc, #504]	; (80077fc <_printf_float+0x2bc>)
 8007602:	e7d5      	b.n	80075b0 <_printf_float+0x70>
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800760a:	9104      	str	r1, [sp, #16]
 800760c:	1c59      	adds	r1, r3, #1
 800760e:	d13c      	bne.n	800768a <_printf_float+0x14a>
 8007610:	2306      	movs	r3, #6
 8007612:	6063      	str	r3, [r4, #4]
 8007614:	2300      	movs	r3, #0
 8007616:	9303      	str	r3, [sp, #12]
 8007618:	ab08      	add	r3, sp, #32
 800761a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800761e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007622:	ab07      	add	r3, sp, #28
 8007624:	6861      	ldr	r1, [r4, #4]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	6022      	str	r2, [r4, #0]
 800762a:	f10d 031b 	add.w	r3, sp, #27
 800762e:	4628      	mov	r0, r5
 8007630:	f7ff fef4 	bl	800741c <__cvt>
 8007634:	9b04      	ldr	r3, [sp, #16]
 8007636:	9907      	ldr	r1, [sp, #28]
 8007638:	2b47      	cmp	r3, #71	; 0x47
 800763a:	4680      	mov	r8, r0
 800763c:	d108      	bne.n	8007650 <_printf_float+0x110>
 800763e:	1cc8      	adds	r0, r1, #3
 8007640:	db02      	blt.n	8007648 <_printf_float+0x108>
 8007642:	6863      	ldr	r3, [r4, #4]
 8007644:	4299      	cmp	r1, r3
 8007646:	dd41      	ble.n	80076cc <_printf_float+0x18c>
 8007648:	f1a9 0902 	sub.w	r9, r9, #2
 800764c:	fa5f f989 	uxtb.w	r9, r9
 8007650:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007654:	d820      	bhi.n	8007698 <_printf_float+0x158>
 8007656:	3901      	subs	r1, #1
 8007658:	464a      	mov	r2, r9
 800765a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800765e:	9107      	str	r1, [sp, #28]
 8007660:	f7ff ff2e 	bl	80074c0 <__exponent>
 8007664:	9a08      	ldr	r2, [sp, #32]
 8007666:	9004      	str	r0, [sp, #16]
 8007668:	1813      	adds	r3, r2, r0
 800766a:	2a01      	cmp	r2, #1
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	dc02      	bgt.n	8007676 <_printf_float+0x136>
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	07d2      	lsls	r2, r2, #31
 8007674:	d501      	bpl.n	800767a <_printf_float+0x13a>
 8007676:	3301      	adds	r3, #1
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0a2      	beq.n	80075c8 <_printf_float+0x88>
 8007682:	232d      	movs	r3, #45	; 0x2d
 8007684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007688:	e79e      	b.n	80075c8 <_printf_float+0x88>
 800768a:	9904      	ldr	r1, [sp, #16]
 800768c:	2947      	cmp	r1, #71	; 0x47
 800768e:	d1c1      	bne.n	8007614 <_printf_float+0xd4>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1bf      	bne.n	8007614 <_printf_float+0xd4>
 8007694:	2301      	movs	r3, #1
 8007696:	e7bc      	b.n	8007612 <_printf_float+0xd2>
 8007698:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800769c:	d118      	bne.n	80076d0 <_printf_float+0x190>
 800769e:	2900      	cmp	r1, #0
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	dd0b      	ble.n	80076bc <_printf_float+0x17c>
 80076a4:	6121      	str	r1, [r4, #16]
 80076a6:	b913      	cbnz	r3, 80076ae <_printf_float+0x16e>
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	07d0      	lsls	r0, r2, #31
 80076ac:	d502      	bpl.n	80076b4 <_printf_float+0x174>
 80076ae:	3301      	adds	r3, #1
 80076b0:	440b      	add	r3, r1
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	2300      	movs	r3, #0
 80076b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80076b8:	9304      	str	r3, [sp, #16]
 80076ba:	e7de      	b.n	800767a <_printf_float+0x13a>
 80076bc:	b913      	cbnz	r3, 80076c4 <_printf_float+0x184>
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	07d2      	lsls	r2, r2, #31
 80076c2:	d501      	bpl.n	80076c8 <_printf_float+0x188>
 80076c4:	3302      	adds	r3, #2
 80076c6:	e7f4      	b.n	80076b2 <_printf_float+0x172>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e7f2      	b.n	80076b2 <_printf_float+0x172>
 80076cc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80076d0:	9b08      	ldr	r3, [sp, #32]
 80076d2:	4299      	cmp	r1, r3
 80076d4:	db05      	blt.n	80076e2 <_printf_float+0x1a2>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	6121      	str	r1, [r4, #16]
 80076da:	07d8      	lsls	r0, r3, #31
 80076dc:	d5ea      	bpl.n	80076b4 <_printf_float+0x174>
 80076de:	1c4b      	adds	r3, r1, #1
 80076e0:	e7e7      	b.n	80076b2 <_printf_float+0x172>
 80076e2:	2900      	cmp	r1, #0
 80076e4:	bfd4      	ite	le
 80076e6:	f1c1 0202 	rsble	r2, r1, #2
 80076ea:	2201      	movgt	r2, #1
 80076ec:	4413      	add	r3, r2
 80076ee:	e7e0      	b.n	80076b2 <_printf_float+0x172>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	055a      	lsls	r2, r3, #21
 80076f4:	d407      	bmi.n	8007706 <_printf_float+0x1c6>
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	4642      	mov	r2, r8
 80076fa:	4631      	mov	r1, r6
 80076fc:	4628      	mov	r0, r5
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	d12a      	bne.n	800775a <_printf_float+0x21a>
 8007704:	e76a      	b.n	80075dc <_printf_float+0x9c>
 8007706:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800770a:	f240 80e2 	bls.w	80078d2 <_printf_float+0x392>
 800770e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007712:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771a:	d133      	bne.n	8007784 <_printf_float+0x244>
 800771c:	4a38      	ldr	r2, [pc, #224]	; (8007800 <_printf_float+0x2c0>)
 800771e:	2301      	movs	r3, #1
 8007720:	4631      	mov	r1, r6
 8007722:	4628      	mov	r0, r5
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	f43f af58 	beq.w	80075dc <_printf_float+0x9c>
 800772c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007730:	429a      	cmp	r2, r3
 8007732:	db02      	blt.n	800773a <_printf_float+0x1fa>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	07d8      	lsls	r0, r3, #31
 8007738:	d50f      	bpl.n	800775a <_printf_float+0x21a>
 800773a:	4653      	mov	r3, sl
 800773c:	465a      	mov	r2, fp
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f af49 	beq.w	80075dc <_printf_float+0x9c>
 800774a:	f04f 0800 	mov.w	r8, #0
 800774e:	f104 091a 	add.w	r9, r4, #26
 8007752:	9b08      	ldr	r3, [sp, #32]
 8007754:	3b01      	subs	r3, #1
 8007756:	4543      	cmp	r3, r8
 8007758:	dc09      	bgt.n	800776e <_printf_float+0x22e>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	079b      	lsls	r3, r3, #30
 800775e:	f100 8108 	bmi.w	8007972 <_printf_float+0x432>
 8007762:	68e0      	ldr	r0, [r4, #12]
 8007764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007766:	4298      	cmp	r0, r3
 8007768:	bfb8      	it	lt
 800776a:	4618      	movlt	r0, r3
 800776c:	e738      	b.n	80075e0 <_printf_float+0xa0>
 800776e:	2301      	movs	r3, #1
 8007770:	464a      	mov	r2, r9
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	f43f af2f 	beq.w	80075dc <_printf_float+0x9c>
 800777e:	f108 0801 	add.w	r8, r8, #1
 8007782:	e7e6      	b.n	8007752 <_printf_float+0x212>
 8007784:	9b07      	ldr	r3, [sp, #28]
 8007786:	2b00      	cmp	r3, #0
 8007788:	dc3c      	bgt.n	8007804 <_printf_float+0x2c4>
 800778a:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <_printf_float+0x2c0>)
 800778c:	2301      	movs	r3, #1
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	f43f af21 	beq.w	80075dc <_printf_float+0x9c>
 800779a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800779e:	4313      	orrs	r3, r2
 80077a0:	d102      	bne.n	80077a8 <_printf_float+0x268>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	07d9      	lsls	r1, r3, #31
 80077a6:	d5d8      	bpl.n	800775a <_printf_float+0x21a>
 80077a8:	4653      	mov	r3, sl
 80077aa:	465a      	mov	r2, fp
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	f43f af12 	beq.w	80075dc <_printf_float+0x9c>
 80077b8:	f04f 0900 	mov.w	r9, #0
 80077bc:	f104 0a1a 	add.w	sl, r4, #26
 80077c0:	9b07      	ldr	r3, [sp, #28]
 80077c2:	425b      	negs	r3, r3
 80077c4:	454b      	cmp	r3, r9
 80077c6:	dc01      	bgt.n	80077cc <_printf_float+0x28c>
 80077c8:	9b08      	ldr	r3, [sp, #32]
 80077ca:	e795      	b.n	80076f8 <_printf_float+0x1b8>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4652      	mov	r2, sl
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f af00 	beq.w	80075dc <_printf_float+0x9c>
 80077dc:	f109 0901 	add.w	r9, r9, #1
 80077e0:	e7ee      	b.n	80077c0 <_printf_float+0x280>
 80077e2:	bf00      	nop
 80077e4:	f3af 8000 	nop.w
 80077e8:	ffffffff 	.word	0xffffffff
 80077ec:	7fefffff 	.word	0x7fefffff
 80077f0:	08009b84 	.word	0x08009b84
 80077f4:	08009b88 	.word	0x08009b88
 80077f8:	08009b90 	.word	0x08009b90
 80077fc:	08009b8c 	.word	0x08009b8c
 8007800:	08009b94 	.word	0x08009b94
 8007804:	9a08      	ldr	r2, [sp, #32]
 8007806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007808:	429a      	cmp	r2, r3
 800780a:	bfa8      	it	ge
 800780c:	461a      	movge	r2, r3
 800780e:	2a00      	cmp	r2, #0
 8007810:	4691      	mov	r9, r2
 8007812:	dc38      	bgt.n	8007886 <_printf_float+0x346>
 8007814:	2300      	movs	r3, #0
 8007816:	9305      	str	r3, [sp, #20]
 8007818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800781c:	f104 021a 	add.w	r2, r4, #26
 8007820:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007822:	9905      	ldr	r1, [sp, #20]
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	eba3 0309 	sub.w	r3, r3, r9
 800782a:	428b      	cmp	r3, r1
 800782c:	dc33      	bgt.n	8007896 <_printf_float+0x356>
 800782e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007832:	429a      	cmp	r2, r3
 8007834:	db3c      	blt.n	80078b0 <_printf_float+0x370>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	07da      	lsls	r2, r3, #31
 800783a:	d439      	bmi.n	80078b0 <_printf_float+0x370>
 800783c:	9a08      	ldr	r2, [sp, #32]
 800783e:	9b04      	ldr	r3, [sp, #16]
 8007840:	9907      	ldr	r1, [sp, #28]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	eba2 0901 	sub.w	r9, r2, r1
 8007848:	4599      	cmp	r9, r3
 800784a:	bfa8      	it	ge
 800784c:	4699      	movge	r9, r3
 800784e:	f1b9 0f00 	cmp.w	r9, #0
 8007852:	dc35      	bgt.n	80078c0 <_printf_float+0x380>
 8007854:	f04f 0800 	mov.w	r8, #0
 8007858:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800785c:	f104 0a1a 	add.w	sl, r4, #26
 8007860:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007864:	1a9b      	subs	r3, r3, r2
 8007866:	eba3 0309 	sub.w	r3, r3, r9
 800786a:	4543      	cmp	r3, r8
 800786c:	f77f af75 	ble.w	800775a <_printf_float+0x21a>
 8007870:	2301      	movs	r3, #1
 8007872:	4652      	mov	r2, sl
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f aeae 	beq.w	80075dc <_printf_float+0x9c>
 8007880:	f108 0801 	add.w	r8, r8, #1
 8007884:	e7ec      	b.n	8007860 <_printf_float+0x320>
 8007886:	4613      	mov	r3, r2
 8007888:	4631      	mov	r1, r6
 800788a:	4642      	mov	r2, r8
 800788c:	4628      	mov	r0, r5
 800788e:	47b8      	blx	r7
 8007890:	3001      	adds	r0, #1
 8007892:	d1bf      	bne.n	8007814 <_printf_float+0x2d4>
 8007894:	e6a2      	b.n	80075dc <_printf_float+0x9c>
 8007896:	2301      	movs	r3, #1
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	9204      	str	r2, [sp, #16]
 800789e:	47b8      	blx	r7
 80078a0:	3001      	adds	r0, #1
 80078a2:	f43f ae9b 	beq.w	80075dc <_printf_float+0x9c>
 80078a6:	9b05      	ldr	r3, [sp, #20]
 80078a8:	9a04      	ldr	r2, [sp, #16]
 80078aa:	3301      	adds	r3, #1
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	e7b7      	b.n	8007820 <_printf_float+0x2e0>
 80078b0:	4653      	mov	r3, sl
 80078b2:	465a      	mov	r2, fp
 80078b4:	4631      	mov	r1, r6
 80078b6:	4628      	mov	r0, r5
 80078b8:	47b8      	blx	r7
 80078ba:	3001      	adds	r0, #1
 80078bc:	d1be      	bne.n	800783c <_printf_float+0x2fc>
 80078be:	e68d      	b.n	80075dc <_printf_float+0x9c>
 80078c0:	9a04      	ldr	r2, [sp, #16]
 80078c2:	464b      	mov	r3, r9
 80078c4:	4442      	add	r2, r8
 80078c6:	4631      	mov	r1, r6
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b8      	blx	r7
 80078cc:	3001      	adds	r0, #1
 80078ce:	d1c1      	bne.n	8007854 <_printf_float+0x314>
 80078d0:	e684      	b.n	80075dc <_printf_float+0x9c>
 80078d2:	9a08      	ldr	r2, [sp, #32]
 80078d4:	2a01      	cmp	r2, #1
 80078d6:	dc01      	bgt.n	80078dc <_printf_float+0x39c>
 80078d8:	07db      	lsls	r3, r3, #31
 80078da:	d537      	bpl.n	800794c <_printf_float+0x40c>
 80078dc:	2301      	movs	r3, #1
 80078de:	4642      	mov	r2, r8
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	f43f ae78 	beq.w	80075dc <_printf_float+0x9c>
 80078ec:	4653      	mov	r3, sl
 80078ee:	465a      	mov	r2, fp
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	f43f ae70 	beq.w	80075dc <_printf_float+0x9c>
 80078fc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007900:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007908:	d01b      	beq.n	8007942 <_printf_float+0x402>
 800790a:	9b08      	ldr	r3, [sp, #32]
 800790c:	f108 0201 	add.w	r2, r8, #1
 8007910:	3b01      	subs	r3, #1
 8007912:	4631      	mov	r1, r6
 8007914:	4628      	mov	r0, r5
 8007916:	47b8      	blx	r7
 8007918:	3001      	adds	r0, #1
 800791a:	d10e      	bne.n	800793a <_printf_float+0x3fa>
 800791c:	e65e      	b.n	80075dc <_printf_float+0x9c>
 800791e:	2301      	movs	r3, #1
 8007920:	464a      	mov	r2, r9
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	f43f ae57 	beq.w	80075dc <_printf_float+0x9c>
 800792e:	f108 0801 	add.w	r8, r8, #1
 8007932:	9b08      	ldr	r3, [sp, #32]
 8007934:	3b01      	subs	r3, #1
 8007936:	4543      	cmp	r3, r8
 8007938:	dcf1      	bgt.n	800791e <_printf_float+0x3de>
 800793a:	9b04      	ldr	r3, [sp, #16]
 800793c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007940:	e6db      	b.n	80076fa <_printf_float+0x1ba>
 8007942:	f04f 0800 	mov.w	r8, #0
 8007946:	f104 091a 	add.w	r9, r4, #26
 800794a:	e7f2      	b.n	8007932 <_printf_float+0x3f2>
 800794c:	2301      	movs	r3, #1
 800794e:	4642      	mov	r2, r8
 8007950:	e7df      	b.n	8007912 <_printf_float+0x3d2>
 8007952:	2301      	movs	r3, #1
 8007954:	464a      	mov	r2, r9
 8007956:	4631      	mov	r1, r6
 8007958:	4628      	mov	r0, r5
 800795a:	47b8      	blx	r7
 800795c:	3001      	adds	r0, #1
 800795e:	f43f ae3d 	beq.w	80075dc <_printf_float+0x9c>
 8007962:	f108 0801 	add.w	r8, r8, #1
 8007966:	68e3      	ldr	r3, [r4, #12]
 8007968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800796a:	1a5b      	subs	r3, r3, r1
 800796c:	4543      	cmp	r3, r8
 800796e:	dcf0      	bgt.n	8007952 <_printf_float+0x412>
 8007970:	e6f7      	b.n	8007762 <_printf_float+0x222>
 8007972:	f04f 0800 	mov.w	r8, #0
 8007976:	f104 0919 	add.w	r9, r4, #25
 800797a:	e7f4      	b.n	8007966 <_printf_float+0x426>

0800797c <_printf_common>:
 800797c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007980:	4616      	mov	r6, r2
 8007982:	4699      	mov	r9, r3
 8007984:	688a      	ldr	r2, [r1, #8]
 8007986:	690b      	ldr	r3, [r1, #16]
 8007988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800798c:	4293      	cmp	r3, r2
 800798e:	bfb8      	it	lt
 8007990:	4613      	movlt	r3, r2
 8007992:	6033      	str	r3, [r6, #0]
 8007994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007998:	4607      	mov	r7, r0
 800799a:	460c      	mov	r4, r1
 800799c:	b10a      	cbz	r2, 80079a2 <_printf_common+0x26>
 800799e:	3301      	adds	r3, #1
 80079a0:	6033      	str	r3, [r6, #0]
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	0699      	lsls	r1, r3, #26
 80079a6:	bf42      	ittt	mi
 80079a8:	6833      	ldrmi	r3, [r6, #0]
 80079aa:	3302      	addmi	r3, #2
 80079ac:	6033      	strmi	r3, [r6, #0]
 80079ae:	6825      	ldr	r5, [r4, #0]
 80079b0:	f015 0506 	ands.w	r5, r5, #6
 80079b4:	d106      	bne.n	80079c4 <_printf_common+0x48>
 80079b6:	f104 0a19 	add.w	sl, r4, #25
 80079ba:	68e3      	ldr	r3, [r4, #12]
 80079bc:	6832      	ldr	r2, [r6, #0]
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	42ab      	cmp	r3, r5
 80079c2:	dc26      	bgt.n	8007a12 <_printf_common+0x96>
 80079c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079c8:	1e13      	subs	r3, r2, #0
 80079ca:	6822      	ldr	r2, [r4, #0]
 80079cc:	bf18      	it	ne
 80079ce:	2301      	movne	r3, #1
 80079d0:	0692      	lsls	r2, r2, #26
 80079d2:	d42b      	bmi.n	8007a2c <_printf_common+0xb0>
 80079d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079d8:	4649      	mov	r1, r9
 80079da:	4638      	mov	r0, r7
 80079dc:	47c0      	blx	r8
 80079de:	3001      	adds	r0, #1
 80079e0:	d01e      	beq.n	8007a20 <_printf_common+0xa4>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	68e5      	ldr	r5, [r4, #12]
 80079e6:	6832      	ldr	r2, [r6, #0]
 80079e8:	f003 0306 	and.w	r3, r3, #6
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	bf08      	it	eq
 80079f0:	1aad      	subeq	r5, r5, r2
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	6922      	ldr	r2, [r4, #16]
 80079f6:	bf0c      	ite	eq
 80079f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079fc:	2500      	movne	r5, #0
 80079fe:	4293      	cmp	r3, r2
 8007a00:	bfc4      	itt	gt
 8007a02:	1a9b      	subgt	r3, r3, r2
 8007a04:	18ed      	addgt	r5, r5, r3
 8007a06:	2600      	movs	r6, #0
 8007a08:	341a      	adds	r4, #26
 8007a0a:	42b5      	cmp	r5, r6
 8007a0c:	d11a      	bne.n	8007a44 <_printf_common+0xc8>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e008      	b.n	8007a24 <_printf_common+0xa8>
 8007a12:	2301      	movs	r3, #1
 8007a14:	4652      	mov	r2, sl
 8007a16:	4649      	mov	r1, r9
 8007a18:	4638      	mov	r0, r7
 8007a1a:	47c0      	blx	r8
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d103      	bne.n	8007a28 <_printf_common+0xac>
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a28:	3501      	adds	r5, #1
 8007a2a:	e7c6      	b.n	80079ba <_printf_common+0x3e>
 8007a2c:	18e1      	adds	r1, r4, r3
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	2030      	movs	r0, #48	; 0x30
 8007a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a36:	4422      	add	r2, r4
 8007a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a40:	3302      	adds	r3, #2
 8007a42:	e7c7      	b.n	80079d4 <_printf_common+0x58>
 8007a44:	2301      	movs	r3, #1
 8007a46:	4622      	mov	r2, r4
 8007a48:	4649      	mov	r1, r9
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	47c0      	blx	r8
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d0e6      	beq.n	8007a20 <_printf_common+0xa4>
 8007a52:	3601      	adds	r6, #1
 8007a54:	e7d9      	b.n	8007a0a <_printf_common+0x8e>
	...

08007a58 <_printf_i>:
 8007a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	4691      	mov	r9, r2
 8007a60:	7e27      	ldrb	r7, [r4, #24]
 8007a62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a64:	2f78      	cmp	r7, #120	; 0x78
 8007a66:	4680      	mov	r8, r0
 8007a68:	469a      	mov	sl, r3
 8007a6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a6e:	d807      	bhi.n	8007a80 <_printf_i+0x28>
 8007a70:	2f62      	cmp	r7, #98	; 0x62
 8007a72:	d80a      	bhi.n	8007a8a <_printf_i+0x32>
 8007a74:	2f00      	cmp	r7, #0
 8007a76:	f000 80d8 	beq.w	8007c2a <_printf_i+0x1d2>
 8007a7a:	2f58      	cmp	r7, #88	; 0x58
 8007a7c:	f000 80a3 	beq.w	8007bc6 <_printf_i+0x16e>
 8007a80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a88:	e03a      	b.n	8007b00 <_printf_i+0xa8>
 8007a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a8e:	2b15      	cmp	r3, #21
 8007a90:	d8f6      	bhi.n	8007a80 <_printf_i+0x28>
 8007a92:	a001      	add	r0, pc, #4	; (adr r0, 8007a98 <_printf_i+0x40>)
 8007a94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a98:	08007af1 	.word	0x08007af1
 8007a9c:	08007b05 	.word	0x08007b05
 8007aa0:	08007a81 	.word	0x08007a81
 8007aa4:	08007a81 	.word	0x08007a81
 8007aa8:	08007a81 	.word	0x08007a81
 8007aac:	08007a81 	.word	0x08007a81
 8007ab0:	08007b05 	.word	0x08007b05
 8007ab4:	08007a81 	.word	0x08007a81
 8007ab8:	08007a81 	.word	0x08007a81
 8007abc:	08007a81 	.word	0x08007a81
 8007ac0:	08007a81 	.word	0x08007a81
 8007ac4:	08007c11 	.word	0x08007c11
 8007ac8:	08007b35 	.word	0x08007b35
 8007acc:	08007bf3 	.word	0x08007bf3
 8007ad0:	08007a81 	.word	0x08007a81
 8007ad4:	08007a81 	.word	0x08007a81
 8007ad8:	08007c33 	.word	0x08007c33
 8007adc:	08007a81 	.word	0x08007a81
 8007ae0:	08007b35 	.word	0x08007b35
 8007ae4:	08007a81 	.word	0x08007a81
 8007ae8:	08007a81 	.word	0x08007a81
 8007aec:	08007bfb 	.word	0x08007bfb
 8007af0:	680b      	ldr	r3, [r1, #0]
 8007af2:	1d1a      	adds	r2, r3, #4
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	600a      	str	r2, [r1, #0]
 8007af8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b00:	2301      	movs	r3, #1
 8007b02:	e0a3      	b.n	8007c4c <_printf_i+0x1f4>
 8007b04:	6825      	ldr	r5, [r4, #0]
 8007b06:	6808      	ldr	r0, [r1, #0]
 8007b08:	062e      	lsls	r6, r5, #24
 8007b0a:	f100 0304 	add.w	r3, r0, #4
 8007b0e:	d50a      	bpl.n	8007b26 <_printf_i+0xce>
 8007b10:	6805      	ldr	r5, [r0, #0]
 8007b12:	600b      	str	r3, [r1, #0]
 8007b14:	2d00      	cmp	r5, #0
 8007b16:	da03      	bge.n	8007b20 <_printf_i+0xc8>
 8007b18:	232d      	movs	r3, #45	; 0x2d
 8007b1a:	426d      	negs	r5, r5
 8007b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b20:	485e      	ldr	r0, [pc, #376]	; (8007c9c <_printf_i+0x244>)
 8007b22:	230a      	movs	r3, #10
 8007b24:	e019      	b.n	8007b5a <_printf_i+0x102>
 8007b26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b2a:	6805      	ldr	r5, [r0, #0]
 8007b2c:	600b      	str	r3, [r1, #0]
 8007b2e:	bf18      	it	ne
 8007b30:	b22d      	sxthne	r5, r5
 8007b32:	e7ef      	b.n	8007b14 <_printf_i+0xbc>
 8007b34:	680b      	ldr	r3, [r1, #0]
 8007b36:	6825      	ldr	r5, [r4, #0]
 8007b38:	1d18      	adds	r0, r3, #4
 8007b3a:	6008      	str	r0, [r1, #0]
 8007b3c:	0628      	lsls	r0, r5, #24
 8007b3e:	d501      	bpl.n	8007b44 <_printf_i+0xec>
 8007b40:	681d      	ldr	r5, [r3, #0]
 8007b42:	e002      	b.n	8007b4a <_printf_i+0xf2>
 8007b44:	0669      	lsls	r1, r5, #25
 8007b46:	d5fb      	bpl.n	8007b40 <_printf_i+0xe8>
 8007b48:	881d      	ldrh	r5, [r3, #0]
 8007b4a:	4854      	ldr	r0, [pc, #336]	; (8007c9c <_printf_i+0x244>)
 8007b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b4e:	bf0c      	ite	eq
 8007b50:	2308      	moveq	r3, #8
 8007b52:	230a      	movne	r3, #10
 8007b54:	2100      	movs	r1, #0
 8007b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b5a:	6866      	ldr	r6, [r4, #4]
 8007b5c:	60a6      	str	r6, [r4, #8]
 8007b5e:	2e00      	cmp	r6, #0
 8007b60:	bfa2      	ittt	ge
 8007b62:	6821      	ldrge	r1, [r4, #0]
 8007b64:	f021 0104 	bicge.w	r1, r1, #4
 8007b68:	6021      	strge	r1, [r4, #0]
 8007b6a:	b90d      	cbnz	r5, 8007b70 <_printf_i+0x118>
 8007b6c:	2e00      	cmp	r6, #0
 8007b6e:	d04d      	beq.n	8007c0c <_printf_i+0x1b4>
 8007b70:	4616      	mov	r6, r2
 8007b72:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b76:	fb03 5711 	mls	r7, r3, r1, r5
 8007b7a:	5dc7      	ldrb	r7, [r0, r7]
 8007b7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b80:	462f      	mov	r7, r5
 8007b82:	42bb      	cmp	r3, r7
 8007b84:	460d      	mov	r5, r1
 8007b86:	d9f4      	bls.n	8007b72 <_printf_i+0x11a>
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d10b      	bne.n	8007ba4 <_printf_i+0x14c>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	07df      	lsls	r7, r3, #31
 8007b90:	d508      	bpl.n	8007ba4 <_printf_i+0x14c>
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	6861      	ldr	r1, [r4, #4]
 8007b96:	4299      	cmp	r1, r3
 8007b98:	bfde      	ittt	le
 8007b9a:	2330      	movle	r3, #48	; 0x30
 8007b9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ba0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ba4:	1b92      	subs	r2, r2, r6
 8007ba6:	6122      	str	r2, [r4, #16]
 8007ba8:	f8cd a000 	str.w	sl, [sp]
 8007bac:	464b      	mov	r3, r9
 8007bae:	aa03      	add	r2, sp, #12
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	f7ff fee2 	bl	800797c <_printf_common>
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d14c      	bne.n	8007c56 <_printf_i+0x1fe>
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	b004      	add	sp, #16
 8007bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc6:	4835      	ldr	r0, [pc, #212]	; (8007c9c <_printf_i+0x244>)
 8007bc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	680e      	ldr	r6, [r1, #0]
 8007bd0:	061f      	lsls	r7, r3, #24
 8007bd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bd6:	600e      	str	r6, [r1, #0]
 8007bd8:	d514      	bpl.n	8007c04 <_printf_i+0x1ac>
 8007bda:	07d9      	lsls	r1, r3, #31
 8007bdc:	bf44      	itt	mi
 8007bde:	f043 0320 	orrmi.w	r3, r3, #32
 8007be2:	6023      	strmi	r3, [r4, #0]
 8007be4:	b91d      	cbnz	r5, 8007bee <_printf_i+0x196>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	f023 0320 	bic.w	r3, r3, #32
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	2310      	movs	r3, #16
 8007bf0:	e7b0      	b.n	8007b54 <_printf_i+0xfc>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	f043 0320 	orr.w	r3, r3, #32
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	2378      	movs	r3, #120	; 0x78
 8007bfc:	4828      	ldr	r0, [pc, #160]	; (8007ca0 <_printf_i+0x248>)
 8007bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c02:	e7e3      	b.n	8007bcc <_printf_i+0x174>
 8007c04:	065e      	lsls	r6, r3, #25
 8007c06:	bf48      	it	mi
 8007c08:	b2ad      	uxthmi	r5, r5
 8007c0a:	e7e6      	b.n	8007bda <_printf_i+0x182>
 8007c0c:	4616      	mov	r6, r2
 8007c0e:	e7bb      	b.n	8007b88 <_printf_i+0x130>
 8007c10:	680b      	ldr	r3, [r1, #0]
 8007c12:	6826      	ldr	r6, [r4, #0]
 8007c14:	6960      	ldr	r0, [r4, #20]
 8007c16:	1d1d      	adds	r5, r3, #4
 8007c18:	600d      	str	r5, [r1, #0]
 8007c1a:	0635      	lsls	r5, r6, #24
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	d501      	bpl.n	8007c24 <_printf_i+0x1cc>
 8007c20:	6018      	str	r0, [r3, #0]
 8007c22:	e002      	b.n	8007c2a <_printf_i+0x1d2>
 8007c24:	0671      	lsls	r1, r6, #25
 8007c26:	d5fb      	bpl.n	8007c20 <_printf_i+0x1c8>
 8007c28:	8018      	strh	r0, [r3, #0]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	4616      	mov	r6, r2
 8007c30:	e7ba      	b.n	8007ba8 <_printf_i+0x150>
 8007c32:	680b      	ldr	r3, [r1, #0]
 8007c34:	1d1a      	adds	r2, r3, #4
 8007c36:	600a      	str	r2, [r1, #0]
 8007c38:	681e      	ldr	r6, [r3, #0]
 8007c3a:	6862      	ldr	r2, [r4, #4]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f7f8 fb06 	bl	8000250 <memchr>
 8007c44:	b108      	cbz	r0, 8007c4a <_printf_i+0x1f2>
 8007c46:	1b80      	subs	r0, r0, r6
 8007c48:	6060      	str	r0, [r4, #4]
 8007c4a:	6863      	ldr	r3, [r4, #4]
 8007c4c:	6123      	str	r3, [r4, #16]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c54:	e7a8      	b.n	8007ba8 <_printf_i+0x150>
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	4632      	mov	r2, r6
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	47d0      	blx	sl
 8007c60:	3001      	adds	r0, #1
 8007c62:	d0ab      	beq.n	8007bbc <_printf_i+0x164>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	079b      	lsls	r3, r3, #30
 8007c68:	d413      	bmi.n	8007c92 <_printf_i+0x23a>
 8007c6a:	68e0      	ldr	r0, [r4, #12]
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	4298      	cmp	r0, r3
 8007c70:	bfb8      	it	lt
 8007c72:	4618      	movlt	r0, r3
 8007c74:	e7a4      	b.n	8007bc0 <_printf_i+0x168>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4632      	mov	r2, r6
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	47d0      	blx	sl
 8007c80:	3001      	adds	r0, #1
 8007c82:	d09b      	beq.n	8007bbc <_printf_i+0x164>
 8007c84:	3501      	adds	r5, #1
 8007c86:	68e3      	ldr	r3, [r4, #12]
 8007c88:	9903      	ldr	r1, [sp, #12]
 8007c8a:	1a5b      	subs	r3, r3, r1
 8007c8c:	42ab      	cmp	r3, r5
 8007c8e:	dcf2      	bgt.n	8007c76 <_printf_i+0x21e>
 8007c90:	e7eb      	b.n	8007c6a <_printf_i+0x212>
 8007c92:	2500      	movs	r5, #0
 8007c94:	f104 0619 	add.w	r6, r4, #25
 8007c98:	e7f5      	b.n	8007c86 <_printf_i+0x22e>
 8007c9a:	bf00      	nop
 8007c9c:	08009b96 	.word	0x08009b96
 8007ca0:	08009ba7 	.word	0x08009ba7

08007ca4 <_sbrk_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4d06      	ldr	r5, [pc, #24]	; (8007cc0 <_sbrk_r+0x1c>)
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	602b      	str	r3, [r5, #0]
 8007cb0:	f7f9 fdd4 	bl	800185c <_sbrk>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_sbrk_r+0x1a>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_sbrk_r+0x1a>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	200007b8 	.word	0x200007b8

08007cc4 <quorem>:
 8007cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	6903      	ldr	r3, [r0, #16]
 8007cca:	690c      	ldr	r4, [r1, #16]
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	4607      	mov	r7, r0
 8007cd0:	f2c0 8081 	blt.w	8007dd6 <quorem+0x112>
 8007cd4:	3c01      	subs	r4, #1
 8007cd6:	f101 0814 	add.w	r8, r1, #20
 8007cda:	f100 0514 	add.w	r5, r0, #20
 8007cde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ce8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cec:	3301      	adds	r3, #1
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cf8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cfc:	d331      	bcc.n	8007d62 <quorem+0x9e>
 8007cfe:	f04f 0e00 	mov.w	lr, #0
 8007d02:	4640      	mov	r0, r8
 8007d04:	46ac      	mov	ip, r5
 8007d06:	46f2      	mov	sl, lr
 8007d08:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d0c:	b293      	uxth	r3, r2
 8007d0e:	fb06 e303 	mla	r3, r6, r3, lr
 8007d12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	ebaa 0303 	sub.w	r3, sl, r3
 8007d1c:	0c12      	lsrs	r2, r2, #16
 8007d1e:	f8dc a000 	ldr.w	sl, [ip]
 8007d22:	fb06 e202 	mla	r2, r6, r2, lr
 8007d26:	fa13 f38a 	uxtah	r3, r3, sl
 8007d2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d2e:	fa1f fa82 	uxth.w	sl, r2
 8007d32:	f8dc 2000 	ldr.w	r2, [ip]
 8007d36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d44:	4581      	cmp	r9, r0
 8007d46:	f84c 3b04 	str.w	r3, [ip], #4
 8007d4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d4e:	d2db      	bcs.n	8007d08 <quorem+0x44>
 8007d50:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d54:	b92b      	cbnz	r3, 8007d62 <quorem+0x9e>
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	3b04      	subs	r3, #4
 8007d5a:	429d      	cmp	r5, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	d32e      	bcc.n	8007dbe <quorem+0xfa>
 8007d60:	613c      	str	r4, [r7, #16]
 8007d62:	4638      	mov	r0, r7
 8007d64:	f001 f85a 	bl	8008e1c <__mcmp>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	db24      	blt.n	8007db6 <quorem+0xf2>
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f04f 0c00 	mov.w	ip, #0
 8007d74:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d78:	f8d0 e000 	ldr.w	lr, [r0]
 8007d7c:	b293      	uxth	r3, r2
 8007d7e:	ebac 0303 	sub.w	r3, ip, r3
 8007d82:	0c12      	lsrs	r2, r2, #16
 8007d84:	fa13 f38e 	uxtah	r3, r3, lr
 8007d88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d96:	45c1      	cmp	r9, r8
 8007d98:	f840 3b04 	str.w	r3, [r0], #4
 8007d9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007da0:	d2e8      	bcs.n	8007d74 <quorem+0xb0>
 8007da2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007daa:	b922      	cbnz	r2, 8007db6 <quorem+0xf2>
 8007dac:	3b04      	subs	r3, #4
 8007dae:	429d      	cmp	r5, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	d30a      	bcc.n	8007dca <quorem+0x106>
 8007db4:	613c      	str	r4, [r7, #16]
 8007db6:	4630      	mov	r0, r6
 8007db8:	b003      	add	sp, #12
 8007dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbe:	6812      	ldr	r2, [r2, #0]
 8007dc0:	3b04      	subs	r3, #4
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	d1cc      	bne.n	8007d60 <quorem+0x9c>
 8007dc6:	3c01      	subs	r4, #1
 8007dc8:	e7c7      	b.n	8007d5a <quorem+0x96>
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	3b04      	subs	r3, #4
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	d1f0      	bne.n	8007db4 <quorem+0xf0>
 8007dd2:	3c01      	subs	r4, #1
 8007dd4:	e7eb      	b.n	8007dae <quorem+0xea>
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e7ee      	b.n	8007db8 <quorem+0xf4>
 8007dda:	0000      	movs	r0, r0
 8007ddc:	0000      	movs	r0, r0
	...

08007de0 <_dtoa_r>:
 8007de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de4:	ec59 8b10 	vmov	r8, r9, d0
 8007de8:	b095      	sub	sp, #84	; 0x54
 8007dea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007dec:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007dee:	9107      	str	r1, [sp, #28]
 8007df0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007df4:	4606      	mov	r6, r0
 8007df6:	9209      	str	r2, [sp, #36]	; 0x24
 8007df8:	9310      	str	r3, [sp, #64]	; 0x40
 8007dfa:	b975      	cbnz	r5, 8007e1a <_dtoa_r+0x3a>
 8007dfc:	2010      	movs	r0, #16
 8007dfe:	f7ff fa53 	bl	80072a8 <malloc>
 8007e02:	4602      	mov	r2, r0
 8007e04:	6270      	str	r0, [r6, #36]	; 0x24
 8007e06:	b920      	cbnz	r0, 8007e12 <_dtoa_r+0x32>
 8007e08:	4bab      	ldr	r3, [pc, #684]	; (80080b8 <_dtoa_r+0x2d8>)
 8007e0a:	21ea      	movs	r1, #234	; 0xea
 8007e0c:	48ab      	ldr	r0, [pc, #684]	; (80080bc <_dtoa_r+0x2dc>)
 8007e0e:	f001 f915 	bl	800903c <__assert_func>
 8007e12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e16:	6005      	str	r5, [r0, #0]
 8007e18:	60c5      	str	r5, [r0, #12]
 8007e1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e1c:	6819      	ldr	r1, [r3, #0]
 8007e1e:	b151      	cbz	r1, 8007e36 <_dtoa_r+0x56>
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	604a      	str	r2, [r1, #4]
 8007e24:	2301      	movs	r3, #1
 8007e26:	4093      	lsls	r3, r2
 8007e28:	608b      	str	r3, [r1, #8]
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f000 fdb8 	bl	80089a0 <_Bfree>
 8007e30:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	f1b9 0300 	subs.w	r3, r9, #0
 8007e3a:	bfbb      	ittet	lt
 8007e3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e40:	9303      	strlt	r3, [sp, #12]
 8007e42:	2300      	movge	r3, #0
 8007e44:	2201      	movlt	r2, #1
 8007e46:	bfac      	ite	ge
 8007e48:	6023      	strge	r3, [r4, #0]
 8007e4a:	6022      	strlt	r2, [r4, #0]
 8007e4c:	4b9c      	ldr	r3, [pc, #624]	; (80080c0 <_dtoa_r+0x2e0>)
 8007e4e:	9c03      	ldr	r4, [sp, #12]
 8007e50:	43a3      	bics	r3, r4
 8007e52:	d11a      	bne.n	8007e8a <_dtoa_r+0xaa>
 8007e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e56:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007e60:	ea53 0308 	orrs.w	r3, r3, r8
 8007e64:	f000 8512 	beq.w	800888c <_dtoa_r+0xaac>
 8007e68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e6a:	b953      	cbnz	r3, 8007e82 <_dtoa_r+0xa2>
 8007e6c:	4b95      	ldr	r3, [pc, #596]	; (80080c4 <_dtoa_r+0x2e4>)
 8007e6e:	e01f      	b.n	8007eb0 <_dtoa_r+0xd0>
 8007e70:	4b95      	ldr	r3, [pc, #596]	; (80080c8 <_dtoa_r+0x2e8>)
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	3308      	adds	r3, #8
 8007e76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	9800      	ldr	r0, [sp, #0]
 8007e7c:	b015      	add	sp, #84	; 0x54
 8007e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e82:	4b90      	ldr	r3, [pc, #576]	; (80080c4 <_dtoa_r+0x2e4>)
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	3303      	adds	r3, #3
 8007e88:	e7f5      	b.n	8007e76 <_dtoa_r+0x96>
 8007e8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e96:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007e9a:	d10b      	bne.n	8007eb4 <_dtoa_r+0xd4>
 8007e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 84ee 	beq.w	8008886 <_dtoa_r+0xaa6>
 8007eaa:	4888      	ldr	r0, [pc, #544]	; (80080cc <_dtoa_r+0x2ec>)
 8007eac:	6018      	str	r0, [r3, #0]
 8007eae:	1e43      	subs	r3, r0, #1
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	e7e2      	b.n	8007e7a <_dtoa_r+0x9a>
 8007eb4:	a913      	add	r1, sp, #76	; 0x4c
 8007eb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007eba:	aa12      	add	r2, sp, #72	; 0x48
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f001 f851 	bl	8008f64 <__d2b>
 8007ec2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007eca:	2900      	cmp	r1, #0
 8007ecc:	d047      	beq.n	8007f5e <_dtoa_r+0x17e>
 8007ece:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007ed0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007ed4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ed8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007edc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ee0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007ee4:	2400      	movs	r4, #0
 8007ee6:	ec43 2b16 	vmov	d6, r2, r3
 8007eea:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007eee:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80080a0 <_dtoa_r+0x2c0>
 8007ef2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007ef6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80080a8 <_dtoa_r+0x2c8>
 8007efa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007efe:	eeb0 7b46 	vmov.f64	d7, d6
 8007f02:	ee06 1a90 	vmov	s13, r1
 8007f06:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007f0a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80080b0 <_dtoa_r+0x2d0>
 8007f0e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007f12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007f16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f1e:	ee16 ba90 	vmov	fp, s13
 8007f22:	9411      	str	r4, [sp, #68]	; 0x44
 8007f24:	d508      	bpl.n	8007f38 <_dtoa_r+0x158>
 8007f26:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007f2a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f32:	bf18      	it	ne
 8007f34:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007f38:	f1bb 0f16 	cmp.w	fp, #22
 8007f3c:	d832      	bhi.n	8007fa4 <_dtoa_r+0x1c4>
 8007f3e:	4b64      	ldr	r3, [pc, #400]	; (80080d0 <_dtoa_r+0x2f0>)
 8007f40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f44:	ed93 7b00 	vldr	d7, [r3]
 8007f48:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007f4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f54:	d501      	bpl.n	8007f5a <_dtoa_r+0x17a>
 8007f56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e023      	b.n	8007fa6 <_dtoa_r+0x1c6>
 8007f5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f60:	4401      	add	r1, r0
 8007f62:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	bfc3      	ittte	gt
 8007f6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f6e:	fa04 f303 	lslgt.w	r3, r4, r3
 8007f72:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007f76:	f1c3 0320 	rsble	r3, r3, #32
 8007f7a:	bfc6      	itte	gt
 8007f7c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007f80:	ea43 0308 	orrgt.w	r3, r3, r8
 8007f84:	fa08 f303 	lslle.w	r3, r8, r3
 8007f88:	ee07 3a90 	vmov	s15, r3
 8007f8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f90:	3901      	subs	r1, #1
 8007f92:	ed8d 7b00 	vstr	d7, [sp]
 8007f96:	9c01      	ldr	r4, [sp, #4]
 8007f98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f9c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007fa0:	2401      	movs	r4, #1
 8007fa2:	e7a0      	b.n	8007ee6 <_dtoa_r+0x106>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fa8:	1a43      	subs	r3, r0, r1
 8007faa:	1e5a      	subs	r2, r3, #1
 8007fac:	bf45      	ittet	mi
 8007fae:	f1c3 0301 	rsbmi	r3, r3, #1
 8007fb2:	9305      	strmi	r3, [sp, #20]
 8007fb4:	2300      	movpl	r3, #0
 8007fb6:	2300      	movmi	r3, #0
 8007fb8:	9206      	str	r2, [sp, #24]
 8007fba:	bf54      	ite	pl
 8007fbc:	9305      	strpl	r3, [sp, #20]
 8007fbe:	9306      	strmi	r3, [sp, #24]
 8007fc0:	f1bb 0f00 	cmp.w	fp, #0
 8007fc4:	db18      	blt.n	8007ff8 <_dtoa_r+0x218>
 8007fc6:	9b06      	ldr	r3, [sp, #24]
 8007fc8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007fcc:	445b      	add	r3, fp
 8007fce:	9306      	str	r3, [sp, #24]
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	9a07      	ldr	r2, [sp, #28]
 8007fd4:	2a09      	cmp	r2, #9
 8007fd6:	d849      	bhi.n	800806c <_dtoa_r+0x28c>
 8007fd8:	2a05      	cmp	r2, #5
 8007fda:	bfc4      	itt	gt
 8007fdc:	3a04      	subgt	r2, #4
 8007fde:	9207      	strgt	r2, [sp, #28]
 8007fe0:	9a07      	ldr	r2, [sp, #28]
 8007fe2:	f1a2 0202 	sub.w	r2, r2, #2
 8007fe6:	bfcc      	ite	gt
 8007fe8:	2400      	movgt	r4, #0
 8007fea:	2401      	movle	r4, #1
 8007fec:	2a03      	cmp	r2, #3
 8007fee:	d848      	bhi.n	8008082 <_dtoa_r+0x2a2>
 8007ff0:	e8df f002 	tbb	[pc, r2]
 8007ff4:	3a2c2e0b 	.word	0x3a2c2e0b
 8007ff8:	9b05      	ldr	r3, [sp, #20]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	eba3 030b 	sub.w	r3, r3, fp
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	920e      	str	r2, [sp, #56]	; 0x38
 8008004:	f1cb 0300 	rsb	r3, fp, #0
 8008008:	e7e3      	b.n	8007fd2 <_dtoa_r+0x1f2>
 800800a:	2200      	movs	r2, #0
 800800c:	9208      	str	r2, [sp, #32]
 800800e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008010:	2a00      	cmp	r2, #0
 8008012:	dc39      	bgt.n	8008088 <_dtoa_r+0x2a8>
 8008014:	f04f 0a01 	mov.w	sl, #1
 8008018:	46d1      	mov	r9, sl
 800801a:	4652      	mov	r2, sl
 800801c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008020:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008022:	2100      	movs	r1, #0
 8008024:	6079      	str	r1, [r7, #4]
 8008026:	2004      	movs	r0, #4
 8008028:	f100 0c14 	add.w	ip, r0, #20
 800802c:	4594      	cmp	ip, r2
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	d92f      	bls.n	8008092 <_dtoa_r+0x2b2>
 8008032:	4630      	mov	r0, r6
 8008034:	930c      	str	r3, [sp, #48]	; 0x30
 8008036:	f000 fc73 	bl	8008920 <_Balloc>
 800803a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800803c:	9000      	str	r0, [sp, #0]
 800803e:	4602      	mov	r2, r0
 8008040:	2800      	cmp	r0, #0
 8008042:	d149      	bne.n	80080d8 <_dtoa_r+0x2f8>
 8008044:	4b23      	ldr	r3, [pc, #140]	; (80080d4 <_dtoa_r+0x2f4>)
 8008046:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800804a:	e6df      	b.n	8007e0c <_dtoa_r+0x2c>
 800804c:	2201      	movs	r2, #1
 800804e:	e7dd      	b.n	800800c <_dtoa_r+0x22c>
 8008050:	2200      	movs	r2, #0
 8008052:	9208      	str	r2, [sp, #32]
 8008054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008056:	eb0b 0a02 	add.w	sl, fp, r2
 800805a:	f10a 0901 	add.w	r9, sl, #1
 800805e:	464a      	mov	r2, r9
 8008060:	2a01      	cmp	r2, #1
 8008062:	bfb8      	it	lt
 8008064:	2201      	movlt	r2, #1
 8008066:	e7db      	b.n	8008020 <_dtoa_r+0x240>
 8008068:	2201      	movs	r2, #1
 800806a:	e7f2      	b.n	8008052 <_dtoa_r+0x272>
 800806c:	2401      	movs	r4, #1
 800806e:	2200      	movs	r2, #0
 8008070:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008074:	f04f 3aff 	mov.w	sl, #4294967295
 8008078:	2100      	movs	r1, #0
 800807a:	46d1      	mov	r9, sl
 800807c:	2212      	movs	r2, #18
 800807e:	9109      	str	r1, [sp, #36]	; 0x24
 8008080:	e7ce      	b.n	8008020 <_dtoa_r+0x240>
 8008082:	2201      	movs	r2, #1
 8008084:	9208      	str	r2, [sp, #32]
 8008086:	e7f5      	b.n	8008074 <_dtoa_r+0x294>
 8008088:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800808c:	46d1      	mov	r9, sl
 800808e:	4652      	mov	r2, sl
 8008090:	e7c6      	b.n	8008020 <_dtoa_r+0x240>
 8008092:	3101      	adds	r1, #1
 8008094:	6079      	str	r1, [r7, #4]
 8008096:	0040      	lsls	r0, r0, #1
 8008098:	e7c6      	b.n	8008028 <_dtoa_r+0x248>
 800809a:	bf00      	nop
 800809c:	f3af 8000 	nop.w
 80080a0:	636f4361 	.word	0x636f4361
 80080a4:	3fd287a7 	.word	0x3fd287a7
 80080a8:	8b60c8b3 	.word	0x8b60c8b3
 80080ac:	3fc68a28 	.word	0x3fc68a28
 80080b0:	509f79fb 	.word	0x509f79fb
 80080b4:	3fd34413 	.word	0x3fd34413
 80080b8:	08009bc5 	.word	0x08009bc5
 80080bc:	08009bdc 	.word	0x08009bdc
 80080c0:	7ff00000 	.word	0x7ff00000
 80080c4:	08009bc1 	.word	0x08009bc1
 80080c8:	08009bb8 	.word	0x08009bb8
 80080cc:	08009b95 	.word	0x08009b95
 80080d0:	08009cd8 	.word	0x08009cd8
 80080d4:	08009c3b 	.word	0x08009c3b
 80080d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80080da:	9900      	ldr	r1, [sp, #0]
 80080dc:	6011      	str	r1, [r2, #0]
 80080de:	f1b9 0f0e 	cmp.w	r9, #14
 80080e2:	d872      	bhi.n	80081ca <_dtoa_r+0x3ea>
 80080e4:	2c00      	cmp	r4, #0
 80080e6:	d070      	beq.n	80081ca <_dtoa_r+0x3ea>
 80080e8:	f1bb 0f00 	cmp.w	fp, #0
 80080ec:	f340 80a6 	ble.w	800823c <_dtoa_r+0x45c>
 80080f0:	49ca      	ldr	r1, [pc, #808]	; (800841c <_dtoa_r+0x63c>)
 80080f2:	f00b 020f 	and.w	r2, fp, #15
 80080f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80080fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80080fe:	ed92 7b00 	vldr	d7, [r2]
 8008102:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008106:	f000 808d 	beq.w	8008224 <_dtoa_r+0x444>
 800810a:	4ac5      	ldr	r2, [pc, #788]	; (8008420 <_dtoa_r+0x640>)
 800810c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008110:	ed92 6b08 	vldr	d6, [r2, #32]
 8008114:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008118:	ed8d 6b02 	vstr	d6, [sp, #8]
 800811c:	f001 010f 	and.w	r1, r1, #15
 8008120:	2203      	movs	r2, #3
 8008122:	48bf      	ldr	r0, [pc, #764]	; (8008420 <_dtoa_r+0x640>)
 8008124:	2900      	cmp	r1, #0
 8008126:	d17f      	bne.n	8008228 <_dtoa_r+0x448>
 8008128:	ed9d 6b02 	vldr	d6, [sp, #8]
 800812c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008130:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008134:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008136:	2900      	cmp	r1, #0
 8008138:	f000 80b2 	beq.w	80082a0 <_dtoa_r+0x4c0>
 800813c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008140:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008144:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814c:	f140 80a8 	bpl.w	80082a0 <_dtoa_r+0x4c0>
 8008150:	f1b9 0f00 	cmp.w	r9, #0
 8008154:	f000 80a4 	beq.w	80082a0 <_dtoa_r+0x4c0>
 8008158:	f1ba 0f00 	cmp.w	sl, #0
 800815c:	dd31      	ble.n	80081c2 <_dtoa_r+0x3e2>
 800815e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008162:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008166:	ed8d 7b02 	vstr	d7, [sp, #8]
 800816a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800816e:	3201      	adds	r2, #1
 8008170:	4650      	mov	r0, sl
 8008172:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008176:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800817a:	ee07 2a90 	vmov	s15, r2
 800817e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008182:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008186:	ed8d 5b02 	vstr	d5, [sp, #8]
 800818a:	9c03      	ldr	r4, [sp, #12]
 800818c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008190:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008194:	2800      	cmp	r0, #0
 8008196:	f040 8086 	bne.w	80082a6 <_dtoa_r+0x4c6>
 800819a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800819e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80081a2:	ec42 1b17 	vmov	d7, r1, r2
 80081a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ae:	f300 8272 	bgt.w	8008696 <_dtoa_r+0x8b6>
 80081b2:	eeb1 7b47 	vneg.f64	d7, d7
 80081b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081be:	f100 8267 	bmi.w	8008690 <_dtoa_r+0x8b0>
 80081c2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80081c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80081ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081cc:	2a00      	cmp	r2, #0
 80081ce:	f2c0 8129 	blt.w	8008424 <_dtoa_r+0x644>
 80081d2:	f1bb 0f0e 	cmp.w	fp, #14
 80081d6:	f300 8125 	bgt.w	8008424 <_dtoa_r+0x644>
 80081da:	4b90      	ldr	r3, [pc, #576]	; (800841c <_dtoa_r+0x63c>)
 80081dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80081e0:	ed93 6b00 	vldr	d6, [r3]
 80081e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f280 80c3 	bge.w	8008372 <_dtoa_r+0x592>
 80081ec:	f1b9 0f00 	cmp.w	r9, #0
 80081f0:	f300 80bf 	bgt.w	8008372 <_dtoa_r+0x592>
 80081f4:	f040 824c 	bne.w	8008690 <_dtoa_r+0x8b0>
 80081f8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80081fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008200:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008204:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820c:	464c      	mov	r4, r9
 800820e:	464f      	mov	r7, r9
 8008210:	f280 8222 	bge.w	8008658 <_dtoa_r+0x878>
 8008214:	f8dd 8000 	ldr.w	r8, [sp]
 8008218:	2331      	movs	r3, #49	; 0x31
 800821a:	f808 3b01 	strb.w	r3, [r8], #1
 800821e:	f10b 0b01 	add.w	fp, fp, #1
 8008222:	e21e      	b.n	8008662 <_dtoa_r+0x882>
 8008224:	2202      	movs	r2, #2
 8008226:	e77c      	b.n	8008122 <_dtoa_r+0x342>
 8008228:	07cc      	lsls	r4, r1, #31
 800822a:	d504      	bpl.n	8008236 <_dtoa_r+0x456>
 800822c:	ed90 6b00 	vldr	d6, [r0]
 8008230:	3201      	adds	r2, #1
 8008232:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008236:	1049      	asrs	r1, r1, #1
 8008238:	3008      	adds	r0, #8
 800823a:	e773      	b.n	8008124 <_dtoa_r+0x344>
 800823c:	d02e      	beq.n	800829c <_dtoa_r+0x4bc>
 800823e:	f1cb 0100 	rsb	r1, fp, #0
 8008242:	4a76      	ldr	r2, [pc, #472]	; (800841c <_dtoa_r+0x63c>)
 8008244:	f001 000f 	and.w	r0, r1, #15
 8008248:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800824c:	ed92 7b00 	vldr	d7, [r2]
 8008250:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008254:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008258:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800825c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008260:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008264:	486e      	ldr	r0, [pc, #440]	; (8008420 <_dtoa_r+0x640>)
 8008266:	1109      	asrs	r1, r1, #4
 8008268:	2400      	movs	r4, #0
 800826a:	2202      	movs	r2, #2
 800826c:	b939      	cbnz	r1, 800827e <_dtoa_r+0x49e>
 800826e:	2c00      	cmp	r4, #0
 8008270:	f43f af60 	beq.w	8008134 <_dtoa_r+0x354>
 8008274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800827c:	e75a      	b.n	8008134 <_dtoa_r+0x354>
 800827e:	07cf      	lsls	r7, r1, #31
 8008280:	d509      	bpl.n	8008296 <_dtoa_r+0x4b6>
 8008282:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008286:	ed90 7b00 	vldr	d7, [r0]
 800828a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800828e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008292:	3201      	adds	r2, #1
 8008294:	2401      	movs	r4, #1
 8008296:	1049      	asrs	r1, r1, #1
 8008298:	3008      	adds	r0, #8
 800829a:	e7e7      	b.n	800826c <_dtoa_r+0x48c>
 800829c:	2202      	movs	r2, #2
 800829e:	e749      	b.n	8008134 <_dtoa_r+0x354>
 80082a0:	465f      	mov	r7, fp
 80082a2:	4648      	mov	r0, r9
 80082a4:	e765      	b.n	8008172 <_dtoa_r+0x392>
 80082a6:	ec42 1b17 	vmov	d7, r1, r2
 80082aa:	4a5c      	ldr	r2, [pc, #368]	; (800841c <_dtoa_r+0x63c>)
 80082ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80082b0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80082b4:	9a00      	ldr	r2, [sp, #0]
 80082b6:	1814      	adds	r4, r2, r0
 80082b8:	9a08      	ldr	r2, [sp, #32]
 80082ba:	b352      	cbz	r2, 8008312 <_dtoa_r+0x532>
 80082bc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80082c0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80082c4:	f8dd 8000 	ldr.w	r8, [sp]
 80082c8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80082cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80082d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80082d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80082d8:	ee14 2a90 	vmov	r2, s9
 80082dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80082e0:	3230      	adds	r2, #48	; 0x30
 80082e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80082e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ee:	f808 2b01 	strb.w	r2, [r8], #1
 80082f2:	d439      	bmi.n	8008368 <_dtoa_r+0x588>
 80082f4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80082f8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80082fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008300:	d472      	bmi.n	80083e8 <_dtoa_r+0x608>
 8008302:	45a0      	cmp	r8, r4
 8008304:	f43f af5d 	beq.w	80081c2 <_dtoa_r+0x3e2>
 8008308:	ee27 7b03 	vmul.f64	d7, d7, d3
 800830c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008310:	e7e0      	b.n	80082d4 <_dtoa_r+0x4f4>
 8008312:	f8dd 8000 	ldr.w	r8, [sp]
 8008316:	ee27 7b04 	vmul.f64	d7, d7, d4
 800831a:	4621      	mov	r1, r4
 800831c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008320:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008324:	ee14 2a90 	vmov	r2, s9
 8008328:	3230      	adds	r2, #48	; 0x30
 800832a:	f808 2b01 	strb.w	r2, [r8], #1
 800832e:	45a0      	cmp	r8, r4
 8008330:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008334:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008338:	d118      	bne.n	800836c <_dtoa_r+0x58c>
 800833a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800833e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008342:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834a:	dc4d      	bgt.n	80083e8 <_dtoa_r+0x608>
 800834c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008350:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008358:	f57f af33 	bpl.w	80081c2 <_dtoa_r+0x3e2>
 800835c:	4688      	mov	r8, r1
 800835e:	3901      	subs	r1, #1
 8008360:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008364:	2b30      	cmp	r3, #48	; 0x30
 8008366:	d0f9      	beq.n	800835c <_dtoa_r+0x57c>
 8008368:	46bb      	mov	fp, r7
 800836a:	e02a      	b.n	80083c2 <_dtoa_r+0x5e2>
 800836c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008370:	e7d6      	b.n	8008320 <_dtoa_r+0x540>
 8008372:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008376:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800837a:	f8dd 8000 	ldr.w	r8, [sp]
 800837e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008382:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008386:	ee15 3a10 	vmov	r3, s10
 800838a:	3330      	adds	r3, #48	; 0x30
 800838c:	f808 3b01 	strb.w	r3, [r8], #1
 8008390:	9b00      	ldr	r3, [sp, #0]
 8008392:	eba8 0303 	sub.w	r3, r8, r3
 8008396:	4599      	cmp	r9, r3
 8008398:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800839c:	eea3 7b46 	vfms.f64	d7, d3, d6
 80083a0:	d133      	bne.n	800840a <_dtoa_r+0x62a>
 80083a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80083a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80083aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ae:	dc1a      	bgt.n	80083e6 <_dtoa_r+0x606>
 80083b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80083b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b8:	d103      	bne.n	80083c2 <_dtoa_r+0x5e2>
 80083ba:	ee15 3a10 	vmov	r3, s10
 80083be:	07d9      	lsls	r1, r3, #31
 80083c0:	d411      	bmi.n	80083e6 <_dtoa_r+0x606>
 80083c2:	4629      	mov	r1, r5
 80083c4:	4630      	mov	r0, r6
 80083c6:	f000 faeb 	bl	80089a0 <_Bfree>
 80083ca:	2300      	movs	r3, #0
 80083cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083ce:	f888 3000 	strb.w	r3, [r8]
 80083d2:	f10b 0301 	add.w	r3, fp, #1
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f43f ad4d 	beq.w	8007e7a <_dtoa_r+0x9a>
 80083e0:	f8c3 8000 	str.w	r8, [r3]
 80083e4:	e549      	b.n	8007e7a <_dtoa_r+0x9a>
 80083e6:	465f      	mov	r7, fp
 80083e8:	4643      	mov	r3, r8
 80083ea:	4698      	mov	r8, r3
 80083ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083f0:	2a39      	cmp	r2, #57	; 0x39
 80083f2:	d106      	bne.n	8008402 <_dtoa_r+0x622>
 80083f4:	9a00      	ldr	r2, [sp, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d1f7      	bne.n	80083ea <_dtoa_r+0x60a>
 80083fa:	9900      	ldr	r1, [sp, #0]
 80083fc:	2230      	movs	r2, #48	; 0x30
 80083fe:	3701      	adds	r7, #1
 8008400:	700a      	strb	r2, [r1, #0]
 8008402:	781a      	ldrb	r2, [r3, #0]
 8008404:	3201      	adds	r2, #1
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	e7ae      	b.n	8008368 <_dtoa_r+0x588>
 800840a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800840e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008416:	d1b2      	bne.n	800837e <_dtoa_r+0x59e>
 8008418:	e7d3      	b.n	80083c2 <_dtoa_r+0x5e2>
 800841a:	bf00      	nop
 800841c:	08009cd8 	.word	0x08009cd8
 8008420:	08009cb0 	.word	0x08009cb0
 8008424:	9908      	ldr	r1, [sp, #32]
 8008426:	2900      	cmp	r1, #0
 8008428:	f000 80d1 	beq.w	80085ce <_dtoa_r+0x7ee>
 800842c:	9907      	ldr	r1, [sp, #28]
 800842e:	2901      	cmp	r1, #1
 8008430:	f300 80b4 	bgt.w	800859c <_dtoa_r+0x7bc>
 8008434:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008436:	2900      	cmp	r1, #0
 8008438:	f000 80ac 	beq.w	8008594 <_dtoa_r+0x7b4>
 800843c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008440:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008444:	461c      	mov	r4, r3
 8008446:	930a      	str	r3, [sp, #40]	; 0x28
 8008448:	9b05      	ldr	r3, [sp, #20]
 800844a:	4413      	add	r3, r2
 800844c:	9305      	str	r3, [sp, #20]
 800844e:	9b06      	ldr	r3, [sp, #24]
 8008450:	2101      	movs	r1, #1
 8008452:	4413      	add	r3, r2
 8008454:	4630      	mov	r0, r6
 8008456:	9306      	str	r3, [sp, #24]
 8008458:	f000 fb5e 	bl	8008b18 <__i2b>
 800845c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845e:	4607      	mov	r7, r0
 8008460:	f1b8 0f00 	cmp.w	r8, #0
 8008464:	dd0d      	ble.n	8008482 <_dtoa_r+0x6a2>
 8008466:	9a06      	ldr	r2, [sp, #24]
 8008468:	2a00      	cmp	r2, #0
 800846a:	dd0a      	ble.n	8008482 <_dtoa_r+0x6a2>
 800846c:	4542      	cmp	r2, r8
 800846e:	9905      	ldr	r1, [sp, #20]
 8008470:	bfa8      	it	ge
 8008472:	4642      	movge	r2, r8
 8008474:	1a89      	subs	r1, r1, r2
 8008476:	9105      	str	r1, [sp, #20]
 8008478:	9906      	ldr	r1, [sp, #24]
 800847a:	eba8 0802 	sub.w	r8, r8, r2
 800847e:	1a8a      	subs	r2, r1, r2
 8008480:	9206      	str	r2, [sp, #24]
 8008482:	b303      	cbz	r3, 80084c6 <_dtoa_r+0x6e6>
 8008484:	9a08      	ldr	r2, [sp, #32]
 8008486:	2a00      	cmp	r2, #0
 8008488:	f000 80a6 	beq.w	80085d8 <_dtoa_r+0x7f8>
 800848c:	2c00      	cmp	r4, #0
 800848e:	dd13      	ble.n	80084b8 <_dtoa_r+0x6d8>
 8008490:	4639      	mov	r1, r7
 8008492:	4622      	mov	r2, r4
 8008494:	4630      	mov	r0, r6
 8008496:	930c      	str	r3, [sp, #48]	; 0x30
 8008498:	f000 fbfa 	bl	8008c90 <__pow5mult>
 800849c:	462a      	mov	r2, r5
 800849e:	4601      	mov	r1, r0
 80084a0:	4607      	mov	r7, r0
 80084a2:	4630      	mov	r0, r6
 80084a4:	f000 fb4e 	bl	8008b44 <__multiply>
 80084a8:	4629      	mov	r1, r5
 80084aa:	900a      	str	r0, [sp, #40]	; 0x28
 80084ac:	4630      	mov	r0, r6
 80084ae:	f000 fa77 	bl	80089a0 <_Bfree>
 80084b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b6:	4615      	mov	r5, r2
 80084b8:	1b1a      	subs	r2, r3, r4
 80084ba:	d004      	beq.n	80084c6 <_dtoa_r+0x6e6>
 80084bc:	4629      	mov	r1, r5
 80084be:	4630      	mov	r0, r6
 80084c0:	f000 fbe6 	bl	8008c90 <__pow5mult>
 80084c4:	4605      	mov	r5, r0
 80084c6:	2101      	movs	r1, #1
 80084c8:	4630      	mov	r0, r6
 80084ca:	f000 fb25 	bl	8008b18 <__i2b>
 80084ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	4604      	mov	r4, r0
 80084d4:	f340 8082 	ble.w	80085dc <_dtoa_r+0x7fc>
 80084d8:	461a      	mov	r2, r3
 80084da:	4601      	mov	r1, r0
 80084dc:	4630      	mov	r0, r6
 80084de:	f000 fbd7 	bl	8008c90 <__pow5mult>
 80084e2:	9b07      	ldr	r3, [sp, #28]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	4604      	mov	r4, r0
 80084e8:	dd7b      	ble.n	80085e2 <_dtoa_r+0x802>
 80084ea:	2300      	movs	r3, #0
 80084ec:	930a      	str	r3, [sp, #40]	; 0x28
 80084ee:	6922      	ldr	r2, [r4, #16]
 80084f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80084f4:	6910      	ldr	r0, [r2, #16]
 80084f6:	f000 fabf 	bl	8008a78 <__hi0bits>
 80084fa:	f1c0 0020 	rsb	r0, r0, #32
 80084fe:	9b06      	ldr	r3, [sp, #24]
 8008500:	4418      	add	r0, r3
 8008502:	f010 001f 	ands.w	r0, r0, #31
 8008506:	f000 808d 	beq.w	8008624 <_dtoa_r+0x844>
 800850a:	f1c0 0220 	rsb	r2, r0, #32
 800850e:	2a04      	cmp	r2, #4
 8008510:	f340 8086 	ble.w	8008620 <_dtoa_r+0x840>
 8008514:	f1c0 001c 	rsb	r0, r0, #28
 8008518:	9b05      	ldr	r3, [sp, #20]
 800851a:	4403      	add	r3, r0
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	9b06      	ldr	r3, [sp, #24]
 8008520:	4403      	add	r3, r0
 8008522:	4480      	add	r8, r0
 8008524:	9306      	str	r3, [sp, #24]
 8008526:	9b05      	ldr	r3, [sp, #20]
 8008528:	2b00      	cmp	r3, #0
 800852a:	dd05      	ble.n	8008538 <_dtoa_r+0x758>
 800852c:	4629      	mov	r1, r5
 800852e:	461a      	mov	r2, r3
 8008530:	4630      	mov	r0, r6
 8008532:	f000 fc07 	bl	8008d44 <__lshift>
 8008536:	4605      	mov	r5, r0
 8008538:	9b06      	ldr	r3, [sp, #24]
 800853a:	2b00      	cmp	r3, #0
 800853c:	dd05      	ble.n	800854a <_dtoa_r+0x76a>
 800853e:	4621      	mov	r1, r4
 8008540:	461a      	mov	r2, r3
 8008542:	4630      	mov	r0, r6
 8008544:	f000 fbfe 	bl	8008d44 <__lshift>
 8008548:	4604      	mov	r4, r0
 800854a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d06b      	beq.n	8008628 <_dtoa_r+0x848>
 8008550:	4621      	mov	r1, r4
 8008552:	4628      	mov	r0, r5
 8008554:	f000 fc62 	bl	8008e1c <__mcmp>
 8008558:	2800      	cmp	r0, #0
 800855a:	da65      	bge.n	8008628 <_dtoa_r+0x848>
 800855c:	2300      	movs	r3, #0
 800855e:	4629      	mov	r1, r5
 8008560:	220a      	movs	r2, #10
 8008562:	4630      	mov	r0, r6
 8008564:	f000 fa3e 	bl	80089e4 <__multadd>
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800856e:	4605      	mov	r5, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 8192 	beq.w	800889a <_dtoa_r+0xaba>
 8008576:	4639      	mov	r1, r7
 8008578:	2300      	movs	r3, #0
 800857a:	220a      	movs	r2, #10
 800857c:	4630      	mov	r0, r6
 800857e:	f000 fa31 	bl	80089e4 <__multadd>
 8008582:	f1ba 0f00 	cmp.w	sl, #0
 8008586:	4607      	mov	r7, r0
 8008588:	f300 808e 	bgt.w	80086a8 <_dtoa_r+0x8c8>
 800858c:	9b07      	ldr	r3, [sp, #28]
 800858e:	2b02      	cmp	r3, #2
 8008590:	dc51      	bgt.n	8008636 <_dtoa_r+0x856>
 8008592:	e089      	b.n	80086a8 <_dtoa_r+0x8c8>
 8008594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008596:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800859a:	e751      	b.n	8008440 <_dtoa_r+0x660>
 800859c:	f109 34ff 	add.w	r4, r9, #4294967295
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	bfbf      	itttt	lt
 80085a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80085a6:	1ae3      	sublt	r3, r4, r3
 80085a8:	18d2      	addlt	r2, r2, r3
 80085aa:	4613      	movlt	r3, r2
 80085ac:	bfb7      	itett	lt
 80085ae:	930e      	strlt	r3, [sp, #56]	; 0x38
 80085b0:	1b1c      	subge	r4, r3, r4
 80085b2:	4623      	movlt	r3, r4
 80085b4:	2400      	movlt	r4, #0
 80085b6:	f1b9 0f00 	cmp.w	r9, #0
 80085ba:	bfb5      	itete	lt
 80085bc:	9a05      	ldrlt	r2, [sp, #20]
 80085be:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80085c2:	eba2 0809 	sublt.w	r8, r2, r9
 80085c6:	464a      	movge	r2, r9
 80085c8:	bfb8      	it	lt
 80085ca:	2200      	movlt	r2, #0
 80085cc:	e73b      	b.n	8008446 <_dtoa_r+0x666>
 80085ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80085d2:	9f08      	ldr	r7, [sp, #32]
 80085d4:	461c      	mov	r4, r3
 80085d6:	e743      	b.n	8008460 <_dtoa_r+0x680>
 80085d8:	461a      	mov	r2, r3
 80085da:	e76f      	b.n	80084bc <_dtoa_r+0x6dc>
 80085dc:	9b07      	ldr	r3, [sp, #28]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	dc18      	bgt.n	8008614 <_dtoa_r+0x834>
 80085e2:	9b02      	ldr	r3, [sp, #8]
 80085e4:	b9b3      	cbnz	r3, 8008614 <_dtoa_r+0x834>
 80085e6:	9b03      	ldr	r3, [sp, #12]
 80085e8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80085ec:	b9a2      	cbnz	r2, 8008618 <_dtoa_r+0x838>
 80085ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085f2:	0d12      	lsrs	r2, r2, #20
 80085f4:	0512      	lsls	r2, r2, #20
 80085f6:	b18a      	cbz	r2, 800861c <_dtoa_r+0x83c>
 80085f8:	9b05      	ldr	r3, [sp, #20]
 80085fa:	3301      	adds	r3, #1
 80085fc:	9305      	str	r3, [sp, #20]
 80085fe:	9b06      	ldr	r3, [sp, #24]
 8008600:	3301      	adds	r3, #1
 8008602:	9306      	str	r3, [sp, #24]
 8008604:	2301      	movs	r3, #1
 8008606:	930a      	str	r3, [sp, #40]	; 0x28
 8008608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800860a:	2b00      	cmp	r3, #0
 800860c:	f47f af6f 	bne.w	80084ee <_dtoa_r+0x70e>
 8008610:	2001      	movs	r0, #1
 8008612:	e774      	b.n	80084fe <_dtoa_r+0x71e>
 8008614:	2300      	movs	r3, #0
 8008616:	e7f6      	b.n	8008606 <_dtoa_r+0x826>
 8008618:	9b02      	ldr	r3, [sp, #8]
 800861a:	e7f4      	b.n	8008606 <_dtoa_r+0x826>
 800861c:	920a      	str	r2, [sp, #40]	; 0x28
 800861e:	e7f3      	b.n	8008608 <_dtoa_r+0x828>
 8008620:	d081      	beq.n	8008526 <_dtoa_r+0x746>
 8008622:	4610      	mov	r0, r2
 8008624:	301c      	adds	r0, #28
 8008626:	e777      	b.n	8008518 <_dtoa_r+0x738>
 8008628:	f1b9 0f00 	cmp.w	r9, #0
 800862c:	dc37      	bgt.n	800869e <_dtoa_r+0x8be>
 800862e:	9b07      	ldr	r3, [sp, #28]
 8008630:	2b02      	cmp	r3, #2
 8008632:	dd34      	ble.n	800869e <_dtoa_r+0x8be>
 8008634:	46ca      	mov	sl, r9
 8008636:	f1ba 0f00 	cmp.w	sl, #0
 800863a:	d10d      	bne.n	8008658 <_dtoa_r+0x878>
 800863c:	4621      	mov	r1, r4
 800863e:	4653      	mov	r3, sl
 8008640:	2205      	movs	r2, #5
 8008642:	4630      	mov	r0, r6
 8008644:	f000 f9ce 	bl	80089e4 <__multadd>
 8008648:	4601      	mov	r1, r0
 800864a:	4604      	mov	r4, r0
 800864c:	4628      	mov	r0, r5
 800864e:	f000 fbe5 	bl	8008e1c <__mcmp>
 8008652:	2800      	cmp	r0, #0
 8008654:	f73f adde 	bgt.w	8008214 <_dtoa_r+0x434>
 8008658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800865a:	f8dd 8000 	ldr.w	r8, [sp]
 800865e:	ea6f 0b03 	mvn.w	fp, r3
 8008662:	f04f 0900 	mov.w	r9, #0
 8008666:	4621      	mov	r1, r4
 8008668:	4630      	mov	r0, r6
 800866a:	f000 f999 	bl	80089a0 <_Bfree>
 800866e:	2f00      	cmp	r7, #0
 8008670:	f43f aea7 	beq.w	80083c2 <_dtoa_r+0x5e2>
 8008674:	f1b9 0f00 	cmp.w	r9, #0
 8008678:	d005      	beq.n	8008686 <_dtoa_r+0x8a6>
 800867a:	45b9      	cmp	r9, r7
 800867c:	d003      	beq.n	8008686 <_dtoa_r+0x8a6>
 800867e:	4649      	mov	r1, r9
 8008680:	4630      	mov	r0, r6
 8008682:	f000 f98d 	bl	80089a0 <_Bfree>
 8008686:	4639      	mov	r1, r7
 8008688:	4630      	mov	r0, r6
 800868a:	f000 f989 	bl	80089a0 <_Bfree>
 800868e:	e698      	b.n	80083c2 <_dtoa_r+0x5e2>
 8008690:	2400      	movs	r4, #0
 8008692:	4627      	mov	r7, r4
 8008694:	e7e0      	b.n	8008658 <_dtoa_r+0x878>
 8008696:	46bb      	mov	fp, r7
 8008698:	4604      	mov	r4, r0
 800869a:	4607      	mov	r7, r0
 800869c:	e5ba      	b.n	8008214 <_dtoa_r+0x434>
 800869e:	9b08      	ldr	r3, [sp, #32]
 80086a0:	46ca      	mov	sl, r9
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 8100 	beq.w	80088a8 <_dtoa_r+0xac8>
 80086a8:	f1b8 0f00 	cmp.w	r8, #0
 80086ac:	dd05      	ble.n	80086ba <_dtoa_r+0x8da>
 80086ae:	4639      	mov	r1, r7
 80086b0:	4642      	mov	r2, r8
 80086b2:	4630      	mov	r0, r6
 80086b4:	f000 fb46 	bl	8008d44 <__lshift>
 80086b8:	4607      	mov	r7, r0
 80086ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d05d      	beq.n	800877c <_dtoa_r+0x99c>
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	4630      	mov	r0, r6
 80086c4:	f000 f92c 	bl	8008920 <_Balloc>
 80086c8:	4680      	mov	r8, r0
 80086ca:	b928      	cbnz	r0, 80086d8 <_dtoa_r+0x8f8>
 80086cc:	4b82      	ldr	r3, [pc, #520]	; (80088d8 <_dtoa_r+0xaf8>)
 80086ce:	4602      	mov	r2, r0
 80086d0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086d4:	f7ff bb9a 	b.w	8007e0c <_dtoa_r+0x2c>
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	3202      	adds	r2, #2
 80086dc:	0092      	lsls	r2, r2, #2
 80086de:	f107 010c 	add.w	r1, r7, #12
 80086e2:	300c      	adds	r0, #12
 80086e4:	f000 f902 	bl	80088ec <memcpy>
 80086e8:	2201      	movs	r2, #1
 80086ea:	4641      	mov	r1, r8
 80086ec:	4630      	mov	r0, r6
 80086ee:	f000 fb29 	bl	8008d44 <__lshift>
 80086f2:	9b00      	ldr	r3, [sp, #0]
 80086f4:	3301      	adds	r3, #1
 80086f6:	9305      	str	r3, [sp, #20]
 80086f8:	9b00      	ldr	r3, [sp, #0]
 80086fa:	4453      	add	r3, sl
 80086fc:	9309      	str	r3, [sp, #36]	; 0x24
 80086fe:	9b02      	ldr	r3, [sp, #8]
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	46b9      	mov	r9, r7
 8008706:	9308      	str	r3, [sp, #32]
 8008708:	4607      	mov	r7, r0
 800870a:	9b05      	ldr	r3, [sp, #20]
 800870c:	4621      	mov	r1, r4
 800870e:	3b01      	subs	r3, #1
 8008710:	4628      	mov	r0, r5
 8008712:	9302      	str	r3, [sp, #8]
 8008714:	f7ff fad6 	bl	8007cc4 <quorem>
 8008718:	4603      	mov	r3, r0
 800871a:	3330      	adds	r3, #48	; 0x30
 800871c:	9006      	str	r0, [sp, #24]
 800871e:	4649      	mov	r1, r9
 8008720:	4628      	mov	r0, r5
 8008722:	930a      	str	r3, [sp, #40]	; 0x28
 8008724:	f000 fb7a 	bl	8008e1c <__mcmp>
 8008728:	463a      	mov	r2, r7
 800872a:	4682      	mov	sl, r0
 800872c:	4621      	mov	r1, r4
 800872e:	4630      	mov	r0, r6
 8008730:	f000 fb90 	bl	8008e54 <__mdiff>
 8008734:	68c2      	ldr	r2, [r0, #12]
 8008736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008738:	4680      	mov	r8, r0
 800873a:	bb0a      	cbnz	r2, 8008780 <_dtoa_r+0x9a0>
 800873c:	4601      	mov	r1, r0
 800873e:	4628      	mov	r0, r5
 8008740:	f000 fb6c 	bl	8008e1c <__mcmp>
 8008744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008746:	4602      	mov	r2, r0
 8008748:	4641      	mov	r1, r8
 800874a:	4630      	mov	r0, r6
 800874c:	920e      	str	r2, [sp, #56]	; 0x38
 800874e:	930a      	str	r3, [sp, #40]	; 0x28
 8008750:	f000 f926 	bl	80089a0 <_Bfree>
 8008754:	9b07      	ldr	r3, [sp, #28]
 8008756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008758:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800875c:	ea43 0102 	orr.w	r1, r3, r2
 8008760:	9b08      	ldr	r3, [sp, #32]
 8008762:	430b      	orrs	r3, r1
 8008764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008766:	d10d      	bne.n	8008784 <_dtoa_r+0x9a4>
 8008768:	2b39      	cmp	r3, #57	; 0x39
 800876a:	d029      	beq.n	80087c0 <_dtoa_r+0x9e0>
 800876c:	f1ba 0f00 	cmp.w	sl, #0
 8008770:	dd01      	ble.n	8008776 <_dtoa_r+0x996>
 8008772:	9b06      	ldr	r3, [sp, #24]
 8008774:	3331      	adds	r3, #49	; 0x31
 8008776:	9a02      	ldr	r2, [sp, #8]
 8008778:	7013      	strb	r3, [r2, #0]
 800877a:	e774      	b.n	8008666 <_dtoa_r+0x886>
 800877c:	4638      	mov	r0, r7
 800877e:	e7b8      	b.n	80086f2 <_dtoa_r+0x912>
 8008780:	2201      	movs	r2, #1
 8008782:	e7e1      	b.n	8008748 <_dtoa_r+0x968>
 8008784:	f1ba 0f00 	cmp.w	sl, #0
 8008788:	db06      	blt.n	8008798 <_dtoa_r+0x9b8>
 800878a:	9907      	ldr	r1, [sp, #28]
 800878c:	ea41 0a0a 	orr.w	sl, r1, sl
 8008790:	9908      	ldr	r1, [sp, #32]
 8008792:	ea5a 0101 	orrs.w	r1, sl, r1
 8008796:	d120      	bne.n	80087da <_dtoa_r+0x9fa>
 8008798:	2a00      	cmp	r2, #0
 800879a:	ddec      	ble.n	8008776 <_dtoa_r+0x996>
 800879c:	4629      	mov	r1, r5
 800879e:	2201      	movs	r2, #1
 80087a0:	4630      	mov	r0, r6
 80087a2:	9305      	str	r3, [sp, #20]
 80087a4:	f000 face 	bl	8008d44 <__lshift>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4605      	mov	r5, r0
 80087ac:	f000 fb36 	bl	8008e1c <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	9b05      	ldr	r3, [sp, #20]
 80087b4:	dc02      	bgt.n	80087bc <_dtoa_r+0x9dc>
 80087b6:	d1de      	bne.n	8008776 <_dtoa_r+0x996>
 80087b8:	07da      	lsls	r2, r3, #31
 80087ba:	d5dc      	bpl.n	8008776 <_dtoa_r+0x996>
 80087bc:	2b39      	cmp	r3, #57	; 0x39
 80087be:	d1d8      	bne.n	8008772 <_dtoa_r+0x992>
 80087c0:	9a02      	ldr	r2, [sp, #8]
 80087c2:	2339      	movs	r3, #57	; 0x39
 80087c4:	7013      	strb	r3, [r2, #0]
 80087c6:	4643      	mov	r3, r8
 80087c8:	4698      	mov	r8, r3
 80087ca:	3b01      	subs	r3, #1
 80087cc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80087d0:	2a39      	cmp	r2, #57	; 0x39
 80087d2:	d051      	beq.n	8008878 <_dtoa_r+0xa98>
 80087d4:	3201      	adds	r2, #1
 80087d6:	701a      	strb	r2, [r3, #0]
 80087d8:	e745      	b.n	8008666 <_dtoa_r+0x886>
 80087da:	2a00      	cmp	r2, #0
 80087dc:	dd03      	ble.n	80087e6 <_dtoa_r+0xa06>
 80087de:	2b39      	cmp	r3, #57	; 0x39
 80087e0:	d0ee      	beq.n	80087c0 <_dtoa_r+0x9e0>
 80087e2:	3301      	adds	r3, #1
 80087e4:	e7c7      	b.n	8008776 <_dtoa_r+0x996>
 80087e6:	9a05      	ldr	r2, [sp, #20]
 80087e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087ee:	428a      	cmp	r2, r1
 80087f0:	d02b      	beq.n	800884a <_dtoa_r+0xa6a>
 80087f2:	4629      	mov	r1, r5
 80087f4:	2300      	movs	r3, #0
 80087f6:	220a      	movs	r2, #10
 80087f8:	4630      	mov	r0, r6
 80087fa:	f000 f8f3 	bl	80089e4 <__multadd>
 80087fe:	45b9      	cmp	r9, r7
 8008800:	4605      	mov	r5, r0
 8008802:	f04f 0300 	mov.w	r3, #0
 8008806:	f04f 020a 	mov.w	r2, #10
 800880a:	4649      	mov	r1, r9
 800880c:	4630      	mov	r0, r6
 800880e:	d107      	bne.n	8008820 <_dtoa_r+0xa40>
 8008810:	f000 f8e8 	bl	80089e4 <__multadd>
 8008814:	4681      	mov	r9, r0
 8008816:	4607      	mov	r7, r0
 8008818:	9b05      	ldr	r3, [sp, #20]
 800881a:	3301      	adds	r3, #1
 800881c:	9305      	str	r3, [sp, #20]
 800881e:	e774      	b.n	800870a <_dtoa_r+0x92a>
 8008820:	f000 f8e0 	bl	80089e4 <__multadd>
 8008824:	4639      	mov	r1, r7
 8008826:	4681      	mov	r9, r0
 8008828:	2300      	movs	r3, #0
 800882a:	220a      	movs	r2, #10
 800882c:	4630      	mov	r0, r6
 800882e:	f000 f8d9 	bl	80089e4 <__multadd>
 8008832:	4607      	mov	r7, r0
 8008834:	e7f0      	b.n	8008818 <_dtoa_r+0xa38>
 8008836:	f1ba 0f00 	cmp.w	sl, #0
 800883a:	9a00      	ldr	r2, [sp, #0]
 800883c:	bfcc      	ite	gt
 800883e:	46d0      	movgt	r8, sl
 8008840:	f04f 0801 	movle.w	r8, #1
 8008844:	4490      	add	r8, r2
 8008846:	f04f 0900 	mov.w	r9, #0
 800884a:	4629      	mov	r1, r5
 800884c:	2201      	movs	r2, #1
 800884e:	4630      	mov	r0, r6
 8008850:	9302      	str	r3, [sp, #8]
 8008852:	f000 fa77 	bl	8008d44 <__lshift>
 8008856:	4621      	mov	r1, r4
 8008858:	4605      	mov	r5, r0
 800885a:	f000 fadf 	bl	8008e1c <__mcmp>
 800885e:	2800      	cmp	r0, #0
 8008860:	dcb1      	bgt.n	80087c6 <_dtoa_r+0x9e6>
 8008862:	d102      	bne.n	800886a <_dtoa_r+0xa8a>
 8008864:	9b02      	ldr	r3, [sp, #8]
 8008866:	07db      	lsls	r3, r3, #31
 8008868:	d4ad      	bmi.n	80087c6 <_dtoa_r+0x9e6>
 800886a:	4643      	mov	r3, r8
 800886c:	4698      	mov	r8, r3
 800886e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008872:	2a30      	cmp	r2, #48	; 0x30
 8008874:	d0fa      	beq.n	800886c <_dtoa_r+0xa8c>
 8008876:	e6f6      	b.n	8008666 <_dtoa_r+0x886>
 8008878:	9a00      	ldr	r2, [sp, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d1a4      	bne.n	80087c8 <_dtoa_r+0x9e8>
 800887e:	f10b 0b01 	add.w	fp, fp, #1
 8008882:	2331      	movs	r3, #49	; 0x31
 8008884:	e778      	b.n	8008778 <_dtoa_r+0x998>
 8008886:	4b15      	ldr	r3, [pc, #84]	; (80088dc <_dtoa_r+0xafc>)
 8008888:	f7ff bb12 	b.w	8007eb0 <_dtoa_r+0xd0>
 800888c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800888e:	2b00      	cmp	r3, #0
 8008890:	f47f aaee 	bne.w	8007e70 <_dtoa_r+0x90>
 8008894:	4b12      	ldr	r3, [pc, #72]	; (80088e0 <_dtoa_r+0xb00>)
 8008896:	f7ff bb0b 	b.w	8007eb0 <_dtoa_r+0xd0>
 800889a:	f1ba 0f00 	cmp.w	sl, #0
 800889e:	dc03      	bgt.n	80088a8 <_dtoa_r+0xac8>
 80088a0:	9b07      	ldr	r3, [sp, #28]
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	f73f aec7 	bgt.w	8008636 <_dtoa_r+0x856>
 80088a8:	f8dd 8000 	ldr.w	r8, [sp]
 80088ac:	4621      	mov	r1, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	f7ff fa08 	bl	8007cc4 <quorem>
 80088b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088b8:	f808 3b01 	strb.w	r3, [r8], #1
 80088bc:	9a00      	ldr	r2, [sp, #0]
 80088be:	eba8 0202 	sub.w	r2, r8, r2
 80088c2:	4592      	cmp	sl, r2
 80088c4:	ddb7      	ble.n	8008836 <_dtoa_r+0xa56>
 80088c6:	4629      	mov	r1, r5
 80088c8:	2300      	movs	r3, #0
 80088ca:	220a      	movs	r2, #10
 80088cc:	4630      	mov	r0, r6
 80088ce:	f000 f889 	bl	80089e4 <__multadd>
 80088d2:	4605      	mov	r5, r0
 80088d4:	e7ea      	b.n	80088ac <_dtoa_r+0xacc>
 80088d6:	bf00      	nop
 80088d8:	08009c3b 	.word	0x08009c3b
 80088dc:	08009b94 	.word	0x08009b94
 80088e0:	08009bb8 	.word	0x08009bb8

080088e4 <_localeconv_r>:
 80088e4:	4800      	ldr	r0, [pc, #0]	; (80088e8 <_localeconv_r+0x4>)
 80088e6:	4770      	bx	lr
 80088e8:	200001bc 	.word	0x200001bc

080088ec <memcpy>:
 80088ec:	440a      	add	r2, r1
 80088ee:	4291      	cmp	r1, r2
 80088f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80088f4:	d100      	bne.n	80088f8 <memcpy+0xc>
 80088f6:	4770      	bx	lr
 80088f8:	b510      	push	{r4, lr}
 80088fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008902:	4291      	cmp	r1, r2
 8008904:	d1f9      	bne.n	80088fa <memcpy+0xe>
 8008906:	bd10      	pop	{r4, pc}

08008908 <__malloc_lock>:
 8008908:	4801      	ldr	r0, [pc, #4]	; (8008910 <__malloc_lock+0x8>)
 800890a:	f000 bbc8 	b.w	800909e <__retarget_lock_acquire_recursive>
 800890e:	bf00      	nop
 8008910:	200007c0 	.word	0x200007c0

08008914 <__malloc_unlock>:
 8008914:	4801      	ldr	r0, [pc, #4]	; (800891c <__malloc_unlock+0x8>)
 8008916:	f000 bbc3 	b.w	80090a0 <__retarget_lock_release_recursive>
 800891a:	bf00      	nop
 800891c:	200007c0 	.word	0x200007c0

08008920 <_Balloc>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008924:	4604      	mov	r4, r0
 8008926:	460d      	mov	r5, r1
 8008928:	b976      	cbnz	r6, 8008948 <_Balloc+0x28>
 800892a:	2010      	movs	r0, #16
 800892c:	f7fe fcbc 	bl	80072a8 <malloc>
 8008930:	4602      	mov	r2, r0
 8008932:	6260      	str	r0, [r4, #36]	; 0x24
 8008934:	b920      	cbnz	r0, 8008940 <_Balloc+0x20>
 8008936:	4b18      	ldr	r3, [pc, #96]	; (8008998 <_Balloc+0x78>)
 8008938:	4818      	ldr	r0, [pc, #96]	; (800899c <_Balloc+0x7c>)
 800893a:	2166      	movs	r1, #102	; 0x66
 800893c:	f000 fb7e 	bl	800903c <__assert_func>
 8008940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008944:	6006      	str	r6, [r0, #0]
 8008946:	60c6      	str	r6, [r0, #12]
 8008948:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800894a:	68f3      	ldr	r3, [r6, #12]
 800894c:	b183      	cbz	r3, 8008970 <_Balloc+0x50>
 800894e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008956:	b9b8      	cbnz	r0, 8008988 <_Balloc+0x68>
 8008958:	2101      	movs	r1, #1
 800895a:	fa01 f605 	lsl.w	r6, r1, r5
 800895e:	1d72      	adds	r2, r6, #5
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	4620      	mov	r0, r4
 8008964:	f000 fb5a 	bl	800901c <_calloc_r>
 8008968:	b160      	cbz	r0, 8008984 <_Balloc+0x64>
 800896a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800896e:	e00e      	b.n	800898e <_Balloc+0x6e>
 8008970:	2221      	movs	r2, #33	; 0x21
 8008972:	2104      	movs	r1, #4
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fb51 	bl	800901c <_calloc_r>
 800897a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800897c:	60f0      	str	r0, [r6, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e4      	bne.n	800894e <_Balloc+0x2e>
 8008984:	2000      	movs	r0, #0
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	6802      	ldr	r2, [r0, #0]
 800898a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800898e:	2300      	movs	r3, #0
 8008990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008994:	e7f7      	b.n	8008986 <_Balloc+0x66>
 8008996:	bf00      	nop
 8008998:	08009bc5 	.word	0x08009bc5
 800899c:	08009c4c 	.word	0x08009c4c

080089a0 <_Bfree>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089a4:	4605      	mov	r5, r0
 80089a6:	460c      	mov	r4, r1
 80089a8:	b976      	cbnz	r6, 80089c8 <_Bfree+0x28>
 80089aa:	2010      	movs	r0, #16
 80089ac:	f7fe fc7c 	bl	80072a8 <malloc>
 80089b0:	4602      	mov	r2, r0
 80089b2:	6268      	str	r0, [r5, #36]	; 0x24
 80089b4:	b920      	cbnz	r0, 80089c0 <_Bfree+0x20>
 80089b6:	4b09      	ldr	r3, [pc, #36]	; (80089dc <_Bfree+0x3c>)
 80089b8:	4809      	ldr	r0, [pc, #36]	; (80089e0 <_Bfree+0x40>)
 80089ba:	218a      	movs	r1, #138	; 0x8a
 80089bc:	f000 fb3e 	bl	800903c <__assert_func>
 80089c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089c4:	6006      	str	r6, [r0, #0]
 80089c6:	60c6      	str	r6, [r0, #12]
 80089c8:	b13c      	cbz	r4, 80089da <_Bfree+0x3a>
 80089ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089cc:	6862      	ldr	r2, [r4, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089d4:	6021      	str	r1, [r4, #0]
 80089d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	08009bc5 	.word	0x08009bc5
 80089e0:	08009c4c 	.word	0x08009c4c

080089e4 <__multadd>:
 80089e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	690e      	ldr	r6, [r1, #16]
 80089ea:	4607      	mov	r7, r0
 80089ec:	4698      	mov	r8, r3
 80089ee:	460c      	mov	r4, r1
 80089f0:	f101 0014 	add.w	r0, r1, #20
 80089f4:	2300      	movs	r3, #0
 80089f6:	6805      	ldr	r5, [r0, #0]
 80089f8:	b2a9      	uxth	r1, r5
 80089fa:	fb02 8101 	mla	r1, r2, r1, r8
 80089fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008a02:	0c2d      	lsrs	r5, r5, #16
 8008a04:	fb02 c505 	mla	r5, r2, r5, ip
 8008a08:	b289      	uxth	r1, r1
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008a10:	429e      	cmp	r6, r3
 8008a12:	f840 1b04 	str.w	r1, [r0], #4
 8008a16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008a1a:	dcec      	bgt.n	80089f6 <__multadd+0x12>
 8008a1c:	f1b8 0f00 	cmp.w	r8, #0
 8008a20:	d022      	beq.n	8008a68 <__multadd+0x84>
 8008a22:	68a3      	ldr	r3, [r4, #8]
 8008a24:	42b3      	cmp	r3, r6
 8008a26:	dc19      	bgt.n	8008a5c <__multadd+0x78>
 8008a28:	6861      	ldr	r1, [r4, #4]
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	3101      	adds	r1, #1
 8008a2e:	f7ff ff77 	bl	8008920 <_Balloc>
 8008a32:	4605      	mov	r5, r0
 8008a34:	b928      	cbnz	r0, 8008a42 <__multadd+0x5e>
 8008a36:	4602      	mov	r2, r0
 8008a38:	4b0d      	ldr	r3, [pc, #52]	; (8008a70 <__multadd+0x8c>)
 8008a3a:	480e      	ldr	r0, [pc, #56]	; (8008a74 <__multadd+0x90>)
 8008a3c:	21b5      	movs	r1, #181	; 0xb5
 8008a3e:	f000 fafd 	bl	800903c <__assert_func>
 8008a42:	6922      	ldr	r2, [r4, #16]
 8008a44:	3202      	adds	r2, #2
 8008a46:	f104 010c 	add.w	r1, r4, #12
 8008a4a:	0092      	lsls	r2, r2, #2
 8008a4c:	300c      	adds	r0, #12
 8008a4e:	f7ff ff4d 	bl	80088ec <memcpy>
 8008a52:	4621      	mov	r1, r4
 8008a54:	4638      	mov	r0, r7
 8008a56:	f7ff ffa3 	bl	80089a0 <_Bfree>
 8008a5a:	462c      	mov	r4, r5
 8008a5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008a60:	3601      	adds	r6, #1
 8008a62:	f8c3 8014 	str.w	r8, [r3, #20]
 8008a66:	6126      	str	r6, [r4, #16]
 8008a68:	4620      	mov	r0, r4
 8008a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a6e:	bf00      	nop
 8008a70:	08009c3b 	.word	0x08009c3b
 8008a74:	08009c4c 	.word	0x08009c4c

08008a78 <__hi0bits>:
 8008a78:	0c03      	lsrs	r3, r0, #16
 8008a7a:	041b      	lsls	r3, r3, #16
 8008a7c:	b9d3      	cbnz	r3, 8008ab4 <__hi0bits+0x3c>
 8008a7e:	0400      	lsls	r0, r0, #16
 8008a80:	2310      	movs	r3, #16
 8008a82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a86:	bf04      	itt	eq
 8008a88:	0200      	lsleq	r0, r0, #8
 8008a8a:	3308      	addeq	r3, #8
 8008a8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a90:	bf04      	itt	eq
 8008a92:	0100      	lsleq	r0, r0, #4
 8008a94:	3304      	addeq	r3, #4
 8008a96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a9a:	bf04      	itt	eq
 8008a9c:	0080      	lsleq	r0, r0, #2
 8008a9e:	3302      	addeq	r3, #2
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	db05      	blt.n	8008ab0 <__hi0bits+0x38>
 8008aa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008aa8:	f103 0301 	add.w	r3, r3, #1
 8008aac:	bf08      	it	eq
 8008aae:	2320      	moveq	r3, #32
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	4770      	bx	lr
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e7e4      	b.n	8008a82 <__hi0bits+0xa>

08008ab8 <__lo0bits>:
 8008ab8:	6803      	ldr	r3, [r0, #0]
 8008aba:	f013 0207 	ands.w	r2, r3, #7
 8008abe:	4601      	mov	r1, r0
 8008ac0:	d00b      	beq.n	8008ada <__lo0bits+0x22>
 8008ac2:	07da      	lsls	r2, r3, #31
 8008ac4:	d424      	bmi.n	8008b10 <__lo0bits+0x58>
 8008ac6:	0798      	lsls	r0, r3, #30
 8008ac8:	bf49      	itett	mi
 8008aca:	085b      	lsrmi	r3, r3, #1
 8008acc:	089b      	lsrpl	r3, r3, #2
 8008ace:	2001      	movmi	r0, #1
 8008ad0:	600b      	strmi	r3, [r1, #0]
 8008ad2:	bf5c      	itt	pl
 8008ad4:	600b      	strpl	r3, [r1, #0]
 8008ad6:	2002      	movpl	r0, #2
 8008ad8:	4770      	bx	lr
 8008ada:	b298      	uxth	r0, r3
 8008adc:	b9b0      	cbnz	r0, 8008b0c <__lo0bits+0x54>
 8008ade:	0c1b      	lsrs	r3, r3, #16
 8008ae0:	2010      	movs	r0, #16
 8008ae2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ae6:	bf04      	itt	eq
 8008ae8:	0a1b      	lsreq	r3, r3, #8
 8008aea:	3008      	addeq	r0, #8
 8008aec:	071a      	lsls	r2, r3, #28
 8008aee:	bf04      	itt	eq
 8008af0:	091b      	lsreq	r3, r3, #4
 8008af2:	3004      	addeq	r0, #4
 8008af4:	079a      	lsls	r2, r3, #30
 8008af6:	bf04      	itt	eq
 8008af8:	089b      	lsreq	r3, r3, #2
 8008afa:	3002      	addeq	r0, #2
 8008afc:	07da      	lsls	r2, r3, #31
 8008afe:	d403      	bmi.n	8008b08 <__lo0bits+0x50>
 8008b00:	085b      	lsrs	r3, r3, #1
 8008b02:	f100 0001 	add.w	r0, r0, #1
 8008b06:	d005      	beq.n	8008b14 <__lo0bits+0x5c>
 8008b08:	600b      	str	r3, [r1, #0]
 8008b0a:	4770      	bx	lr
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	e7e8      	b.n	8008ae2 <__lo0bits+0x2a>
 8008b10:	2000      	movs	r0, #0
 8008b12:	4770      	bx	lr
 8008b14:	2020      	movs	r0, #32
 8008b16:	4770      	bx	lr

08008b18 <__i2b>:
 8008b18:	b510      	push	{r4, lr}
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	f7ff feff 	bl	8008920 <_Balloc>
 8008b22:	4602      	mov	r2, r0
 8008b24:	b928      	cbnz	r0, 8008b32 <__i2b+0x1a>
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <__i2b+0x24>)
 8008b28:	4805      	ldr	r0, [pc, #20]	; (8008b40 <__i2b+0x28>)
 8008b2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b2e:	f000 fa85 	bl	800903c <__assert_func>
 8008b32:	2301      	movs	r3, #1
 8008b34:	6144      	str	r4, [r0, #20]
 8008b36:	6103      	str	r3, [r0, #16]
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	bf00      	nop
 8008b3c:	08009c3b 	.word	0x08009c3b
 8008b40:	08009c4c 	.word	0x08009c4c

08008b44 <__multiply>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	4614      	mov	r4, r2
 8008b4a:	690a      	ldr	r2, [r1, #16]
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	bfb8      	it	lt
 8008b52:	460b      	movlt	r3, r1
 8008b54:	460d      	mov	r5, r1
 8008b56:	bfbc      	itt	lt
 8008b58:	4625      	movlt	r5, r4
 8008b5a:	461c      	movlt	r4, r3
 8008b5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008b60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b64:	68ab      	ldr	r3, [r5, #8]
 8008b66:	6869      	ldr	r1, [r5, #4]
 8008b68:	eb0a 0709 	add.w	r7, sl, r9
 8008b6c:	42bb      	cmp	r3, r7
 8008b6e:	b085      	sub	sp, #20
 8008b70:	bfb8      	it	lt
 8008b72:	3101      	addlt	r1, #1
 8008b74:	f7ff fed4 	bl	8008920 <_Balloc>
 8008b78:	b930      	cbnz	r0, 8008b88 <__multiply+0x44>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4b42      	ldr	r3, [pc, #264]	; (8008c88 <__multiply+0x144>)
 8008b7e:	4843      	ldr	r0, [pc, #268]	; (8008c8c <__multiply+0x148>)
 8008b80:	f240 115d 	movw	r1, #349	; 0x15d
 8008b84:	f000 fa5a 	bl	800903c <__assert_func>
 8008b88:	f100 0614 	add.w	r6, r0, #20
 8008b8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008b90:	4633      	mov	r3, r6
 8008b92:	2200      	movs	r2, #0
 8008b94:	4543      	cmp	r3, r8
 8008b96:	d31e      	bcc.n	8008bd6 <__multiply+0x92>
 8008b98:	f105 0c14 	add.w	ip, r5, #20
 8008b9c:	f104 0314 	add.w	r3, r4, #20
 8008ba0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008ba4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008ba8:	9202      	str	r2, [sp, #8]
 8008baa:	ebac 0205 	sub.w	r2, ip, r5
 8008bae:	3a15      	subs	r2, #21
 8008bb0:	f022 0203 	bic.w	r2, r2, #3
 8008bb4:	3204      	adds	r2, #4
 8008bb6:	f105 0115 	add.w	r1, r5, #21
 8008bba:	458c      	cmp	ip, r1
 8008bbc:	bf38      	it	cc
 8008bbe:	2204      	movcc	r2, #4
 8008bc0:	9201      	str	r2, [sp, #4]
 8008bc2:	9a02      	ldr	r2, [sp, #8]
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d808      	bhi.n	8008bdc <__multiply+0x98>
 8008bca:	2f00      	cmp	r7, #0
 8008bcc:	dc55      	bgt.n	8008c7a <__multiply+0x136>
 8008bce:	6107      	str	r7, [r0, #16]
 8008bd0:	b005      	add	sp, #20
 8008bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd6:	f843 2b04 	str.w	r2, [r3], #4
 8008bda:	e7db      	b.n	8008b94 <__multiply+0x50>
 8008bdc:	f8b3 a000 	ldrh.w	sl, [r3]
 8008be0:	f1ba 0f00 	cmp.w	sl, #0
 8008be4:	d020      	beq.n	8008c28 <__multiply+0xe4>
 8008be6:	f105 0e14 	add.w	lr, r5, #20
 8008bea:	46b1      	mov	r9, r6
 8008bec:	2200      	movs	r2, #0
 8008bee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008bf2:	f8d9 b000 	ldr.w	fp, [r9]
 8008bf6:	b2a1      	uxth	r1, r4
 8008bf8:	fa1f fb8b 	uxth.w	fp, fp
 8008bfc:	fb0a b101 	mla	r1, sl, r1, fp
 8008c00:	4411      	add	r1, r2
 8008c02:	f8d9 2000 	ldr.w	r2, [r9]
 8008c06:	0c24      	lsrs	r4, r4, #16
 8008c08:	0c12      	lsrs	r2, r2, #16
 8008c0a:	fb0a 2404 	mla	r4, sl, r4, r2
 8008c0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008c12:	b289      	uxth	r1, r1
 8008c14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c18:	45f4      	cmp	ip, lr
 8008c1a:	f849 1b04 	str.w	r1, [r9], #4
 8008c1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008c22:	d8e4      	bhi.n	8008bee <__multiply+0xaa>
 8008c24:	9901      	ldr	r1, [sp, #4]
 8008c26:	5072      	str	r2, [r6, r1]
 8008c28:	9a03      	ldr	r2, [sp, #12]
 8008c2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	f1b9 0f00 	cmp.w	r9, #0
 8008c34:	d01f      	beq.n	8008c76 <__multiply+0x132>
 8008c36:	6834      	ldr	r4, [r6, #0]
 8008c38:	f105 0114 	add.w	r1, r5, #20
 8008c3c:	46b6      	mov	lr, r6
 8008c3e:	f04f 0a00 	mov.w	sl, #0
 8008c42:	880a      	ldrh	r2, [r1, #0]
 8008c44:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008c48:	fb09 b202 	mla	r2, r9, r2, fp
 8008c4c:	4492      	add	sl, r2
 8008c4e:	b2a4      	uxth	r4, r4
 8008c50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008c54:	f84e 4b04 	str.w	r4, [lr], #4
 8008c58:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c5c:	f8be 2000 	ldrh.w	r2, [lr]
 8008c60:	0c24      	lsrs	r4, r4, #16
 8008c62:	fb09 2404 	mla	r4, r9, r4, r2
 8008c66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008c6a:	458c      	cmp	ip, r1
 8008c6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c70:	d8e7      	bhi.n	8008c42 <__multiply+0xfe>
 8008c72:	9a01      	ldr	r2, [sp, #4]
 8008c74:	50b4      	str	r4, [r6, r2]
 8008c76:	3604      	adds	r6, #4
 8008c78:	e7a3      	b.n	8008bc2 <__multiply+0x7e>
 8008c7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1a5      	bne.n	8008bce <__multiply+0x8a>
 8008c82:	3f01      	subs	r7, #1
 8008c84:	e7a1      	b.n	8008bca <__multiply+0x86>
 8008c86:	bf00      	nop
 8008c88:	08009c3b 	.word	0x08009c3b
 8008c8c:	08009c4c 	.word	0x08009c4c

08008c90 <__pow5mult>:
 8008c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c94:	4615      	mov	r5, r2
 8008c96:	f012 0203 	ands.w	r2, r2, #3
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	460f      	mov	r7, r1
 8008c9e:	d007      	beq.n	8008cb0 <__pow5mult+0x20>
 8008ca0:	4c25      	ldr	r4, [pc, #148]	; (8008d38 <__pow5mult+0xa8>)
 8008ca2:	3a01      	subs	r2, #1
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008caa:	f7ff fe9b 	bl	80089e4 <__multadd>
 8008cae:	4607      	mov	r7, r0
 8008cb0:	10ad      	asrs	r5, r5, #2
 8008cb2:	d03d      	beq.n	8008d30 <__pow5mult+0xa0>
 8008cb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cb6:	b97c      	cbnz	r4, 8008cd8 <__pow5mult+0x48>
 8008cb8:	2010      	movs	r0, #16
 8008cba:	f7fe faf5 	bl	80072a8 <malloc>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	6270      	str	r0, [r6, #36]	; 0x24
 8008cc2:	b928      	cbnz	r0, 8008cd0 <__pow5mult+0x40>
 8008cc4:	4b1d      	ldr	r3, [pc, #116]	; (8008d3c <__pow5mult+0xac>)
 8008cc6:	481e      	ldr	r0, [pc, #120]	; (8008d40 <__pow5mult+0xb0>)
 8008cc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ccc:	f000 f9b6 	bl	800903c <__assert_func>
 8008cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cd4:	6004      	str	r4, [r0, #0]
 8008cd6:	60c4      	str	r4, [r0, #12]
 8008cd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ce0:	b94c      	cbnz	r4, 8008cf6 <__pow5mult+0x66>
 8008ce2:	f240 2171 	movw	r1, #625	; 0x271
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f7ff ff16 	bl	8008b18 <__i2b>
 8008cec:	2300      	movs	r3, #0
 8008cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	6003      	str	r3, [r0, #0]
 8008cf6:	f04f 0900 	mov.w	r9, #0
 8008cfa:	07eb      	lsls	r3, r5, #31
 8008cfc:	d50a      	bpl.n	8008d14 <__pow5mult+0x84>
 8008cfe:	4639      	mov	r1, r7
 8008d00:	4622      	mov	r2, r4
 8008d02:	4630      	mov	r0, r6
 8008d04:	f7ff ff1e 	bl	8008b44 <__multiply>
 8008d08:	4639      	mov	r1, r7
 8008d0a:	4680      	mov	r8, r0
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f7ff fe47 	bl	80089a0 <_Bfree>
 8008d12:	4647      	mov	r7, r8
 8008d14:	106d      	asrs	r5, r5, #1
 8008d16:	d00b      	beq.n	8008d30 <__pow5mult+0xa0>
 8008d18:	6820      	ldr	r0, [r4, #0]
 8008d1a:	b938      	cbnz	r0, 8008d2c <__pow5mult+0x9c>
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4630      	mov	r0, r6
 8008d22:	f7ff ff0f 	bl	8008b44 <__multiply>
 8008d26:	6020      	str	r0, [r4, #0]
 8008d28:	f8c0 9000 	str.w	r9, [r0]
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	e7e4      	b.n	8008cfa <__pow5mult+0x6a>
 8008d30:	4638      	mov	r0, r7
 8008d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d36:	bf00      	nop
 8008d38:	08009da0 	.word	0x08009da0
 8008d3c:	08009bc5 	.word	0x08009bc5
 8008d40:	08009c4c 	.word	0x08009c4c

08008d44 <__lshift>:
 8008d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d48:	460c      	mov	r4, r1
 8008d4a:	6849      	ldr	r1, [r1, #4]
 8008d4c:	6923      	ldr	r3, [r4, #16]
 8008d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d52:	68a3      	ldr	r3, [r4, #8]
 8008d54:	4607      	mov	r7, r0
 8008d56:	4691      	mov	r9, r2
 8008d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d5c:	f108 0601 	add.w	r6, r8, #1
 8008d60:	42b3      	cmp	r3, r6
 8008d62:	db0b      	blt.n	8008d7c <__lshift+0x38>
 8008d64:	4638      	mov	r0, r7
 8008d66:	f7ff fddb 	bl	8008920 <_Balloc>
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	b948      	cbnz	r0, 8008d82 <__lshift+0x3e>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	4b28      	ldr	r3, [pc, #160]	; (8008e14 <__lshift+0xd0>)
 8008d72:	4829      	ldr	r0, [pc, #164]	; (8008e18 <__lshift+0xd4>)
 8008d74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d78:	f000 f960 	bl	800903c <__assert_func>
 8008d7c:	3101      	adds	r1, #1
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	e7ee      	b.n	8008d60 <__lshift+0x1c>
 8008d82:	2300      	movs	r3, #0
 8008d84:	f100 0114 	add.w	r1, r0, #20
 8008d88:	f100 0210 	add.w	r2, r0, #16
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	4553      	cmp	r3, sl
 8008d90:	db33      	blt.n	8008dfa <__lshift+0xb6>
 8008d92:	6920      	ldr	r0, [r4, #16]
 8008d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d98:	f104 0314 	add.w	r3, r4, #20
 8008d9c:	f019 091f 	ands.w	r9, r9, #31
 8008da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008da4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008da8:	d02b      	beq.n	8008e02 <__lshift+0xbe>
 8008daa:	f1c9 0e20 	rsb	lr, r9, #32
 8008dae:	468a      	mov	sl, r1
 8008db0:	2200      	movs	r2, #0
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	fa00 f009 	lsl.w	r0, r0, r9
 8008db8:	4302      	orrs	r2, r0
 8008dba:	f84a 2b04 	str.w	r2, [sl], #4
 8008dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc2:	459c      	cmp	ip, r3
 8008dc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dc8:	d8f3      	bhi.n	8008db2 <__lshift+0x6e>
 8008dca:	ebac 0304 	sub.w	r3, ip, r4
 8008dce:	3b15      	subs	r3, #21
 8008dd0:	f023 0303 	bic.w	r3, r3, #3
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	f104 0015 	add.w	r0, r4, #21
 8008dda:	4584      	cmp	ip, r0
 8008ddc:	bf38      	it	cc
 8008dde:	2304      	movcc	r3, #4
 8008de0:	50ca      	str	r2, [r1, r3]
 8008de2:	b10a      	cbz	r2, 8008de8 <__lshift+0xa4>
 8008de4:	f108 0602 	add.w	r6, r8, #2
 8008de8:	3e01      	subs	r6, #1
 8008dea:	4638      	mov	r0, r7
 8008dec:	612e      	str	r6, [r5, #16]
 8008dee:	4621      	mov	r1, r4
 8008df0:	f7ff fdd6 	bl	80089a0 <_Bfree>
 8008df4:	4628      	mov	r0, r5
 8008df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dfe:	3301      	adds	r3, #1
 8008e00:	e7c5      	b.n	8008d8e <__lshift+0x4a>
 8008e02:	3904      	subs	r1, #4
 8008e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e08:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e0c:	459c      	cmp	ip, r3
 8008e0e:	d8f9      	bhi.n	8008e04 <__lshift+0xc0>
 8008e10:	e7ea      	b.n	8008de8 <__lshift+0xa4>
 8008e12:	bf00      	nop
 8008e14:	08009c3b 	.word	0x08009c3b
 8008e18:	08009c4c 	.word	0x08009c4c

08008e1c <__mcmp>:
 8008e1c:	b530      	push	{r4, r5, lr}
 8008e1e:	6902      	ldr	r2, [r0, #16]
 8008e20:	690c      	ldr	r4, [r1, #16]
 8008e22:	1b12      	subs	r2, r2, r4
 8008e24:	d10e      	bne.n	8008e44 <__mcmp+0x28>
 8008e26:	f100 0314 	add.w	r3, r0, #20
 8008e2a:	3114      	adds	r1, #20
 8008e2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e3c:	42a5      	cmp	r5, r4
 8008e3e:	d003      	beq.n	8008e48 <__mcmp+0x2c>
 8008e40:	d305      	bcc.n	8008e4e <__mcmp+0x32>
 8008e42:	2201      	movs	r2, #1
 8008e44:	4610      	mov	r0, r2
 8008e46:	bd30      	pop	{r4, r5, pc}
 8008e48:	4283      	cmp	r3, r0
 8008e4a:	d3f3      	bcc.n	8008e34 <__mcmp+0x18>
 8008e4c:	e7fa      	b.n	8008e44 <__mcmp+0x28>
 8008e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e52:	e7f7      	b.n	8008e44 <__mcmp+0x28>

08008e54 <__mdiff>:
 8008e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	460c      	mov	r4, r1
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	4620      	mov	r0, r4
 8008e60:	4617      	mov	r7, r2
 8008e62:	f7ff ffdb 	bl	8008e1c <__mcmp>
 8008e66:	1e05      	subs	r5, r0, #0
 8008e68:	d110      	bne.n	8008e8c <__mdiff+0x38>
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff fd57 	bl	8008920 <_Balloc>
 8008e72:	b930      	cbnz	r0, 8008e82 <__mdiff+0x2e>
 8008e74:	4b39      	ldr	r3, [pc, #228]	; (8008f5c <__mdiff+0x108>)
 8008e76:	4602      	mov	r2, r0
 8008e78:	f240 2132 	movw	r1, #562	; 0x232
 8008e7c:	4838      	ldr	r0, [pc, #224]	; (8008f60 <__mdiff+0x10c>)
 8008e7e:	f000 f8dd 	bl	800903c <__assert_func>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8c:	bfa4      	itt	ge
 8008e8e:	463b      	movge	r3, r7
 8008e90:	4627      	movge	r7, r4
 8008e92:	4630      	mov	r0, r6
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	bfa6      	itte	ge
 8008e98:	461c      	movge	r4, r3
 8008e9a:	2500      	movge	r5, #0
 8008e9c:	2501      	movlt	r5, #1
 8008e9e:	f7ff fd3f 	bl	8008920 <_Balloc>
 8008ea2:	b920      	cbnz	r0, 8008eae <__mdiff+0x5a>
 8008ea4:	4b2d      	ldr	r3, [pc, #180]	; (8008f5c <__mdiff+0x108>)
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008eac:	e7e6      	b.n	8008e7c <__mdiff+0x28>
 8008eae:	693e      	ldr	r6, [r7, #16]
 8008eb0:	60c5      	str	r5, [r0, #12]
 8008eb2:	6925      	ldr	r5, [r4, #16]
 8008eb4:	f107 0114 	add.w	r1, r7, #20
 8008eb8:	f104 0914 	add.w	r9, r4, #20
 8008ebc:	f100 0e14 	add.w	lr, r0, #20
 8008ec0:	f107 0210 	add.w	r2, r7, #16
 8008ec4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008ec8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008ecc:	46f2      	mov	sl, lr
 8008ece:	2700      	movs	r7, #0
 8008ed0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ed4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ed8:	fa1f f883 	uxth.w	r8, r3
 8008edc:	fa17 f78b 	uxtah	r7, r7, fp
 8008ee0:	0c1b      	lsrs	r3, r3, #16
 8008ee2:	eba7 0808 	sub.w	r8, r7, r8
 8008ee6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008eea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008eee:	fa1f f888 	uxth.w	r8, r8
 8008ef2:	141f      	asrs	r7, r3, #16
 8008ef4:	454d      	cmp	r5, r9
 8008ef6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008efa:	f84a 3b04 	str.w	r3, [sl], #4
 8008efe:	d8e7      	bhi.n	8008ed0 <__mdiff+0x7c>
 8008f00:	1b2b      	subs	r3, r5, r4
 8008f02:	3b15      	subs	r3, #21
 8008f04:	f023 0303 	bic.w	r3, r3, #3
 8008f08:	3304      	adds	r3, #4
 8008f0a:	3415      	adds	r4, #21
 8008f0c:	42a5      	cmp	r5, r4
 8008f0e:	bf38      	it	cc
 8008f10:	2304      	movcc	r3, #4
 8008f12:	4419      	add	r1, r3
 8008f14:	4473      	add	r3, lr
 8008f16:	469e      	mov	lr, r3
 8008f18:	460d      	mov	r5, r1
 8008f1a:	4565      	cmp	r5, ip
 8008f1c:	d30e      	bcc.n	8008f3c <__mdiff+0xe8>
 8008f1e:	f10c 0203 	add.w	r2, ip, #3
 8008f22:	1a52      	subs	r2, r2, r1
 8008f24:	f022 0203 	bic.w	r2, r2, #3
 8008f28:	3903      	subs	r1, #3
 8008f2a:	458c      	cmp	ip, r1
 8008f2c:	bf38      	it	cc
 8008f2e:	2200      	movcc	r2, #0
 8008f30:	441a      	add	r2, r3
 8008f32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f36:	b17b      	cbz	r3, 8008f58 <__mdiff+0x104>
 8008f38:	6106      	str	r6, [r0, #16]
 8008f3a:	e7a5      	b.n	8008e88 <__mdiff+0x34>
 8008f3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f40:	fa17 f488 	uxtah	r4, r7, r8
 8008f44:	1422      	asrs	r2, r4, #16
 8008f46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008f4a:	b2a4      	uxth	r4, r4
 8008f4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f50:	f84e 4b04 	str.w	r4, [lr], #4
 8008f54:	1417      	asrs	r7, r2, #16
 8008f56:	e7e0      	b.n	8008f1a <__mdiff+0xc6>
 8008f58:	3e01      	subs	r6, #1
 8008f5a:	e7ea      	b.n	8008f32 <__mdiff+0xde>
 8008f5c:	08009c3b 	.word	0x08009c3b
 8008f60:	08009c4c 	.word	0x08009c4c

08008f64 <__d2b>:
 8008f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f68:	4689      	mov	r9, r1
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	ec57 6b10 	vmov	r6, r7, d0
 8008f70:	4690      	mov	r8, r2
 8008f72:	f7ff fcd5 	bl	8008920 <_Balloc>
 8008f76:	4604      	mov	r4, r0
 8008f78:	b930      	cbnz	r0, 8008f88 <__d2b+0x24>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4b25      	ldr	r3, [pc, #148]	; (8009014 <__d2b+0xb0>)
 8008f7e:	4826      	ldr	r0, [pc, #152]	; (8009018 <__d2b+0xb4>)
 8008f80:	f240 310a 	movw	r1, #778	; 0x30a
 8008f84:	f000 f85a 	bl	800903c <__assert_func>
 8008f88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f90:	bb35      	cbnz	r5, 8008fe0 <__d2b+0x7c>
 8008f92:	2e00      	cmp	r6, #0
 8008f94:	9301      	str	r3, [sp, #4]
 8008f96:	d028      	beq.n	8008fea <__d2b+0x86>
 8008f98:	4668      	mov	r0, sp
 8008f9a:	9600      	str	r6, [sp, #0]
 8008f9c:	f7ff fd8c 	bl	8008ab8 <__lo0bits>
 8008fa0:	9900      	ldr	r1, [sp, #0]
 8008fa2:	b300      	cbz	r0, 8008fe6 <__d2b+0x82>
 8008fa4:	9a01      	ldr	r2, [sp, #4]
 8008fa6:	f1c0 0320 	rsb	r3, r0, #32
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	40c2      	lsrs	r2, r0
 8008fb2:	6163      	str	r3, [r4, #20]
 8008fb4:	9201      	str	r2, [sp, #4]
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	61a3      	str	r3, [r4, #24]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bf14      	ite	ne
 8008fbe:	2202      	movne	r2, #2
 8008fc0:	2201      	moveq	r2, #1
 8008fc2:	6122      	str	r2, [r4, #16]
 8008fc4:	b1d5      	cbz	r5, 8008ffc <__d2b+0x98>
 8008fc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fca:	4405      	add	r5, r0
 8008fcc:	f8c9 5000 	str.w	r5, [r9]
 8008fd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fd4:	f8c8 0000 	str.w	r0, [r8]
 8008fd8:	4620      	mov	r0, r4
 8008fda:	b003      	add	sp, #12
 8008fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fe4:	e7d5      	b.n	8008f92 <__d2b+0x2e>
 8008fe6:	6161      	str	r1, [r4, #20]
 8008fe8:	e7e5      	b.n	8008fb6 <__d2b+0x52>
 8008fea:	a801      	add	r0, sp, #4
 8008fec:	f7ff fd64 	bl	8008ab8 <__lo0bits>
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	6163      	str	r3, [r4, #20]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	6122      	str	r2, [r4, #16]
 8008ff8:	3020      	adds	r0, #32
 8008ffa:	e7e3      	b.n	8008fc4 <__d2b+0x60>
 8008ffc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009000:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009004:	f8c9 0000 	str.w	r0, [r9]
 8009008:	6918      	ldr	r0, [r3, #16]
 800900a:	f7ff fd35 	bl	8008a78 <__hi0bits>
 800900e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009012:	e7df      	b.n	8008fd4 <__d2b+0x70>
 8009014:	08009c3b 	.word	0x08009c3b
 8009018:	08009c4c 	.word	0x08009c4c

0800901c <_calloc_r>:
 800901c:	b513      	push	{r0, r1, r4, lr}
 800901e:	434a      	muls	r2, r1
 8009020:	4611      	mov	r1, r2
 8009022:	9201      	str	r2, [sp, #4]
 8009024:	f7fe f9a0 	bl	8007368 <_malloc_r>
 8009028:	4604      	mov	r4, r0
 800902a:	b118      	cbz	r0, 8009034 <_calloc_r+0x18>
 800902c:	9a01      	ldr	r2, [sp, #4]
 800902e:	2100      	movs	r1, #0
 8009030:	f7fe f942 	bl	80072b8 <memset>
 8009034:	4620      	mov	r0, r4
 8009036:	b002      	add	sp, #8
 8009038:	bd10      	pop	{r4, pc}
	...

0800903c <__assert_func>:
 800903c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800903e:	4614      	mov	r4, r2
 8009040:	461a      	mov	r2, r3
 8009042:	4b09      	ldr	r3, [pc, #36]	; (8009068 <__assert_func+0x2c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4605      	mov	r5, r0
 8009048:	68d8      	ldr	r0, [r3, #12]
 800904a:	b14c      	cbz	r4, 8009060 <__assert_func+0x24>
 800904c:	4b07      	ldr	r3, [pc, #28]	; (800906c <__assert_func+0x30>)
 800904e:	9100      	str	r1, [sp, #0]
 8009050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009054:	4906      	ldr	r1, [pc, #24]	; (8009070 <__assert_func+0x34>)
 8009056:	462b      	mov	r3, r5
 8009058:	f000 f80e 	bl	8009078 <fiprintf>
 800905c:	f000 fa5a 	bl	8009514 <abort>
 8009060:	4b04      	ldr	r3, [pc, #16]	; (8009074 <__assert_func+0x38>)
 8009062:	461c      	mov	r4, r3
 8009064:	e7f3      	b.n	800904e <__assert_func+0x12>
 8009066:	bf00      	nop
 8009068:	20000068 	.word	0x20000068
 800906c:	08009dac 	.word	0x08009dac
 8009070:	08009db9 	.word	0x08009db9
 8009074:	08009de7 	.word	0x08009de7

08009078 <fiprintf>:
 8009078:	b40e      	push	{r1, r2, r3}
 800907a:	b503      	push	{r0, r1, lr}
 800907c:	4601      	mov	r1, r0
 800907e:	ab03      	add	r3, sp, #12
 8009080:	4805      	ldr	r0, [pc, #20]	; (8009098 <fiprintf+0x20>)
 8009082:	f853 2b04 	ldr.w	r2, [r3], #4
 8009086:	6800      	ldr	r0, [r0, #0]
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	f000 f845 	bl	8009118 <_vfiprintf_r>
 800908e:	b002      	add	sp, #8
 8009090:	f85d eb04 	ldr.w	lr, [sp], #4
 8009094:	b003      	add	sp, #12
 8009096:	4770      	bx	lr
 8009098:	20000068 	.word	0x20000068

0800909c <__retarget_lock_init_recursive>:
 800909c:	4770      	bx	lr

0800909e <__retarget_lock_acquire_recursive>:
 800909e:	4770      	bx	lr

080090a0 <__retarget_lock_release_recursive>:
 80090a0:	4770      	bx	lr

080090a2 <__ascii_mbtowc>:
 80090a2:	b082      	sub	sp, #8
 80090a4:	b901      	cbnz	r1, 80090a8 <__ascii_mbtowc+0x6>
 80090a6:	a901      	add	r1, sp, #4
 80090a8:	b142      	cbz	r2, 80090bc <__ascii_mbtowc+0x1a>
 80090aa:	b14b      	cbz	r3, 80090c0 <__ascii_mbtowc+0x1e>
 80090ac:	7813      	ldrb	r3, [r2, #0]
 80090ae:	600b      	str	r3, [r1, #0]
 80090b0:	7812      	ldrb	r2, [r2, #0]
 80090b2:	1e10      	subs	r0, r2, #0
 80090b4:	bf18      	it	ne
 80090b6:	2001      	movne	r0, #1
 80090b8:	b002      	add	sp, #8
 80090ba:	4770      	bx	lr
 80090bc:	4610      	mov	r0, r2
 80090be:	e7fb      	b.n	80090b8 <__ascii_mbtowc+0x16>
 80090c0:	f06f 0001 	mvn.w	r0, #1
 80090c4:	e7f8      	b.n	80090b8 <__ascii_mbtowc+0x16>

080090c6 <__sfputc_r>:
 80090c6:	6893      	ldr	r3, [r2, #8]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	b410      	push	{r4}
 80090ce:	6093      	str	r3, [r2, #8]
 80090d0:	da08      	bge.n	80090e4 <__sfputc_r+0x1e>
 80090d2:	6994      	ldr	r4, [r2, #24]
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	db01      	blt.n	80090dc <__sfputc_r+0x16>
 80090d8:	290a      	cmp	r1, #10
 80090da:	d103      	bne.n	80090e4 <__sfputc_r+0x1e>
 80090dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090e0:	f000 b94a 	b.w	8009378 <__swbuf_r>
 80090e4:	6813      	ldr	r3, [r2, #0]
 80090e6:	1c58      	adds	r0, r3, #1
 80090e8:	6010      	str	r0, [r2, #0]
 80090ea:	7019      	strb	r1, [r3, #0]
 80090ec:	4608      	mov	r0, r1
 80090ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <__sfputs_r>:
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	4606      	mov	r6, r0
 80090f8:	460f      	mov	r7, r1
 80090fa:	4614      	mov	r4, r2
 80090fc:	18d5      	adds	r5, r2, r3
 80090fe:	42ac      	cmp	r4, r5
 8009100:	d101      	bne.n	8009106 <__sfputs_r+0x12>
 8009102:	2000      	movs	r0, #0
 8009104:	e007      	b.n	8009116 <__sfputs_r+0x22>
 8009106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910a:	463a      	mov	r2, r7
 800910c:	4630      	mov	r0, r6
 800910e:	f7ff ffda 	bl	80090c6 <__sfputc_r>
 8009112:	1c43      	adds	r3, r0, #1
 8009114:	d1f3      	bne.n	80090fe <__sfputs_r+0xa>
 8009116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009118 <_vfiprintf_r>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	460d      	mov	r5, r1
 800911e:	b09d      	sub	sp, #116	; 0x74
 8009120:	4614      	mov	r4, r2
 8009122:	4698      	mov	r8, r3
 8009124:	4606      	mov	r6, r0
 8009126:	b118      	cbz	r0, 8009130 <_vfiprintf_r+0x18>
 8009128:	6983      	ldr	r3, [r0, #24]
 800912a:	b90b      	cbnz	r3, 8009130 <_vfiprintf_r+0x18>
 800912c:	f000 fb14 	bl	8009758 <__sinit>
 8009130:	4b89      	ldr	r3, [pc, #548]	; (8009358 <_vfiprintf_r+0x240>)
 8009132:	429d      	cmp	r5, r3
 8009134:	d11b      	bne.n	800916e <_vfiprintf_r+0x56>
 8009136:	6875      	ldr	r5, [r6, #4]
 8009138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800913a:	07d9      	lsls	r1, r3, #31
 800913c:	d405      	bmi.n	800914a <_vfiprintf_r+0x32>
 800913e:	89ab      	ldrh	r3, [r5, #12]
 8009140:	059a      	lsls	r2, r3, #22
 8009142:	d402      	bmi.n	800914a <_vfiprintf_r+0x32>
 8009144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009146:	f7ff ffaa 	bl	800909e <__retarget_lock_acquire_recursive>
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	071b      	lsls	r3, r3, #28
 800914e:	d501      	bpl.n	8009154 <_vfiprintf_r+0x3c>
 8009150:	692b      	ldr	r3, [r5, #16]
 8009152:	b9eb      	cbnz	r3, 8009190 <_vfiprintf_r+0x78>
 8009154:	4629      	mov	r1, r5
 8009156:	4630      	mov	r0, r6
 8009158:	f000 f96e 	bl	8009438 <__swsetup_r>
 800915c:	b1c0      	cbz	r0, 8009190 <_vfiprintf_r+0x78>
 800915e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009160:	07dc      	lsls	r4, r3, #31
 8009162:	d50e      	bpl.n	8009182 <_vfiprintf_r+0x6a>
 8009164:	f04f 30ff 	mov.w	r0, #4294967295
 8009168:	b01d      	add	sp, #116	; 0x74
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	4b7b      	ldr	r3, [pc, #492]	; (800935c <_vfiprintf_r+0x244>)
 8009170:	429d      	cmp	r5, r3
 8009172:	d101      	bne.n	8009178 <_vfiprintf_r+0x60>
 8009174:	68b5      	ldr	r5, [r6, #8]
 8009176:	e7df      	b.n	8009138 <_vfiprintf_r+0x20>
 8009178:	4b79      	ldr	r3, [pc, #484]	; (8009360 <_vfiprintf_r+0x248>)
 800917a:	429d      	cmp	r5, r3
 800917c:	bf08      	it	eq
 800917e:	68f5      	ldreq	r5, [r6, #12]
 8009180:	e7da      	b.n	8009138 <_vfiprintf_r+0x20>
 8009182:	89ab      	ldrh	r3, [r5, #12]
 8009184:	0598      	lsls	r0, r3, #22
 8009186:	d4ed      	bmi.n	8009164 <_vfiprintf_r+0x4c>
 8009188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800918a:	f7ff ff89 	bl	80090a0 <__retarget_lock_release_recursive>
 800918e:	e7e9      	b.n	8009164 <_vfiprintf_r+0x4c>
 8009190:	2300      	movs	r3, #0
 8009192:	9309      	str	r3, [sp, #36]	; 0x24
 8009194:	2320      	movs	r3, #32
 8009196:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800919a:	f8cd 800c 	str.w	r8, [sp, #12]
 800919e:	2330      	movs	r3, #48	; 0x30
 80091a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009364 <_vfiprintf_r+0x24c>
 80091a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091a8:	f04f 0901 	mov.w	r9, #1
 80091ac:	4623      	mov	r3, r4
 80091ae:	469a      	mov	sl, r3
 80091b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b4:	b10a      	cbz	r2, 80091ba <_vfiprintf_r+0xa2>
 80091b6:	2a25      	cmp	r2, #37	; 0x25
 80091b8:	d1f9      	bne.n	80091ae <_vfiprintf_r+0x96>
 80091ba:	ebba 0b04 	subs.w	fp, sl, r4
 80091be:	d00b      	beq.n	80091d8 <_vfiprintf_r+0xc0>
 80091c0:	465b      	mov	r3, fp
 80091c2:	4622      	mov	r2, r4
 80091c4:	4629      	mov	r1, r5
 80091c6:	4630      	mov	r0, r6
 80091c8:	f7ff ff94 	bl	80090f4 <__sfputs_r>
 80091cc:	3001      	adds	r0, #1
 80091ce:	f000 80aa 	beq.w	8009326 <_vfiprintf_r+0x20e>
 80091d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d4:	445a      	add	r2, fp
 80091d6:	9209      	str	r2, [sp, #36]	; 0x24
 80091d8:	f89a 3000 	ldrb.w	r3, [sl]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 80a2 	beq.w	8009326 <_vfiprintf_r+0x20e>
 80091e2:	2300      	movs	r3, #0
 80091e4:	f04f 32ff 	mov.w	r2, #4294967295
 80091e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ec:	f10a 0a01 	add.w	sl, sl, #1
 80091f0:	9304      	str	r3, [sp, #16]
 80091f2:	9307      	str	r3, [sp, #28]
 80091f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091f8:	931a      	str	r3, [sp, #104]	; 0x68
 80091fa:	4654      	mov	r4, sl
 80091fc:	2205      	movs	r2, #5
 80091fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009202:	4858      	ldr	r0, [pc, #352]	; (8009364 <_vfiprintf_r+0x24c>)
 8009204:	f7f7 f824 	bl	8000250 <memchr>
 8009208:	9a04      	ldr	r2, [sp, #16]
 800920a:	b9d8      	cbnz	r0, 8009244 <_vfiprintf_r+0x12c>
 800920c:	06d1      	lsls	r1, r2, #27
 800920e:	bf44      	itt	mi
 8009210:	2320      	movmi	r3, #32
 8009212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009216:	0713      	lsls	r3, r2, #28
 8009218:	bf44      	itt	mi
 800921a:	232b      	movmi	r3, #43	; 0x2b
 800921c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009220:	f89a 3000 	ldrb.w	r3, [sl]
 8009224:	2b2a      	cmp	r3, #42	; 0x2a
 8009226:	d015      	beq.n	8009254 <_vfiprintf_r+0x13c>
 8009228:	9a07      	ldr	r2, [sp, #28]
 800922a:	4654      	mov	r4, sl
 800922c:	2000      	movs	r0, #0
 800922e:	f04f 0c0a 	mov.w	ip, #10
 8009232:	4621      	mov	r1, r4
 8009234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009238:	3b30      	subs	r3, #48	; 0x30
 800923a:	2b09      	cmp	r3, #9
 800923c:	d94e      	bls.n	80092dc <_vfiprintf_r+0x1c4>
 800923e:	b1b0      	cbz	r0, 800926e <_vfiprintf_r+0x156>
 8009240:	9207      	str	r2, [sp, #28]
 8009242:	e014      	b.n	800926e <_vfiprintf_r+0x156>
 8009244:	eba0 0308 	sub.w	r3, r0, r8
 8009248:	fa09 f303 	lsl.w	r3, r9, r3
 800924c:	4313      	orrs	r3, r2
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	46a2      	mov	sl, r4
 8009252:	e7d2      	b.n	80091fa <_vfiprintf_r+0xe2>
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	1d19      	adds	r1, r3, #4
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	9103      	str	r1, [sp, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	bfbb      	ittet	lt
 8009260:	425b      	neglt	r3, r3
 8009262:	f042 0202 	orrlt.w	r2, r2, #2
 8009266:	9307      	strge	r3, [sp, #28]
 8009268:	9307      	strlt	r3, [sp, #28]
 800926a:	bfb8      	it	lt
 800926c:	9204      	strlt	r2, [sp, #16]
 800926e:	7823      	ldrb	r3, [r4, #0]
 8009270:	2b2e      	cmp	r3, #46	; 0x2e
 8009272:	d10c      	bne.n	800928e <_vfiprintf_r+0x176>
 8009274:	7863      	ldrb	r3, [r4, #1]
 8009276:	2b2a      	cmp	r3, #42	; 0x2a
 8009278:	d135      	bne.n	80092e6 <_vfiprintf_r+0x1ce>
 800927a:	9b03      	ldr	r3, [sp, #12]
 800927c:	1d1a      	adds	r2, r3, #4
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	9203      	str	r2, [sp, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	bfb8      	it	lt
 8009286:	f04f 33ff 	movlt.w	r3, #4294967295
 800928a:	3402      	adds	r4, #2
 800928c:	9305      	str	r3, [sp, #20]
 800928e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009374 <_vfiprintf_r+0x25c>
 8009292:	7821      	ldrb	r1, [r4, #0]
 8009294:	2203      	movs	r2, #3
 8009296:	4650      	mov	r0, sl
 8009298:	f7f6 ffda 	bl	8000250 <memchr>
 800929c:	b140      	cbz	r0, 80092b0 <_vfiprintf_r+0x198>
 800929e:	2340      	movs	r3, #64	; 0x40
 80092a0:	eba0 000a 	sub.w	r0, r0, sl
 80092a4:	fa03 f000 	lsl.w	r0, r3, r0
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	4303      	orrs	r3, r0
 80092ac:	3401      	adds	r4, #1
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b4:	482c      	ldr	r0, [pc, #176]	; (8009368 <_vfiprintf_r+0x250>)
 80092b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092ba:	2206      	movs	r2, #6
 80092bc:	f7f6 ffc8 	bl	8000250 <memchr>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d03f      	beq.n	8009344 <_vfiprintf_r+0x22c>
 80092c4:	4b29      	ldr	r3, [pc, #164]	; (800936c <_vfiprintf_r+0x254>)
 80092c6:	bb1b      	cbnz	r3, 8009310 <_vfiprintf_r+0x1f8>
 80092c8:	9b03      	ldr	r3, [sp, #12]
 80092ca:	3307      	adds	r3, #7
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	3308      	adds	r3, #8
 80092d2:	9303      	str	r3, [sp, #12]
 80092d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d6:	443b      	add	r3, r7
 80092d8:	9309      	str	r3, [sp, #36]	; 0x24
 80092da:	e767      	b.n	80091ac <_vfiprintf_r+0x94>
 80092dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e0:	460c      	mov	r4, r1
 80092e2:	2001      	movs	r0, #1
 80092e4:	e7a5      	b.n	8009232 <_vfiprintf_r+0x11a>
 80092e6:	2300      	movs	r3, #0
 80092e8:	3401      	adds	r4, #1
 80092ea:	9305      	str	r3, [sp, #20]
 80092ec:	4619      	mov	r1, r3
 80092ee:	f04f 0c0a 	mov.w	ip, #10
 80092f2:	4620      	mov	r0, r4
 80092f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f8:	3a30      	subs	r2, #48	; 0x30
 80092fa:	2a09      	cmp	r2, #9
 80092fc:	d903      	bls.n	8009306 <_vfiprintf_r+0x1ee>
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d0c5      	beq.n	800928e <_vfiprintf_r+0x176>
 8009302:	9105      	str	r1, [sp, #20]
 8009304:	e7c3      	b.n	800928e <_vfiprintf_r+0x176>
 8009306:	fb0c 2101 	mla	r1, ip, r1, r2
 800930a:	4604      	mov	r4, r0
 800930c:	2301      	movs	r3, #1
 800930e:	e7f0      	b.n	80092f2 <_vfiprintf_r+0x1da>
 8009310:	ab03      	add	r3, sp, #12
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	462a      	mov	r2, r5
 8009316:	4b16      	ldr	r3, [pc, #88]	; (8009370 <_vfiprintf_r+0x258>)
 8009318:	a904      	add	r1, sp, #16
 800931a:	4630      	mov	r0, r6
 800931c:	f7fe f910 	bl	8007540 <_printf_float>
 8009320:	4607      	mov	r7, r0
 8009322:	1c78      	adds	r0, r7, #1
 8009324:	d1d6      	bne.n	80092d4 <_vfiprintf_r+0x1bc>
 8009326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009328:	07d9      	lsls	r1, r3, #31
 800932a:	d405      	bmi.n	8009338 <_vfiprintf_r+0x220>
 800932c:	89ab      	ldrh	r3, [r5, #12]
 800932e:	059a      	lsls	r2, r3, #22
 8009330:	d402      	bmi.n	8009338 <_vfiprintf_r+0x220>
 8009332:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009334:	f7ff feb4 	bl	80090a0 <__retarget_lock_release_recursive>
 8009338:	89ab      	ldrh	r3, [r5, #12]
 800933a:	065b      	lsls	r3, r3, #25
 800933c:	f53f af12 	bmi.w	8009164 <_vfiprintf_r+0x4c>
 8009340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009342:	e711      	b.n	8009168 <_vfiprintf_r+0x50>
 8009344:	ab03      	add	r3, sp, #12
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	462a      	mov	r2, r5
 800934a:	4b09      	ldr	r3, [pc, #36]	; (8009370 <_vfiprintf_r+0x258>)
 800934c:	a904      	add	r1, sp, #16
 800934e:	4630      	mov	r0, r6
 8009350:	f7fe fb82 	bl	8007a58 <_printf_i>
 8009354:	e7e4      	b.n	8009320 <_vfiprintf_r+0x208>
 8009356:	bf00      	nop
 8009358:	08009f24 	.word	0x08009f24
 800935c:	08009f44 	.word	0x08009f44
 8009360:	08009f04 	.word	0x08009f04
 8009364:	08009df2 	.word	0x08009df2
 8009368:	08009dfc 	.word	0x08009dfc
 800936c:	08007541 	.word	0x08007541
 8009370:	080090f5 	.word	0x080090f5
 8009374:	08009df8 	.word	0x08009df8

08009378 <__swbuf_r>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	460e      	mov	r6, r1
 800937c:	4614      	mov	r4, r2
 800937e:	4605      	mov	r5, r0
 8009380:	b118      	cbz	r0, 800938a <__swbuf_r+0x12>
 8009382:	6983      	ldr	r3, [r0, #24]
 8009384:	b90b      	cbnz	r3, 800938a <__swbuf_r+0x12>
 8009386:	f000 f9e7 	bl	8009758 <__sinit>
 800938a:	4b21      	ldr	r3, [pc, #132]	; (8009410 <__swbuf_r+0x98>)
 800938c:	429c      	cmp	r4, r3
 800938e:	d12b      	bne.n	80093e8 <__swbuf_r+0x70>
 8009390:	686c      	ldr	r4, [r5, #4]
 8009392:	69a3      	ldr	r3, [r4, #24]
 8009394:	60a3      	str	r3, [r4, #8]
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	071a      	lsls	r2, r3, #28
 800939a:	d52f      	bpl.n	80093fc <__swbuf_r+0x84>
 800939c:	6923      	ldr	r3, [r4, #16]
 800939e:	b36b      	cbz	r3, 80093fc <__swbuf_r+0x84>
 80093a0:	6923      	ldr	r3, [r4, #16]
 80093a2:	6820      	ldr	r0, [r4, #0]
 80093a4:	1ac0      	subs	r0, r0, r3
 80093a6:	6963      	ldr	r3, [r4, #20]
 80093a8:	b2f6      	uxtb	r6, r6
 80093aa:	4283      	cmp	r3, r0
 80093ac:	4637      	mov	r7, r6
 80093ae:	dc04      	bgt.n	80093ba <__swbuf_r+0x42>
 80093b0:	4621      	mov	r1, r4
 80093b2:	4628      	mov	r0, r5
 80093b4:	f000 f93c 	bl	8009630 <_fflush_r>
 80093b8:	bb30      	cbnz	r0, 8009408 <__swbuf_r+0x90>
 80093ba:	68a3      	ldr	r3, [r4, #8]
 80093bc:	3b01      	subs	r3, #1
 80093be:	60a3      	str	r3, [r4, #8]
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	6022      	str	r2, [r4, #0]
 80093c6:	701e      	strb	r6, [r3, #0]
 80093c8:	6963      	ldr	r3, [r4, #20]
 80093ca:	3001      	adds	r0, #1
 80093cc:	4283      	cmp	r3, r0
 80093ce:	d004      	beq.n	80093da <__swbuf_r+0x62>
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	07db      	lsls	r3, r3, #31
 80093d4:	d506      	bpl.n	80093e4 <__swbuf_r+0x6c>
 80093d6:	2e0a      	cmp	r6, #10
 80093d8:	d104      	bne.n	80093e4 <__swbuf_r+0x6c>
 80093da:	4621      	mov	r1, r4
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 f927 	bl	8009630 <_fflush_r>
 80093e2:	b988      	cbnz	r0, 8009408 <__swbuf_r+0x90>
 80093e4:	4638      	mov	r0, r7
 80093e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e8:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <__swbuf_r+0x9c>)
 80093ea:	429c      	cmp	r4, r3
 80093ec:	d101      	bne.n	80093f2 <__swbuf_r+0x7a>
 80093ee:	68ac      	ldr	r4, [r5, #8]
 80093f0:	e7cf      	b.n	8009392 <__swbuf_r+0x1a>
 80093f2:	4b09      	ldr	r3, [pc, #36]	; (8009418 <__swbuf_r+0xa0>)
 80093f4:	429c      	cmp	r4, r3
 80093f6:	bf08      	it	eq
 80093f8:	68ec      	ldreq	r4, [r5, #12]
 80093fa:	e7ca      	b.n	8009392 <__swbuf_r+0x1a>
 80093fc:	4621      	mov	r1, r4
 80093fe:	4628      	mov	r0, r5
 8009400:	f000 f81a 	bl	8009438 <__swsetup_r>
 8009404:	2800      	cmp	r0, #0
 8009406:	d0cb      	beq.n	80093a0 <__swbuf_r+0x28>
 8009408:	f04f 37ff 	mov.w	r7, #4294967295
 800940c:	e7ea      	b.n	80093e4 <__swbuf_r+0x6c>
 800940e:	bf00      	nop
 8009410:	08009f24 	.word	0x08009f24
 8009414:	08009f44 	.word	0x08009f44
 8009418:	08009f04 	.word	0x08009f04

0800941c <__ascii_wctomb>:
 800941c:	b149      	cbz	r1, 8009432 <__ascii_wctomb+0x16>
 800941e:	2aff      	cmp	r2, #255	; 0xff
 8009420:	bf85      	ittet	hi
 8009422:	238a      	movhi	r3, #138	; 0x8a
 8009424:	6003      	strhi	r3, [r0, #0]
 8009426:	700a      	strbls	r2, [r1, #0]
 8009428:	f04f 30ff 	movhi.w	r0, #4294967295
 800942c:	bf98      	it	ls
 800942e:	2001      	movls	r0, #1
 8009430:	4770      	bx	lr
 8009432:	4608      	mov	r0, r1
 8009434:	4770      	bx	lr
	...

08009438 <__swsetup_r>:
 8009438:	4b32      	ldr	r3, [pc, #200]	; (8009504 <__swsetup_r+0xcc>)
 800943a:	b570      	push	{r4, r5, r6, lr}
 800943c:	681d      	ldr	r5, [r3, #0]
 800943e:	4606      	mov	r6, r0
 8009440:	460c      	mov	r4, r1
 8009442:	b125      	cbz	r5, 800944e <__swsetup_r+0x16>
 8009444:	69ab      	ldr	r3, [r5, #24]
 8009446:	b913      	cbnz	r3, 800944e <__swsetup_r+0x16>
 8009448:	4628      	mov	r0, r5
 800944a:	f000 f985 	bl	8009758 <__sinit>
 800944e:	4b2e      	ldr	r3, [pc, #184]	; (8009508 <__swsetup_r+0xd0>)
 8009450:	429c      	cmp	r4, r3
 8009452:	d10f      	bne.n	8009474 <__swsetup_r+0x3c>
 8009454:	686c      	ldr	r4, [r5, #4]
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800945c:	0719      	lsls	r1, r3, #28
 800945e:	d42c      	bmi.n	80094ba <__swsetup_r+0x82>
 8009460:	06dd      	lsls	r5, r3, #27
 8009462:	d411      	bmi.n	8009488 <__swsetup_r+0x50>
 8009464:	2309      	movs	r3, #9
 8009466:	6033      	str	r3, [r6, #0]
 8009468:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	f04f 30ff 	mov.w	r0, #4294967295
 8009472:	e03e      	b.n	80094f2 <__swsetup_r+0xba>
 8009474:	4b25      	ldr	r3, [pc, #148]	; (800950c <__swsetup_r+0xd4>)
 8009476:	429c      	cmp	r4, r3
 8009478:	d101      	bne.n	800947e <__swsetup_r+0x46>
 800947a:	68ac      	ldr	r4, [r5, #8]
 800947c:	e7eb      	b.n	8009456 <__swsetup_r+0x1e>
 800947e:	4b24      	ldr	r3, [pc, #144]	; (8009510 <__swsetup_r+0xd8>)
 8009480:	429c      	cmp	r4, r3
 8009482:	bf08      	it	eq
 8009484:	68ec      	ldreq	r4, [r5, #12]
 8009486:	e7e6      	b.n	8009456 <__swsetup_r+0x1e>
 8009488:	0758      	lsls	r0, r3, #29
 800948a:	d512      	bpl.n	80094b2 <__swsetup_r+0x7a>
 800948c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800948e:	b141      	cbz	r1, 80094a2 <__swsetup_r+0x6a>
 8009490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009494:	4299      	cmp	r1, r3
 8009496:	d002      	beq.n	800949e <__swsetup_r+0x66>
 8009498:	4630      	mov	r0, r6
 800949a:	f7fd ff15 	bl	80072c8 <_free_r>
 800949e:	2300      	movs	r3, #0
 80094a0:	6363      	str	r3, [r4, #52]	; 0x34
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	2300      	movs	r3, #0
 80094ac:	6063      	str	r3, [r4, #4]
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	f043 0308 	orr.w	r3, r3, #8
 80094b8:	81a3      	strh	r3, [r4, #12]
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	b94b      	cbnz	r3, 80094d2 <__swsetup_r+0x9a>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094c8:	d003      	beq.n	80094d2 <__swsetup_r+0x9a>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4630      	mov	r0, r6
 80094ce:	f000 fa05 	bl	80098dc <__smakebuf_r>
 80094d2:	89a0      	ldrh	r0, [r4, #12]
 80094d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094d8:	f010 0301 	ands.w	r3, r0, #1
 80094dc:	d00a      	beq.n	80094f4 <__swsetup_r+0xbc>
 80094de:	2300      	movs	r3, #0
 80094e0:	60a3      	str	r3, [r4, #8]
 80094e2:	6963      	ldr	r3, [r4, #20]
 80094e4:	425b      	negs	r3, r3
 80094e6:	61a3      	str	r3, [r4, #24]
 80094e8:	6923      	ldr	r3, [r4, #16]
 80094ea:	b943      	cbnz	r3, 80094fe <__swsetup_r+0xc6>
 80094ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094f0:	d1ba      	bne.n	8009468 <__swsetup_r+0x30>
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	0781      	lsls	r1, r0, #30
 80094f6:	bf58      	it	pl
 80094f8:	6963      	ldrpl	r3, [r4, #20]
 80094fa:	60a3      	str	r3, [r4, #8]
 80094fc:	e7f4      	b.n	80094e8 <__swsetup_r+0xb0>
 80094fe:	2000      	movs	r0, #0
 8009500:	e7f7      	b.n	80094f2 <__swsetup_r+0xba>
 8009502:	bf00      	nop
 8009504:	20000068 	.word	0x20000068
 8009508:	08009f24 	.word	0x08009f24
 800950c:	08009f44 	.word	0x08009f44
 8009510:	08009f04 	.word	0x08009f04

08009514 <abort>:
 8009514:	b508      	push	{r3, lr}
 8009516:	2006      	movs	r0, #6
 8009518:	f000 fa48 	bl	80099ac <raise>
 800951c:	2001      	movs	r0, #1
 800951e:	f7f8 f925 	bl	800176c <_exit>
	...

08009524 <__sflush_r>:
 8009524:	898a      	ldrh	r2, [r1, #12]
 8009526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952a:	4605      	mov	r5, r0
 800952c:	0710      	lsls	r0, r2, #28
 800952e:	460c      	mov	r4, r1
 8009530:	d458      	bmi.n	80095e4 <__sflush_r+0xc0>
 8009532:	684b      	ldr	r3, [r1, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dc05      	bgt.n	8009544 <__sflush_r+0x20>
 8009538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	dc02      	bgt.n	8009544 <__sflush_r+0x20>
 800953e:	2000      	movs	r0, #0
 8009540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009546:	2e00      	cmp	r6, #0
 8009548:	d0f9      	beq.n	800953e <__sflush_r+0x1a>
 800954a:	2300      	movs	r3, #0
 800954c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009550:	682f      	ldr	r7, [r5, #0]
 8009552:	602b      	str	r3, [r5, #0]
 8009554:	d032      	beq.n	80095bc <__sflush_r+0x98>
 8009556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	075a      	lsls	r2, r3, #29
 800955c:	d505      	bpl.n	800956a <__sflush_r+0x46>
 800955e:	6863      	ldr	r3, [r4, #4]
 8009560:	1ac0      	subs	r0, r0, r3
 8009562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009564:	b10b      	cbz	r3, 800956a <__sflush_r+0x46>
 8009566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009568:	1ac0      	subs	r0, r0, r3
 800956a:	2300      	movs	r3, #0
 800956c:	4602      	mov	r2, r0
 800956e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009570:	6a21      	ldr	r1, [r4, #32]
 8009572:	4628      	mov	r0, r5
 8009574:	47b0      	blx	r6
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	d106      	bne.n	800958a <__sflush_r+0x66>
 800957c:	6829      	ldr	r1, [r5, #0]
 800957e:	291d      	cmp	r1, #29
 8009580:	d82c      	bhi.n	80095dc <__sflush_r+0xb8>
 8009582:	4a2a      	ldr	r2, [pc, #168]	; (800962c <__sflush_r+0x108>)
 8009584:	40ca      	lsrs	r2, r1
 8009586:	07d6      	lsls	r6, r2, #31
 8009588:	d528      	bpl.n	80095dc <__sflush_r+0xb8>
 800958a:	2200      	movs	r2, #0
 800958c:	6062      	str	r2, [r4, #4]
 800958e:	04d9      	lsls	r1, r3, #19
 8009590:	6922      	ldr	r2, [r4, #16]
 8009592:	6022      	str	r2, [r4, #0]
 8009594:	d504      	bpl.n	80095a0 <__sflush_r+0x7c>
 8009596:	1c42      	adds	r2, r0, #1
 8009598:	d101      	bne.n	800959e <__sflush_r+0x7a>
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	b903      	cbnz	r3, 80095a0 <__sflush_r+0x7c>
 800959e:	6560      	str	r0, [r4, #84]	; 0x54
 80095a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095a2:	602f      	str	r7, [r5, #0]
 80095a4:	2900      	cmp	r1, #0
 80095a6:	d0ca      	beq.n	800953e <__sflush_r+0x1a>
 80095a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095ac:	4299      	cmp	r1, r3
 80095ae:	d002      	beq.n	80095b6 <__sflush_r+0x92>
 80095b0:	4628      	mov	r0, r5
 80095b2:	f7fd fe89 	bl	80072c8 <_free_r>
 80095b6:	2000      	movs	r0, #0
 80095b8:	6360      	str	r0, [r4, #52]	; 0x34
 80095ba:	e7c1      	b.n	8009540 <__sflush_r+0x1c>
 80095bc:	6a21      	ldr	r1, [r4, #32]
 80095be:	2301      	movs	r3, #1
 80095c0:	4628      	mov	r0, r5
 80095c2:	47b0      	blx	r6
 80095c4:	1c41      	adds	r1, r0, #1
 80095c6:	d1c7      	bne.n	8009558 <__sflush_r+0x34>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0c4      	beq.n	8009558 <__sflush_r+0x34>
 80095ce:	2b1d      	cmp	r3, #29
 80095d0:	d001      	beq.n	80095d6 <__sflush_r+0xb2>
 80095d2:	2b16      	cmp	r3, #22
 80095d4:	d101      	bne.n	80095da <__sflush_r+0xb6>
 80095d6:	602f      	str	r7, [r5, #0]
 80095d8:	e7b1      	b.n	800953e <__sflush_r+0x1a>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e0:	81a3      	strh	r3, [r4, #12]
 80095e2:	e7ad      	b.n	8009540 <__sflush_r+0x1c>
 80095e4:	690f      	ldr	r7, [r1, #16]
 80095e6:	2f00      	cmp	r7, #0
 80095e8:	d0a9      	beq.n	800953e <__sflush_r+0x1a>
 80095ea:	0793      	lsls	r3, r2, #30
 80095ec:	680e      	ldr	r6, [r1, #0]
 80095ee:	bf08      	it	eq
 80095f0:	694b      	ldreq	r3, [r1, #20]
 80095f2:	600f      	str	r7, [r1, #0]
 80095f4:	bf18      	it	ne
 80095f6:	2300      	movne	r3, #0
 80095f8:	eba6 0807 	sub.w	r8, r6, r7
 80095fc:	608b      	str	r3, [r1, #8]
 80095fe:	f1b8 0f00 	cmp.w	r8, #0
 8009602:	dd9c      	ble.n	800953e <__sflush_r+0x1a>
 8009604:	6a21      	ldr	r1, [r4, #32]
 8009606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009608:	4643      	mov	r3, r8
 800960a:	463a      	mov	r2, r7
 800960c:	4628      	mov	r0, r5
 800960e:	47b0      	blx	r6
 8009610:	2800      	cmp	r0, #0
 8009612:	dc06      	bgt.n	8009622 <__sflush_r+0xfe>
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800961a:	81a3      	strh	r3, [r4, #12]
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	e78e      	b.n	8009540 <__sflush_r+0x1c>
 8009622:	4407      	add	r7, r0
 8009624:	eba8 0800 	sub.w	r8, r8, r0
 8009628:	e7e9      	b.n	80095fe <__sflush_r+0xda>
 800962a:	bf00      	nop
 800962c:	20400001 	.word	0x20400001

08009630 <_fflush_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	690b      	ldr	r3, [r1, #16]
 8009634:	4605      	mov	r5, r0
 8009636:	460c      	mov	r4, r1
 8009638:	b913      	cbnz	r3, 8009640 <_fflush_r+0x10>
 800963a:	2500      	movs	r5, #0
 800963c:	4628      	mov	r0, r5
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	b118      	cbz	r0, 800964a <_fflush_r+0x1a>
 8009642:	6983      	ldr	r3, [r0, #24]
 8009644:	b90b      	cbnz	r3, 800964a <_fflush_r+0x1a>
 8009646:	f000 f887 	bl	8009758 <__sinit>
 800964a:	4b14      	ldr	r3, [pc, #80]	; (800969c <_fflush_r+0x6c>)
 800964c:	429c      	cmp	r4, r3
 800964e:	d11b      	bne.n	8009688 <_fflush_r+0x58>
 8009650:	686c      	ldr	r4, [r5, #4]
 8009652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0ef      	beq.n	800963a <_fflush_r+0xa>
 800965a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800965c:	07d0      	lsls	r0, r2, #31
 800965e:	d404      	bmi.n	800966a <_fflush_r+0x3a>
 8009660:	0599      	lsls	r1, r3, #22
 8009662:	d402      	bmi.n	800966a <_fflush_r+0x3a>
 8009664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009666:	f7ff fd1a 	bl	800909e <__retarget_lock_acquire_recursive>
 800966a:	4628      	mov	r0, r5
 800966c:	4621      	mov	r1, r4
 800966e:	f7ff ff59 	bl	8009524 <__sflush_r>
 8009672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009674:	07da      	lsls	r2, r3, #31
 8009676:	4605      	mov	r5, r0
 8009678:	d4e0      	bmi.n	800963c <_fflush_r+0xc>
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	059b      	lsls	r3, r3, #22
 800967e:	d4dd      	bmi.n	800963c <_fflush_r+0xc>
 8009680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009682:	f7ff fd0d 	bl	80090a0 <__retarget_lock_release_recursive>
 8009686:	e7d9      	b.n	800963c <_fflush_r+0xc>
 8009688:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <_fflush_r+0x70>)
 800968a:	429c      	cmp	r4, r3
 800968c:	d101      	bne.n	8009692 <_fflush_r+0x62>
 800968e:	68ac      	ldr	r4, [r5, #8]
 8009690:	e7df      	b.n	8009652 <_fflush_r+0x22>
 8009692:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <_fflush_r+0x74>)
 8009694:	429c      	cmp	r4, r3
 8009696:	bf08      	it	eq
 8009698:	68ec      	ldreq	r4, [r5, #12]
 800969a:	e7da      	b.n	8009652 <_fflush_r+0x22>
 800969c:	08009f24 	.word	0x08009f24
 80096a0:	08009f44 	.word	0x08009f44
 80096a4:	08009f04 	.word	0x08009f04

080096a8 <std>:
 80096a8:	2300      	movs	r3, #0
 80096aa:	b510      	push	{r4, lr}
 80096ac:	4604      	mov	r4, r0
 80096ae:	e9c0 3300 	strd	r3, r3, [r0]
 80096b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096b6:	6083      	str	r3, [r0, #8]
 80096b8:	8181      	strh	r1, [r0, #12]
 80096ba:	6643      	str	r3, [r0, #100]	; 0x64
 80096bc:	81c2      	strh	r2, [r0, #14]
 80096be:	6183      	str	r3, [r0, #24]
 80096c0:	4619      	mov	r1, r3
 80096c2:	2208      	movs	r2, #8
 80096c4:	305c      	adds	r0, #92	; 0x5c
 80096c6:	f7fd fdf7 	bl	80072b8 <memset>
 80096ca:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <std+0x38>)
 80096cc:	6263      	str	r3, [r4, #36]	; 0x24
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <std+0x3c>)
 80096d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <std+0x40>)
 80096d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <std+0x44>)
 80096d8:	6224      	str	r4, [r4, #32]
 80096da:	6323      	str	r3, [r4, #48]	; 0x30
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	bf00      	nop
 80096e0:	080099e5 	.word	0x080099e5
 80096e4:	08009a07 	.word	0x08009a07
 80096e8:	08009a3f 	.word	0x08009a3f
 80096ec:	08009a63 	.word	0x08009a63

080096f0 <_cleanup_r>:
 80096f0:	4901      	ldr	r1, [pc, #4]	; (80096f8 <_cleanup_r+0x8>)
 80096f2:	f000 b8af 	b.w	8009854 <_fwalk_reent>
 80096f6:	bf00      	nop
 80096f8:	08009631 	.word	0x08009631

080096fc <__sfmoreglue>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	1e4a      	subs	r2, r1, #1
 8009700:	2568      	movs	r5, #104	; 0x68
 8009702:	4355      	muls	r5, r2
 8009704:	460e      	mov	r6, r1
 8009706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800970a:	f7fd fe2d 	bl	8007368 <_malloc_r>
 800970e:	4604      	mov	r4, r0
 8009710:	b140      	cbz	r0, 8009724 <__sfmoreglue+0x28>
 8009712:	2100      	movs	r1, #0
 8009714:	e9c0 1600 	strd	r1, r6, [r0]
 8009718:	300c      	adds	r0, #12
 800971a:	60a0      	str	r0, [r4, #8]
 800971c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009720:	f7fd fdca 	bl	80072b8 <memset>
 8009724:	4620      	mov	r0, r4
 8009726:	bd70      	pop	{r4, r5, r6, pc}

08009728 <__sfp_lock_acquire>:
 8009728:	4801      	ldr	r0, [pc, #4]	; (8009730 <__sfp_lock_acquire+0x8>)
 800972a:	f7ff bcb8 	b.w	800909e <__retarget_lock_acquire_recursive>
 800972e:	bf00      	nop
 8009730:	200007c4 	.word	0x200007c4

08009734 <__sfp_lock_release>:
 8009734:	4801      	ldr	r0, [pc, #4]	; (800973c <__sfp_lock_release+0x8>)
 8009736:	f7ff bcb3 	b.w	80090a0 <__retarget_lock_release_recursive>
 800973a:	bf00      	nop
 800973c:	200007c4 	.word	0x200007c4

08009740 <__sinit_lock_acquire>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__sinit_lock_acquire+0x8>)
 8009742:	f7ff bcac 	b.w	800909e <__retarget_lock_acquire_recursive>
 8009746:	bf00      	nop
 8009748:	200007bf 	.word	0x200007bf

0800974c <__sinit_lock_release>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__sinit_lock_release+0x8>)
 800974e:	f7ff bca7 	b.w	80090a0 <__retarget_lock_release_recursive>
 8009752:	bf00      	nop
 8009754:	200007bf 	.word	0x200007bf

08009758 <__sinit>:
 8009758:	b510      	push	{r4, lr}
 800975a:	4604      	mov	r4, r0
 800975c:	f7ff fff0 	bl	8009740 <__sinit_lock_acquire>
 8009760:	69a3      	ldr	r3, [r4, #24]
 8009762:	b11b      	cbz	r3, 800976c <__sinit+0x14>
 8009764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009768:	f7ff bff0 	b.w	800974c <__sinit_lock_release>
 800976c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009770:	6523      	str	r3, [r4, #80]	; 0x50
 8009772:	4b13      	ldr	r3, [pc, #76]	; (80097c0 <__sinit+0x68>)
 8009774:	4a13      	ldr	r2, [pc, #76]	; (80097c4 <__sinit+0x6c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	62a2      	str	r2, [r4, #40]	; 0x28
 800977a:	42a3      	cmp	r3, r4
 800977c:	bf04      	itt	eq
 800977e:	2301      	moveq	r3, #1
 8009780:	61a3      	streq	r3, [r4, #24]
 8009782:	4620      	mov	r0, r4
 8009784:	f000 f820 	bl	80097c8 <__sfp>
 8009788:	6060      	str	r0, [r4, #4]
 800978a:	4620      	mov	r0, r4
 800978c:	f000 f81c 	bl	80097c8 <__sfp>
 8009790:	60a0      	str	r0, [r4, #8]
 8009792:	4620      	mov	r0, r4
 8009794:	f000 f818 	bl	80097c8 <__sfp>
 8009798:	2200      	movs	r2, #0
 800979a:	60e0      	str	r0, [r4, #12]
 800979c:	2104      	movs	r1, #4
 800979e:	6860      	ldr	r0, [r4, #4]
 80097a0:	f7ff ff82 	bl	80096a8 <std>
 80097a4:	68a0      	ldr	r0, [r4, #8]
 80097a6:	2201      	movs	r2, #1
 80097a8:	2109      	movs	r1, #9
 80097aa:	f7ff ff7d 	bl	80096a8 <std>
 80097ae:	68e0      	ldr	r0, [r4, #12]
 80097b0:	2202      	movs	r2, #2
 80097b2:	2112      	movs	r1, #18
 80097b4:	f7ff ff78 	bl	80096a8 <std>
 80097b8:	2301      	movs	r3, #1
 80097ba:	61a3      	str	r3, [r4, #24]
 80097bc:	e7d2      	b.n	8009764 <__sinit+0xc>
 80097be:	bf00      	nop
 80097c0:	08009b80 	.word	0x08009b80
 80097c4:	080096f1 	.word	0x080096f1

080097c8 <__sfp>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	4607      	mov	r7, r0
 80097cc:	f7ff ffac 	bl	8009728 <__sfp_lock_acquire>
 80097d0:	4b1e      	ldr	r3, [pc, #120]	; (800984c <__sfp+0x84>)
 80097d2:	681e      	ldr	r6, [r3, #0]
 80097d4:	69b3      	ldr	r3, [r6, #24]
 80097d6:	b913      	cbnz	r3, 80097de <__sfp+0x16>
 80097d8:	4630      	mov	r0, r6
 80097da:	f7ff ffbd 	bl	8009758 <__sinit>
 80097de:	3648      	adds	r6, #72	; 0x48
 80097e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	d503      	bpl.n	80097f0 <__sfp+0x28>
 80097e8:	6833      	ldr	r3, [r6, #0]
 80097ea:	b30b      	cbz	r3, 8009830 <__sfp+0x68>
 80097ec:	6836      	ldr	r6, [r6, #0]
 80097ee:	e7f7      	b.n	80097e0 <__sfp+0x18>
 80097f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097f4:	b9d5      	cbnz	r5, 800982c <__sfp+0x64>
 80097f6:	4b16      	ldr	r3, [pc, #88]	; (8009850 <__sfp+0x88>)
 80097f8:	60e3      	str	r3, [r4, #12]
 80097fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097fe:	6665      	str	r5, [r4, #100]	; 0x64
 8009800:	f7ff fc4c 	bl	800909c <__retarget_lock_init_recursive>
 8009804:	f7ff ff96 	bl	8009734 <__sfp_lock_release>
 8009808:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800980c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009810:	6025      	str	r5, [r4, #0]
 8009812:	61a5      	str	r5, [r4, #24]
 8009814:	2208      	movs	r2, #8
 8009816:	4629      	mov	r1, r5
 8009818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800981c:	f7fd fd4c 	bl	80072b8 <memset>
 8009820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009828:	4620      	mov	r0, r4
 800982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982c:	3468      	adds	r4, #104	; 0x68
 800982e:	e7d9      	b.n	80097e4 <__sfp+0x1c>
 8009830:	2104      	movs	r1, #4
 8009832:	4638      	mov	r0, r7
 8009834:	f7ff ff62 	bl	80096fc <__sfmoreglue>
 8009838:	4604      	mov	r4, r0
 800983a:	6030      	str	r0, [r6, #0]
 800983c:	2800      	cmp	r0, #0
 800983e:	d1d5      	bne.n	80097ec <__sfp+0x24>
 8009840:	f7ff ff78 	bl	8009734 <__sfp_lock_release>
 8009844:	230c      	movs	r3, #12
 8009846:	603b      	str	r3, [r7, #0]
 8009848:	e7ee      	b.n	8009828 <__sfp+0x60>
 800984a:	bf00      	nop
 800984c:	08009b80 	.word	0x08009b80
 8009850:	ffff0001 	.word	0xffff0001

08009854 <_fwalk_reent>:
 8009854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009858:	4606      	mov	r6, r0
 800985a:	4688      	mov	r8, r1
 800985c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009860:	2700      	movs	r7, #0
 8009862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009866:	f1b9 0901 	subs.w	r9, r9, #1
 800986a:	d505      	bpl.n	8009878 <_fwalk_reent+0x24>
 800986c:	6824      	ldr	r4, [r4, #0]
 800986e:	2c00      	cmp	r4, #0
 8009870:	d1f7      	bne.n	8009862 <_fwalk_reent+0xe>
 8009872:	4638      	mov	r0, r7
 8009874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009878:	89ab      	ldrh	r3, [r5, #12]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d907      	bls.n	800988e <_fwalk_reent+0x3a>
 800987e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009882:	3301      	adds	r3, #1
 8009884:	d003      	beq.n	800988e <_fwalk_reent+0x3a>
 8009886:	4629      	mov	r1, r5
 8009888:	4630      	mov	r0, r6
 800988a:	47c0      	blx	r8
 800988c:	4307      	orrs	r7, r0
 800988e:	3568      	adds	r5, #104	; 0x68
 8009890:	e7e9      	b.n	8009866 <_fwalk_reent+0x12>

08009892 <__swhatbuf_r>:
 8009892:	b570      	push	{r4, r5, r6, lr}
 8009894:	460e      	mov	r6, r1
 8009896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800989a:	2900      	cmp	r1, #0
 800989c:	b096      	sub	sp, #88	; 0x58
 800989e:	4614      	mov	r4, r2
 80098a0:	461d      	mov	r5, r3
 80098a2:	da07      	bge.n	80098b4 <__swhatbuf_r+0x22>
 80098a4:	2300      	movs	r3, #0
 80098a6:	602b      	str	r3, [r5, #0]
 80098a8:	89b3      	ldrh	r3, [r6, #12]
 80098aa:	061a      	lsls	r2, r3, #24
 80098ac:	d410      	bmi.n	80098d0 <__swhatbuf_r+0x3e>
 80098ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098b2:	e00e      	b.n	80098d2 <__swhatbuf_r+0x40>
 80098b4:	466a      	mov	r2, sp
 80098b6:	f000 f8fb 	bl	8009ab0 <_fstat_r>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	dbf2      	blt.n	80098a4 <__swhatbuf_r+0x12>
 80098be:	9a01      	ldr	r2, [sp, #4]
 80098c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098c8:	425a      	negs	r2, r3
 80098ca:	415a      	adcs	r2, r3
 80098cc:	602a      	str	r2, [r5, #0]
 80098ce:	e7ee      	b.n	80098ae <__swhatbuf_r+0x1c>
 80098d0:	2340      	movs	r3, #64	; 0x40
 80098d2:	2000      	movs	r0, #0
 80098d4:	6023      	str	r3, [r4, #0]
 80098d6:	b016      	add	sp, #88	; 0x58
 80098d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080098dc <__smakebuf_r>:
 80098dc:	898b      	ldrh	r3, [r1, #12]
 80098de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098e0:	079d      	lsls	r5, r3, #30
 80098e2:	4606      	mov	r6, r0
 80098e4:	460c      	mov	r4, r1
 80098e6:	d507      	bpl.n	80098f8 <__smakebuf_r+0x1c>
 80098e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	6123      	str	r3, [r4, #16]
 80098f0:	2301      	movs	r3, #1
 80098f2:	6163      	str	r3, [r4, #20]
 80098f4:	b002      	add	sp, #8
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	ab01      	add	r3, sp, #4
 80098fa:	466a      	mov	r2, sp
 80098fc:	f7ff ffc9 	bl	8009892 <__swhatbuf_r>
 8009900:	9900      	ldr	r1, [sp, #0]
 8009902:	4605      	mov	r5, r0
 8009904:	4630      	mov	r0, r6
 8009906:	f7fd fd2f 	bl	8007368 <_malloc_r>
 800990a:	b948      	cbnz	r0, 8009920 <__smakebuf_r+0x44>
 800990c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009910:	059a      	lsls	r2, r3, #22
 8009912:	d4ef      	bmi.n	80098f4 <__smakebuf_r+0x18>
 8009914:	f023 0303 	bic.w	r3, r3, #3
 8009918:	f043 0302 	orr.w	r3, r3, #2
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	e7e3      	b.n	80098e8 <__smakebuf_r+0xc>
 8009920:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <__smakebuf_r+0x7c>)
 8009922:	62b3      	str	r3, [r6, #40]	; 0x28
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	6020      	str	r0, [r4, #0]
 8009928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	6163      	str	r3, [r4, #20]
 8009932:	9b01      	ldr	r3, [sp, #4]
 8009934:	6120      	str	r0, [r4, #16]
 8009936:	b15b      	cbz	r3, 8009950 <__smakebuf_r+0x74>
 8009938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800993c:	4630      	mov	r0, r6
 800993e:	f000 f8c9 	bl	8009ad4 <_isatty_r>
 8009942:	b128      	cbz	r0, 8009950 <__smakebuf_r+0x74>
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	f023 0303 	bic.w	r3, r3, #3
 800994a:	f043 0301 	orr.w	r3, r3, #1
 800994e:	81a3      	strh	r3, [r4, #12]
 8009950:	89a0      	ldrh	r0, [r4, #12]
 8009952:	4305      	orrs	r5, r0
 8009954:	81a5      	strh	r5, [r4, #12]
 8009956:	e7cd      	b.n	80098f4 <__smakebuf_r+0x18>
 8009958:	080096f1 	.word	0x080096f1

0800995c <_raise_r>:
 800995c:	291f      	cmp	r1, #31
 800995e:	b538      	push	{r3, r4, r5, lr}
 8009960:	4604      	mov	r4, r0
 8009962:	460d      	mov	r5, r1
 8009964:	d904      	bls.n	8009970 <_raise_r+0x14>
 8009966:	2316      	movs	r3, #22
 8009968:	6003      	str	r3, [r0, #0]
 800996a:	f04f 30ff 	mov.w	r0, #4294967295
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009972:	b112      	cbz	r2, 800997a <_raise_r+0x1e>
 8009974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009978:	b94b      	cbnz	r3, 800998e <_raise_r+0x32>
 800997a:	4620      	mov	r0, r4
 800997c:	f000 f830 	bl	80099e0 <_getpid_r>
 8009980:	462a      	mov	r2, r5
 8009982:	4601      	mov	r1, r0
 8009984:	4620      	mov	r0, r4
 8009986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800998a:	f000 b817 	b.w	80099bc <_kill_r>
 800998e:	2b01      	cmp	r3, #1
 8009990:	d00a      	beq.n	80099a8 <_raise_r+0x4c>
 8009992:	1c59      	adds	r1, r3, #1
 8009994:	d103      	bne.n	800999e <_raise_r+0x42>
 8009996:	2316      	movs	r3, #22
 8009998:	6003      	str	r3, [r0, #0]
 800999a:	2001      	movs	r0, #1
 800999c:	e7e7      	b.n	800996e <_raise_r+0x12>
 800999e:	2400      	movs	r4, #0
 80099a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099a4:	4628      	mov	r0, r5
 80099a6:	4798      	blx	r3
 80099a8:	2000      	movs	r0, #0
 80099aa:	e7e0      	b.n	800996e <_raise_r+0x12>

080099ac <raise>:
 80099ac:	4b02      	ldr	r3, [pc, #8]	; (80099b8 <raise+0xc>)
 80099ae:	4601      	mov	r1, r0
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	f7ff bfd3 	b.w	800995c <_raise_r>
 80099b6:	bf00      	nop
 80099b8:	20000068 	.word	0x20000068

080099bc <_kill_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d07      	ldr	r5, [pc, #28]	; (80099dc <_kill_r+0x20>)
 80099c0:	2300      	movs	r3, #0
 80099c2:	4604      	mov	r4, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	4611      	mov	r1, r2
 80099c8:	602b      	str	r3, [r5, #0]
 80099ca:	f7f7 febf 	bl	800174c <_kill>
 80099ce:	1c43      	adds	r3, r0, #1
 80099d0:	d102      	bne.n	80099d8 <_kill_r+0x1c>
 80099d2:	682b      	ldr	r3, [r5, #0]
 80099d4:	b103      	cbz	r3, 80099d8 <_kill_r+0x1c>
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	bd38      	pop	{r3, r4, r5, pc}
 80099da:	bf00      	nop
 80099dc:	200007b8 	.word	0x200007b8

080099e0 <_getpid_r>:
 80099e0:	f7f7 beac 	b.w	800173c <_getpid>

080099e4 <__sread>:
 80099e4:	b510      	push	{r4, lr}
 80099e6:	460c      	mov	r4, r1
 80099e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ec:	f000 f894 	bl	8009b18 <_read_r>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	bfab      	itete	ge
 80099f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099f6:	89a3      	ldrhlt	r3, [r4, #12]
 80099f8:	181b      	addge	r3, r3, r0
 80099fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099fe:	bfac      	ite	ge
 8009a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a02:	81a3      	strhlt	r3, [r4, #12]
 8009a04:	bd10      	pop	{r4, pc}

08009a06 <__swrite>:
 8009a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a0a:	461f      	mov	r7, r3
 8009a0c:	898b      	ldrh	r3, [r1, #12]
 8009a0e:	05db      	lsls	r3, r3, #23
 8009a10:	4605      	mov	r5, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	4616      	mov	r6, r2
 8009a16:	d505      	bpl.n	8009a24 <__swrite+0x1e>
 8009a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f000 f868 	bl	8009af4 <_lseek_r>
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a2e:	81a3      	strh	r3, [r4, #12]
 8009a30:	4632      	mov	r2, r6
 8009a32:	463b      	mov	r3, r7
 8009a34:	4628      	mov	r0, r5
 8009a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3a:	f000 b817 	b.w	8009a6c <_write_r>

08009a3e <__sseek>:
 8009a3e:	b510      	push	{r4, lr}
 8009a40:	460c      	mov	r4, r1
 8009a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a46:	f000 f855 	bl	8009af4 <_lseek_r>
 8009a4a:	1c43      	adds	r3, r0, #1
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	bf15      	itete	ne
 8009a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a5a:	81a3      	strheq	r3, [r4, #12]
 8009a5c:	bf18      	it	ne
 8009a5e:	81a3      	strhne	r3, [r4, #12]
 8009a60:	bd10      	pop	{r4, pc}

08009a62 <__sclose>:
 8009a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a66:	f000 b813 	b.w	8009a90 <_close_r>
	...

08009a6c <_write_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4d07      	ldr	r5, [pc, #28]	; (8009a8c <_write_r+0x20>)
 8009a70:	4604      	mov	r4, r0
 8009a72:	4608      	mov	r0, r1
 8009a74:	4611      	mov	r1, r2
 8009a76:	2200      	movs	r2, #0
 8009a78:	602a      	str	r2, [r5, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f7f7 fe9d 	bl	80017ba <_write>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_write_r+0x1e>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_write_r+0x1e>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	200007b8 	.word	0x200007b8

08009a90 <_close_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d06      	ldr	r5, [pc, #24]	; (8009aac <_close_r+0x1c>)
 8009a94:	2300      	movs	r3, #0
 8009a96:	4604      	mov	r4, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	f7f7 fea9 	bl	80017f2 <_close>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_close_r+0x1a>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_close_r+0x1a>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	200007b8 	.word	0x200007b8

08009ab0 <_fstat_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d07      	ldr	r5, [pc, #28]	; (8009ad0 <_fstat_r+0x20>)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	4611      	mov	r1, r2
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	f7f7 fea4 	bl	800180a <_fstat>
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	d102      	bne.n	8009acc <_fstat_r+0x1c>
 8009ac6:	682b      	ldr	r3, [r5, #0]
 8009ac8:	b103      	cbz	r3, 8009acc <_fstat_r+0x1c>
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	bf00      	nop
 8009ad0:	200007b8 	.word	0x200007b8

08009ad4 <_isatty_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d06      	ldr	r5, [pc, #24]	; (8009af0 <_isatty_r+0x1c>)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4604      	mov	r4, r0
 8009adc:	4608      	mov	r0, r1
 8009ade:	602b      	str	r3, [r5, #0]
 8009ae0:	f7f7 fea3 	bl	800182a <_isatty>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_isatty_r+0x1a>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_isatty_r+0x1a>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	200007b8 	.word	0x200007b8

08009af4 <_lseek_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d07      	ldr	r5, [pc, #28]	; (8009b14 <_lseek_r+0x20>)
 8009af8:	4604      	mov	r4, r0
 8009afa:	4608      	mov	r0, r1
 8009afc:	4611      	mov	r1, r2
 8009afe:	2200      	movs	r2, #0
 8009b00:	602a      	str	r2, [r5, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f7f7 fe9c 	bl	8001840 <_lseek>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d102      	bne.n	8009b12 <_lseek_r+0x1e>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	b103      	cbz	r3, 8009b12 <_lseek_r+0x1e>
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	200007b8 	.word	0x200007b8

08009b18 <_read_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d07      	ldr	r5, [pc, #28]	; (8009b38 <_read_r+0x20>)
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	4608      	mov	r0, r1
 8009b20:	4611      	mov	r1, r2
 8009b22:	2200      	movs	r2, #0
 8009b24:	602a      	str	r2, [r5, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	f7f7 fe2a 	bl	8001780 <_read>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_read_r+0x1e>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_read_r+0x1e>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	200007b8 	.word	0x200007b8

08009b3c <_init>:
 8009b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3e:	bf00      	nop
 8009b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b42:	bc08      	pop	{r3}
 8009b44:	469e      	mov	lr, r3
 8009b46:	4770      	bx	lr

08009b48 <_fini>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	bf00      	nop
 8009b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4e:	bc08      	pop	{r3}
 8009b50:	469e      	mov	lr, r3
 8009b52:	4770      	bx	lr
