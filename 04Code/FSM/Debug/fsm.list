
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bee8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800c0e8  0800c0e8  0001c0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7cc  0800c7cc  000203bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7cc  0800c7cc  0001c7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7d4  0800c7d4  000203bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7d4  0800c7d4  0001c7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7d8  0800c7d8  0001c7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003bc  20000000  0800c7dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  200003bc  0800cb98  000203bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  0800cb98  000208ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000203bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a58  00000000  00000000  000203ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f42  00000000  00000000  00045e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0004ad88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0004c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd7b  00000000  00000000  0004d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f0c6  00000000  00000000  0007b54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106a61  00000000  00000000  0009a611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a1072  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f0  00000000  00000000  001a10c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200003bc 	.word	0x200003bc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c0d0 	.word	0x0800c0d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200003c0 	.word	0x200003c0
 800023c:	0800c0d0 	.word	0x0800c0d0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <MX_ADC2_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_ADC2_Init+0x98>)
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <MX_ADC2_Init+0x9c>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_ADC2_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_ADC2_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_ADC2_Init+0x98>)
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <MX_ADC2_Init+0xa0>)
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_ADC2_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000664:	2201      	movs	r2, #1
 8000666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_ADC2_Init+0x98>)
 800066a:	f002 fe85 	bl	8003378 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000674:	f000 ffb8 	bl	80015e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000678:	2303      	movs	r3, #3
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067c:	2301      	movs	r3, #1
 800067e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000680:	2305      	movs	r3, #5
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_ADC2_Init+0x98>)
 800068a:	f003 f977 	bl	800397c <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000694:	f000 ffa8 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000438 	.word	0x20000438
 80006a4:	40012100 	.word	0x40012100
 80006a8:	0f000001 	.word	0x0f000001

080006ac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006be:	4b46      	ldr	r3, [pc, #280]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006c0:	4a46      	ldr	r2, [pc, #280]	; (80007dc <MX_ADC3_Init+0x130>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c4:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b42      	ldr	r3, [pc, #264]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006d2:	4b41      	ldr	r3, [pc, #260]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006d8:	4b3f      	ldr	r3, [pc, #252]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006da:	2201      	movs	r2, #1
 80006dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b3e      	ldr	r3, [pc, #248]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e6:	4b3c      	ldr	r3, [pc, #240]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ec:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006ee:	4a3c      	ldr	r2, [pc, #240]	; (80007e0 <MX_ADC3_Init+0x134>)
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80006f8:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006fa:	2206      	movs	r2, #6
 80006fc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <MX_ADC3_Init+0x12c>)
 8000700:	2201      	movs	r2, #1
 8000702:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_ADC3_Init+0x12c>)
 8000708:	2201      	movs	r2, #1
 800070a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800070c:	4832      	ldr	r0, [pc, #200]	; (80007d8 <MX_ADC3_Init+0x12c>)
 800070e:	f002 fe33 	bl	8003378 <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000718:	f000 ff66 	bl	80015e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800071c:	230a      	movs	r3, #10
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000720:	2301      	movs	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000724:	2305      	movs	r3, #5
 8000726:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	482a      	ldr	r0, [pc, #168]	; (80007d8 <MX_ADC3_Init+0x12c>)
 800072e:	f003 f925 	bl	800397c <HAL_ADC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000738:	f000 ff56 	bl	80015e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800073c:	230d      	movs	r3, #13
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000740:	2302      	movs	r3, #2
 8000742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4823      	ldr	r0, [pc, #140]	; (80007d8 <MX_ADC3_Init+0x12c>)
 800074a:	f003 f917 	bl	800397c <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000754:	f000 ff48 	bl	80015e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000758:	2309      	movs	r3, #9
 800075a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800075c:	2303      	movs	r3, #3
 800075e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	481b      	ldr	r0, [pc, #108]	; (80007d8 <MX_ADC3_Init+0x12c>)
 800076a:	f003 f907 	bl	800397c <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000774:	f000 ff38 	bl	80015e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000778:	230f      	movs	r3, #15
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800077c:	2304      	movs	r3, #4
 800077e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4814      	ldr	r0, [pc, #80]	; (80007d8 <MX_ADC3_Init+0x12c>)
 8000786:	f003 f8f9 	bl	800397c <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8000790:	f000 ff2a 	bl	80015e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000794:	2308      	movs	r3, #8
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000798:	2305      	movs	r3, #5
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800079c:	2305      	movs	r3, #5
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80007a6:	f003 f8e9 	bl	800397c <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC3_Init+0x108>
  {
    Error_Handler();
 80007b0:	f000 ff1a 	bl	80015e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007b4:	2306      	movs	r3, #6
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007b8:	2306      	movs	r3, #6
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80007c2:	f003 f8db 	bl	800397c <HAL_ADC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC3_Init+0x124>
  {
    Error_Handler();
 80007cc:	f000 ff0c 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200004e0 	.word	0x200004e0
 80007dc:	40012200 	.word	0x40012200
 80007e0:	0f000001 	.word	0x0f000001

080007e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a7c      	ldr	r2, [pc, #496]	; (80009f4 <HAL_ADC_MspInit+0x210>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d15d      	bne.n	80008c2 <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000806:	4b7c      	ldr	r3, [pc, #496]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a7b      	ldr	r2, [pc, #492]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 800080c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
 8000812:	4b79      	ldr	r3, [pc, #484]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b76      	ldr	r3, [pc, #472]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a75      	ldr	r2, [pc, #468]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b73      	ldr	r3, [pc, #460]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	69fb      	ldr	r3, [r7, #28]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083a:	2303      	movs	r3, #3
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	4619      	mov	r1, r3
 8000848:	486c      	ldr	r0, [pc, #432]	; (80009fc <HAL_ADC_MspInit+0x218>)
 800084a:	f004 f883 	bl	8004954 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800084e:	4b6c      	ldr	r3, [pc, #432]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000850:	4a6c      	ldr	r2, [pc, #432]	; (8000a04 <HAL_ADC_MspInit+0x220>)
 8000852:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000854:	4b6a      	ldr	r3, [pc, #424]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800085a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085c:	4b68      	ldr	r3, [pc, #416]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b67      	ldr	r3, [pc, #412]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b65      	ldr	r3, [pc, #404]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000870:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000872:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000876:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000878:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 800087a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000880:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000886:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b5d      	ldr	r3, [pc, #372]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088e:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000896:	f003 fc53 	bl	8004140 <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80008a0:	f000 fea2 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a56      	ldr	r2, [pc, #344]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 80008a8:	639a      	str	r2, [r3, #56]	; 0x38
 80008aa:	4a55      	ldr	r2, [pc, #340]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2012      	movs	r0, #18
 80008b6:	f003 fc0c 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80008ba:	2012      	movs	r0, #18
 80008bc:	f003 fc25 	bl	800410a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80008c0:	e093      	b.n	80009ea <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC3)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a50      	ldr	r2, [pc, #320]	; (8000a08 <HAL_ADC_MspInit+0x224>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	f040 808e 	bne.w	80009ea <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008ce:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a49      	ldr	r2, [pc, #292]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a43      	ldr	r2, [pc, #268]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008ec:	f043 0320 	orr.w	r3, r3, #32
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b41      	ldr	r3, [pc, #260]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a3d      	ldr	r2, [pc, #244]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b3b      	ldr	r3, [pc, #236]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a37      	ldr	r2, [pc, #220]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b35      	ldr	r3, [pc, #212]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin|SENSOR8_Pin|SENSOR6_Pin;
 800092e:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	4832      	ldr	r0, [pc, #200]	; (8000a0c <HAL_ADC_MspInit+0x228>)
 8000944:	f004 f806 	bl	8004954 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR3_Pin;
 8000948:	2309      	movs	r3, #9
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094c:	2303      	movs	r3, #3
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	482d      	ldr	r0, [pc, #180]	; (8000a10 <HAL_ADC_MspInit+0x22c>)
 800095c:	f003 fffa 	bl	8004954 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 8000960:	2308      	movs	r3, #8
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000964:	2303      	movs	r3, #3
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	4822      	ldr	r0, [pc, #136]	; (80009fc <HAL_ADC_MspInit+0x218>)
 8000974:	f003 ffee 	bl	8004954 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 800097a:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <HAL_ADC_MspInit+0x234>)
 800097c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 8000980:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000984:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 8000994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000998:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 800099c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80009be:	4815      	ldr	r0, [pc, #84]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009c0:	f003 fbbe 	bl	8004140 <HAL_DMA_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_ADC_MspInit+0x1ea>
      Error_Handler();
 80009ca:	f000 fe0d 	bl	80015e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009d2:	639a      	str	r2, [r3, #56]	; 0x38
 80009d4:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2012      	movs	r0, #18
 80009e0:	f003 fb77 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009e4:	2012      	movs	r0, #18
 80009e6:	f003 fb90 	bl	800410a <HAL_NVIC_EnableIRQ>
}
 80009ea:	bf00      	nop
 80009ec:	3738      	adds	r7, #56	; 0x38
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40012100 	.word	0x40012100
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	20000528 	.word	0x20000528
 8000a04:	40026440 	.word	0x40026440
 8000a08:	40012200 	.word	0x40012200
 8000a0c:	40021400 	.word	0x40021400
 8000a10:	40020800 	.word	0x40020800
 8000a14:	20000480 	.word	0x20000480
 8000a18:	40026428 	.word	0x40026428

08000a1c <bluet_receive>:
#include "commands.h"

bluet_state_t bluet_status = BLUET_N_INIT;

void bluet_receive(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
//
//		bluet_status = BLUET_READY;
//	}

	// any byte received by bluetooth?
	if(bluet_uart.Rx_flag)
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <bluet_receive+0x44>)
 8000a24:	7d5b      	ldrb	r3, [r3, #21]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d005      	beq.n	8000a38 <bluet_receive+0x1c>
	{
		UART_Receive(&bluet_uart);
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <bluet_receive+0x44>)
 8000a2e:	f002 fb3d 	bl	80030ac <UART_Receive>
		bluet_uart.Rx_flag = 0;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <bluet_receive+0x44>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	755a      	strb	r2, [r3, #21]
	}
	// command received?
	if(cmd_received)
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <bluet_receive+0x48>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00a      	beq.n	8000a58 <bluet_receive+0x3c>
	{
		// parses and executes the command - returns 0 if valid
		err = exec_cmd((char *) bluet_uart.Rx_Buffer);
 8000a42:	4809      	ldr	r0, [pc, #36]	; (8000a68 <bluet_receive+0x4c>)
 8000a44:	f000 f812 	bl	8000a6c <exec_cmd>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]

//		// command executed -> bluet_st = BLUET_OK
//		// command not executed -> BLUET_READY
//		bluet_status = (err == 0) ? BLUET_OK : BLUET_READY;

		cmd_received = 0;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <bluet_receive+0x48>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
		// prepares bluetooth to receive again
		Rx_UART_init(&bluet_uart);
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <bluet_receive+0x44>)
 8000a54:	f002 fb80 	bl	8003158 <Rx_UART_init>
	}
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000014c 	.word	0x2000014c
 8000a64:	2000042c 	.word	0x2000042c
 8000a68:	20000150 	.word	0x20000150

08000a6c <exec_cmd>:
@function  exec_cmd
@param		 String inserted by user
@brief	 	 Parses string, executes commands and prints error message.
******************************************************************************/
char exec_cmd(const char *str)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	char err;
	
	err = parse_cmd(cmd_list, str);
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <exec_cmd+0x20>)
 8000a78:	f000 ff28 	bl	80018cc <parse_cmd>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]
//			UART_puts("No operation in progress.\n\r");
//
//	}
	

	return err;
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	0800c310 	.word	0x0800c310

08000a90 <help_cb>:
@usage		 ?

@brief	 	 Print a list of the valid commands
******************************************************************************/
char help_cb(uint8_t argc, char** argv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b0a6      	sub	sp, #152	; 0x98
 8000a94:	af02      	add	r7, sp, #8
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
	const Command_t *p = cmd_list;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <help_cb+0x6c>)
 8000a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	char str[128]; // Output message. Max message len is the same as buffer used in UART_puts
	
	if(argc != 1) // number of arguments invalid?
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d001      	beq.n	8000aac <help_cb+0x1c>
		//return (char)(-EINVARG);
		return (-1);
 8000aa8:	23ff      	movs	r3, #255	; 0xff
 8000aaa:	e023      	b.n	8000af4 <help_cb+0x64>
	
	UART_puts(&bluet_uart, "List of valid commands:\n\n\r");
 8000aac:	4914      	ldr	r1, [pc, #80]	; (8000b00 <help_cb+0x70>)
 8000aae:	4815      	ldr	r0, [pc, #84]	; (8000b04 <help_cb+0x74>)
 8000ab0:	f002 fb88 	bl	80031c4 <UART_puts>
	while(p->cmd)			
 8000ab4:	e018      	b.n	8000ae8 <help_cb+0x58>
	{
		snprintf(str, sizeof(str), "%4s - %s\n\n\r", p->cmd, p->help);		// send the formated string to 'str' limiting the size to the size alocated for the string 'str'
 8000ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f107 000c 	add.w	r0, r7, #12
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <help_cb+0x78>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	f009 f98d 	bl	8009dec <sniprintf>
		UART_puts(&bluet_uart, str);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <help_cb+0x74>)
 8000ada:	f002 fb73 	bl	80031c4 <UART_puts>
		p++;
 8000ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ae2:	330c      	adds	r3, #12
 8000ae4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	while(p->cmd)			
 8000ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1e1      	bne.n	8000ab6 <help_cb+0x26>
	}
	
	return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3790      	adds	r7, #144	; 0x90
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	0800c310 	.word	0x0800c310
 8000b00:	0800c158 	.word	0x0800c158
 8000b04:	2000014c 	.word	0x2000014c
 8000b08:	0800c174 	.word	0x0800c174

08000b0c <route_sel_cb>:
@usage		RT

@brief	 	Selects a route for the robot to take
******************************************************************************/
char route_sel_cb(uint8_t argc, char** argv)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
	//char str[32]; // Output message. Max message len is the same as buffer used in UART_puts

	if(argc != 2) // number of arguments invalid?
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d001      	beq.n	8000b22 <route_sel_cb+0x16>
		//return (char)(-EINVARG);
		return (-1);
 8000b1e:	23ff      	movs	r3, #255	; 0xff
 8000b20:	e006      	b.n	8000b30 <route_sel_cb+0x24>

	// route selection
	route_ptr = route1;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <route_sel_cb+0x30>)
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <route_sel_cb+0x34>)
 8000b26:	601a      	str	r2, [r3, #0]
//	route_base_ptr = &route1;

	// command received with success
	bluet_status = BLUET_OK;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <route_sel_cb+0x38>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]

	return 0;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	200003dc 	.word	0x200003dc
 8000b40:	20000004 	.word	0x20000004
 8000b44:	20000000 	.word	0x20000000

08000b48 <init_receive_cb>:
@usage		INIT

@brief	 	Intializes the bluetooth receive
******************************************************************************/
char init_receive_cb(uint8_t argc, char** argv)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
	//char str[32]; // Output message. Max message len is the same as buffer used in UART_puts

	if(argc != 1) // number of arguments invalid?
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d001      	beq.n	8000b5e <init_receive_cb+0x16>
		//return (char)(-EINVARG);
		return (-1);
 8000b5a:	23ff      	movs	r3, #255	; 0xff
 8000b5c:	e003      	b.n	8000b66 <init_receive_cb+0x1e>

	bluet_status = BLUET_RECEIVING;
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <init_receive_cb+0x2c>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	701a      	strb	r2, [r3, #0]

	return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000

08000b78 <start_cb>:
@usage		S

@brief	 	Intializes the bluetooth receive
******************************************************************************/
char start_cb(uint8_t argc, char** argv)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
	//char str[32]; // Output message. Max message len is the same as buffer used in UART_puts

	if(argc != 1) // number of arguments invalid?
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d001      	beq.n	8000b8e <start_cb+0x16>
		//return (char)(-EINVARG);
		return (-1);
 8000b8a:	23ff      	movs	r3, #255	; 0xff
 8000b8c:	e003      	b.n	8000b96 <start_cb+0x1e>

	nstate = S_FLW_LINE;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <start_cb+0x2c>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	701a      	strb	r2, [r3, #0]

	return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200003da 	.word	0x200003da

08000ba8 <stop_cb>:
@usage		ST

@brief	 	Intializes the bluetooth receive
******************************************************************************/
char stop_cb(uint8_t argc, char** argv)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
	//char str[32]; // Output message. Max message len is the same as buffer used in UART_puts

	if(argc != 1) // number of arguments invalid?
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d001      	beq.n	8000bbe <stop_cb+0x16>
		//return (char)(-EINVARG);
		return (-1);
 8000bba:	23ff      	movs	r3, #255	; 0xff
 8000bbc:	e003      	b.n	8000bc6 <stop_cb+0x1e>

	nstate = S_STOPPED;
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <stop_cb+0x2c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]

	return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200003da 	.word	0x200003da

08000bd8 <debounce_start>:
@brief
@param
@retval	none
******************************************************************************/
void debounce_start(ST_debounce *s, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	4613      	mov	r3, r2
 8000be4:	80fb      	strh	r3, [r7, #6]
	// initialize sliding window
	s->window = 0xf;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	220f      	movs	r2, #15
 8000bea:	701a      	strb	r2, [r3, #0]
	s->count1s = 4;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2204      	movs	r2, #4
 8000bf0:	705a      	strb	r2, [r3, #1]

	s->GPIOx = GPIOx;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	605a      	str	r2, [r3, #4]
	s->GPIO_Pin = GPIO_Pin;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	88fa      	ldrh	r2, [r7, #6]
 8000bfc:	811a      	strh	r2, [r3, #8]

	s->pin_output = 0;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	729a      	strb	r2, [r3, #10]

	// start Timer to interrupt
	HAL_TIM_Base_Start_IT(&TIM_DEBOUNCE);
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <debounce_start+0x3c>)
 8000c06:	f006 f89d 	bl	8006d44 <HAL_TIM_Base_Start_IT>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200006f4 	.word	0x200006f4

08000c18 <debounce>:
@brief
@param	none
@retval	none
******************************************************************************/
static uint8_t debounce(ST_debounce *pb)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	uint8_t pin_sample;
	// sample pin - once per interrupt

	pin_sample = HAL_GPIO_ReadPin(pb->GPIOx, pb->GPIO_Pin);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	891b      	ldrh	r3, [r3, #8]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	f004 f83e 	bl	8004cac <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	73fb      	strb	r3, [r7, #15]

	// refresh count1s
	// subtract window bit 7 to count1s
	pb->count1s -= (pb->window >> 7);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	785a      	ldrb	r2, [r3, #1]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	11db      	asrs	r3, r3, #7
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4413      	add	r3, r2
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	705a      	strb	r2, [r3, #1]
	// add pim_sample
	pb->count1s += pin_sample;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	785a      	ldrb	r2, [r3, #1]
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	4413      	add	r3, r2
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	705a      	strb	r2, [r3, #1]

	// slide window
	pb->window <<=1;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	701a      	strb	r2, [r3, #0]
	// put pin_sample bit 0 if window
	pb->window |= pin_sample;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	701a      	strb	r2, [r3, #0]

	// verify output
	return (((4 - pb->count1s) >> 7) & 0x01);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	785b      	ldrb	r3, [r3, #1]
 8000c78:	f1c3 0304 	rsb	r3, r3, #4
 8000c7c:	11db      	asrs	r3, r3, #7
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <debounce_isr>:

void debounce_isr(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
	// previous button state
	static uint8_t pre_state = 0;
	// current button state
	uint8_t state = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	71fb      	strb	r3, [r7, #7]

	// debounce button
	state = debounce(&button);
 8000c9a:	4810      	ldr	r0, [pc, #64]	; (8000cdc <debounce_isr+0x4c>)
 8000c9c:	f7ff ffbc 	bl	8000c18 <debounce>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
	// determine button output
//	if((pre_state == 0) && (state == 1))
//		button.pin_output = 0;
//	if((pre_state == 1) && (state == 0))
//		button.pin_output = 1;
	if((pre_state == 0) && (state == 1))
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <debounce_isr+0x50>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d105      	bne.n	8000cb8 <debounce_isr+0x28>
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d102      	bne.n	8000cb8 <debounce_isr+0x28>
		button.pin_output = 1;
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <debounce_isr+0x4c>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	729a      	strb	r2, [r3, #10]
	if((pre_state == 1) && (state == 0))
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <debounce_isr+0x50>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d105      	bne.n	8000ccc <debounce_isr+0x3c>
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d102      	bne.n	8000ccc <debounce_isr+0x3c>
		button.pin_output = 0;
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <debounce_isr+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	729a      	strb	r2, [r3, #10]

	//button.pin_output = (state * ((~pre_state) & 0x01));

	// update previous button state
	pre_state = state;
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <debounce_isr+0x50>)
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	7013      	strb	r3, [r2, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000588 	.word	0x20000588
 8000ce0:	200003d8 	.word	0x200003d8

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_DMA_Init+0x48>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <MX_DMA_Init+0x48>)
 8000cf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <MX_DMA_Init+0x48>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	2039      	movs	r0, #57	; 0x39
 8000d08:	f003 f9e3 	bl	80040d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d0c:	2039      	movs	r0, #57	; 0x39
 8000d0e:	f003 f9fc 	bl	800410a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	203a      	movs	r0, #58	; 0x3a
 8000d18:	f003 f9db 	bl	80040d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d1c:	203a      	movs	r0, #58	; 0x3a
 8000d1e:	f003 f9f4 	bl	800410a <HAL_NVIC_EnableIRQ>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <s_stopped>:

/******************************************************************************
State Stopped
******************************************************************************/
static void s_stopped(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
//	write_led(LRED,0);
//	write_led(LBLUE,0);
//	write_led(LGREEN,0);

	// stop movement
	motion_stop();
 8000d34:	f000 fc7e 	bl	8001634 <motion_stop>

	// is there a route available?
	//if(route_finished)
	if(route_ptr == NULL)
 8000d38:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <s_stopped+0x90>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d109      	bne.n	8000d54 <s_stopped+0x24>
	{
		bluet_receive();
 8000d40:	f7ff fe6c 	bl	8000a1c <bluet_receive>

		if(bluet_status == BLUET_RECEIVING)
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <s_stopped+0x94>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d136      	bne.n	8000dba <s_stopped+0x8a>
			// receiving new route
			nstate = S_RECEIVE;
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <s_stopped+0x98>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
		nstate = S_FLW_LINE;
	}


	// Else, continue in S_STOPPED
}
 8000d52:	e032      	b.n	8000dba <s_stopped+0x8a>
	else if(motion_status == MOT_ON)
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <s_stopped+0x9c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d107      	bne.n	8000d6c <s_stopped+0x3c>
		nstate = S_FLW_LINE;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <s_stopped+0x98>)
 8000d5e:	2202      	movs	r2, #2
 8000d60:	701a      	strb	r2, [r3, #0]
		UART_puts(&bluet_uart,"Restart movement\n\r");
 8000d62:	491b      	ldr	r1, [pc, #108]	; (8000dd0 <s_stopped+0xa0>)
 8000d64:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <s_stopped+0xa4>)
 8000d66:	f002 fa2d 	bl	80031c4 <UART_puts>
}
 8000d6a:	e026      	b.n	8000dba <s_stopped+0x8a>
	else if(motion_status == MOT_TIMEOUT)
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <s_stopped+0x9c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	d107      	bne.n	8000d84 <s_stopped+0x54>
		nstate = S_ERROR;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <s_stopped+0x98>)
 8000d76:	2206      	movs	r2, #6
 8000d78:	701a      	strb	r2, [r3, #0]
		UART_puts(&bluet_uart,"Obstacle timeout\n\r");
 8000d7a:	4917      	ldr	r1, [pc, #92]	; (8000dd8 <s_stopped+0xa8>)
 8000d7c:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <s_stopped+0xa4>)
 8000d7e:	f002 fa21 	bl	80031c4 <UART_puts>
}
 8000d82:	e01a      	b.n	8000dba <s_stopped+0x8a>
	else if(button.pin_output == 1)
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <s_stopped+0xac>)
 8000d86:	7a9b      	ldrb	r3, [r3, #10]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d103      	bne.n	8000d94 <s_stopped+0x64>
		nstate = S_FLW_LINE;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <s_stopped+0x98>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	701a      	strb	r2, [r3, #0]
}
 8000d92:	e012      	b.n	8000dba <s_stopped+0x8a>
	else if((motion_status == MOT_OFF) && (pick_up_timeout))
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <s_stopped+0x9c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d10e      	bne.n	8000dba <s_stopped+0x8a>
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <s_stopped+0xb0>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d009      	beq.n	8000dba <s_stopped+0x8a>
		pick_up_timeout = 0;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <s_stopped+0xb0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
		UART_puts(&bluet_uart,"Pick up timeout\n\r");
 8000dac:	490d      	ldr	r1, [pc, #52]	; (8000de4 <s_stopped+0xb4>)
 8000dae:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <s_stopped+0xa4>)
 8000db0:	f002 fa08 	bl	80031c4 <UART_puts>
		nstate = S_FLW_LINE;
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <s_stopped+0x98>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200003dc 	.word	0x200003dc
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	200003da 	.word	0x200003da
 8000dcc:	20000084 	.word	0x20000084
 8000dd0:	0800c1b0 	.word	0x0800c1b0
 8000dd4:	2000014c 	.word	0x2000014c
 8000dd8:	0800c1c4 	.word	0x0800c1c4
 8000ddc:	20000588 	.word	0x20000588
 8000de0:	20000422 	.word	0x20000422
 8000de4:	0800c1d8 	.word	0x0800c1d8

08000de8 <s_receive>:

/******************************************************************************
State Receive
******************************************************************************/
static void s_receive(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
//	write_led(LBLUE,0);
//	write_led(LGREEN,1);

	// receives and parses commands by uart
	// if received with success returns 0 (bluet_ok)
	bluet_receive();
 8000dec:	f7ff fe16 	bl	8000a1c <bluet_receive>

	if(bluet_status == BLUET_OK)
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <s_receive+0x34>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10f      	bne.n	8000e18 <s_receive+0x30>
	{
//		route_ptr = route1;// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> remove this


		// save route base pointer
		route_base_ptr = route_ptr;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <s_receive+0x38>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <s_receive+0x3c>)
 8000dfe:	6013      	str	r3, [r2, #0]

		// route received
		//route_finished = 0;
		// bluetooth ready to receive again
		bluet_status = BLUET_READY;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <s_receive+0x34>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]

		// initialize debounce button
		debounce_start(&button, USER_BTN_PORT, USER_BTN_PIN);
 8000e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0a:	4907      	ldr	r1, [pc, #28]	; (8000e28 <s_receive+0x40>)
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <s_receive+0x44>)
 8000e0e:	f7ff fee3 	bl	8000bd8 <debounce_start>

		// Wait for user_button
		nstate = S_STOPPED;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <s_receive+0x48>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
	}

	// Else nstate = S_RECEIVE
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	200003dc 	.word	0x200003dc
 8000e24:	200003e0 	.word	0x200003e0
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	20000588 	.word	0x20000588
 8000e30:	200003da 	.word	0x200003da

08000e34 <s_flw_line>:

/******************************************************************************
State Follow Line
******************************************************************************/
static void s_flw_line(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
//	write_led(LRED,0);
//	write_led(LBLUE,1);
//	write_led(LGREEN,0);

	// start movement
	motion_start();
 8000e38:	f000 fbdc 	bl	80015f4 <motion_start>

	switch((uint8_t)motion_status)
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <s_flw_line+0x54>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d016      	beq.n	8000e72 <s_flw_line+0x3e>
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	dc1c      	bgt.n	8000e82 <s_flw_line+0x4e>
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d002      	beq.n	8000e52 <s_flw_line+0x1e>
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d008      	beq.n	8000e62 <s_flw_line+0x2e>
			// out of route
			nstate = S_ERROR;
	}

	// Else, continue following line
}
 8000e50:	e017      	b.n	8000e82 <s_flw_line+0x4e>
			UART_puts(&bluet_uart,"Cross Found\n\r");
 8000e52:	490e      	ldr	r1, [pc, #56]	; (8000e8c <s_flw_line+0x58>)
 8000e54:	480e      	ldr	r0, [pc, #56]	; (8000e90 <s_flw_line+0x5c>)
 8000e56:	f002 f9b5 	bl	80031c4 <UART_puts>
			nstate = S_RD_RFID;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <s_flw_line+0x60>)
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	701a      	strb	r2, [r3, #0]
			break;
 8000e60:	e00f      	b.n	8000e82 <s_flw_line+0x4e>
			UART_puts(&bluet_uart,"Obstacle Found\n\r");
 8000e62:	490d      	ldr	r1, [pc, #52]	; (8000e98 <s_flw_line+0x64>)
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <s_flw_line+0x5c>)
 8000e66:	f002 f9ad 	bl	80031c4 <UART_puts>
			nstate = S_STOPPED;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <s_flw_line+0x60>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
			break;
 8000e70:	e007      	b.n	8000e82 <s_flw_line+0x4e>
			UART_puts(&bluet_uart,"Out of route\n\r");
 8000e72:	490a      	ldr	r1, [pc, #40]	; (8000e9c <s_flw_line+0x68>)
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <s_flw_line+0x5c>)
 8000e76:	f002 f9a5 	bl	80031c4 <UART_puts>
			nstate = S_ERROR;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <s_flw_line+0x60>)
 8000e7c:	2206      	movs	r2, #6
 8000e7e:	701a      	strb	r2, [r3, #0]
}
 8000e80:	e7ff      	b.n	8000e82 <s_flw_line+0x4e>
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000084 	.word	0x20000084
 8000e8c:	0800c1ec 	.word	0x0800c1ec
 8000e90:	2000014c 	.word	0x2000014c
 8000e94:	200003da 	.word	0x200003da
 8000e98:	0800c1fc 	.word	0x0800c1fc
 8000e9c:	0800c210 	.word	0x0800c210

08000ea0 <s_rd_rfid>:
		.CardID_str = 0,
		.type = 0
};

static void s_rd_rfid(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
//	snprintf(str, sizeof(str), "LF[%d]ST[%d]\n\r", lfollower_status, stop_detector_status);
//	UART_puts(&bluet_uart, str);

	// start movement
	// wait for RFID read or timeout (POLLING MODE)
	err = RFID_read(&rfid, RFID_TIMEOUT);
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <s_rd_rfid+0x40>)
 8000eaa:	f000 fec7 	bl	8001c3c <RFID_read>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
//	motion_status = MOT_OFF;

//	UART_puts(&bluet_uart, "MotOFF.\n\r");

	// read RFID correctly?
	if(err == MI_OK)
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d108      	bne.n	8000eca <s_rd_rfid+0x2a>
	{
		// converts CardID to an hexadecimal string
		bin_to_strhex((unsigned char *)rfid.CardID, sizeof(rfid.CardID), &rfid.CardID_str);
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <s_rd_rfid+0x44>)
 8000eba:	2104      	movs	r1, #4
 8000ebc:	4808      	ldr	r0, [pc, #32]	; (8000ee0 <s_rd_rfid+0x40>)
 8000ebe:	f001 fa21 	bl	8002304 <bin_to_strhex>

		// calculate next movement on the route
//		nstate = S_NEXT_MOV;
		nstate = S_RD_RFID;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <s_rd_rfid+0x48>)
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	701a      	strb	r2, [r3, #0]

		// stop movement
//		motion_stop();
		nstate = S_ERROR;
	}
}
 8000ec8:	e006      	b.n	8000ed8 <s_rd_rfid+0x38>
		UART_puts(&bluet_uart, "RFID timeout\n\r");
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <s_rd_rfid+0x4c>)
 8000ecc:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <s_rd_rfid+0x50>)
 8000ece:	f002 f979 	bl	80031c4 <UART_puts>
		nstate = S_ERROR;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <s_rd_rfid+0x48>)
 8000ed4:	2206      	movs	r2, #6
 8000ed6:	701a      	strb	r2, [r3, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200003e8 	.word	0x200003e8
 8000ee4:	200003f0 	.word	0x200003f0
 8000ee8:	200003da 	.word	0x200003da
 8000eec:	0800c220 	.word	0x0800c220
 8000ef0:	2000014c 	.word	0x2000014c

08000ef4 <turn_func>:

/******************************************************************************
State Next Movement
******************************************************************************/
uint8_t turn_func(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
	// dir = 0 -> move right
	// dir = 1 -> move left
	char dir = route_ptr->action;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <turn_func+0x58>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	791b      	ldrb	r3, [r3, #4]
 8000f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	dir <<= 1;
 8000f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	dir -= 1;
 8000f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	next_move_dir = dir * returning;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <turn_func+0x5c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f20:	fb12 f303 	smulbb	r3, r2, r3
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <turn_func+0x60>)
 8000f28:	701a      	strb	r2, [r3, #0]

	char str[32];
	snprintf(str, sizeof(str), "Change to dir[%d].\n\r", next_move_dir);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <turn_func+0x60>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	1d38      	adds	r0, r7, #4
 8000f30:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <turn_func+0x64>)
 8000f32:	2120      	movs	r1, #32
 8000f34:	f008 ff5a 	bl	8009dec <sniprintf>
	UART_puts(&bluet_uart, str);
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <turn_func+0x68>)
 8000f3e:	f002 f941 	bl	80031c4 <UART_puts>

	return S_ROTATE;
 8000f42:	2305      	movs	r3, #5
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200003dc 	.word	0x200003dc
 8000f50:	20000040 	.word	0x20000040
 8000f54:	200003e4 	.word	0x200003e4
 8000f58:	0800c230 	.word	0x0800c230
 8000f5c:	2000014c 	.word	0x2000014c

08000f60 <forward_func>:

uint8_t forward_func(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	UART_puts(&bluet_uart,"Continue moving.\n\r");
 8000f64:	4903      	ldr	r1, [pc, #12]	; (8000f74 <forward_func+0x14>)
 8000f66:	4804      	ldr	r0, [pc, #16]	; (8000f78 <forward_func+0x18>)
 8000f68:	f002 f92c 	bl	80031c4 <UART_puts>
	return S_FLW_LINE;
 8000f6c:	2302      	movs	r3, #2
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	0800c248 	.word	0x0800c248
 8000f78:	2000014c 	.word	0x2000014c

08000f7c <stop_func>:

uint8_t stop_func(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	if(returning == -1)
		return S_FLW_LINE;

	// else, room found
	// start pick up timeout
	UART_puts(&bluet_uart,"Room Found.\n\r");
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <stop_func+0x24>)
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <stop_func+0x28>)
 8000f84:	f002 f91e 	bl	80031c4 <UART_puts>

	motion_status = MOT_OFF;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <stop_func+0x2c>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
	// stop movement
	motion_stop();
 8000f8e:	f000 fb51 	bl	8001634 <motion_stop>

//	timeout_start(PICK_UP_TIMEOUT);
	pick_timeout_ctrl = 1;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <stop_func+0x30>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]

	return S_STOPPED;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	0800c25c 	.word	0x0800c25c
 8000fa4:	2000014c 	.word	0x2000014c
 8000fa8:	20000084 	.word	0x20000084
 8000fac:	20000426 	.word	0x20000426

08000fb0 <s_next_mov>:
	forward_func,
	stop_func
};

static void s_next_mov(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
//	write_led(LRED,1);
//	write_led(LBLUE,0);
//	write_led(LGREEN,0);

	// route can be used?
	if((route_ptr == NULL) || (route_base_ptr == NULL))
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <s_next_mov+0xc4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <s_next_mov+0x14>
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <s_next_mov+0xc8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d107      	bne.n	8000fd4 <s_next_mov+0x24>
	{
		UART_puts(&bluet_uart,"Route not defined.\n\r");
 8000fc4:	492d      	ldr	r1, [pc, #180]	; (800107c <s_next_mov+0xcc>)
 8000fc6:	482e      	ldr	r0, [pc, #184]	; (8001080 <s_next_mov+0xd0>)
 8000fc8:	f002 f8fc 	bl	80031c4 <UART_puts>

		// avoid bad memory access
		nstate = S_ERROR;
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <s_next_mov+0xd4>)
 8000fce:	2206      	movs	r2, #6
 8000fd0:	701a      	strb	r2, [r3, #0]
		return;
 8000fd2:	e04e      	b.n	8001072 <s_next_mov+0xc2>
	}

	// move to the next checkpoint in route
	route_ptr += returning;
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <s_next_mov+0xc4>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <s_next_mov+0xd8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a24      	ldr	r2, [pc, #144]	; (8001074 <s_next_mov+0xc4>)
 8000fe2:	6013      	str	r3, [r2, #0]
//
//			nstate = S_ROTATE;
//		}
//	}
	// check if this is the route start checkpoint
	if(((route_ptr + 1)->RFID == 0) && (route_ptr != route_base_ptr))
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <s_next_mov+0xc4>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3308      	adds	r3, #8
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d113      	bne.n	8001018 <s_next_mov+0x68>
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <s_next_mov+0xc4>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <s_next_mov+0xc8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d00d      	beq.n	8001018 <s_next_mov+0x68>
	{
		// last rfid in the route diferent from the firt rfid
		// turns around
		next_move_dir = MOVE_LEFT;
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <s_next_mov+0xdc>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
		// sinalises that the robot is returning to the start point
		returning = -1;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <s_next_mov+0xd8>)
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	701a      	strb	r2, [r3, #0]

		UART_puts(&bluet_uart,"Returning to origin\n\r");
 8001008:	4921      	ldr	r1, [pc, #132]	; (8001090 <s_next_mov+0xe0>)
 800100a:	481d      	ldr	r0, [pc, #116]	; (8001080 <s_next_mov+0xd0>)
 800100c:	f002 f8da 	bl	80031c4 <UART_puts>
		nstate = S_ROTATE;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <s_next_mov+0xd4>)
 8001012:	2205      	movs	r2, #5
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	e02c      	b.n	8001072 <s_next_mov+0xc2>
	}

	// robot at route start point?
	else if(route_ptr == route_base_ptr)
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <s_next_mov+0xc4>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <s_next_mov+0xc8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d106      	bne.n	8001032 <s_next_mov+0x82>
	{
		// returned to starting point
		// signal route finished from route_ptr
		route_ptr = NULL;
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <s_next_mov+0xc4>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
		//route_finished = 1;
		nstate = S_STOPPED;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <s_next_mov+0xd4>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	e01f      	b.n	8001072 <s_next_mov+0xc2>
	}

	else if(strcmp(route_ptr->RFID, rfid.CardID_str) == 0)
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <s_next_mov+0xc4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a16      	ldr	r2, [pc, #88]	; (8001094 <s_next_mov+0xe4>)
 800103a:	6892      	ldr	r2, [r2, #8]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f8fe 	bl	8000240 <strcmp>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10c      	bne.n	8001064 <s_next_mov+0xb4>
		// rfid is as expected
		// execute next move
		nstate = next_move_func[route_ptr->action]();
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <s_next_mov+0xc4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	461a      	mov	r2, r3
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <s_next_mov+0xe8>)
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	4798      	blx	r3
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <s_next_mov+0xd4>)
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e006      	b.n	8001072 <s_next_mov+0xc2>

	else
	{
		// detected RFID but there is no match with route
		UART_puts(&bluet_uart,"RFID not as expected\n\r");
 8001064:	490d      	ldr	r1, [pc, #52]	; (800109c <s_next_mov+0xec>)
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <s_next_mov+0xd0>)
 8001068:	f002 f8ac 	bl	80031c4 <UART_puts>
		nstate = S_ERROR;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <s_next_mov+0xd4>)
 800106e:	2206      	movs	r2, #6
 8001070:	701a      	strb	r2, [r3, #0]
	}
}
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200003dc 	.word	0x200003dc
 8001078:	200003e0 	.word	0x200003e0
 800107c:	0800c26c 	.word	0x0800c26c
 8001080:	2000014c 	.word	0x2000014c
 8001084:	200003da 	.word	0x200003da
 8001088:	20000040 	.word	0x20000040
 800108c:	200003e4 	.word	0x200003e4
 8001090:	0800c284 	.word	0x0800c284
 8001094:	200003e8 	.word	0x200003e8
 8001098:	20000044 	.word	0x20000044
 800109c:	0800c29c 	.word	0x0800c29c

080010a0 <s_rotate>:

/******************************************************************************
State Rotate
******************************************************************************/
static void s_rotate(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

//	write_led(LRED,1);
//	write_led(LBLUE,0);
//	write_led(LGREEN,1);

	motion_stop();
 80010a6:	f000 fac5 	bl	8001634 <motion_stop>

	// rotate to direction 'next_move_dir' (POLLING MODE)
	err = lfollower_rotate(next_move_dir, ROTATE_TIMEOUT);
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <s_rotate+0x40>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	2104      	movs	r1, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f966 	bl	8001384 <lfollower_rotate>
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]

	// rotate has returned error?
	if(err)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <s_rotate+0x32>
	{
		// rotate TIMEOUT
		// rotate was not successfull
		UART_puts(&bluet_uart, "Rotate timeout\n\r");
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <s_rotate+0x44>)
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <s_rotate+0x48>)
 80010c6:	f002 f87d 	bl	80031c4 <UART_puts>
		nstate = S_ERROR;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <s_rotate+0x4c>)
 80010cc:	2206      	movs	r2, #6
 80010ce:	701a      	strb	r2, [r3, #0]
	}
	else
		// turn completed. Restart following line
		nstate = S_FLW_LINE;
}
 80010d0:	e002      	b.n	80010d8 <s_rotate+0x38>
		nstate = S_FLW_LINE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <s_rotate+0x4c>)
 80010d4:	2202      	movs	r2, #2
 80010d6:	701a      	strb	r2, [r3, #0]
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200003e4 	.word	0x200003e4
 80010e4:	0800c2b4 	.word	0x0800c2b4
 80010e8:	2000014c 	.word	0x2000014c
 80010ec:	200003da 	.word	0x200003da

080010f0 <s_error>:

/******************************************************************************
State Error
******************************************************************************/
static void s_error(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
//	write_led(LRED,1);
//	write_led(LBLUE,1);
//	write_led(LGREEN,0);

	// stop movement
	motion_stop();
 80010f6:	f000 fa9d 	bl	8001634 <motion_stop>

	// send error messages
	if((route_ptr != NULL) && ((route_ptr - 1) >= route_base_ptr))
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <s_error+0x48>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d019      	beq.n	8001136 <s_error+0x46>
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <s_error+0x48>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f1a3 0208 	sub.w	r2, r3, #8
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <s_error+0x4c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d311      	bcc.n	8001136 <s_error+0x46>
	{
		char str[32];
		UART_puts(&bluet_uart, "ERROR: last known location:\n\r");
 8001112:	490b      	ldr	r1, [pc, #44]	; (8001140 <s_error+0x50>)
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <s_error+0x54>)
 8001116:	f002 f855 	bl	80031c4 <UART_puts>

		snprintf(str, sizeof(str), "RFID '%s'\n\r", (route_ptr - 1)->RFID);
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <s_error+0x48>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3b08      	subs	r3, #8
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4638      	mov	r0, r7
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <s_error+0x58>)
 8001126:	2120      	movs	r1, #32
 8001128:	f008 fe60 	bl	8009dec <sniprintf>
		UART_puts(&bluet_uart, str);
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <s_error+0x54>)
 8001132:	f002 f847 	bl	80031c4 <UART_puts>
	}

	while(1)
 8001136:	e7fe      	b.n	8001136 <s_error+0x46>
 8001138:	200003dc 	.word	0x200003dc
 800113c:	200003e0 	.word	0x200003e0
 8001140:	0800c2c8 	.word	0x0800c2c8
 8001144:	2000014c 	.word	0x2000014c
 8001148:	0800c2e8 	.word	0x0800c2e8

0800114c <MX_GPIO_Init>:

/** Configure pins
     PC0   ------> ADCx_IN10
*/
void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <MX_GPIO_Init+0x144>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a4a      	ldr	r2, [pc, #296]	; (8001290 <MX_GPIO_Init+0x144>)
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b48      	ldr	r3, [pc, #288]	; (8001290 <MX_GPIO_Init+0x144>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0320 	and.w	r3, r3, #32
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b45      	ldr	r3, [pc, #276]	; (8001290 <MX_GPIO_Init+0x144>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a44      	ldr	r2, [pc, #272]	; (8001290 <MX_GPIO_Init+0x144>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <MX_GPIO_Init+0x144>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <MX_GPIO_Init+0x144>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a3e      	ldr	r2, [pc, #248]	; (8001290 <MX_GPIO_Init+0x144>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <MX_GPIO_Init+0x144>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b39      	ldr	r3, [pc, #228]	; (8001290 <MX_GPIO_Init+0x144>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a38      	ldr	r2, [pc, #224]	; (8001290 <MX_GPIO_Init+0x144>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <MX_GPIO_Init+0x144>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <MX_GPIO_Init+0x144>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a32      	ldr	r2, [pc, #200]	; (8001290 <MX_GPIO_Init+0x144>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b30      	ldr	r3, [pc, #192]	; (8001290 <MX_GPIO_Init+0x144>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2160      	movs	r1, #96	; 0x60
 80011de:	482d      	ldr	r0, [pc, #180]	; (8001294 <MX_GPIO_Init+0x148>)
 80011e0:	f003 fd7c 	bl	8004cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f244 2181 	movw	r1, #17025	; 0x4281
 80011ea:	482b      	ldr	r0, [pc, #172]	; (8001298 <MX_GPIO_Init+0x14c>)
 80011ec:	f003 fd76 	bl	8004cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f244 0104 	movw	r1, #16388	; 0x4004
 80011f6:	4829      	ldr	r0, [pc, #164]	; (800129c <MX_GPIO_Init+0x150>)
 80011f8:	f003 fd70 	bl	8004cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 80011fc:	2301      	movs	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001200:	2303      	movs	r3, #3
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4824      	ldr	r0, [pc, #144]	; (80012a0 <MX_GPIO_Init+0x154>)
 8001210:	f003 fba0 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8001214:	2360      	movs	r3, #96	; 0x60
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	481a      	ldr	r0, [pc, #104]	; (8001294 <MX_GPIO_Init+0x148>)
 800122c:	f003 fb92 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin;
 8001230:	f244 2381 	movw	r3, #17025	; 0x4281
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <MX_GPIO_Init+0x14c>)
 800124a:	f003 fb83 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|SPI3_SDA_Pin;
 800124e:	f244 0304 	movw	r3, #16388	; 0x4004
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_GPIO_Init+0x150>)
 8001268:	f003 fb74 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800126c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001276:	2302      	movs	r3, #2
 8001278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_GPIO_Init+0x154>)
 8001282:	f003 fb67 	bl	8004954 <HAL_GPIO_Init>

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400
 800129c:	40020c00 	.word	0x40020c00
 80012a0:	40020800 	.word	0x40020800

080012a4 <lfollower_start>:
@brief	Starts line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_start(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	// line follower already enabled?
	if(lfollower_status == 1)
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <lfollower_start+0x24>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d007      	beq.n	80012c2 <lfollower_start+0x1e>
		return;

	// start storing QTR Sensor values
	qtr_init();
 80012b2:	f000 fc21 	bl	8001af8 <qtr_init>
	// start movement
	move_start();
 80012b6:	f000 fa73 	bl	80017a0 <move_start>

	// mark line follower is enabled
	lfollower_status = 1;
 80012ba:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <lfollower_start+0x24>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e000      	b.n	80012c4 <lfollower_start+0x20>
		return;
 80012c2:	bf00      	nop
}
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200003f4 	.word	0x200003f4

080012cc <lfollower_stop>:
@brief 	Stops line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_stop(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	// line follower already disabled?
	if(lfollower_status == 0)
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <lfollower_stop+0x24>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <lfollower_stop+0x1e>
		return;

	// stop storing QTR sensor values
	qtr_kill();
 80012da:	f000 fc1b 	bl	8001b14 <qtr_kill>
	// stop movement
	move_stop();
 80012de:	f000 fa73 	bl	80017c8 <move_stop>

	// mark line follower is disabled
	lfollower_status = 0;
 80012e2:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <lfollower_stop+0x24>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e000      	b.n	80012ec <lfollower_stop+0x20>
		return;
 80012ea:	bf00      	nop
}
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200003f4 	.word	0x200003f4

080012f4 <lfollower_isr>:

/******************************************************************************
Line Follower ISR
******************************************************************************/
uint8_t lfollower_isr(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	ed2d 8b02 	vpush	{d8}
 80012fa:	af00      	add	r7, sp, #0
	if(lfollower_status == 0)
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <lfollower_isr+0x80>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <lfollower_isr+0x16>
		// line follower is disabled
		return E_LF_OFF;
 8001306:	2301      	movs	r3, #1
 8001308:	e02f      	b.n	800136a <lfollower_isr+0x76>
//	}

	// else, robot over the line
	// use PID to obtain PWM values to use on motors
	// error = S_LEFT_VAL - S_RIGHT_VAL
	pid_calcule(&pid, qtr_get_analog(LF_SENSOR_L), qtr_get_analog(LF_SENSOR_R));
 800130a:	2004      	movs	r0, #4
 800130c:	f000 fc44 	bl	8001b98 <qtr_get_analog>
 8001310:	eeb0 8a40 	vmov.f32	s16, s0
 8001314:	2001      	movs	r0, #1
 8001316:	f000 fc3f 	bl	8001b98 <qtr_get_analog>
 800131a:	eef0 7a40 	vmov.f32	s15, s0
 800131e:	eef0 0a67 	vmov.f32	s1, s15
 8001322:	eeb0 0a48 	vmov.f32	s0, s16
 8001326:	4814      	ldr	r0, [pc, #80]	; (8001378 <lfollower_isr+0x84>)
 8001328:	f000 fb5a 	bl	80019e0 <pid_calcule>

	// Apply PID to adjust motor PWM/velocity
	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <lfollower_isr+0x84>)
 800132e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001332:	eef1 7a67 	vneg.f32	s15, s15
 8001336:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800137c <lfollower_isr+0x88>
 800133a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001380 <lfollower_isr+0x8c>
 8001342:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <lfollower_isr+0x84>)
 8001348:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800134c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800137c <lfollower_isr+0x88>
 8001350:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001354:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001380 <lfollower_isr+0x8c>
 8001358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800135c:	eef0 0a67 	vmov.f32	s1, s15
 8001360:	eeb0 0a47 	vmov.f32	s0, s14
 8001364:	f000 fa44 	bl	80017f0 <move_control>

	return EXIT_SUCCESS;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	ecbd 8b02 	vpop	{d8}
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200003f4 	.word	0x200003f4
 8001378:	20000054 	.word	0x20000054
 800137c:	3ea3d70a 	.word	0x3ea3d70a
 8001380:	3f2e147b 	.word	0x3f2e147b

08001384 <lfollower_rotate>:
@brief 	Rotates the robot to 'dir' direction, stopping when sensor founds the line
@param	dir - direction to rotate
@retval '1' if timeout occured
******************************************************************************/
uint8_t lfollower_rotate(move_dir_e dir, uint8_t timeout)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	460a      	mov	r2, r1
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	4613      	mov	r3, r2
 8001392:	71bb      	strb	r3, [r7, #6]
	// start movement and rotate to 'dir' at speed equal to TURN_SPEED
	move_rotate(dir, TURN_SPEED);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	425b      	negs	r3, r3
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a2:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80013a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b6:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 80013ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013be:	eef0 0a67 	vmov.f32	s1, s15
 80013c2:	eeb0 0a47 	vmov.f32	s0, s14
 80013c6:	f000 fa13 	bl	80017f0 <move_control>
	// start rotate 4second timeout
//	timeout_start(timeout);
	rotate_timeout_ctrl = 1;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <lfollower_rotate+0xb0>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	701a      	strb	r2, [r3, #0]
	// start storing QTR sensor values
	qtr_init();
 80013d0:	f000 fb92 	bl	8001af8 <qtr_init>

	// if dir == MOVE_RIGHT, check when SENSOR1 is over the line
	// if dir == MOVE_LEFT, check when SENSOR8 is over the line

	// dir can be -1 (MOVE_RIGHT) or +1 (MOVE_LEFT)
	dir += 1;
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	3301      	adds	r3, #1
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	71fb      	strb	r3, [r7, #7]
	// dir is now 0 or 2
	dir >>= 1;
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	105b      	asrs	r3, r3, #1
 80013e2:	71fb      	strb	r3, [r7, #7]
	// dir is now 0 (MOVE_RIGHT) or 1 (MOVE_LEFT)
	// so, if: 	dir = 0 					-> SENSOR1
	//			dir = 1* (QTR_SENS_NUM - 1) -> SENSOR8 (last sensor)
	//while((qtr_get_digital(dir * (QTR_SENS_NUM - 1)) == 0) && (timeout_flag == 0))
	while((qtr_get_digital(dir * (QTR_SENS_NUM - 1)) == 0) && (rotate_timeout == 0))
 80013e4:	bf00      	nop
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	461a      	mov	r2, r3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fb99 	bl	8001b28 <qtr_get_digital>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d104      	bne.n	8001406 <lfollower_rotate+0x82>
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <lfollower_rotate+0xb4>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0ef      	beq.n	80013e6 <lfollower_rotate+0x62>
		;

	// stop rotating
	move_stop();
 8001406:	f000 f9df 	bl	80017c8 <move_stop>
	// stop storing QTR sensor values
	qtr_kill();
 800140a:	f000 fb83 	bl	8001b14 <qtr_kill>

	// if timeout occured, then we must return an error code, signaling a
	// non successful rotate
	//if(num_timeout_2sec < TIMEOUT_4SEC)
	//if(timeout_flag)
	if(rotate_timeout)
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <lfollower_rotate+0xb4>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d004      	beq.n	8001422 <lfollower_rotate+0x9e>
	{
		rotate_timeout = 0;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <lfollower_rotate+0xb4>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
		return E_TIMEOUT;
 800141e:	2304      	movs	r3, #4
 8001420:	e003      	b.n	800142a <lfollower_rotate+0xa6>
	}

	// stop timeout
	rotate_timeout_ctrl = 0;
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <lfollower_rotate+0xb0>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
//	timeout_stop();
	// if timeout didnt occurred then rotate was completed
	return EXIT_SUCCESS;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000425 	.word	0x20000425
 8001438:	20000421 	.word	0x20000421

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001440:	f001 ff19 	bl	8003276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001444:	f000 f83e 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001448:	f7ff fe80 	bl	800114c <MX_GPIO_Init>
  MX_DMA_Init();
 800144c:	f7ff fc4a 	bl	8000ce4 <MX_DMA_Init>
  MX_SPI3_Init();
 8001450:	f000 ffbc 	bl	80023cc <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001454:	f001 fd62 	bl	8002f1c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001458:	f001 fb0c 	bl	8002a74 <MX_TIM6_Init>
  MX_ADC3_Init();
 800145c:	f7ff f926 	bl	80006ac <MX_ADC3_Init>
  MX_TIM4_Init();
 8001460:	f001 faa4 	bl	80029ac <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001464:	f001 fd2a 	bl	8002ebc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001468:	f001 fa50 	bl	800290c <MX_TIM3_Init>
  MX_ADC2_Init();
 800146c:	f7ff f8cc 	bl	8000608 <MX_ADC2_Init>
  MX_TIM13_Init();
 8001470:	f001 fb36 	bl	8002ae0 <MX_TIM13_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize FSM state and next state
  state = S_STOPPED;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <main+0x78>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <main+0x7c>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]

 	state = nstate = S_RD_RFID;;
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <main+0x7c>)
 8001482:	2203      	movs	r2, #3
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <main+0x7c>)
 8001488:	781a      	ldrb	r2, [r3, #0]
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <main+0x78>)
 800148c:	701a      	strb	r2, [r3, #0]
//	while(1)
//		test_lf_print_qtr();
  // enable RFID reader
  RFID_RC522_Init();
 800148e:	f000 fbad 	bl	8001bec <RFID_RC522_Init>
  Rx_UART_init(&bluet_uart);
 8001492:	480a      	ldr	r0, [pc, #40]	; (80014bc <main+0x80>)
 8001494:	f001 fe60 	bl	8003158 <Rx_UART_init>
  timeout_start();
 8001498:	f001 fc7e 	bl	8002d98 <timeout_start>

  while (1)
  {
	  fsm_func_ptr[state]();
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <main+0x78>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <main+0x84>)
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	4798      	blx	r3
	  state = nstate;
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <main+0x7c>)
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	4b01      	ldr	r3, [pc, #4]	; (80014b4 <main+0x78>)
 80014b0:	701a      	strb	r2, [r3, #0]
	  fsm_func_ptr[state]();
 80014b2:	e7f3      	b.n	800149c <main+0x60>
 80014b4:	200003d9 	.word	0x200003d9
 80014b8:	200003da 	.word	0x200003da
 80014bc:	2000014c 	.word	0x2000014c
 80014c0:	20000024 	.word	0x20000024

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0b8      	sub	sp, #224	; 0xe0
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014ce:	2234      	movs	r2, #52	; 0x34
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f007 ff7e 	bl	80093d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2290      	movs	r2, #144	; 0x90
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f007 ff6f 	bl	80093d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <SystemClock_Config+0x11c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a39      	ldr	r2, [pc, #228]	; (80015e0 <SystemClock_Config+0x11c>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <SystemClock_Config+0x11c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150e:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <SystemClock_Config+0x120>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a34      	ldr	r2, [pc, #208]	; (80015e4 <SystemClock_Config+0x120>)
 8001514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <SystemClock_Config+0x120>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152c:	2301      	movs	r3, #1
 800152e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001532:	2310      	movs	r3, #16
 8001534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001544:	2308      	movs	r3, #8
 8001546:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800154a:	23d8      	movs	r3, #216	; 0xd8
 800154c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fc3f 	bl	8004de4 <HAL_RCC_OscConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800156c:	f000 f83c 	bl	80015e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001570:	f003 fbe8 	bl	8004d44 <HAL_PWREx_EnableOverDrive>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800157a:	f000 f835 	bl	80015e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157e:	230f      	movs	r3, #15
 8001580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001584:	2302      	movs	r3, #2
 8001586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001590:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80015a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015a4:	2107      	movs	r1, #7
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 feca 	bl	8005340 <HAL_RCC_ClockConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80015b2:	f000 f819 	bl	80015e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 80015b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015bc:	2300      	movs	r3, #0
 80015be:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 f88f 	bl	80056ec <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80015d4:	f000 f808 	bl	80015e8 <Error_Handler>
  }
}
 80015d8:	bf00      	nop
 80015da:	37e0      	adds	r7, #224	; 0xe0
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <motion_start>:

/******************************************************************************
Motion Functions
******************************************************************************/
void motion_start(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	if(motion_status == MOT_ON)
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <motion_start+0x38>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d012      	beq.n	8001626 <motion_start+0x32>
		// already moving
		return;

	// enable Line Follower
	lfollower_start();
 8001600:	f7ff fe50 	bl	80012a4 <lfollower_start>

	// start movement before beeing on Hold
	if(motion_status == MOT_HOLD)
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <motion_start+0x38>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d103      	bne.n	8001614 <motion_start+0x20>
	{
		// motion ON
		motion_status = MOT_ON;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <motion_start+0x38>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
		return;
 8001612:	e009      	b.n	8001628 <motion_start+0x34>
	}

	// motion ON
	motion_status = MOT_ON;
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <motion_start+0x38>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
	// enable Stop Detectors
	stop_detector_init();
 800161a:	f001 f823 	bl	8002664 <stop_detector_init>

	// start sampling motion sensors
	HAL_TIM_Base_Start_IT(&TIM_MOTION);
 800161e:	4804      	ldr	r0, [pc, #16]	; (8001630 <motion_start+0x3c>)
 8001620:	f005 fb90 	bl	8006d44 <HAL_TIM_Base_Start_IT>
 8001624:	e000      	b.n	8001628 <motion_start+0x34>
		return;
 8001626:	bf00      	nop
	//TIM_MOTION.Instance->EGR = TIM_EGR_UG;
}
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000084 	.word	0x20000084
 8001630:	20000740 	.word	0x20000740

08001634 <motion_stop>:

void motion_stop(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
//	if(motion_status == MOT_OFF)
//		// already stopped
//		return;

	// disable Line Follower
	lfollower_stop();
 8001638:	f7ff fe48 	bl	80012cc <lfollower_stop>

	if(motion_status == MOT_HOLD)
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <motion_stop+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d005      	beq.n	8001650 <motion_stop+0x1c>
		// motion in hold
		// stop detectors remain enabled
		return;

	// else, stop sampling motion sensors
	HAL_TIM_Base_Stop_IT(&TIM_MOTION);
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <motion_stop+0x24>)
 8001646:	f005 fbf5 	bl	8006e34 <HAL_TIM_Base_Stop_IT>

	// disable Stop Detectors
	stop_detector_deInit();
 800164a:	f001 f823 	bl	8002694 <stop_detector_deInit>
 800164e:	e000      	b.n	8001652 <motion_stop+0x1e>
		return;
 8001650:	bf00      	nop
	// motion OFF
//	motion_status = MOT_OFF;
}
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000084 	.word	0x20000084
 8001658:	20000740 	.word	0x20000740

0800165c <motion_isr>:

void motion_isr(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
	uint8_t err;

	// check Stop Sensors
	err = stop_detector_isr();
 8001662:	f001 f82b 	bl	80026bc <stop_detector_isr>
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]

	if(motion_status == MOT_HOLD)
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <motion_isr+0x8c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d116      	bne.n	80016a0 <motion_isr+0x44>
	{
		//if(timeout_flag)
		if(hold_timeout)
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <motion_isr+0x90>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <motion_isr+0x32>
		{
			//timeout_flag = 0;
			hold_timeout = 0;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <motion_isr+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
			// motion timeout occured
			motion_status = MOT_TIMEOUT;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <motion_isr+0x8c>)
 8001684:	2205      	movs	r2, #5
 8001686:	701a      	strb	r2, [r3, #0]
			// stop everything
			motion_stop();
 8001688:	f7ff ffd4 	bl	8001634 <motion_stop>
			return;
 800168c:	e028      	b.n	80016e0 <motion_isr+0x84>
		}
		if(err == 0)
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d124      	bne.n	80016de <motion_isr+0x82>
		{
			// obstacle has been moved
			// stop timeout
			//timeout_stop();
			hold_timeout_ctrl = 0;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <motion_isr+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
			// restart movement
			motion_start();
 800169a:	f7ff ffab 	bl	80015f4 <motion_start>
 800169e:	e011      	b.n	80016c4 <motion_isr+0x68>
		}
		else
			// continue in Hold
			return;
	}
	else if(err)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00e      	beq.n	80016c4 <motion_isr+0x68>
	{
		// update motion_status
		// Signal that Motion is stopped due to Stop Mark/Obstacle
		// err = E_CROSS_FOUND (1) -> motion_status = MOT_CROSS_FOUND (2)
		// err = E_OBS_FOUND (2) -> motion_status = MOT_HOLD (3)
		motion_status = err + (MOT_CROSS_FOUND - E_ST_CROSS_FOUND);
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <motion_isr+0x8c>)
 80016ae:	701a      	strb	r2, [r3, #0]

		// if motion is on hold, begin timeout
		if(motion_status == MOT_HOLD)
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <motion_isr+0x8c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d105      	bne.n	80016c4 <motion_isr+0x68>
		{
//			timeout_start(HOLD_TIMEOUT);
			hold_timeout_ctrl = 1;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <motion_isr+0x94>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
			motion_stop();
 80016be:	f7ff ffb9 	bl	8001634 <motion_stop>
			return;
 80016c2:	e00d      	b.n	80016e0 <motion_isr+0x84>
//		return;
	}

	// line follower ISR
	// continue to follow line
	err = lfollower_isr();
 80016c4:	f7ff fe16 	bl	80012f4 <lfollower_isr>
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
	if(err)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <motion_isr+0x84>
	{
		// signal motion error
		motion_status = MOT_ERR;
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <motion_isr+0x8c>)
 80016d4:	2204      	movs	r2, #4
 80016d6:	701a      	strb	r2, [r3, #0]

		// error following line
		// stop movement
		motion_stop();
 80016d8:	f7ff ffac 	bl	8001634 <motion_stop>
 80016dc:	e000      	b.n	80016e0 <motion_isr+0x84>
			return;
 80016de:	bf00      	nop
	}
}
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000084 	.word	0x20000084
 80016ec:	20000423 	.word	0x20000423
 80016f0:	20000427 	.word	0x20000427

080016f4 <motor_init>:
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <motor_init+0x1c>)
 8001704:	f005 fc1c 	bl	8006f40 <HAL_TIM_PWM_Start>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000065c 	.word	0x2000065c

08001714 <motor_kill>:
@brief	Stops PWM generation to a given motor
@param	Motor to be killed
@retval none
******************************************************************************/
void motor_kill(motor_st *m)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <motor_kill+0x28>)
 8001724:	f005 fd06 	bl	8007134 <HAL_TIM_PWM_Stop>
	// disable IN pins
	motor_control(m,  0, MOTOR_STOP);
 8001728:	2202      	movs	r2, #2
 800172a:	2100      	movs	r1, #0
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f807 	bl	8001740 <motor_control>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000065c 	.word	0x2000065c

08001740 <motor_control>:
		New PWM duty cycle
		Direction of motor rotation
@retval none
******************************************************************************/
void motor_control(motor_st *m,  uint8_t dc, motor_dir_e dir)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
 800174c:	4613      	mov	r3, r2
 800174e:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6858      	ldr	r0, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	8919      	ldrh	r1, [r3, #8]
 8001758:	78bb      	ldrb	r3, [r7, #2]
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <motor_control+0x58>)
 800175c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001760:	461a      	mov	r2, r3
 8001762:	f003 fabb 	bl	8004cdc <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68d8      	ldr	r0, [r3, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8a19      	ldrh	r1, [r3, #16]
 800176e:	78bb      	ldrb	r3, [r7, #2]
 8001770:	4a09      	ldr	r2, [pc, #36]	; (8001798 <motor_control+0x58>)
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	785b      	ldrb	r3, [r3, #1]
 8001778:	461a      	mov	r2, r3
 800177a:	f003 faaf 	bl	8004cdc <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b29b      	uxth	r3, r3
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	b292      	uxth	r2, r2
 8001788:	4619      	mov	r1, r3
 800178a:	4804      	ldr	r0, [pc, #16]	; (800179c <motor_control+0x5c>)
 800178c:	f001 faa8 	bl	8002ce0 <set_pwm>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	0800c358 	.word	0x0800c358
 800179c:	2000065c 	.word	0x2000065c

080017a0 <move_start>:
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <move_start+0x1c>)
 80017a6:	f7ff ffa5 	bl	80016f4 <motor_init>
	motor_init(&motor_left);
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <move_start+0x20>)
 80017ac:	f7ff ffa2 	bl	80016f4 <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <move_start+0x24>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000088 	.word	0x20000088
 80017c0:	2000009c 	.word	0x2000009c
 80017c4:	200003f5 	.word	0x200003f5

080017c8 <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <move_stop+0x1c>)
 80017ce:	f7ff ffa1 	bl	8001714 <motor_kill>
	motor_kill(&motor_left);
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <move_stop+0x20>)
 80017d4:	f7ff ff9e 	bl	8001714 <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <move_stop+0x24>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000088 	.word	0x20000088
 80017e8:	2000009c 	.word	0x2000009c
 80017ec:	200003f5 	.word	0x200003f5

080017f0 <move_control>:
@brief	Controls movement, setting speeds on each motor.
@param	Left and right motor speeds, respectively
@retval none
******************************************************************************/
void move_control(float speedL, float speedR)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80017fa:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 80017fe:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <move_control+0xd0>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 8001806:	f7ff ffcb 	bl	80017a0 <move_start>
	// speedL and speedR are PWM values, from -1 to +1
	// since dirL and dirR are uint8_t, speed values are truncated
	// so, by adding 0.99 (number less than 1) we get:
	// dirX = 0 if speedX is negative
	// dirX = 1 if speedX is positive
	uint8_t dirL = 0.99 + speedL;
 800180a:	edd7 7a03 	vldr	s15, [r7, #12]
 800180e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001812:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80018b0 <move_control+0xc0>
 8001816:	ee37 7b06 	vadd.f64	d7, d7, d6
 800181a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800181e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001822:	793b      	ldrb	r3, [r7, #4]
 8001824:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 8001826:	edd7 7a02 	vldr	s15, [r7, #8]
 800182a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800182e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80018b0 <move_control+0xc0>
 8001832:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001836:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800183a:	edc7 7a01 	vstr	s15, [r7, #4]
 800183e:	793b      	ldrb	r3, [r7, #4]
 8001840:	75bb      	strb	r3, [r7, #22]

	// dirL and dirR (motor_dir_e) are:
	// 0 -> motor moving BACKWARDS (MOTOR_BACKWARD)
	// 1 -> motor moving FORWARD (MOTOR_FORWARD)
	motor_control(&motor_right, fabs(speedR) * 100, (motor_dir_e)(dirR & 0x01));
 8001842:	edd7 7a02 	vldr	s15, [r7, #8]
 8001846:	eef0 7ae7 	vabs.f32	s15, s15
 800184a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800184e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80018b8 <move_control+0xc8>
 8001852:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001856:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800185a:	edc7 7a01 	vstr	s15, [r7, #4]
 800185e:	793b      	ldrb	r3, [r7, #4]
 8001860:	b2d9      	uxtb	r1, r3
 8001862:	7dbb      	ldrb	r3, [r7, #22]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	4815      	ldr	r0, [pc, #84]	; (80018c4 <move_control+0xd4>)
 800186e:	f7ff ff67 	bl	8001740 <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, (motor_dir_e)(dirL & 0x01));
 8001872:	edd7 7a03 	vldr	s15, [r7, #12]
 8001876:	eef0 7ae7 	vabs.f32	s15, s15
 800187a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800187e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80018b8 <move_control+0xc8>
 8001882:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001886:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800188a:	edc7 7a01 	vstr	s15, [r7, #4]
 800188e:	793b      	ldrb	r3, [r7, #4]
 8001890:	b2d9      	uxtb	r1, r3
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	480a      	ldr	r0, [pc, #40]	; (80018c8 <move_control+0xd8>)
 800189e:	f7ff ff4f 	bl	8001740 <motor_control>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	7ae147ae 	.word	0x7ae147ae
 80018b4:	3fefae14 	.word	0x3fefae14
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40590000 	.word	0x40590000
 80018c0:	200003f5 	.word	0x200003f5
 80018c4:	20000088 	.word	0x20000088
 80018c8:	2000009c 	.word	0x2000009c

080018cc <parse_cmd>:

/*
	Analyses the command sent in str_in and execute its callback
*/
char parse_cmd(const Command_t cmd_list[], const char *str_in)
{		
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
	char **argv = NULL; // List of arguments
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
	char *arg; // aux variable. Holds latest found argument
	char *s; // copy of received command. Necessary to use strtok
	
	uint8_t len;
	uint8_t argc = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]
	char retval = (-1);//(char)(-ECMDNF);
 80018de:	23ff      	movs	r3, #255	; 0xff
 80018e0:	75bb      	strb	r3, [r7, #22]
	
	if ((str_in == NULL) || (strlen(str_in) == 0)) // empty command
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <parse_cmd+0x24>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <parse_cmd+0x28>
		return (-1);//(char)(-ENOCMD);
 80018f0:	23ff      	movs	r3, #255	; 0xff
 80018f2:	e06f      	b.n	80019d4 <parse_cmd+0x108>
	//if (cmd_list == NULL) // no list
		//return (-ENOLIST);   

	len = strlen(str_in) + 1;
 80018f4:	6838      	ldr	r0, [r7, #0]
 80018f6:	f7fe fcad 	bl	8000254 <strlen>
 80018fa:	4603      	mov	r3, r0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	3301      	adds	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
	s = malloc(len);                 // just in case str_in is const
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	4618      	mov	r0, r3
 8001906:	f007 fd55 	bl	80093b4 <malloc>
 800190a:	4603      	mov	r3, r0
 800190c:	60bb      	str	r3, [r7, #8]
	
	if(s == NULL)
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <parse_cmd+0x4c>
		return (-1);//(char)(-ENOMEM);
 8001914:	23ff      	movs	r3, #255	; 0xff
 8001916:	e05d      	b.n	80019d4 <parse_cmd+0x108>
	
	strcpy(s, str_in);
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f008 fa9a 	bl	8009e54 <strcpy>
	arg = strtok(s, DELIMETER);
 8001920:	492e      	ldr	r1, [pc, #184]	; (80019dc <parse_cmd+0x110>)
 8001922:	68b8      	ldr	r0, [r7, #8]
 8001924:	f008 fa9e 	bl	8009e64 <strtok>
 8001928:	61b8      	str	r0, [r7, #24]
	while (arg)
 800192a:	e025      	b.n	8001978 <parse_cmd+0xac>
	{
		argc++;
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	3301      	adds	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
		len = sizeof (argv);
 8001932:	2304      	movs	r3, #4
 8001934:	73fb      	strb	r3, [r7, #15]
		if(argc == 1)
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <parse_cmd+0x7e>
				argv = malloc(len);
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	4618      	mov	r0, r3
 8001940:	f007 fd38 	bl	80093b4 <malloc>
 8001944:	4603      	mov	r3, r0
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	e008      	b.n	800195c <parse_cmd+0x90>
		else
				argv = realloc(argv, argc * len);
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	4619      	mov	r1, r3
 8001954:	69f8      	ldr	r0, [r7, #28]
 8001956:	f008 fa31 	bl	8009dbc <realloc>
 800195a:	61f8      	str	r0, [r7, #28]

		argv[argc-1] = arg;
 800195c:	7dfa      	ldrb	r2, [r7, #23]
 800195e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	601a      	str	r2, [r3, #0]
		arg = strtok(NULL, DELIMETER);
 800196e:	491b      	ldr	r1, [pc, #108]	; (80019dc <parse_cmd+0x110>)
 8001970:	2000      	movs	r0, #0
 8001972:	f008 fa77 	bl	8009e64 <strtok>
 8001976:	61b8      	str	r0, [r7, #24]
	while (arg)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1d6      	bne.n	800192c <parse_cmd+0x60>
	}

	if (argc)
 800197e:	7dfb      	ldrb	r3, [r7, #23]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01d      	beq.n	80019c0 <parse_cmd+0xf4>
	{
		const Command_t *p;

		for(p = cmd_list; p->cmd; p++)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e016      	b.n	80019b8 <parse_cmd+0xec>
		{
			if(strcmp(p->cmd, argv[0]) == 0)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f7fe fc53 	bl	8000240 <strcmp>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d108      	bne.n	80019b2 <parse_cmd+0xe6>
			{
				retval = (p->fn(argc, argv)); // Execute func
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	7dfa      	ldrb	r2, [r7, #23]
 80019a6:	69f9      	ldr	r1, [r7, #28]
 80019a8:	4610      	mov	r0, r2
 80019aa:	4798      	blx	r3
 80019ac:	4603      	mov	r3, r0
 80019ae:	75bb      	strb	r3, [r7, #22]
				break;
 80019b0:	e006      	b.n	80019c0 <parse_cmd+0xf4>
		for(p = cmd_list; p->cmd; p++)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	330c      	adds	r3, #12
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1e4      	bne.n	800198a <parse_cmd+0xbe>
			}
		}
	}

	// command not found
	if(argv)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <parse_cmd+0x100>
		free(argv);
 80019c6:	69f8      	ldr	r0, [r7, #28]
 80019c8:	f007 fcfc 	bl	80093c4 <free>

	free(s);
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f007 fcf9 	bl	80093c4 <free>

	return retval;
 80019d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	0800c2f4 	.word	0x0800c2f4

080019e0 <pid_calcule>:
@param	PID struct
		inputs to the controller, in1 and in2
@retval none
******************************************************************************/
void pid_calcule(pid_st* pid, float in1, float in2)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80019ec:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 80019f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80019f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a40:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001af4 <pid_calcule+0x114>
 8001a44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	ed93 7a00 	vldr	s14, [r3]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	69da      	ldr	r2, [r3, #28]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	dd08      	ble.n	8001abe <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	699a      	ldr	r2, [r3, #24]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	615a      	str	r2, [r3, #20]
	{
		pid->u = pid->u_sat_b;
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
	}
}
 8001abc:	e013      	b.n	8001ae6 <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	d400      	bmi.n	8001ad6 <pid_calcule+0xf6>
}
 8001ad4:	e007      	b.n	8001ae6 <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	699a      	ldr	r2, [r3, #24]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	615a      	str	r2, [r3, #20]
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	3e99999a 	.word	0x3e99999a

08001af8 <qtr_init>:
@brief 	Starts storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&ADC_QTR_DMA, qtr_sens, QTR_SENS_NUM);
 8001afc:	2206      	movs	r2, #6
 8001afe:	4903      	ldr	r1, [pc, #12]	; (8001b0c <qtr_init+0x14>)
 8001b00:	4803      	ldr	r0, [pc, #12]	; (8001b10 <qtr_init+0x18>)
 8001b02:	f001 fdbf 	bl	8003684 <HAL_ADC_Start_DMA>
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200003f8 	.word	0x200003f8
 8001b10:	200004e0 	.word	0x200004e0

08001b14 <qtr_kill>:
@brief 	Stops storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_kill(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&ADC_QTR_DMA);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <qtr_kill+0x10>)
 8001b1a:	f001 fead 	bl	8003878 <HAL_ADC_Stop_DMA>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200004e0 	.word	0x200004e0

08001b28 <qtr_get_digital>:
@param	Sensor
@retval	Digital/analog value of the requested sensor
******************************************************************************/
// QTR get sensor digital value
uint8_t qtr_get_digital(qtr_e sensor)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]) > ANALOG_HI_VOLT) & 0x01;
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <qtr_get_digital+0x68>)
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001b42:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001b78 <qtr_get_digital+0x50>
 8001b46:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b4a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001b80 <qtr_get_digital+0x58>
 8001b4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b52:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001b88 <qtr_get_digital+0x60>
 8001b56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5e:	bfcc      	ite	gt
 8001b60:	2301      	movgt	r3, #1
 8001b62:	2300      	movle	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	66666666 	.word	0x66666666
 8001b7c:	400a6666 	.word	0x400a6666
 8001b80:	00000000 	.word	0x00000000
 8001b84:	40affe00 	.word	0x40affe00
 8001b88:	9999999a 	.word	0x9999999a
 8001b8c:	40039999 	.word	0x40039999
 8001b90:	200003f8 	.word	0x200003f8
 8001b94:	00000000 	.word	0x00000000

08001b98 <qtr_get_analog>:

// QTR get sensor analog value
float qtr_get_analog(qtr_e sensor)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <qtr_get_analog+0x50>)
 8001ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001bb2:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001bd8 <qtr_get_analog+0x40>
 8001bb6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bba:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001be0 <qtr_get_analog+0x48>
 8001bbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bc2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8001bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	66666666 	.word	0x66666666
 8001bdc:	400a6666 	.word	0x400a6666
 8001be0:	00000000 	.word	0x00000000
 8001be4:	40affe00 	.word	0x40affe00
 8001be8:	200003f8 	.word	0x200003f8

08001bec <RFID_RC522_Init>:
#include "tim.h"
#include "timeout.h"

//SPI_HandleTypeDef SpiHandle = hspi1;

void RFID_RC522_Init(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f000 fb75 	bl	80022e0 <TM_MFRC522_CS_Write>

	TM_MFRC522_Reset();
 8001bf6:	f000 f94a 	bl	8001e8e <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001bfa:	218d      	movs	r1, #141	; 0x8d
 8001bfc:	202a      	movs	r0, #42	; 0x2a
 8001bfe:	f000 f883 	bl	8001d08 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001c02:	213e      	movs	r1, #62	; 0x3e
 8001c04:	202b      	movs	r0, #43	; 0x2b
 8001c06:	f000 f87f 	bl	8001d08 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0x03);
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	202c      	movs	r0, #44	; 0x2c
 8001c0e:	f000 f87b 	bl	8001d08 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 0xE8);
 8001c12:	21e8      	movs	r1, #232	; 0xe8
 8001c14:	202d      	movs	r0, #45	; 0x2d
 8001c16:	f000 f877 	bl	8001d08 <TM_MFRC522_WriteRegister>

	// 48dB gain
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8001c1a:	2170      	movs	r1, #112	; 0x70
 8001c1c:	2026      	movs	r0, #38	; 0x26
 8001c1e:	f000 f873 	bl	8001d08 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001c22:	2140      	movs	r1, #64	; 0x40
 8001c24:	2015      	movs	r0, #21
 8001c26:	f000 f86f 	bl	8001d08 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(ModeReg, 0x3D);
 8001c2a:	213d      	movs	r1, #61	; 0x3d
 8001c2c:	2011      	movs	r0, #17
 8001c2e:	f000 f86b 	bl	8001d08 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8001c32:	f000 f917 	bl	8001e64 <TM_MFRC522_AntennaOn>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <RFID_read>:
@para 	rfid struct
@retval rfid status
******************************************************************************/
#include "tests.h"
uint8_t RFID_read(rfid_t *rfid, uint8_t timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
	// RFID status reading
	TM_MFRC522_Status_t status;

  	// start timeout
  	//timeout_start(timeout);
	rfid_timeout_ctrl = 1;
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <RFID_read+0x6c>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
  	write_led(LGREEN, 1);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2101      	movs	r1, #1
 8001c52:	4816      	ldr	r0, [pc, #88]	; (8001cac <RFID_read+0x70>)
 8001c54:	f003 f842 	bl	8004cdc <HAL_GPIO_WritePin>

	do{
		// check if rfid was read
		status = TM_MFRC522_Check(rfid->CardID, &rfid->type);
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f000 f827 	bl	8001cb4 <TM_MFRC522_Check>
 8001c66:	4603      	mov	r3, r0
 8001c68:	73fb      	strb	r3, [r7, #15]
	} while((status != MI_OK) && (rfid_timeout == 0));
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <RFID_read+0x3e>
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <RFID_read+0x74>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0ee      	beq.n	8001c58 <RFID_read+0x1c>

	write_led(LGREEN, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	480b      	ldr	r0, [pc, #44]	; (8001cac <RFID_read+0x70>)
 8001c80:	f003 f82c 	bl	8004cdc <HAL_GPIO_WritePin>

	if(rfid_timeout)
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <RFID_read+0x74>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d004      	beq.n	8001c98 <RFID_read+0x5c>
	{
		rfid_timeout = 0;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <RFID_read+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
		return MI_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e003      	b.n	8001ca0 <RFID_read+0x64>
	}

	// else, stop timeout
	rfid_timeout_ctrl = 0;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <RFID_read+0x6c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
	// return Read status
	return status;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000424 	.word	0x20000424
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	20000420 	.word	0x20000420

08001cb4 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id, uint8_t* type) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	TM_MFRC522_Status_t status;

	// REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.
	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	2026      	movs	r0, #38	; 0x26
 8001cc2:	f000 f8ef 	bl	8001ea4 <TM_MFRC522_Request>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <TM_MFRC522_Check+0x32>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f9fe 	bl	80020d2 <TM_MFRC522_Anticoll>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	73fb      	strb	r3, [r7, #15]

		//select, return sak and crc
		status = TM_MFRC522_SelectTag(id, type);
 8001cda:	6839      	ldr	r1, [r7, #0]
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fa89 	bl	80021f4 <TM_MFRC522_SelectTag>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	73fb      	strb	r3, [r7, #15]
	}

	TM_MFRC522_Halt();			//Command card into hibernation
 8001ce6:	f000 fadf 	bl	80022a8 <TM_MFRC522_Halt>
	return status;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <handleError>:
		}
	}
	return MI_OK;
}

void handleError() {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	while(1) {
		//BSP_LED_On(LED_RED);
		HAL_Delay(100);
 8001cf8:	2064      	movs	r0, #100	; 0x64
 8001cfa:	f001 fb19 	bl	8003330 <HAL_Delay>
		//BSP_LED_Off(LED_RED);
		HAL_Delay(100);
 8001cfe:	2064      	movs	r0, #100	; 0x64
 8001d00:	f001 fb16 	bl	8003330 <HAL_Delay>
		HAL_Delay(100);
 8001d04:	e7f8      	b.n	8001cf8 <handleError+0x4>
	...

08001d08 <TM_MFRC522_WriteRegister>:
	}
}

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460a      	mov	r2, r1
 8001d12:	71fb      	strb	r3, [r7, #7]
 8001d14:	4613      	mov	r3, r2
 8001d16:	71bb      	strb	r3, [r7, #6]
	//CS low
	TM_MFRC522_CS_Write(GPIO_PIN_RESET);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f000 fae1 	bl	80022e0 <TM_MFRC522_CS_Write>

	HAL_StatusTypeDef transmitStatus;
	
	//Send address ## HAL_MAX_DELAY --> infinite poll until process is successful
	addr = (addr << 1) & 0x7E;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	71fb      	strb	r3, [r7, #7]

	transmitStatus = HAL_SPI_Transmit(&hspi3, &addr, 1, HAL_MAX_DELAY);
 8001d2c:	1df9      	adds	r1, r7, #7
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	2201      	movs	r2, #1
 8001d34:	480f      	ldr	r0, [pc, #60]	; (8001d74 <TM_MFRC522_WriteRegister+0x6c>)
 8001d36:	f004 f9ac 	bl	8006092 <HAL_SPI_Transmit>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <TM_MFRC522_WriteRegister+0x40>
		handleError();
 8001d44:	f7ff ffd6 	bl	8001cf4 <handleError>
	}
	//Send data
	transmitStatus = HAL_SPI_Transmit(&hspi3, &val, 1, HAL_MAX_DELAY);
 8001d48:	1db9      	adds	r1, r7, #6
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4808      	ldr	r0, [pc, #32]	; (8001d74 <TM_MFRC522_WriteRegister+0x6c>)
 8001d52:	f004 f99e 	bl	8006092 <HAL_SPI_Transmit>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <TM_MFRC522_WriteRegister+0x5c>
		handleError();
 8001d60:	f7ff ffc8 	bl	8001cf4 <handleError>
	}

	//CS high
	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f000 fabb 	bl	80022e0 <TM_MFRC522_CS_Write>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000594 	.word	0x20000594

08001d78 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
	uint8_t val = 0x00;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73bb      	strb	r3, [r7, #14]
//	uint8_t retval = 0x00;
	//CS low
	TM_MFRC522_CS_Write(GPIO_PIN_RESET);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f000 faaa 	bl	80022e0 <TM_MFRC522_CS_Write>

	HAL_StatusTypeDef transmitStatus;
	addr = (addr << 1) | 0x80;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	71fb      	strb	r3, [r7, #7]

	transmitStatus = HAL_SPI_Transmit(&hspi3, &addr, 1, HAL_MAX_DELAY);
 8001d9c:	1df9      	adds	r1, r7, #7
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	2201      	movs	r2, #1
 8001da4:	4812      	ldr	r0, [pc, #72]	; (8001df0 <TM_MFRC522_ReadRegister+0x78>)
 8001da6:	f004 f974 	bl	8006092 <HAL_SPI_Transmit>
 8001daa:	4603      	mov	r3, r0
 8001dac:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <TM_MFRC522_ReadRegister+0x40>
		handleError();
 8001db4:	f7ff ff9e 	bl	8001cf4 <handleError>
	}

	uint8_t dummy = MFRC522_DUMMY;
 8001db8:	2300      	movs	r3, #0
 8001dba:	737b      	strb	r3, [r7, #13]
	transmitStatus = HAL_SPI_TransmitReceive(&hspi3, &dummy, &val, 1, HAL_MAX_DELAY);
 8001dbc:	f107 020e 	add.w	r2, r7, #14
 8001dc0:	f107 010d 	add.w	r1, r7, #13
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2301      	movs	r3, #1
 8001dcc:	4808      	ldr	r0, [pc, #32]	; (8001df0 <TM_MFRC522_ReadRegister+0x78>)
 8001dce:	f004 face 	bl	800636e <HAL_SPI_TransmitReceive>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <TM_MFRC522_ReadRegister+0x68>
		handleError();
 8001ddc:	f7ff ff8a 	bl	8001cf4 <handleError>
	}

	//CS high
	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f000 fa7d 	bl	80022e0 <TM_MFRC522_CS_Write>

	return val;
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000594 	.word	0x20000594

08001df4 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ffb6 	bl	8001d78 <TM_MFRC522_ReadRegister>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff74 	bl	8001d08 <TM_MFRC522_WriteRegister>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460a      	mov	r2, r1
 8001e32:	71fb      	strb	r3, [r7, #7]
 8001e34:	4613      	mov	r3, r2
 8001e36:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff9c 	bl	8001d78 <TM_MFRC522_ReadRegister>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b25a      	sxtb	r2, r3
 8001e44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	b25b      	sxtb	r3, r3
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff56 	bl	8001d08 <TM_MFRC522_WriteRegister>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001e6a:	2014      	movs	r0, #20
 8001e6c:	f7ff ff84 	bl	8001d78 <TM_MFRC522_ReadRegister>
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001e7e:	2103      	movs	r1, #3
 8001e80:	2014      	movs	r0, #20
 8001e82:	f7ff ffb7 	bl	8001df4 <TM_MFRC522_SetBitMask>
	}
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001e92:	210f      	movs	r1, #15
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7ff ff37 	bl	8001d08 <TM_MFRC522_WriteRegister>
	HAL_Delay(50);
 8001e9a:	2032      	movs	r0, #50	; 0x32
 8001e9c:	f001 fa48 	bl	8003330 <HAL_Delay>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001eb0:	2107      	movs	r1, #7
 8001eb2:	200d      	movs	r0, #13
 8001eb4:	f7ff ff28 	bl	8001d08 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	79fa      	ldrb	r2, [r7, #7]
 8001ebc:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	6839      	ldr	r1, [r7, #0]
 8001eca:	200c      	movs	r0, #12
 8001ecc:	f000 f80f 	bl	8001eee <TM_MFRC522_ToCard>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK && backBits != 0x10) {
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d104      	bne.n	8001ee4 <TM_MFRC522_Request+0x40>
 8001eda:	89bb      	ldrh	r3, [r7, #12]
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d001      	beq.n	8001ee4 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <TM_MFRC522_ToCard>:
TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, // the command to execute - one of the PCD_Command enums
										uint8_t* sendData, // pointer to the data to transfer to the FIFO
										uint8_t sendLen, // number of bytes to transfer to the FIFO
										uint8_t* backData, // NULL or pointer to buffer if data should be read back after executing the command
										uint16_t* backLen // in: max number of bytes to write to *backData, out: the number of bytes returned
									) {
 8001eee:	b590      	push	{r4, r7, lr}
 8001ef0:	b087      	sub	sp, #28
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	4613      	mov	r3, r2
 8001efe:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8001f00:	2302      	movs	r3, #2
 8001f02:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001f04:	2300      	movs	r3, #0
 8001f06:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d006      	beq.n	8001f20 <TM_MFRC522_ToCard+0x32>
 8001f12:	2b0e      	cmp	r3, #14
 8001f14:	d109      	bne.n	8001f2a <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001f16:	2312      	movs	r3, #18
 8001f18:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10; // bit 4
 8001f1a:	2310      	movs	r3, #16
 8001f1c:	757b      	strb	r3, [r7, #21]
			break;
 8001f1e:	e005      	b.n	8001f2c <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77; //
 8001f20:	2377      	movs	r3, #119	; 0x77
 8001f22:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30; // bit 4 IdleIRq, 5 RxIRq
 8001f24:	2330      	movs	r3, #48	; 0x30
 8001f26:	757b      	strb	r3, [r7, #21]
			break;
 8001f28:	e000      	b.n	8001f2c <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001f2a:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001f2c:	7dbb      	ldrb	r3, [r7, #22]
 8001f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	4619      	mov	r1, r3
 8001f36:	2002      	movs	r0, #2
 8001f38:	f7ff fee6 	bl	8001d08 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE); // Stop any active command.
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7ff fee2 	bl	8001d08 <TM_MFRC522_WriteRegister>

	TM_MFRC522_ClearBitMask(MFRC522_REG_COLL, 0x80); // clear collision register
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	200e      	movs	r0, #14
 8001f48:	f7ff ff6e 	bl	8001e28 <TM_MFRC522_ClearBitMask>

	//TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80); // Clear all seven interrupt request bits
	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IRQ, 0x7F); // Clear all seven interrupt request bits via ComIrqReg[7] - Set1, when 0, clear interrupts
 8001f4c:	217f      	movs	r1, #127	; 0x7f
 8001f4e:	2004      	movs	r0, #4
 8001f50:	f7ff feda 	bl	8001d08 <TM_MFRC522_WriteRegister>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80); // FlushBuffer = 1, FIFO initialization
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	200a      	movs	r0, #10
 8001f58:	f7ff ff4c 	bl	8001df4 <TM_MFRC522_SetBitMask>
	//TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00); // make sure to clear bit adjustments (should be calculated though, missing some parameters)

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	827b      	strh	r3, [r7, #18]
 8001f60:	e00a      	b.n	8001f78 <TM_MFRC522_ToCard+0x8a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001f62:	8a7b      	ldrh	r3, [r7, #18]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	4413      	add	r3, r2
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	2009      	movs	r0, #9
 8001f6e:	f7ff fecb 	bl	8001d08 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8001f72:	8a7b      	ldrh	r3, [r7, #18]
 8001f74:	3301      	adds	r3, #1
 8001f76:	827b      	strh	r3, [r7, #18]
 8001f78:	7bbb      	ldrb	r3, [r7, #14]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	8a7a      	ldrh	r2, [r7, #18]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3ef      	bcc.n	8001f62 <TM_MFRC522_ToCard+0x74>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	4619      	mov	r1, r3
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7ff febe 	bl	8001d08 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d103      	bne.n	8001f9a <TM_MFRC522_ToCard+0xac>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	200d      	movs	r0, #13
 8001f96:	f7ff ff2d 	bl	8001df4 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 36000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8001f9a:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8001f9e:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001fa0:	2004      	movs	r0, #4
 8001fa2:	f7ff fee9 	bl	8001d78 <TM_MFRC522_ReadRegister>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	753b      	strb	r3, [r7, #20]
		i--;
 8001faa:	8a7b      	ldrh	r3, [r7, #18]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) // i=0 is timeout
				&& !(n&0x01) // timer interrupt - nothing received in 25ms
				&& !(n&waitIRq) // one of the interrupts that signal success has been sent
			);
 8001fb0:	8a7b      	ldrh	r3, [r7, #18]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <TM_MFRC522_ToCard+0xde>
				&& !(n&0x01) // timer interrupt - nothing received in 25ms
 8001fb6:	7d3b      	ldrb	r3, [r7, #20]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <TM_MFRC522_ToCard+0xde>
				&& !(n&waitIRq) // one of the interrupts that signal success has been sent
 8001fc0:	7d3a      	ldrb	r2, [r7, #20]
 8001fc2:	7d7b      	ldrb	r3, [r7, #21]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0e9      	beq.n	8001fa0 <TM_MFRC522_ToCard+0xb2>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	200d      	movs	r0, #13
 8001fd0:	f7ff ff2a 	bl	8001e28 <TM_MFRC522_ClearBitMask>

	uint8_t errorRegValue = 0x00;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	747b      	strb	r3, [r7, #17]
	errorRegValue = TM_MFRC522_ReadRegister(MFRC522_REG_ERROR);
 8001fd8:	2006      	movs	r0, #6
 8001fda:	f7ff fecd 	bl	8001d78 <TM_MFRC522_ReadRegister>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	747b      	strb	r3, [r7, #17]
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr	
 8001fe2:	7c7b      	ldrb	r3, [r7, #17]
 8001fe4:	f003 0313 	and.w	r3, r3, #19
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <TM_MFRC522_ToCard+0x106>
		status = MI_ERR;
 8001fec:	2302      	movs	r3, #2
 8001fee:	75fb      	strb	r3, [r7, #23]
		return status;
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	e06a      	b.n	80020ca <TM_MFRC522_ToCard+0x1dc>
	}

	if (i == 0) {
 8001ff4:	8a7b      	ldrh	r3, [r7, #18]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <TM_MFRC522_ToCard+0x110>
		return MI_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e065      	b.n	80020ca <TM_MFRC522_ToCard+0x1dc>
	}

	if (n & 0x01 && !(n&waitIRq)) {
 8001ffe:	7d3b      	ldrb	r3, [r7, #20]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <TM_MFRC522_ToCard+0x12a>
 8002008:	7d3a      	ldrb	r2, [r7, #20]
 800200a:	7d7b      	ldrb	r3, [r7, #21]
 800200c:	4013      	ands	r3, r2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <TM_MFRC522_ToCard+0x12a>
		return MI_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e058      	b.n	80020ca <TM_MFRC522_ToCard+0x1dc>
	}

	if (i != 0)  {
 8002018:	8a7b      	ldrh	r3, [r7, #18]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d04d      	beq.n	80020ba <TM_MFRC522_ToCard+0x1cc>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800201e:	2006      	movs	r0, #6
 8002020:	f7ff feaa 	bl	8001d78 <TM_MFRC522_ReadRegister>
 8002024:	4603      	mov	r3, r0
 8002026:	f003 031b 	and.w	r3, r3, #27
 800202a:	2b00      	cmp	r3, #0
 800202c:	d143      	bne.n	80020b6 <TM_MFRC522_ToCard+0x1c8>


			status = MI_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]

			if (command == PCD_TRANSCEIVE) {
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	2b0c      	cmp	r3, #12
 8002036:	d140      	bne.n	80020ba <TM_MFRC522_ToCard+0x1cc>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8002038:	200a      	movs	r0, #10
 800203a:	f7ff fe9d 	bl	8001d78 <TM_MFRC522_ReadRegister>
 800203e:	4603      	mov	r3, r0
 8002040:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8002042:	200c      	movs	r0, #12
 8002044:	f7ff fe98 	bl	8001d78 <TM_MFRC522_ReadRegister>
 8002048:	4603      	mov	r3, r0
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	743b      	strb	r3, [r7, #16]

				if (n == 0) {
 8002050:	7d3b      	ldrb	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <TM_MFRC522_ToCard+0x16c>
					n = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	753b      	strb	r3, [r7, #20]
				}

				if (lastBits) {
 800205a:	7c3b      	ldrb	r3, [r7, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <TM_MFRC522_ToCard+0x18a>
					*backLen = (n - 1) * 8 + lastBits;
 8002060:	7d3b      	ldrb	r3, [r7, #20]
 8002062:	3b01      	subs	r3, #1
 8002064:	b29b      	uxth	r3, r3
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	b29a      	uxth	r2, r3
 800206a:	7c3b      	ldrb	r3, [r7, #16]
 800206c:	b29b      	uxth	r3, r3
 800206e:	4413      	add	r3, r2
 8002070:	b29a      	uxth	r2, r3
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	801a      	strh	r2, [r3, #0]
 8002076:	e005      	b.n	8002084 <TM_MFRC522_ToCard+0x196>
				} else {
					*backLen = n * 8;
 8002078:	7d3b      	ldrb	r3, [r7, #20]
 800207a:	b29b      	uxth	r3, r3
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	b29a      	uxth	r2, r3
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	801a      	strh	r2, [r3, #0]
				}

				if (n > MFRC522_MAX_LEN) {
 8002084:	7d3b      	ldrb	r3, [r7, #20]
 8002086:	2b10      	cmp	r3, #16
 8002088:	d901      	bls.n	800208e <TM_MFRC522_ToCard+0x1a0>
					n = MFRC522_MAX_LEN;
 800208a:	2310      	movs	r3, #16
 800208c:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 800208e:	2300      	movs	r3, #0
 8002090:	827b      	strh	r3, [r7, #18]
 8002092:	e00a      	b.n	80020aa <TM_MFRC522_ToCard+0x1bc>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8002094:	8a7b      	ldrh	r3, [r7, #18]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	18d4      	adds	r4, r2, r3
 800209a:	2009      	movs	r0, #9
 800209c:	f7ff fe6c 	bl	8001d78 <TM_MFRC522_ReadRegister>
 80020a0:	4603      	mov	r3, r0
 80020a2:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80020a4:	8a7b      	ldrh	r3, [r7, #18]
 80020a6:	3301      	adds	r3, #1
 80020a8:	827b      	strh	r3, [r7, #18]
 80020aa:	7d3b      	ldrb	r3, [r7, #20]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	8a7a      	ldrh	r2, [r7, #18]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3ef      	bcc.n	8002094 <TM_MFRC522_ToCard+0x1a6>
 80020b4:	e001      	b.n	80020ba <TM_MFRC522_ToCard+0x1cc>
				}
			}
		} else {
			return MI_ERR;
 80020b6:	2302      	movs	r3, #2
 80020b8:	e007      	b.n	80020ca <TM_MFRC522_ToCard+0x1dc>
		}
	} else {

	}

	if (errorRegValue & 0x08) {		// CollErr
 80020ba:	7c7b      	ldrb	r3, [r7, #17]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <TM_MFRC522_ToCard+0x1da>
		return MI_ERR;
 80020c4:	2302      	movs	r3, #2
 80020c6:	e000      	b.n	80020ca <TM_MFRC522_ToCard+0x1dc>
	}

	return status;
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd90      	pop	{r4, r7, pc}

080020d2 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af02      	add	r7, sp, #8
 80020d8:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80020de:	2100      	movs	r1, #0
 80020e0:	200d      	movs	r0, #13
 80020e2:	f7ff fe11 	bl	8001d08 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2293      	movs	r2, #147	; 0x93
 80020ea:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3301      	adds	r3, #1
 80020f0:	2220      	movs	r2, #32
 80020f2:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80020f4:	f107 030a 	add.w	r3, r7, #10
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	200c      	movs	r0, #12
 8002102:	f7ff fef4 	bl	8001eee <TM_MFRC522_ToCard>
 8002106:	4603      	mov	r3, r0
 8002108:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d118      	bne.n	8002142 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8002110:	2300      	movs	r3, #0
 8002112:	73bb      	strb	r3, [r7, #14]
 8002114:	e009      	b.n	800212a <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8002116:	7bbb      	ldrb	r3, [r7, #14]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	7b7b      	ldrb	r3, [r7, #13]
 8002120:	4053      	eors	r3, r2
 8002122:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8002124:	7bbb      	ldrb	r3, [r7, #14]
 8002126:	3301      	adds	r3, #1
 8002128:	73bb      	strb	r3, [r7, #14]
 800212a:	7bbb      	ldrb	r3, [r7, #14]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d9f2      	bls.n	8002116 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8002130:	7bbb      	ldrb	r3, [r7, #14]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	7b7a      	ldrb	r2, [r7, #13]
 800213a:	429a      	cmp	r2, r3
 800213c:	d001      	beq.n	8002142 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800213e:	2302      	movs	r3, #2
 8002140:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <TM_MFRC522_CalculateCRC>:

TM_MFRC522_Status_t TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	460b      	mov	r3, r1
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 800215a:	2104      	movs	r1, #4
 800215c:	2005      	movs	r0, #5
 800215e:	f7ff fe63 	bl	8001e28 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	200a      	movs	r0, #10
 8002166:	f7ff fe45 	bl	8001df4 <TM_MFRC522_SetBitMask>
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE); // Stop any active command.
 800216a:	2100      	movs	r1, #0
 800216c:	2001      	movs	r0, #1
 800216e:	f7ff fdcb 	bl	8001d08 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]
 8002176:	e00a      	b.n	800218e <TM_MFRC522_CalculateCRC+0x42>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	2009      	movs	r0, #9
 8002184:	f7ff fdc0 	bl	8001d08 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	3301      	adds	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
 800218e:	7dfa      	ldrb	r2, [r7, #23]
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3f0      	bcc.n	8002178 <TM_MFRC522_CalculateCRC+0x2c>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8002196:	2103      	movs	r1, #3
 8002198:	2001      	movs	r0, #1
 800219a:	f7ff fdb5 	bl	8001d08 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 800219e:	23ff      	movs	r3, #255	; 0xff
 80021a0:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80021a2:	2005      	movs	r0, #5
 80021a4:	f7ff fde8 	bl	8001d78 <TM_MFRC522_ReadRegister>
 80021a8:	4603      	mov	r3, r0
 80021aa:	75bb      	strb	r3, [r7, #22]
		i--;
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <TM_MFRC522_CalculateCRC+0x76>
 80021b8:	7dbb      	ldrb	r3, [r7, #22]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0ef      	beq.n	80021a2 <TM_MFRC522_CalculateCRC+0x56>

	if (i == 0) {
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <TM_MFRC522_CalculateCRC+0x80>
		return MI_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e00e      	b.n	80021ea <TM_MFRC522_CalculateCRC+0x9e>
	}

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80021cc:	2022      	movs	r0, #34	; 0x22
 80021ce:	f7ff fdd3 	bl	8001d78 <TM_MFRC522_ReadRegister>
 80021d2:	4603      	mov	r3, r0
 80021d4:	461a      	mov	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	1c5c      	adds	r4, r3, #1
 80021de:	2021      	movs	r0, #33	; 0x21
 80021e0:	f7ff fdca 	bl	8001d78 <TM_MFRC522_ReadRegister>
 80021e4:	4603      	mov	r3, r0
 80021e6:	7023      	strb	r3, [r4, #0]

	return MI_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd90      	pop	{r4, r7, pc}
	...

080021f4 <TM_MFRC522_SelectTag>:

TM_MFRC522_Status_t TM_MFRC522_SelectTag(uint8_t* serNum, uint8_t* type) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
	uint8_t i;
	TM_MFRC522_Status_t status;
//	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9];
	uint8_t sak[3] = {0};
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <TM_MFRC522_SelectTag+0xb0>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	81bb      	strh	r3, [r7, #12]
 8002204:	2300      	movs	r3, #0
 8002206:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PICC_SElECTTAG;
 8002208:	2393      	movs	r3, #147	; 0x93
 800220a:	743b      	strb	r3, [r7, #16]
	buffer[1] = 0x70;
 800220c:	2370      	movs	r3, #112	; 0x70
 800220e:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 4; i++) {
 8002210:	2300      	movs	r3, #0
 8002212:	77fb      	strb	r3, [r7, #31]
 8002214:	e00d      	b.n	8002232 <TM_MFRC522_SelectTag+0x3e>
		buffer[i+2] = *(serNum+i);
 8002216:	7ffb      	ldrb	r3, [r7, #31]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	441a      	add	r2, r3
 800221c:	7ffb      	ldrb	r3, [r7, #31]
 800221e:	3302      	adds	r3, #2
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	f107 0120 	add.w	r1, r7, #32
 8002226:	440b      	add	r3, r1
 8002228:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < 4; i++) {
 800222c:	7ffb      	ldrb	r3, [r7, #31]
 800222e:	3301      	adds	r3, #1
 8002230:	77fb      	strb	r3, [r7, #31]
 8002232:	7ffb      	ldrb	r3, [r7, #31]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d9ee      	bls.n	8002216 <TM_MFRC522_SelectTag+0x22>
	}
	buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5]; // Calculate BCC - Block Check Character
 8002238:	7cba      	ldrb	r2, [r7, #18]
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	4053      	eors	r3, r2
 800223e:	b2da      	uxtb	r2, r3
 8002240:	7d3b      	ldrb	r3, [r7, #20]
 8002242:	4053      	eors	r3, r2
 8002244:	b2da      	uxtb	r2, r3
 8002246:	7d7b      	ldrb	r3, [r7, #21]
 8002248:	4053      	eors	r3, r2
 800224a:	b2db      	uxtb	r3, r3
 800224c:	75bb      	strb	r3, [r7, #22]
	status = TM_MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	1dda      	adds	r2, r3, #7
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	2107      	movs	r1, #7
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff ff76 	bl	800214c <TM_MFRC522_CalculateCRC>
 8002260:	4603      	mov	r3, r0
 8002262:	77bb      	strb	r3, [r7, #30]

	if (status != MI_OK) {
 8002264:	7fbb      	ldrb	r3, [r7, #30]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <TM_MFRC522_SelectTag+0x7a>
		return status;
 800226a:	7fbb      	ldrb	r3, [r7, #30]
 800226c:	e016      	b.n	800229c <TM_MFRC522_SelectTag+0xa8>
	}

	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, sak, &recvBits);
 800226e:	f107 020c 	add.w	r2, r7, #12
 8002272:	f107 0110 	add.w	r1, r7, #16
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	2209      	movs	r2, #9
 8002280:	200c      	movs	r0, #12
 8002282:	f7ff fe34 	bl	8001eee <TM_MFRC522_ToCard>
 8002286:	4603      	mov	r3, r0
 8002288:	77bb      	strb	r3, [r7, #30]
//		size = buffer[0];
//	} else {
//		size = 0;
//	}

	if (recvBits != 24) { // SAK must be exactly 24 bits (1 byte + CRC_A).
 800228a:	8bbb      	ldrh	r3, [r7, #28]
 800228c:	2b18      	cmp	r3, #24
 800228e:	d001      	beq.n	8002294 <TM_MFRC522_SelectTag+0xa0>
		return MI_ERR;
 8002290:	2302      	movs	r3, #2
 8002292:	e003      	b.n	800229c <TM_MFRC522_SelectTag+0xa8>
	}

	*type = sak[0];
 8002294:	7b3a      	ldrb	r2, [r7, #12]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	701a      	strb	r2, [r3, #0]

	return status;
 800229a:	7fbb      	ldrb	r3, [r7, #30]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	0800c2f8 	.word	0x0800c2f8

080022a8 <TM_MFRC522_Halt>:

void TM_MFRC522_Halt(void) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80022ae:	2350      	movs	r3, #80	; 0x50
 80022b0:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80022b6:	463b      	mov	r3, r7
 80022b8:	1c9a      	adds	r2, r3, #2
 80022ba:	463b      	mov	r3, r7
 80022bc:	2102      	movs	r1, #2
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff44 	bl	800214c <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80022c4:	463a      	mov	r2, r7
 80022c6:	4639      	mov	r1, r7
 80022c8:	1dbb      	adds	r3, r7, #6
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	2204      	movs	r2, #4
 80022d0:	200c      	movs	r0, #12
 80022d2:	f7ff fe0c 	bl	8001eee <TM_MFRC522_ToCard>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <TM_MFRC522_CS_Write>:

void TM_MFRC522_CS_Write(uint8_t val) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPIx_CS_GPIO_PORT, SPIx_CS_PIN, val);
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	461a      	mov	r2, r3
 80022ee:	2104      	movs	r1, #4
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <TM_MFRC522_CS_Write+0x20>)
 80022f2:	f002 fcf3 	bl	8004cdc <HAL_GPIO_WritePin>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40020c00 	.word	0x40020c00

08002304 <bin_to_strhex>:

void bin_to_strhex(unsigned char *bin, unsigned int binsz, char **result)
{
 8002304:	b5b0      	push	{r4, r5, r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  char          hex_str[]= "0123456789abcdef";
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <bin_to_strhex+0xc4>)
 8002312:	f107 0410 	add.w	r4, r7, #16
 8002316:	461d      	mov	r5, r3
 8002318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800231a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	7023      	strb	r3, [r4, #0]
  unsigned int  i;

  *result = (char *)malloc(binsz * 2 + 3);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	3303      	adds	r3, #3
 8002326:	4618      	mov	r0, r3
 8002328:	f007 f844 	bl	80093b4 <malloc>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	601a      	str	r2, [r3, #0]
  (*result)[binsz * 2 + 2] = 0;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	3301      	adds	r3, #1
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]

  if (!binsz)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d039      	beq.n	80023be <bin_to_strhex+0xba>
    return;

  (*result)[0] = '0';
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2230      	movs	r2, #48	; 0x30
 8002350:	701a      	strb	r2, [r3, #0]
  (*result)[1] = 'x';
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	2278      	movs	r2, #120	; 0x78
 800235a:	701a      	strb	r2, [r3, #0]

  for (i = 0; i < binsz; i++)
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
 8002360:	e028      	b.n	80023b4 <bin_to_strhex+0xb0>
    {
      (*result)[i * 2 + 2] = hex_str[(bin[i] >> 4) & 0x0F];
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	4413      	add	r3, r2
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 020f 	and.w	r2, r3, #15
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	3301      	adds	r3, #1
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	440b      	add	r3, r1
 800237e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002382:	440a      	add	r2, r1
 8002384:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002388:	701a      	strb	r2, [r3, #0]
      (*result)[i * 2 + 3] = hex_str[(bin[i]     ) & 0x0F];
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	4413      	add	r3, r2
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	f003 020f 	and.w	r2, r3, #15
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6819      	ldr	r1, [r3, #0]
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	3303      	adds	r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80023a6:	440a      	add	r2, r1
 80023a8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80023ac:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < binsz; i++)
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3301      	adds	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3d2      	bcc.n	8002362 <bin_to_strhex+0x5e>
 80023bc:	e000      	b.n	80023c0 <bin_to_strhex+0xbc>
    return;
 80023be:	bf00      	nop
    }  
}
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bdb0      	pop	{r4, r5, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	0800c2fc 	.word	0x0800c2fc

080023cc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <MX_SPI3_Init+0x74>)
 80023d2:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <MX_SPI3_Init+0x78>)
 80023d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <MX_SPI3_Init+0x74>)
 80023d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <MX_SPI3_Init+0x74>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <MX_SPI3_Init+0x74>)
 80023e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023ea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <MX_SPI3_Init+0x74>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <MX_SPI3_Init+0x74>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_SPI3_Init+0x74>)
 80023fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <MX_SPI3_Init+0x74>)
 8002402:	2218      	movs	r2, #24
 8002404:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_SPI3_Init+0x74>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <MX_SPI3_Init+0x74>)
 800240e:	2200      	movs	r2, #0
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <MX_SPI3_Init+0x74>)
 8002414:	2200      	movs	r2, #0
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MX_SPI3_Init+0x74>)
 800241a:	2207      	movs	r2, #7
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <MX_SPI3_Init+0x74>)
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <MX_SPI3_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_SPI3_Init+0x74>)
 800242c:	f003 fd86 	bl	8005f3c <HAL_SPI_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002436:	f7ff f8d7 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000594 	.word	0x20000594
 8002444:	40003c00 	.word	0x40003c00

08002448 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <HAL_SPI_MspInit+0x8c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d130      	bne.n	80024cc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_SPI_MspInit+0x90>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_SPI_MspInit+0x90>)
 8002470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_SPI_MspInit+0x90>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_SPI_MspInit+0x90>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_SPI_MspInit+0x90>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_SPI_MspInit+0x90>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800249a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024ac:	2306      	movs	r3, #6
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	4809      	ldr	r0, [pc, #36]	; (80024dc <HAL_SPI_MspInit+0x94>)
 80024b8:	f002 fa4c 	bl	8004954 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2100      	movs	r1, #0
 80024c0:	2033      	movs	r0, #51	; 0x33
 80024c2:	f001 fe06 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80024c6:	2033      	movs	r0, #51	; 0x33
 80024c8:	f001 fe1f 	bl	800410a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80024cc:	bf00      	nop
 80024ce:	3728      	adds	r7, #40	; 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40003c00 	.word	0x40003c00
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020800 	.word	0x40020800

080024e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <HAL_MspInit+0x44>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <HAL_MspInit+0x44>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_MspInit+0x44>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_MspInit+0x44>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_MspInit+0x44>)
 8002504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_MspInit+0x44>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800252c:	e7fe      	b.n	800252c <NMI_Handler+0x4>
	...

08002530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  // blink LED RED
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002538:	4803      	ldr	r0, [pc, #12]	; (8002548 <HardFault_Handler+0x18>)
 800253a:	f002 fbe8 	bl	8004d0e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800253e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002542:	f000 fef5 	bl	8003330 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002546:	e7f5      	b.n	8002534 <HardFault_Handler+0x4>
 8002548:	40020400 	.word	0x40020400

0800254c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <MemManage_Handler+0x4>

08002552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <BusFault_Handler+0x4>

08002558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <UsageFault_Handler+0x4>

0800255e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f000 feb0 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <ADC_IRQHandler+0x14>)
 800259a:	f000 ff31 	bl	8003400 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800259e:	4803      	ldr	r0, [pc, #12]	; (80025ac <ADC_IRQHandler+0x18>)
 80025a0:	f000 ff2e 	bl	8003400 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000438 	.word	0x20000438
 80025ac:	200004e0 	.word	0x200004e0

080025b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <TIM3_IRQHandler+0x10>)
 80025b6:	f004 fe3d 	bl	8007234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200006a8 	.word	0x200006a8

080025c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <TIM4_IRQHandler+0x10>)
 80025ca:	f004 fe33 	bl	8007234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000065c 	.word	0x2000065c

080025d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <USART1_IRQHandler+0x10>)
 80025de:	f005 fe99 	bl	8008314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000810 	.word	0x20000810

080025ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <USART3_IRQHandler+0x10>)
 80025f2:	f005 fe8f 	bl	8008314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000078c 	.word	0x2000078c

08002600 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002606:	f004 fe15 	bl	8007234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200006f4 	.word	0x200006f4

08002614 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <SPI3_IRQHandler+0x10>)
 800261a:	f004 f8bb 	bl	8006794 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000594 	.word	0x20000594

08002628 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <TIM6_DAC_IRQHandler+0x10>)
 800262e:	f004 fe01 	bl	8007234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000740 	.word	0x20000740

0800263c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <DMA2_Stream1_IRQHandler+0x10>)
 8002642:	f001 ff1d 	bl	8004480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000480 	.word	0x20000480

08002650 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <DMA2_Stream2_IRQHandler+0x10>)
 8002656:	f001 ff13 	bl	8004480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000528 	.word	0x20000528

08002664 <stop_detector_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void stop_detector_init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	if(stop_detector_status)
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <stop_detector_init+0x24>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d108      	bne.n	8002684 <stop_detector_init+0x20>
		// stop detector already started
		return;

	// start Obstacle detector ADC DMA
	HAL_ADC_Start_DMA(&OBS_DETECTOR_ADC_DMA, &obs_distance, 1);
 8002672:	2201      	movs	r2, #1
 8002674:	4905      	ldr	r1, [pc, #20]	; (800268c <stop_detector_init+0x28>)
 8002676:	4806      	ldr	r0, [pc, #24]	; (8002690 <stop_detector_init+0x2c>)
 8002678:	f001 f804 	bl	8003684 <HAL_ADC_Start_DMA>
	// stop detector enabled
	stop_detector_status = 1;
 800267c:	4b02      	ldr	r3, [pc, #8]	; (8002688 <stop_detector_init+0x24>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	e000      	b.n	8002686 <stop_detector_init+0x22>
		return;
 8002684:	bf00      	nop
}
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000414 	.word	0x20000414
 800268c:	20000410 	.word	0x20000410
 8002690:	20000438 	.word	0x20000438

08002694 <stop_detector_deInit>:

void stop_detector_deInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	if(stop_detector_status == 0)
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <stop_detector_deInit+0x20>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <stop_detector_deInit+0x1c>
		// stop detector already stopped
		return;

	// stop Obstacle detector ADC DMA
	HAL_ADC_Stop_DMA(&OBS_DETECTOR_ADC_DMA);
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <stop_detector_deInit+0x24>)
 80026a4:	f001 f8e8 	bl	8003878 <HAL_ADC_Stop_DMA>
	// stop detector disabled
	stop_detector_status = 0;
 80026a8:	4b02      	ldr	r3, [pc, #8]	; (80026b4 <stop_detector_deInit+0x20>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	e000      	b.n	80026b2 <stop_detector_deInit+0x1e>
		return;
 80026b0:	bf00      	nop
}
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000414 	.word	0x20000414
 80026b8:	20000438 	.word	0x20000438

080026bc <stop_detector_isr>:
		 	 - R (right sensor)
@param	none
@retval	none
******************************************************************************/
uint8_t stop_detector_isr()
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
	// previous sensor values
	static uint8_t sens_prev = 0;
	// current sensor values
	uint8_t sens = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	71fb      	strb	r3, [r7, #7]

	// Digital value of distance
	static uint32_t old_obs_distance = 0;
	uint8_t obs_found_flag = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	71bb      	strb	r3, [r7, #6]

	// is stop detector ON?
	if(stop_detector_status == 0)
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <stop_detector_isr+0x90>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <stop_detector_isr+0x1c>
		// return all ok
		return EXIT_SUCCESS;
 80026d4:	2300      	movs	r3, #0
 80026d6:	e034      	b.n	8002742 <stop_detector_isr+0x86>

	// ***** Check Stop Marks Detector *****
	// if SENSOR_L enabled sens = 0000 0001 (1)
	// if SENSOR_L disabled sens = 0000 0000 (0)
	sens = qtr_get_digital(ST_SENSOR_L);
 80026d8:	2005      	movs	r0, #5
 80026da:	f7ff fa25 	bl	8001b28 <qtr_get_digital>
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]

	// rotate left one bit
	// SENSOR_L enabled: sens = 0000 0010
	// SENSOR_L disabled: sens = 0000 0000
	sens = sens << 1;
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	71fb      	strb	r3, [r7, #7]

	// SENSOR_L enabled:
		// if SENSOR_R enabled sens = 0000 0011 (3)
		// if SENSOR_R disabled sens = 0000 0010 (2)
	sens += qtr_get_digital(ST_SENSOR_R);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff fa1d 	bl	8001b28 <qtr_get_digital>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4413      	add	r3, r2
 80026f6:	71fb      	strb	r3, [r7, #7]

	// both sensors enabled
	if((sens == sens_prev) && (sens == 3))
 80026f8:	4b15      	ldr	r3, [pc, #84]	; (8002750 <stop_detector_isr+0x94>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	79fa      	ldrb	r2, [r7, #7]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d104      	bne.n	800270c <stop_detector_isr+0x50>
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d101      	bne.n	800270c <stop_detector_isr+0x50>
//	if(sens == 3)
		// return cross found error
		return E_ST_CROSS_FOUND;
 8002708:	2301      	movs	r3, #1
 800270a:	e01a      	b.n	8002742 <stop_detector_isr+0x86>
//		// return room found error
//		return E_ST_ROOM_FOUND;

	// ***** Check Obstacle Detector *****
	// Obstacle found flag update
	obs_found_flag = OBS_TOO_CLOSE(obs_distance, old_obs_distance);
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <stop_detector_isr+0x98>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002714:	d306      	bcc.n	8002724 <stop_detector_isr+0x68>
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <stop_detector_isr+0x9c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800271e:	d301      	bcc.n	8002724 <stop_detector_isr+0x68>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <stop_detector_isr+0x6a>
 8002724:	2300      	movs	r3, #0
 8002726:	71bb      	strb	r3, [r7, #6]
														obs_found_flag);
	UART_puts(str);
#endif // !_DEBUG_

	// update old distance variable
	old_obs_distance = obs_distance;
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <stop_detector_isr+0x98>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <stop_detector_isr+0x9c>)
 800272e:	6013      	str	r3, [r2, #0]

	if(obs_found_flag)
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <stop_detector_isr+0x7e>
		// return obstacle found error
//		return E_ST_OBS_FOUND;
		return 0;
 8002736:	2300      	movs	r3, #0
 8002738:	e003      	b.n	8002742 <stop_detector_isr+0x86>

	// update sensors value
	sens_prev = sens;
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <stop_detector_isr+0x94>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	7013      	strb	r3, [r2, #0]

	return EXIT_SUCCESS;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000414 	.word	0x20000414
 8002750:	20000415 	.word	0x20000415
 8002754:	20000410 	.word	0x20000410
 8002758:	20000418 	.word	0x20000418

0800275c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
	return 1;
 8002760:	2301      	movs	r3, #1
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_kill>:

int _kill(int pid, int sig)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002776:	f006 fdf3 	bl	8009360 <__errno>
 800277a:	4603      	mov	r3, r0
 800277c:	2216      	movs	r2, #22
 800277e:	601a      	str	r2, [r3, #0]
	return -1;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <_exit>:

void _exit (int status)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002794:	f04f 31ff 	mov.w	r1, #4294967295
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ffe7 	bl	800276c <_kill>
	while (1) {}		/* Make sure we hang here */
 800279e:	e7fe      	b.n	800279e <_exit+0x12>

080027a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e00a      	b.n	80027c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027b2:	f3af 8000 	nop.w
 80027b6:	4601      	mov	r1, r0
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	b2ca      	uxtb	r2, r1
 80027c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dbf0      	blt.n	80027b2 <_read+0x12>
	}

return len;
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e009      	b.n	8002800 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	60ba      	str	r2, [r7, #8]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	dbf1      	blt.n	80027ec <_write+0x12>
	}
	return len;
 8002808:	687b      	ldr	r3, [r7, #4]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_close>:

int _close(int file)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	return -1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283a:	605a      	str	r2, [r3, #4]
	return 0;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_isatty>:

int _isatty(int file)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
	return 1;
 8002852:	2301      	movs	r3, #1
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
	return 0;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <_sbrk+0x5c>)
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <_sbrk+0x60>)
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <_sbrk+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <_sbrk+0x64>)
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <_sbrk+0x68>)
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <_sbrk+0x64>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d207      	bcs.n	80028bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028ac:	f006 fd58 	bl	8009360 <__errno>
 80028b0:	4603      	mov	r3, r0
 80028b2:	220c      	movs	r2, #12
 80028b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	e009      	b.n	80028d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <_sbrk+0x64>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <_sbrk+0x64>)
 80028cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20080000 	.word	0x20080000
 80028dc:	00000400 	.word	0x00000400
 80028e0:	2000041c 	.word	0x2000041c
 80028e4:	200008b0 	.word	0x200008b0

080028e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <SystemInit+0x20>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <SystemInit+0x20>)
 80028f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim13;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <MX_TIM3_Init+0x98>)
 800292c:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <MX_TIM3_Init+0x9c>)
 800292e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000-1;
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <MX_TIM3_Init+0x98>)
 8002932:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <MX_TIM3_Init+0x98>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1800-1;
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <MX_TIM3_Init+0x98>)
 8002940:	f240 7207 	movw	r2, #1799	; 0x707
 8002944:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <MX_TIM3_Init+0x98>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <MX_TIM3_Init+0x98>)
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002952:	4814      	ldr	r0, [pc, #80]	; (80029a4 <MX_TIM3_Init+0x98>)
 8002954:	f004 f99e 	bl	8006c94 <HAL_TIM_Base_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800295e:	f7fe fe43 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002966:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	4619      	mov	r1, r3
 800296e:	480d      	ldr	r0, [pc, #52]	; (80029a4 <MX_TIM3_Init+0x98>)
 8002970:	f004 fe90 	bl	8007694 <HAL_TIM_ConfigClockSource>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800297a:	f7fe fe35 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800297e:	2320      	movs	r3, #32
 8002980:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	4619      	mov	r1, r3
 800298a:	4806      	ldr	r0, [pc, #24]	; (80029a4 <MX_TIM3_Init+0x98>)
 800298c:	f005 fb2e 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002996:	f7fe fe27 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800299a:	bf00      	nop
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200006a8 	.word	0x200006a8
 80029a8:	40000400 	.word	0x40000400

080029ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b2:	f107 031c 	add.w	r3, r7, #28
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029be:	463b      	mov	r3, r7
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
 80029cc:	615a      	str	r2, [r3, #20]
 80029ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029d0:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <MX_TIM4_Init+0xc0>)
 80029d2:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <MX_TIM4_Init+0xc4>)
 80029d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 80029d6:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <MX_TIM4_Init+0xc0>)
 80029d8:	226b      	movs	r2, #107	; 0x6b
 80029da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <MX_TIM4_Init+0xc0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <MX_TIM4_Init+0xc0>)
 80029e4:	2264      	movs	r2, #100	; 0x64
 80029e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e8:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <MX_TIM4_Init+0xc0>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029ee:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <MX_TIM4_Init+0xc0>)
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80029f4:	481d      	ldr	r0, [pc, #116]	; (8002a6c <MX_TIM4_Init+0xc0>)
 80029f6:	f004 fa4c 	bl	8006e92 <HAL_TIM_PWM_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002a00:	f7fe fdf2 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a0c:	f107 031c 	add.w	r3, r7, #28
 8002a10:	4619      	mov	r1, r3
 8002a12:	4816      	ldr	r0, [pc, #88]	; (8002a6c <MX_TIM4_Init+0xc0>)
 8002a14:	f005 faea 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002a1e:	f7fe fde3 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a22:	2360      	movs	r3, #96	; 0x60
 8002a24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a32:	463b      	mov	r3, r7
 8002a34:	2208      	movs	r2, #8
 8002a36:	4619      	mov	r1, r3
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <MX_TIM4_Init+0xc0>)
 8002a3a:	f004 fd1b 	bl	8007474 <HAL_TIM_PWM_ConfigChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002a44:	f7fe fdd0 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a48:	463b      	mov	r3, r7
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4807      	ldr	r0, [pc, #28]	; (8002a6c <MX_TIM4_Init+0xc0>)
 8002a50:	f004 fd10 	bl	8007474 <HAL_TIM_PWM_ConfigChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002a5a:	f7fe fdc5 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a5e:	4803      	ldr	r0, [pc, #12]	; (8002a6c <MX_TIM4_Init+0xc0>)
 8002a60:	f000 f8e6 	bl	8002c30 <HAL_TIM_MspPostInit>

}
 8002a64:	bf00      	nop
 8002a66:	3728      	adds	r7, #40	; 0x28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	2000065c 	.word	0x2000065c
 8002a70:	40000800 	.word	0x40000800

08002a74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_TIM6_Init+0x64>)
 8002a86:	4a15      	ldr	r2, [pc, #84]	; (8002adc <MX_TIM6_Init+0x68>)
 8002a88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <MX_TIM6_Init+0x64>)
 8002a8c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002a90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_TIM6_Init+0x64>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_TIM6_Init+0x64>)
 8002a9a:	2263      	movs	r2, #99	; 0x63
 8002a9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_TIM6_Init+0x64>)
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <MX_TIM6_Init+0x64>)
 8002aa6:	f004 f8f5 	bl	8006c94 <HAL_TIM_Base_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002ab0:	f7fe fd9a 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_TIM6_Init+0x64>)
 8002ac2:	f005 fa93 	bl	8007fec <HAL_TIMEx_MasterConfigSynchronization>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002acc:	f7fe fd8c 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000740 	.word	0x20000740
 8002adc:	40001000 	.word	0x40001000

08002ae0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <MX_TIM13_Init+0x40>)
 8002ae6:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <MX_TIM13_Init+0x44>)
 8002ae8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 10800-1;
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <MX_TIM13_Init+0x40>)
 8002aec:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002af0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <MX_TIM13_Init+0x40>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 500-1;
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <MX_TIM13_Init+0x40>)
 8002afa:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002afe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <MX_TIM13_Init+0x40>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <MX_TIM13_Init+0x40>)
 8002b08:	2280      	movs	r2, #128	; 0x80
 8002b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002b0c:	4804      	ldr	r0, [pc, #16]	; (8002b20 <MX_TIM13_Init+0x40>)
 8002b0e:	f004 f8c1 	bl	8006c94 <HAL_TIM_Base_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002b18:	f7fe fd66 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	200006f4 	.word	0x200006f4
 8002b24:	40001c00 	.word	0x40001c00

08002b28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a27      	ldr	r2, [pc, #156]	; (8002bd4 <HAL_TIM_Base_MspInit+0xac>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d114      	bne.n	8002b64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b3a:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	201d      	movs	r0, #29
 8002b58:	f001 fabb 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b5c:	201d      	movs	r0, #29
 8002b5e:	f001 fad4 	bl	800410a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002b62:	e032      	b.n	8002bca <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <HAL_TIM_Base_MspInit+0xb4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d114      	bne.n	8002b98 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b74:	f043 0310 	orr.w	r3, r3, #16
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2036      	movs	r0, #54	; 0x36
 8002b8c:	f001 faa1 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b90:	2036      	movs	r0, #54	; 0x36
 8002b92:	f001 faba 	bl	800410a <HAL_NVIC_EnableIRQ>
}
 8002b96:	e018      	b.n	8002bca <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM13)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_TIM_Base_MspInit+0xb8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d113      	bne.n	8002bca <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	202c      	movs	r0, #44	; 0x2c
 8002bc0:	f001 fa87 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002bc4:	202c      	movs	r0, #44	; 0x2c
 8002bc6:	f001 faa0 	bl	800410a <HAL_NVIC_EnableIRQ>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40001000 	.word	0x40001000
 8002be0:	40001c00 	.word	0x40001c00

08002be4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <HAL_TIM_PWM_MspInit+0x44>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d113      	bne.n	8002c1e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_TIM_PWM_MspInit+0x48>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <HAL_TIM_PWM_MspInit+0x48>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_TIM_PWM_MspInit+0x48>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	201e      	movs	r0, #30
 8002c14:	f001 fa5d 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c18:	201e      	movs	r0, #30
 8002c1a:	f001 fa76 	bl	800410a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a20      	ldr	r2, [pc, #128]	; (8002cd0 <HAL_TIM_MspPostInit+0xa0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d139      	bne.n	8002cc6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_TIM_MspPostInit+0xa4>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a1f      	ldr	r2, [pc, #124]	; (8002cd4 <HAL_TIM_MspPostInit+0xa4>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_TIM_MspPostInit+0xa4>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_TIM_MspPostInit+0xa4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a19      	ldr	r2, [pc, #100]	; (8002cd4 <HAL_TIM_MspPostInit+0xa4>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <HAL_TIM_MspPostInit+0xa4>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 8002c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c94:	2302      	movs	r3, #2
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480e      	ldr	r0, [pc, #56]	; (8002cd8 <HAL_TIM_MspPostInit+0xa8>)
 8002ca0:	f001 fe58 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 8002ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002cba:	f107 0314 	add.w	r3, r7, #20
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4806      	ldr	r0, [pc, #24]	; (8002cdc <HAL_TIM_MspPostInit+0xac>)
 8002cc2:	f001 fe47 	bl	8004954 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002cc6:	bf00      	nop
 8002cc8:	3728      	adds	r7, #40	; 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40000800 	.word	0x40000800
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020c00 	.word	0x40020c00
 8002cdc:	40020400 	.word	0x40020400

08002ce0 <set_pwm>:
  }
}

/* USER CODE BEGIN 1 */
void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t dc)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
 8002cec:	4613      	mov	r3, r2
 8002cee:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <set_pwm+0x20>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	883a      	ldrh	r2, [r7, #0]
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002cfe:	e023      	b.n	8002d48 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d104      	bne.n	8002d10 <set_pwm+0x30>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	883b      	ldrh	r3, [r7, #0]
 8002d0c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d0e:	e01b      	b.n	8002d48 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d104      	bne.n	8002d20 <set_pwm+0x40>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	883b      	ldrh	r3, [r7, #0]
 8002d1c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002d1e:	e013      	b.n	8002d48 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d104      	bne.n	8002d30 <set_pwm+0x50>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	883b      	ldrh	r3, [r7, #0]
 8002d2c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002d2e:	e00b      	b.n	8002d48 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002d30:	887b      	ldrh	r3, [r7, #2]
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d104      	bne.n	8002d40 <set_pwm+0x60>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	883b      	ldrh	r3, [r7, #0]
 8002d3c:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002d3e:	e003      	b.n	8002d48 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	883b      	ldrh	r3, [r7, #0]
 8002d46:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	if(htim == &TIM_MOTION)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d102      	bne.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x16>
	{// enters every 10ms
		// line follower PID and stop_sensors
		motion_isr();
 8002d64:	f7fe fc7a 	bl	800165c <motion_isr>
	}
	else if(htim == &TIM_DEBOUNCE)
	{// user button debounce
		debounce_isr();
	}
}
 8002d68:	e00c      	b.n	8002d84 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if(htim == &TIM_TIMEOUTS)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d102      	bne.n	8002d78 <HAL_TIM_PeriodElapsedCallback+0x24>
		timeout_isr();
 8002d72:	f000 f81f 	bl	8002db4 <timeout_isr>
}
 8002d76:	e005      	b.n	8002d84 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if(htim == &TIM_DEBOUNCE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIM_PeriodElapsedCallback+0x30>
		debounce_isr();
 8002d80:	f7fd ff86 	bl	8000c90 <debounce_isr>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000740 	.word	0x20000740
 8002d90:	200006a8 	.word	0x200006a8
 8002d94:	200006f4 	.word	0x200006f4

08002d98 <timeout_start>:
//		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
//	}
//}

void timeout_start(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
	// clear TIM_SR_UIF TIM flag
	__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <timeout_start+0x18>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0201 	mvn.w	r2, #1
 8002da4:	611a      	str	r2, [r3, #16]
	// start timeout Timer
	HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
 8002da6:	4802      	ldr	r0, [pc, #8]	; (8002db0 <timeout_start+0x18>)
 8002da8:	f003 ffcc 	bl	8006d44 <HAL_TIM_Base_Start_IT>
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	200006a8 	.word	0x200006a8

08002db4 <timeout_isr>:
		rotate_num_sec = 0,
		pick_num_sec = 0,
		hold_num_sec = 0;

void timeout_isr(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
//	num_sec++;
	rfid_num_sec 	+= rfid_timeout_ctrl;
 8002db8:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <timeout_isr+0xd4>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <timeout_isr+0xd8>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <timeout_isr+0xd8>)
 8002dca:	701a      	strb	r2, [r3, #0]
	rotate_num_sec 	+= rotate_timeout_ctrl;
 8002dcc:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <timeout_isr+0xdc>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <timeout_isr+0xe0>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <timeout_isr+0xe0>)
 8002dde:	701a      	strb	r2, [r3, #0]
	pick_num_sec 	+= pick_timeout_ctrl;
 8002de0:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <timeout_isr+0xe4>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <timeout_isr+0xe8>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <timeout_isr+0xe8>)
 8002df2:	701a      	strb	r2, [r3, #0]
	hold_num_sec	+= hold_timeout_ctrl;
 8002df4:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <timeout_isr+0xec>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <timeout_isr+0xf0>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <timeout_isr+0xf0>)
 8002e06:	701a      	strb	r2, [r3, #0]

	if(rfid_num_sec == RFID_TIMEOUT)
 8002e08:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <timeout_isr+0xd8>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d10d      	bne.n	8002e2e <timeout_isr+0x7a>
	{
		write_led(LBLUE, 1);
 8002e12:	2201      	movs	r2, #1
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	4824      	ldr	r0, [pc, #144]	; (8002ea8 <timeout_isr+0xf4>)
 8002e18:	f001 ff60 	bl	8004cdc <HAL_GPIO_WritePin>

		rfid_timeout = 1;
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <timeout_isr+0xf8>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
		rfid_num_sec = 0;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <timeout_isr+0xd8>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
		rfid_timeout_ctrl = 0;
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <timeout_isr+0xd4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
	}

	if(rotate_num_sec == ROTATE_TIMEOUT)
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <timeout_isr+0xe0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d108      	bne.n	8002e4a <timeout_isr+0x96>
	{
		rotate_timeout = 1;
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <timeout_isr+0xfc>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
		rotate_num_sec = 0;
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <timeout_isr+0xe0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
		rotate_timeout_ctrl = 0;
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <timeout_isr+0xdc>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
	}

	if(pick_num_sec == PICK_UP_TIMEOUT)
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <timeout_isr+0xe8>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d108      	bne.n	8002e66 <timeout_isr+0xb2>
	{
		pick_up_timeout = 1;
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <timeout_isr+0x100>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
		pick_num_sec = 0;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <timeout_isr+0xe8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
		pick_timeout_ctrl = 0;
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <timeout_isr+0xe4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
	}

	if(hold_num_sec == HOLD_TIMEOUT)
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <timeout_isr+0xf0>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d108      	bne.n	8002e82 <timeout_isr+0xce>
	{
		hold_timeout = 1;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <timeout_isr+0x104>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
		hold_num_sec = 0;
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <timeout_isr+0xf0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
		hold_timeout_ctrl = 0;
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <timeout_isr+0xec>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
	}
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000424 	.word	0x20000424
 8002e8c:	20000428 	.word	0x20000428
 8002e90:	20000425 	.word	0x20000425
 8002e94:	20000429 	.word	0x20000429
 8002e98:	20000426 	.word	0x20000426
 8002e9c:	2000042a 	.word	0x2000042a
 8002ea0:	20000427 	.word	0x20000427
 8002ea4:	2000042b 	.word	0x2000042b
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	20000420 	.word	0x20000420
 8002eb0:	20000421 	.word	0x20000421
 8002eb4:	20000422 	.word	0x20000422
 8002eb8:	20000423 	.word	0x20000423

08002ebc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ec2:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <MX_USART1_UART_Init+0x5c>)
 8002ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ec8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002efe:	4805      	ldr	r0, [pc, #20]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002f00:	f005 f920 	bl	8008144 <HAL_UART_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f0a:	f7fe fb6d 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000810 	.word	0x20000810
 8002f18:	40011000 	.word	0x40011000

08002f1c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f22:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <MX_USART3_UART_Init+0x5c>)
 8002f24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f26:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2e:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f42:	220c      	movs	r2, #12
 8002f44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f5e:	4805      	ldr	r0, [pc, #20]	; (8002f74 <MX_USART3_UART_Init+0x58>)
 8002f60:	f005 f8f0 	bl	8008144 <HAL_UART_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f6a:	f7fe fb3d 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	2000078c 	.word	0x2000078c
 8002f78:	40004800 	.word	0x40004800

08002f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 031c 	add.w	r3, r7, #28
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3f      	ldr	r2, [pc, #252]	; (8003098 <HAL_UART_MspInit+0x11c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d141      	bne.n	8003022 <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f9e:	4b3f      	ldr	r3, [pc, #252]	; (800309c <HAL_UART_MspInit+0x120>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	4a3e      	ldr	r2, [pc, #248]	; (800309c <HAL_UART_MspInit+0x120>)
 8002fa4:	f043 0310 	orr.w	r3, r3, #16
 8002fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8002faa:	4b3c      	ldr	r3, [pc, #240]	; (800309c <HAL_UART_MspInit+0x120>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_UART_MspInit+0x120>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a38      	ldr	r2, [pc, #224]	; (800309c <HAL_UART_MspInit+0x120>)
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_UART_MspInit+0x120>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUET_RX_Pin;
 8002fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 8002fe4:	f107 031c 	add.w	r3, r7, #28
 8002fe8:	4619      	mov	r1, r3
 8002fea:	482d      	ldr	r0, [pc, #180]	; (80030a0 <HAL_UART_MspInit+0x124>)
 8002fec:	f001 fcb2 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 8002ff0:	2340      	movs	r3, #64	; 0x40
 8002ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003000:	2307      	movs	r3, #7
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	4619      	mov	r1, r3
 800300a:	4825      	ldr	r0, [pc, #148]	; (80030a0 <HAL_UART_MspInit+0x124>)
 800300c:	f001 fca2 	bl	8004954 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	2025      	movs	r0, #37	; 0x25
 8003016:	f001 f85c 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800301a:	2025      	movs	r0, #37	; 0x25
 800301c:	f001 f875 	bl	800410a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003020:	e035      	b.n	800308e <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1f      	ldr	r2, [pc, #124]	; (80030a4 <HAL_UART_MspInit+0x128>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d130      	bne.n	800308e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_UART_MspInit+0x120>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	4a1a      	ldr	r2, [pc, #104]	; (800309c <HAL_UART_MspInit+0x120>)
 8003032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003036:	6413      	str	r3, [r2, #64]	; 0x40
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <HAL_UART_MspInit+0x120>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003044:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_UART_MspInit+0x120>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <HAL_UART_MspInit+0x120>)
 800304a:	f043 0308 	orr.w	r3, r3, #8
 800304e:	6313      	str	r3, [r2, #48]	; 0x30
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_UART_MspInit+0x120>)
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800305c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800306e:	2307      	movs	r3, #7
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003072:	f107 031c 	add.w	r3, r7, #28
 8003076:	4619      	mov	r1, r3
 8003078:	480b      	ldr	r0, [pc, #44]	; (80030a8 <HAL_UART_MspInit+0x12c>)
 800307a:	f001 fc6b 	bl	8004954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	2027      	movs	r0, #39	; 0x27
 8003084:	f001 f825 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003088:	2027      	movs	r0, #39	; 0x27
 800308a:	f001 f83e 	bl	800410a <HAL_NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3730      	adds	r7, #48	; 0x30
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40011000 	.word	0x40011000
 800309c:	40023800 	.word	0x40023800
 80030a0:	40020400 	.word	0x40020400
 80030a4:	40004800 	.word	0x40004800
 80030a8:	40020c00 	.word	0x40020c00

080030ac <UART_Receive>:

/******************************************************************************
@brief	 	 Receives a char by UART serial port
******************************************************************************/
char UART_Receive(uart_t *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	if(c != NEW_LINE) // Is this the end of reception?
 80030b4:	4b17      	ldr	r3, [pc, #92]	; (8003114 <UART_Receive+0x68>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b0d      	cmp	r3, #13
 80030bc:	d002      	beq.n	80030c4 <UART_Receive+0x18>
		Rx_UART_init(huart); // prepare for next character
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f84a 	bl	8003158 <Rx_UART_init>

	if(huart->Rx_index == (RX_BUFF_LEN - 1)) // Is the buffer full?
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7d1b      	ldrb	r3, [r3, #20]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	d102      	bne.n	80030d4 <UART_Receive+0x28>
		// Treat as 'CR'
		c = NEW_LINE;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <UART_Receive+0x68>)
 80030d0:	220d      	movs	r2, #13
 80030d2:	701a      	strb	r2, [r3, #0]
	
//	if(c == 0) // Is the received char a control char?
//		return (char)(-1);
	
	if(c == NEW_LINE)
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <UART_Receive+0x68>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b0d      	cmp	r3, #13
 80030dc:	d10f      	bne.n	80030fe <UART_Receive+0x52>
	{
		huart->Rx_Buffer[huart->Rx_index] = 0;	// mark end of string
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7d1b      	ldrb	r3, [r3, #20]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	2200      	movs	r2, #0
 80030ec:	711a      	strb	r2, [r3, #4]
		huart->Rx_index = 0;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	751a      	strb	r2, [r3, #20]
		cmd_received = 1;
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <UART_Receive+0x6c>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
		return (char)(-1);
 80030fa:	23ff      	movs	r3, #255	; 0xff
 80030fc:	e005      	b.n	800310a <UART_Receive+0x5e>
	}

	// Its not a special character
	process_as_data(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f80c 	bl	800311c <process_as_data>

	return c;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <UART_Receive+0x68>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b2db      	uxtb	r3, r3
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000894 	.word	0x20000894
 8003118:	2000042c 	.word	0x2000042c

0800311c <process_as_data>:

@brief	 	 process the char received as a data character
******************************************************************************/

static void process_as_data(uart_t *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	// add received char to Rx_Buffer
	huart->Rx_Buffer[huart->Rx_index] = c;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7d1b      	ldrb	r3, [r3, #20]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	4619      	mov	r1, r3
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <process_as_data+0x38>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	440b      	add	r3, r1
 8003136:	711a      	strb	r2, [r3, #4]
	huart->Rx_index++;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7d1b      	ldrb	r3, [r3, #20]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	3301      	adds	r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	751a      	strb	r2, [r3, #20]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000894 	.word	0x20000894

08003158 <Rx_UART_init>:

// set the interrupt for UART
void Rx_UART_init(uart_t *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart->uart, (uint8_t*)&c, 1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2201      	movs	r2, #1
 8003166:	4904      	ldr	r1, [pc, #16]	; (8003178 <Rx_UART_init+0x20>)
 8003168:	4618      	mov	r0, r3
 800316a:	f005 f895 	bl	8008298 <HAL_UART_Receive_IT>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000894 	.word	0x20000894

0800317c <HAL_UART_RxCpltCallback>:

//implementation of UART ISR
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	// debug uart
	if (huart->Instance == debug_uart.uart->Instance)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_UART_RxCpltCallback+0x40>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d103      	bne.n	800319a <HAL_UART_RxCpltCallback+0x1e>
		debug_uart.Rx_flag = 1;
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_UART_RxCpltCallback+0x40>)
 8003194:	2201      	movs	r2, #1
 8003196:	755a      	strb	r2, [r3, #21]
	// bluetooth uart
	else if (huart->Instance == bluet_uart.uart->Instance)
		bluet_uart.Rx_flag = 1;

//	HAL_UART_Receive_IT(huart, (uint8_t*)&c, 1);
}
 8003198:	e009      	b.n	80031ae <HAL_UART_RxCpltCallback+0x32>
	else if (huart->Instance == bluet_uart.uart->Instance)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_UART_RxCpltCallback+0x44>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d102      	bne.n	80031ae <HAL_UART_RxCpltCallback+0x32>
		bluet_uart.Rx_flag = 1;
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_UART_RxCpltCallback+0x44>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	755a      	strb	r2, [r3, #21]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200000b4 	.word	0x200000b4
 80031c0:	2000014c 	.word	0x2000014c

080031c4 <UART_puts>:
@brief	 	 Sends a string by UART - Polling (Waits for UART_Tx to transmit
							queued data
@param  	 String to be transmitted
******************************************************************************/
void UART_puts(uart_t *huart, const char *str)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
	if((str == NULL) || (str[0] == 0))	// string empty?
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d021      	beq.n	8003218 <UART_puts+0x54>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01d      	beq.n	8003218 <UART_puts+0x54>
		return;
	
	int len = strlen(str);
 80031dc:	6838      	ldr	r0, [r7, #0]
 80031de:	f7fd f839 	bl	8000254 <strlen>
 80031e2:	4603      	mov	r3, r0
 80031e4:	60fb      	str	r3, [r7, #12]
	if(len > TX_BUFF_LEN)		// string size bigger than the max size of Tx_Buffer?
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	dc17      	bgt.n	800321c <UART_puts+0x58>
		return;

	while(huart->uart->gState == HAL_UART_STATE_BUSY_TX) // Waits for UART_Tx to transmit queued data
 80031ec:	bf00      	nop
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f4:	2b21      	cmp	r3, #33	; 0x21
 80031f6:	d0fa      	beq.n	80031ee <UART_puts+0x2a>
		;
	
	strcpy((char *)huart->Tx_Buffer, str);	// send string 'str' to 'TX_Buffer'
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3316      	adds	r3, #22
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f006 fe28 	bl	8009e54 <strcpy>
	HAL_UART_Transmit_IT(huart->uart, (uint8_t*)huart->Tx_Buffer, len);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3316      	adds	r3, #22
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	b292      	uxth	r2, r2
 8003210:	4619      	mov	r1, r3
 8003212:	f004 ffe5 	bl	80081e0 <HAL_UART_Transmit_IT>
 8003216:	e002      	b.n	800321e <UART_puts+0x5a>
		return;
 8003218:	bf00      	nop
 800321a:	e000      	b.n	800321e <UART_puts+0x5a>
		return;
 800321c:	bf00      	nop
}
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800325c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003228:	480d      	ldr	r0, [pc, #52]	; (8003260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800322a:	490e      	ldr	r1, [pc, #56]	; (8003264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003230:	e002      	b.n	8003238 <LoopCopyDataInit>

08003232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003236:	3304      	adds	r3, #4

08003238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800323c:	d3f9      	bcc.n	8003232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800323e:	4a0b      	ldr	r2, [pc, #44]	; (800326c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003240:	4c0b      	ldr	r4, [pc, #44]	; (8003270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003244:	e001      	b.n	800324a <LoopFillZerobss>

08003246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003248:	3204      	adds	r2, #4

0800324a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800324c:	d3fb      	bcc.n	8003246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800324e:	f7ff fb4b 	bl	80028e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003252:	f006 f88b 	bl	800936c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003256:	f7fe f8f1 	bl	800143c <main>
  bx  lr    
 800325a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800325c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003264:	200003bc 	.word	0x200003bc
  ldr r2, =_sidata
 8003268:	0800c7dc 	.word	0x0800c7dc
  ldr r2, =_sbss
 800326c:	200003bc 	.word	0x200003bc
  ldr r4, =_ebss
 8003270:	200008ac 	.word	0x200008ac

08003274 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003274:	e7fe      	b.n	8003274 <CAN1_RX0_IRQHandler>

08003276 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327a:	2003      	movs	r0, #3
 800327c:	f000 ff1e 	bl	80040bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003280:	2000      	movs	r0, #0
 8003282:	f000 f805 	bl	8003290 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003286:	f7ff f92b 	bl	80024e0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 ff39 	bl	8004126 <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f000 ff01 	bl	80040d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	; (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200000b0 	.word	0x200000b0
 80032e8:	200001e8 	.word	0x200001e8
 80032ec:	200001e4 	.word	0x200001e4

080032f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x20>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_IncTick+0x24>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_IncTick+0x24>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	200001e8 	.word	0x200001e8
 8003314:	20000898 	.word	0x20000898

08003318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_GetTick+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000898 	.word	0x20000898

08003330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff ffee 	bl	8003318 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d005      	beq.n	8003356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_Delay+0x44>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003356:	bf00      	nop
 8003358:	f7ff ffde 	bl	8003318 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d8f7      	bhi.n	8003358 <HAL_Delay+0x28>
  {
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200001e8 	.word	0x200001e8

08003378 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e031      	b.n	80033f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fa24 	bl	80007e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d116      	bne.n	80033e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_ADC_Init+0x84>)
 80033bc:	4013      	ands	r3, r2
 80033be:	f043 0202 	orr.w	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fc22 	bl	8003c10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
 80033e2:	e001      	b.n	80033e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	ffffeefd 	.word	0xffffeefd

08003400 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d049      	beq.n	80034d6 <HAL_ADC_IRQHandler+0xd6>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d046      	beq.n	80034d6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d12b      	bne.n	80034c6 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003472:	2b00      	cmp	r3, #0
 8003474:	d127      	bne.n	80034c6 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003480:	2b00      	cmp	r3, #0
 8003482:	d006      	beq.n	8003492 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800348e:	2b00      	cmp	r3, #0
 8003490:	d119      	bne.n	80034c6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0220 	bic.w	r2, r2, #32
 80034a0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fa30 	bl	800392c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0212 	mvn.w	r2, #18
 80034d4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b80      	cmp	r3, #128	; 0x80
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d057      	beq.n	80035b8 <HAL_ADC_IRQHandler+0x1b8>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d054      	beq.n	80035b8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d139      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800354c:	2b00      	cmp	r3, #0
 800354e:	d12b      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800355a:	2b00      	cmp	r3, #0
 800355c:	d124      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003568:	2b00      	cmp	r3, #0
 800356a:	d11d      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003570:	2b00      	cmp	r3, #0
 8003572:	d119      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003582:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fcad 	bl	8003f08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f06f 020c 	mvn.w	r2, #12
 80035b6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d017      	beq.n	800361a <HAL_ADC_IRQHandler+0x21a>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d014      	beq.n	800361a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10d      	bne.n	800361a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f9a2 	bl	8003954 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0201 	mvn.w	r2, #1
 8003618:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b20      	cmp	r3, #32
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800363a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d015      	beq.n	800367a <HAL_ADC_IRQHandler+0x27a>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d012      	beq.n	800367a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	f043 0202 	orr.w	r2, r3, #2
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0220 	mvn.w	r2, #32
 8003668:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f97c 	bl	8003968 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0220 	mvn.w	r2, #32
 8003678:	601a      	str	r2, [r3, #0]
  }
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_Start_DMA+0x1e>
 800369e:	2302      	movs	r3, #2
 80036a0:	e0d4      	b.n	800384c <HAL_ADC_Start_DMA+0x1c8>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d018      	beq.n	80036ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80036c8:	4b62      	ldr	r3, [pc, #392]	; (8003854 <HAL_ADC_Start_DMA+0x1d0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a62      	ldr	r2, [pc, #392]	; (8003858 <HAL_ADC_Start_DMA+0x1d4>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0c9a      	lsrs	r2, r3, #18
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80036dc:	e002      	b.n	80036e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 809c 	bne.w	8003832 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fe:	4b57      	ldr	r3, [pc, #348]	; (800385c <HAL_ADC_Start_DMA+0x1d8>)
 8003700:	4013      	ands	r3, r2
 8003702:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003720:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003734:	d106      	bne.n	8003744 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f023 0206 	bic.w	r2, r3, #6
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
 8003742:	e002      	b.n	800374a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	4a42      	ldr	r2, [pc, #264]	; (8003860 <HAL_ADC_Start_DMA+0x1dc>)
 8003758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	4a41      	ldr	r2, [pc, #260]	; (8003864 <HAL_ADC_Start_DMA+0x1e0>)
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	4a40      	ldr	r2, [pc, #256]	; (8003868 <HAL_ADC_Start_DMA+0x1e4>)
 8003768:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003772:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003782:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003792:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	334c      	adds	r3, #76	; 0x4c
 800379e:	4619      	mov	r1, r3
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f000 fd7a 	bl	800429c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80037a8:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_ADC_Start_DMA+0x1e8>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10f      	bne.n	80037d4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d143      	bne.n	800384a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037d0:	609a      	str	r2, [r3, #8]
 80037d2:	e03a      	b.n	800384a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a25      	ldr	r2, [pc, #148]	; (8003870 <HAL_ADC_Start_DMA+0x1ec>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10e      	bne.n	80037fc <HAL_ADC_Start_DMA+0x178>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d107      	bne.n	80037fc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037fa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_ADC_Start_DMA+0x1e8>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d120      	bne.n	800384a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_ADC_Start_DMA+0x1f0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d11b      	bne.n	800384a <HAL_ADC_Start_DMA+0x1c6>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d114      	bne.n	800384a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	e00b      	b.n	800384a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f043 0210 	orr.w	r2, r3, #16
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	200000b0 	.word	0x200000b0
 8003858:	431bde83 	.word	0x431bde83
 800385c:	fffff8fe 	.word	0xfffff8fe
 8003860:	08003e05 	.word	0x08003e05
 8003864:	08003ebf 	.word	0x08003ebf
 8003868:	08003edb 	.word	0x08003edb
 800386c:	40012300 	.word	0x40012300
 8003870:	40012000 	.word	0x40012000
 8003874:	40012200 	.word	0x40012200

08003878 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_ADC_Stop_DMA+0x1a>
 800388e:	2302      	movs	r3, #2
 8003890:	e046      	b.n	8003920 <HAL_ADC_Stop_DMA+0xa8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d12e      	bne.n	8003916 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d10f      	bne.n	80038f6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fd3e 	bl	800435c <HAL_DMA_Abort>
 80038e0:	4603      	mov	r3, r0
 80038e2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003904:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <HAL_ADC_Stop_DMA+0xb0>)
 800390c:	4013      	ands	r3, r2
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	ffffeefe 	.word	0xffffeefe

0800392c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x1c>
 8003994:	2302      	movs	r3, #2
 8003996:	e12a      	b.n	8003bee <HAL_ADC_ConfigChannel+0x272>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b09      	cmp	r3, #9
 80039a6:	d93a      	bls.n	8003a1e <HAL_ADC_ConfigChannel+0xa2>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039b0:	d035      	beq.n	8003a1e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68d9      	ldr	r1, [r3, #12]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	4613      	mov	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	3b1e      	subs	r3, #30
 80039c8:	2207      	movs	r2, #7
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43da      	mvns	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	400a      	ands	r2, r1
 80039d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a87      	ldr	r2, [pc, #540]	; (8003bfc <HAL_ADC_ConfigChannel+0x280>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10a      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68d9      	ldr	r1, [r3, #12]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	061a      	lsls	r2, r3, #24
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039f6:	e035      	b.n	8003a64 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68d9      	ldr	r1, [r3, #12]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4618      	mov	r0, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4403      	add	r3, r0
 8003a10:	3b1e      	subs	r3, #30
 8003a12:	409a      	lsls	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a1c:	e022      	b.n	8003a64 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6919      	ldr	r1, [r3, #16]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	2207      	movs	r2, #7
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43da      	mvns	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	400a      	ands	r2, r1
 8003a40:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6919      	ldr	r1, [r3, #16]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4618      	mov	r0, r3
 8003a54:	4603      	mov	r3, r0
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4403      	add	r3, r0
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b06      	cmp	r3, #6
 8003a6a:	d824      	bhi.n	8003ab6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3b05      	subs	r3, #5
 8003a7e:	221f      	movs	r2, #31
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43da      	mvns	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3b05      	subs	r3, #5
 8003aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ab4:	e04c      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d824      	bhi.n	8003b08 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	3b23      	subs	r3, #35	; 0x23
 8003ad0:	221f      	movs	r2, #31
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	400a      	ands	r2, r1
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	4618      	mov	r0, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	3b23      	subs	r3, #35	; 0x23
 8003afa:	fa00 f203 	lsl.w	r2, r0, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
 8003b06:	e023      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	3b41      	subs	r3, #65	; 0x41
 8003b1a:	221f      	movs	r2, #31
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43da      	mvns	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	400a      	ands	r2, r1
 8003b28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	4618      	mov	r0, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	3b41      	subs	r3, #65	; 0x41
 8003b44:	fa00 f203 	lsl.w	r2, r0, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2a      	ldr	r2, [pc, #168]	; (8003c00 <HAL_ADC_ConfigChannel+0x284>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d10a      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x1f4>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b62:	d105      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b64:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_ADC_ConfigChannel+0x288>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <HAL_ADC_ConfigChannel+0x288>)
 8003b6a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b6e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <HAL_ADC_ConfigChannel+0x284>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d109      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x212>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b12      	cmp	r3, #18
 8003b80:	d105      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_ADC_ConfigChannel+0x288>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <HAL_ADC_ConfigChannel+0x288>)
 8003b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b8c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_ADC_ConfigChannel+0x284>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d125      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x268>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <HAL_ADC_ConfigChannel+0x280>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <HAL_ADC_ConfigChannel+0x22e>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b11      	cmp	r3, #17
 8003ba8:	d11c      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003baa:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <HAL_ADC_ConfigChannel+0x288>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <HAL_ADC_ConfigChannel+0x288>)
 8003bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bb4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a10      	ldr	r2, [pc, #64]	; (8003bfc <HAL_ADC_ConfigChannel+0x280>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d111      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003bc0:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <HAL_ADC_ConfigChannel+0x28c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <HAL_ADC_ConfigChannel+0x290>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0c9a      	lsrs	r2, r3, #18
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bd6:	e002      	b.n	8003bde <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f9      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	10000012 	.word	0x10000012
 8003c00:	40012000 	.word	0x40012000
 8003c04:	40012300 	.word	0x40012300
 8003c08:	200000b0 	.word	0x200000b0
 8003c0c:	431bde83 	.word	0x431bde83

08003c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c18:	4b78      	ldr	r3, [pc, #480]	; (8003dfc <ADC_Init+0x1ec>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a77      	ldr	r2, [pc, #476]	; (8003dfc <ADC_Init+0x1ec>)
 8003c1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c24:	4b75      	ldr	r3, [pc, #468]	; (8003dfc <ADC_Init+0x1ec>)
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4973      	ldr	r1, [pc, #460]	; (8003dfc <ADC_Init+0x1ec>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	021a      	lsls	r2, r3, #8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6899      	ldr	r1, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	4a58      	ldr	r2, [pc, #352]	; (8003e00 <ADC_Init+0x1f0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d022      	beq.n	8003cea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	e00f      	b.n	8003d0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0202 	bic.w	r2, r2, #2
 8003d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6899      	ldr	r1, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	005a      	lsls	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01b      	beq.n	8003d70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	3b01      	subs	r3, #1
 8003d64:	035a      	lsls	r2, r3, #13
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	e007      	b.n	8003d80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	051a      	lsls	r2, r3, #20
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6899      	ldr	r1, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dc2:	025a      	lsls	r2, r3, #9
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	029a      	lsls	r2, r3, #10
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40012300 	.word	0x40012300
 8003e00:	0f000001 	.word	0x0f000001

08003e04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d13c      	bne.n	8003e98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d12b      	bne.n	8003e90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d127      	bne.n	8003e90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d006      	beq.n	8003e5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d119      	bne.n	8003e90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0220 	bic.w	r2, r2, #32
 8003e6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f043 0201 	orr.w	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fd4b 	bl	800392c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e96:	e00e      	b.n	8003eb6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff fd5f 	bl	8003968 <HAL_ADC_ErrorCallback>
}
 8003eaa:	e004      	b.n	8003eb6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fd37 	bl	8003940 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2240      	movs	r2, #64	; 0x40
 8003eec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f043 0204 	orr.w	r2, r3, #4
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fd34 	bl	8003968 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <__NVIC_SetPriorityGrouping+0x40>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <__NVIC_SetPriorityGrouping+0x44>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f4a:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <__NVIC_SetPriorityGrouping+0x40>)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	60d3      	str	r3, [r2, #12]
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000ed00 	.word	0xe000ed00
 8003f60:	05fa0000 	.word	0x05fa0000

08003f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <__NVIC_GetPriorityGrouping+0x18>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	0a1b      	lsrs	r3, r3, #8
 8003f6e:	f003 0307 	and.w	r3, r3, #7
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	db0b      	blt.n	8003faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	f003 021f 	and.w	r2, r3, #31
 8003f98:	4907      	ldr	r1, [pc, #28]	; (8003fb8 <__NVIC_EnableIRQ+0x38>)
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	e000e100 	.word	0xe000e100

08003fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	6039      	str	r1, [r7, #0]
 8003fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	db0a      	blt.n	8003fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	490c      	ldr	r1, [pc, #48]	; (8004008 <__NVIC_SetPriority+0x4c>)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	0112      	lsls	r2, r2, #4
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	440b      	add	r3, r1
 8003fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fe4:	e00a      	b.n	8003ffc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	4908      	ldr	r1, [pc, #32]	; (800400c <__NVIC_SetPriority+0x50>)
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	3b04      	subs	r3, #4
 8003ff4:	0112      	lsls	r2, r2, #4
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	761a      	strb	r2, [r3, #24]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000e100 	.word	0xe000e100
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004010:	b480      	push	{r7}
 8004012:	b089      	sub	sp, #36	; 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f1c3 0307 	rsb	r3, r3, #7
 800402a:	2b04      	cmp	r3, #4
 800402c:	bf28      	it	cs
 800402e:	2304      	movcs	r3, #4
 8004030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	3304      	adds	r3, #4
 8004036:	2b06      	cmp	r3, #6
 8004038:	d902      	bls.n	8004040 <NVIC_EncodePriority+0x30>
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3b03      	subs	r3, #3
 800403e:	e000      	b.n	8004042 <NVIC_EncodePriority+0x32>
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004044:	f04f 32ff 	mov.w	r2, #4294967295
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43da      	mvns	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	401a      	ands	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004058:	f04f 31ff 	mov.w	r1, #4294967295
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	43d9      	mvns	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004068:	4313      	orrs	r3, r2
         );
}
 800406a:	4618      	mov	r0, r3
 800406c:	3724      	adds	r7, #36	; 0x24
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3b01      	subs	r3, #1
 8004084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004088:	d301      	bcc.n	800408e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800408a:	2301      	movs	r3, #1
 800408c:	e00f      	b.n	80040ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800408e:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <SysTick_Config+0x40>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3b01      	subs	r3, #1
 8004094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004096:	210f      	movs	r1, #15
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	f7ff ff8e 	bl	8003fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <SysTick_Config+0x40>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040a6:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <SysTick_Config+0x40>)
 80040a8:	2207      	movs	r2, #7
 80040aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	e000e010 	.word	0xe000e010

080040bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ff29 	bl	8003f1c <__NVIC_SetPriorityGrouping>
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b086      	sub	sp, #24
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	4603      	mov	r3, r0
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040e4:	f7ff ff3e 	bl	8003f64 <__NVIC_GetPriorityGrouping>
 80040e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	6978      	ldr	r0, [r7, #20]
 80040f0:	f7ff ff8e 	bl	8004010 <NVIC_EncodePriority>
 80040f4:	4602      	mov	r2, r0
 80040f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff5d 	bl	8003fbc <__NVIC_SetPriority>
}
 8004102:	bf00      	nop
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	4603      	mov	r3, r0
 8004112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff31 	bl	8003f80 <__NVIC_EnableIRQ>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ffa2 	bl	8004078 <SysTick_Config>
 8004134:	4603      	mov	r3, r0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800414c:	f7ff f8e4 	bl	8003318 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e099      	b.n	8004290 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800417c:	e00f      	b.n	800419e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800417e:	f7ff f8cb 	bl	8003318 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b05      	cmp	r3, #5
 800418a:	d908      	bls.n	800419e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2203      	movs	r2, #3
 8004196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e078      	b.n	8004290 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e8      	bne.n	800417e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4b38      	ldr	r3, [pc, #224]	; (8004298 <HAL_DMA_Init+0x158>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d107      	bne.n	8004208 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	4313      	orrs	r3, r2
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0307 	bic.w	r3, r3, #7
 800421e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	2b04      	cmp	r3, #4
 8004230:	d117      	bne.n	8004262 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00e      	beq.n	8004262 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fb09 	bl	800485c <DMA_CheckFifoParam>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2240      	movs	r2, #64	; 0x40
 8004254:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800425e:	2301      	movs	r3, #1
 8004260:	e016      	b.n	8004290 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fac0 	bl	80047f0 <DMA_CalcBaseAndBitshift>
 8004270:	4603      	mov	r3, r0
 8004272:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	223f      	movs	r2, #63	; 0x3f
 800427a:	409a      	lsls	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	e010803f 	.word	0xe010803f

0800429c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_DMA_Start_IT+0x26>
 80042be:	2302      	movs	r3, #2
 80042c0:	e048      	b.n	8004354 <HAL_DMA_Start_IT+0xb8>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d137      	bne.n	8004346 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2202      	movs	r2, #2
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fa52 	bl	8004794 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	223f      	movs	r2, #63	; 0x3f
 80042f6:	409a      	lsls	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0216 	orr.w	r2, r2, #22
 800430a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800431a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0208 	orr.w	r2, r2, #8
 8004332:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e005      	b.n	8004352 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800434e:	2302      	movs	r3, #2
 8004350:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004352:	7dfb      	ldrb	r3, [r7, #23]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004368:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800436a:	f7fe ffd5 	bl	8003318 <HAL_GetTick>
 800436e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d008      	beq.n	800438e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2280      	movs	r2, #128	; 0x80
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e052      	b.n	8004434 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0216 	bic.w	r2, r2, #22
 800439c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_DMA_Abort+0x62>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0208 	bic.w	r2, r2, #8
 80043cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0201 	bic.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043de:	e013      	b.n	8004408 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043e0:	f7fe ff9a 	bl	8003318 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d90c      	bls.n	8004408 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2220      	movs	r2, #32
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2203      	movs	r2, #3
 8004400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e015      	b.n	8004434 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e4      	bne.n	80043e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441a:	223f      	movs	r2, #63	; 0x3f
 800441c:	409a      	lsls	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d004      	beq.n	800445a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2280      	movs	r2, #128	; 0x80
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e00c      	b.n	8004474 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2205      	movs	r2, #5
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800448c:	4b92      	ldr	r3, [pc, #584]	; (80046d8 <HAL_DMA_IRQHandler+0x258>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a92      	ldr	r2, [pc, #584]	; (80046dc <HAL_DMA_IRQHandler+0x25c>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	0a9b      	lsrs	r3, r3, #10
 8004498:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	2208      	movs	r2, #8
 80044ac:	409a      	lsls	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01a      	beq.n	80044ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	2208      	movs	r2, #8
 80044da:	409a      	lsls	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e4:	f043 0201 	orr.w	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	2201      	movs	r2, #1
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450e:	2201      	movs	r2, #1
 8004510:	409a      	lsls	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f043 0202 	orr.w	r2, r3, #2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004526:	2204      	movs	r2, #4
 8004528:	409a      	lsls	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d012      	beq.n	8004558 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	2204      	movs	r2, #4
 8004546:	409a      	lsls	r2, r3
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	f043 0204 	orr.w	r2, r3, #4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	2210      	movs	r2, #16
 800455e:	409a      	lsls	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d043      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d03c      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457a:	2210      	movs	r2, #16
 800457c:	409a      	lsls	r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d018      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d108      	bne.n	80045b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d024      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4798      	blx	r3
 80045ae:	e01f      	b.n	80045f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
 80045c0:	e016      	b.n	80045f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d107      	bne.n	80045e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0208 	bic.w	r2, r2, #8
 80045de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	2220      	movs	r2, #32
 80045f6:	409a      	lsls	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 808e 	beq.w	800471e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 8086 	beq.w	800471e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	2220      	movs	r2, #32
 8004618:	409a      	lsls	r2, r3
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b05      	cmp	r3, #5
 8004628:	d136      	bne.n	8004698 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0216 	bic.w	r2, r2, #22
 8004638:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004648:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <HAL_DMA_IRQHandler+0x1da>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004656:	2b00      	cmp	r3, #0
 8004658:	d007      	beq.n	800466a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0208 	bic.w	r2, r2, #8
 8004668:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	223f      	movs	r2, #63	; 0x3f
 8004670:	409a      	lsls	r2, r3
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	2b00      	cmp	r3, #0
 800468c:	d07d      	beq.n	800478a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
        }
        return;
 8004696:	e078      	b.n	800478a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01c      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d108      	bne.n	80046c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d030      	beq.n	800471e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	4798      	blx	r3
 80046c4:	e02b      	b.n	800471e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d027      	beq.n	800471e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
 80046d6:	e022      	b.n	800471e <HAL_DMA_IRQHandler+0x29e>
 80046d8:	200000b0 	.word	0x200000b0
 80046dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10f      	bne.n	800470e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0210 	bic.w	r2, r2, #16
 80046fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	2b00      	cmp	r3, #0
 8004724:	d032      	beq.n	800478c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d022      	beq.n	8004778 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2205      	movs	r2, #5
 8004736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3301      	adds	r3, #1
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	429a      	cmp	r2, r3
 8004754:	d307      	bcc.n	8004766 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f2      	bne.n	800474a <HAL_DMA_IRQHandler+0x2ca>
 8004764:	e000      	b.n	8004768 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004766:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
 8004788:	e000      	b.n	800478c <HAL_DMA_IRQHandler+0x30c>
        return;
 800478a:	bf00      	nop
    }
  }
}
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop

08004794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
 80047a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d108      	bne.n	80047d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047d2:	e007      	b.n	80047e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	3b10      	subs	r3, #16
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <DMA_CalcBaseAndBitshift+0x60>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800480a:	4a12      	ldr	r2, [pc, #72]	; (8004854 <DMA_CalcBaseAndBitshift+0x64>)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d908      	bls.n	8004830 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <DMA_CalcBaseAndBitshift+0x68>)
 8004826:	4013      	ands	r3, r2
 8004828:	1d1a      	adds	r2, r3, #4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	659a      	str	r2, [r3, #88]	; 0x58
 800482e:	e006      	b.n	800483e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <DMA_CalcBaseAndBitshift+0x68>)
 8004838:	4013      	ands	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	aaaaaaab 	.word	0xaaaaaaab
 8004854:	0800c378 	.word	0x0800c378
 8004858:	fffffc00 	.word	0xfffffc00

0800485c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11f      	bne.n	80048b6 <DMA_CheckFifoParam+0x5a>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d856      	bhi.n	800492a <DMA_CheckFifoParam+0xce>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <DMA_CheckFifoParam+0x28>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004895 	.word	0x08004895
 8004888:	080048a7 	.word	0x080048a7
 800488c:	08004895 	.word	0x08004895
 8004890:	0800492b 	.word	0x0800492b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d046      	beq.n	800492e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a4:	e043      	b.n	800492e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048ae:	d140      	bne.n	8004932 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b4:	e03d      	b.n	8004932 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048be:	d121      	bne.n	8004904 <DMA_CheckFifoParam+0xa8>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d837      	bhi.n	8004936 <DMA_CheckFifoParam+0xda>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <DMA_CheckFifoParam+0x70>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048e3 	.word	0x080048e3
 80048d4:	080048dd 	.word	0x080048dd
 80048d8:	080048f5 	.word	0x080048f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      break;
 80048e0:	e030      	b.n	8004944 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d025      	beq.n	800493a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f2:	e022      	b.n	800493a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048fc:	d11f      	bne.n	800493e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004902:	e01c      	b.n	800493e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d903      	bls.n	8004912 <DMA_CheckFifoParam+0xb6>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d003      	beq.n	8004918 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004910:	e018      	b.n	8004944 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
      break;
 8004916:	e015      	b.n	8004944 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00e      	beq.n	8004942 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	73fb      	strb	r3, [r7, #15]
      break;
 8004928:	e00b      	b.n	8004942 <DMA_CheckFifoParam+0xe6>
      break;
 800492a:	bf00      	nop
 800492c:	e00a      	b.n	8004944 <DMA_CheckFifoParam+0xe8>
      break;
 800492e:	bf00      	nop
 8004930:	e008      	b.n	8004944 <DMA_CheckFifoParam+0xe8>
      break;
 8004932:	bf00      	nop
 8004934:	e006      	b.n	8004944 <DMA_CheckFifoParam+0xe8>
      break;
 8004936:	bf00      	nop
 8004938:	e004      	b.n	8004944 <DMA_CheckFifoParam+0xe8>
      break;
 800493a:	bf00      	nop
 800493c:	e002      	b.n	8004944 <DMA_CheckFifoParam+0xe8>
      break;   
 800493e:	bf00      	nop
 8004940:	e000      	b.n	8004944 <DMA_CheckFifoParam+0xe8>
      break;
 8004942:	bf00      	nop
    }
  } 
  
  return status; 
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop

08004954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004954:	b480      	push	{r7}
 8004956:	b089      	sub	sp, #36	; 0x24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
 8004972:	e175      	b.n	8004c60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004974:	2201      	movs	r2, #1
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4013      	ands	r3, r2
 8004986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	429a      	cmp	r2, r3
 800498e:	f040 8164 	bne.w	8004c5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d00b      	beq.n	80049b2 <HAL_GPIO_Init+0x5e>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d007      	beq.n	80049b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049a6:	2b11      	cmp	r3, #17
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b12      	cmp	r3, #18
 80049b0:	d130      	bne.n	8004a14 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	2203      	movs	r2, #3
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43db      	mvns	r3, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4013      	ands	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049e8:	2201      	movs	r2, #1
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	091b      	lsrs	r3, r3, #4
 80049fe:	f003 0201 	and.w	r2, r3, #1
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	2203      	movs	r2, #3
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d003      	beq.n	8004a54 <HAL_GPIO_Init+0x100>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b12      	cmp	r3, #18
 8004a52:	d123      	bne.n	8004a9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	08da      	lsrs	r2, r3, #3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3208      	adds	r2, #8
 8004a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	220f      	movs	r2, #15
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	08da      	lsrs	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3208      	adds	r2, #8
 8004a96:	69b9      	ldr	r1, [r7, #24]
 8004a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	43db      	mvns	r3, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 0203 	and.w	r2, r3, #3
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80be 	beq.w	8004c5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ade:	4b66      	ldr	r3, [pc, #408]	; (8004c78 <HAL_GPIO_Init+0x324>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	4a65      	ldr	r2, [pc, #404]	; (8004c78 <HAL_GPIO_Init+0x324>)
 8004ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aea:	4b63      	ldr	r3, [pc, #396]	; (8004c78 <HAL_GPIO_Init+0x324>)
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004af6:	4a61      	ldr	r2, [pc, #388]	; (8004c7c <HAL_GPIO_Init+0x328>)
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	3302      	adds	r3, #2
 8004afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	220f      	movs	r2, #15
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43db      	mvns	r3, r3
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4013      	ands	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a58      	ldr	r2, [pc, #352]	; (8004c80 <HAL_GPIO_Init+0x32c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d037      	beq.n	8004b92 <HAL_GPIO_Init+0x23e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a57      	ldr	r2, [pc, #348]	; (8004c84 <HAL_GPIO_Init+0x330>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d031      	beq.n	8004b8e <HAL_GPIO_Init+0x23a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a56      	ldr	r2, [pc, #344]	; (8004c88 <HAL_GPIO_Init+0x334>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d02b      	beq.n	8004b8a <HAL_GPIO_Init+0x236>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a55      	ldr	r2, [pc, #340]	; (8004c8c <HAL_GPIO_Init+0x338>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d025      	beq.n	8004b86 <HAL_GPIO_Init+0x232>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a54      	ldr	r2, [pc, #336]	; (8004c90 <HAL_GPIO_Init+0x33c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01f      	beq.n	8004b82 <HAL_GPIO_Init+0x22e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a53      	ldr	r2, [pc, #332]	; (8004c94 <HAL_GPIO_Init+0x340>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d019      	beq.n	8004b7e <HAL_GPIO_Init+0x22a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a52      	ldr	r2, [pc, #328]	; (8004c98 <HAL_GPIO_Init+0x344>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <HAL_GPIO_Init+0x226>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a51      	ldr	r2, [pc, #324]	; (8004c9c <HAL_GPIO_Init+0x348>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00d      	beq.n	8004b76 <HAL_GPIO_Init+0x222>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a50      	ldr	r2, [pc, #320]	; (8004ca0 <HAL_GPIO_Init+0x34c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d007      	beq.n	8004b72 <HAL_GPIO_Init+0x21e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a4f      	ldr	r2, [pc, #316]	; (8004ca4 <HAL_GPIO_Init+0x350>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d101      	bne.n	8004b6e <HAL_GPIO_Init+0x21a>
 8004b6a:	2309      	movs	r3, #9
 8004b6c:	e012      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b6e:	230a      	movs	r3, #10
 8004b70:	e010      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b72:	2308      	movs	r3, #8
 8004b74:	e00e      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b76:	2307      	movs	r3, #7
 8004b78:	e00c      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b7a:	2306      	movs	r3, #6
 8004b7c:	e00a      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b7e:	2305      	movs	r3, #5
 8004b80:	e008      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b82:	2304      	movs	r3, #4
 8004b84:	e006      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b86:	2303      	movs	r3, #3
 8004b88:	e004      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e002      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b92:	2300      	movs	r3, #0
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	f002 0203 	and.w	r2, r2, #3
 8004b9a:	0092      	lsls	r2, r2, #2
 8004b9c:	4093      	lsls	r3, r2
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ba4:	4935      	ldr	r1, [pc, #212]	; (8004c7c <HAL_GPIO_Init+0x328>)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	089b      	lsrs	r3, r3, #2
 8004baa:	3302      	adds	r3, #2
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bb2:	4b3d      	ldr	r3, [pc, #244]	; (8004ca8 <HAL_GPIO_Init+0x354>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bd6:	4a34      	ldr	r2, [pc, #208]	; (8004ca8 <HAL_GPIO_Init+0x354>)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bdc:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <HAL_GPIO_Init+0x354>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c00:	4a29      	ldr	r2, [pc, #164]	; (8004ca8 <HAL_GPIO_Init+0x354>)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c06:	4b28      	ldr	r3, [pc, #160]	; (8004ca8 <HAL_GPIO_Init+0x354>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4013      	ands	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <HAL_GPIO_Init+0x354>)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c30:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <HAL_GPIO_Init+0x354>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c54:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <HAL_GPIO_Init+0x354>)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b0f      	cmp	r3, #15
 8004c64:	f67f ae86 	bls.w	8004974 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40013800 	.word	0x40013800
 8004c80:	40020000 	.word	0x40020000
 8004c84:	40020400 	.word	0x40020400
 8004c88:	40020800 	.word	0x40020800
 8004c8c:	40020c00 	.word	0x40020c00
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40021400 	.word	0x40021400
 8004c98:	40021800 	.word	0x40021800
 8004c9c:	40021c00 	.word	0x40021c00
 8004ca0:	40022000 	.word	0x40022000
 8004ca4:	40022400 	.word	0x40022400
 8004ca8:	40013c00 	.word	0x40013c00

08004cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	887b      	ldrh	r3, [r7, #2]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
 8004cc8:	e001      	b.n	8004cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	807b      	strh	r3, [r7, #2]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cec:	787b      	ldrb	r3, [r7, #1]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cf2:	887a      	ldrh	r2, [r7, #2]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004cf8:	e003      	b.n	8004d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004cfa:	887b      	ldrh	r3, [r7, #2]
 8004cfc:	041a      	lsls	r2, r3, #16
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	619a      	str	r2, [r3, #24]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d20:	887a      	ldrh	r2, [r7, #2]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4013      	ands	r3, r2
 8004d26:	041a      	lsls	r2, r3, #16
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	43d9      	mvns	r1, r3
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	400b      	ands	r3, r1
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	619a      	str	r2, [r3, #24]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d4e:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x98>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	4a22      	ldr	r2, [pc, #136]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x98>)
 8004d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d58:	6413      	str	r3, [r2, #64]	; 0x40
 8004d5a:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x98>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d66:	4b1e      	ldr	r3, [pc, #120]	; (8004de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d72:	f7fe fad1 	bl	8003318 <HAL_GetTick>
 8004d76:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d78:	e009      	b.n	8004d8e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d7a:	f7fe facd 	bl	8003318 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d88:	d901      	bls.n	8004d8e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e022      	b.n	8004dd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d8e:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9a:	d1ee      	bne.n	8004d7a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d9c:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da8:	f7fe fab6 	bl	8003318 <HAL_GetTick>
 8004dac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dae:	e009      	b.n	8004dc4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004db0:	f7fe fab2 	bl	8003318 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dbe:	d901      	bls.n	8004dc4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e007      	b.n	8004dd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dd0:	d1ee      	bne.n	8004db0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	40007000 	.word	0x40007000

08004de4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004dec:	2300      	movs	r3, #0
 8004dee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e29b      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8087 	beq.w	8004f16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e08:	4b96      	ldr	r3, [pc, #600]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d00c      	beq.n	8004e2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e14:	4b93      	ldr	r3, [pc, #588]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d112      	bne.n	8004e46 <HAL_RCC_OscConfig+0x62>
 8004e20:	4b90      	ldr	r3, [pc, #576]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e2c:	d10b      	bne.n	8004e46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2e:	4b8d      	ldr	r3, [pc, #564]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d06c      	beq.n	8004f14 <HAL_RCC_OscConfig+0x130>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d168      	bne.n	8004f14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e275      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCC_OscConfig+0x7a>
 8004e50:	4b84      	ldr	r3, [pc, #528]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a83      	ldr	r2, [pc, #524]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	e02e      	b.n	8004ebc <HAL_RCC_OscConfig+0xd8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x9c>
 8004e66:	4b7f      	ldr	r3, [pc, #508]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a7e      	ldr	r2, [pc, #504]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4b7c      	ldr	r3, [pc, #496]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a7b      	ldr	r2, [pc, #492]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e01d      	b.n	8004ebc <HAL_RCC_OscConfig+0xd8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0xc0>
 8004e8a:	4b76      	ldr	r3, [pc, #472]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a75      	ldr	r2, [pc, #468]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	4b73      	ldr	r3, [pc, #460]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a72      	ldr	r2, [pc, #456]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e00b      	b.n	8004ebc <HAL_RCC_OscConfig+0xd8>
 8004ea4:	4b6f      	ldr	r3, [pc, #444]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a6e      	ldr	r2, [pc, #440]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b6c      	ldr	r3, [pc, #432]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a6b      	ldr	r2, [pc, #428]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d013      	beq.n	8004eec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fe fa28 	bl	8003318 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fe fa24 	bl	8003318 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e229      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ede:	4b61      	ldr	r3, [pc, #388]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0xe8>
 8004eea:	e014      	b.n	8004f16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fe fa14 	bl	8003318 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef4:	f7fe fa10 	bl	8003318 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	; 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e215      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f06:	4b57      	ldr	r3, [pc, #348]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x110>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d069      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f22:	4b50      	ldr	r3, [pc, #320]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2e:	4b4d      	ldr	r3, [pc, #308]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d11c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x190>
 8004f3a:	4b4a      	ldr	r3, [pc, #296]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d116      	bne.n	8004f74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	4b47      	ldr	r3, [pc, #284]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_RCC_OscConfig+0x17a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e1e9      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5e:	4b41      	ldr	r3, [pc, #260]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	493d      	ldr	r1, [pc, #244]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f72:	e040      	b.n	8004ff6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d023      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f7c:	4b39      	ldr	r3, [pc, #228]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a38      	ldr	r2, [pc, #224]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fe f9c6 	bl	8003318 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f90:	f7fe f9c2 	bl	8003318 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1c7      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa2:	4b30      	ldr	r3, [pc, #192]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fae:	4b2d      	ldr	r3, [pc, #180]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4929      	ldr	r1, [pc, #164]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	600b      	str	r3, [r1, #0]
 8004fc2:	e018      	b.n	8004ff6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc4:	4b27      	ldr	r3, [pc, #156]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a26      	ldr	r2, [pc, #152]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fe f9a2 	bl	8003318 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd8:	f7fe f99e 	bl	8003318 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e1a3      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fea:	4b1e      	ldr	r3, [pc, #120]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d038      	beq.n	8005074 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d019      	beq.n	800503e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 800500c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500e:	4a15      	ldr	r2, [pc, #84]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005016:	f7fe f97f 	bl	8003318 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800501e:	f7fe f97b 	bl	8003318 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e180      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8005032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x23a>
 800503c:	e01a      	b.n	8005074 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800503e:	4b09      	ldr	r3, [pc, #36]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8005040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005042:	4a08      	ldr	r2, [pc, #32]	; (8005064 <HAL_RCC_OscConfig+0x280>)
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504a:	f7fe f965 	bl	8003318 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005050:	e00a      	b.n	8005068 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005052:	f7fe f961 	bl	8003318 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d903      	bls.n	8005068 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e166      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
 8005064:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005068:	4b92      	ldr	r3, [pc, #584]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 800506a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1ee      	bne.n	8005052 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80a4 	beq.w	80051ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005082:	4b8c      	ldr	r3, [pc, #560]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10d      	bne.n	80050aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800508e:	4b89      	ldr	r3, [pc, #548]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	4a88      	ldr	r2, [pc, #544]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005098:	6413      	str	r3, [r2, #64]	; 0x40
 800509a:	4b86      	ldr	r3, [pc, #536]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a6:	2301      	movs	r3, #1
 80050a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050aa:	4b83      	ldr	r3, [pc, #524]	; (80052b8 <HAL_RCC_OscConfig+0x4d4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d118      	bne.n	80050e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80050b6:	4b80      	ldr	r3, [pc, #512]	; (80052b8 <HAL_RCC_OscConfig+0x4d4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a7f      	ldr	r2, [pc, #508]	; (80052b8 <HAL_RCC_OscConfig+0x4d4>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c2:	f7fe f929 	bl	8003318 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fe f925 	bl	8003318 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b64      	cmp	r3, #100	; 0x64
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e12a      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050dc:	4b76      	ldr	r3, [pc, #472]	; (80052b8 <HAL_RCC_OscConfig+0x4d4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d106      	bne.n	80050fe <HAL_RCC_OscConfig+0x31a>
 80050f0:	4b70      	ldr	r3, [pc, #448]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4a6f      	ldr	r2, [pc, #444]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6713      	str	r3, [r2, #112]	; 0x70
 80050fc:	e02d      	b.n	800515a <HAL_RCC_OscConfig+0x376>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10c      	bne.n	8005120 <HAL_RCC_OscConfig+0x33c>
 8005106:	4b6b      	ldr	r3, [pc, #428]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4a6a      	ldr	r2, [pc, #424]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	6713      	str	r3, [r2, #112]	; 0x70
 8005112:	4b68      	ldr	r3, [pc, #416]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a67      	ldr	r2, [pc, #412]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005118:	f023 0304 	bic.w	r3, r3, #4
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	e01c      	b.n	800515a <HAL_RCC_OscConfig+0x376>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b05      	cmp	r3, #5
 8005126:	d10c      	bne.n	8005142 <HAL_RCC_OscConfig+0x35e>
 8005128:	4b62      	ldr	r3, [pc, #392]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	4a61      	ldr	r2, [pc, #388]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 800512e:	f043 0304 	orr.w	r3, r3, #4
 8005132:	6713      	str	r3, [r2, #112]	; 0x70
 8005134:	4b5f      	ldr	r3, [pc, #380]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	4a5e      	ldr	r2, [pc, #376]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6713      	str	r3, [r2, #112]	; 0x70
 8005140:	e00b      	b.n	800515a <HAL_RCC_OscConfig+0x376>
 8005142:	4b5c      	ldr	r3, [pc, #368]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	4a5b      	ldr	r2, [pc, #364]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	6713      	str	r3, [r2, #112]	; 0x70
 800514e:	4b59      	ldr	r3, [pc, #356]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	4a58      	ldr	r2, [pc, #352]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005154:	f023 0304 	bic.w	r3, r3, #4
 8005158:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d015      	beq.n	800518e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005162:	f7fe f8d9 	bl	8003318 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005168:	e00a      	b.n	8005180 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7fe f8d5 	bl	8003318 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	; 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e0d8      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005180:	4b4c      	ldr	r3, [pc, #304]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ee      	beq.n	800516a <HAL_RCC_OscConfig+0x386>
 800518c:	e014      	b.n	80051b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518e:	f7fe f8c3 	bl	8003318 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7fe f8bf 	bl	8003318 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e0c2      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ac:	4b41      	ldr	r3, [pc, #260]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ee      	bne.n	8005196 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d105      	bne.n	80051ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051be:	4b3d      	ldr	r3, [pc, #244]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	4a3c      	ldr	r2, [pc, #240]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 80051c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 80ae 	beq.w	8005330 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d4:	4b37      	ldr	r3, [pc, #220]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d06d      	beq.n	80052bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d14b      	bne.n	8005280 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e8:	4b32      	ldr	r3, [pc, #200]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a31      	ldr	r2, [pc, #196]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 80051ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fe f890 	bl	8003318 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fe f88c 	bl	8003318 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e091      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520e:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	019b      	lsls	r3, r3, #6
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	3b01      	subs	r3, #1
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	071b      	lsls	r3, r3, #28
 8005246:	491b      	ldr	r1, [pc, #108]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005248:	4313      	orrs	r3, r2
 800524a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800524c:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fe f85e 	bl	8003318 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005260:	f7fe f85a 	bl	8003318 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e05f      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0x47c>
 800527e:	e057      	b.n	8005330 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a0b      	ldr	r2, [pc, #44]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 8005286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800528a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fe f844 	bl	8003318 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005294:	f7fe f840 	bl	8003318 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e045      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a6:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <HAL_RCC_OscConfig+0x4d0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x4b0>
 80052b2:	e03d      	b.n	8005330 <HAL_RCC_OscConfig+0x54c>
 80052b4:	40023800 	.word	0x40023800
 80052b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80052bc:	4b1f      	ldr	r3, [pc, #124]	; (800533c <HAL_RCC_OscConfig+0x558>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d030      	beq.n	800532c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d129      	bne.n	800532c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d122      	bne.n	800532c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d119      	bne.n	800532c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	3b01      	subs	r3, #1
 8005306:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d10f      	bne.n	800532c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d107      	bne.n	800532c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d001      	beq.n	8005330 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40023800 	.word	0x40023800

08005340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0d0      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005358:	4b6a      	ldr	r3, [pc, #424]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d910      	bls.n	8005388 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b67      	ldr	r3, [pc, #412]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 020f 	bic.w	r2, r3, #15
 800536e:	4965      	ldr	r1, [pc, #404]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b63      	ldr	r3, [pc, #396]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0b8      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d020      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a0:	4b59      	ldr	r3, [pc, #356]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4a58      	ldr	r2, [pc, #352]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80053a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b8:	4b53      	ldr	r3, [pc, #332]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	4a52      	ldr	r2, [pc, #328]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80053be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c4:	4b50      	ldr	r3, [pc, #320]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	494d      	ldr	r1, [pc, #308]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d040      	beq.n	8005464 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d115      	bne.n	8005422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e07f      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005402:	4b41      	ldr	r3, [pc, #260]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e073      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005412:	4b3d      	ldr	r3, [pc, #244]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e06b      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005422:	4b39      	ldr	r3, [pc, #228]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f023 0203 	bic.w	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4936      	ldr	r1, [pc, #216]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 8005430:	4313      	orrs	r3, r2
 8005432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005434:	f7fd ff70 	bl	8003318 <HAL_GetTick>
 8005438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	e00a      	b.n	8005452 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543c:	f7fd ff6c 	bl	8003318 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	; 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e053      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005452:	4b2d      	ldr	r3, [pc, #180]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 020c 	and.w	r2, r3, #12
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	429a      	cmp	r2, r3
 8005462:	d1eb      	bne.n	800543c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005464:	4b27      	ldr	r3, [pc, #156]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d210      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 020f 	bic.w	r2, r3, #15
 800547a:	4922      	ldr	r1, [pc, #136]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	4313      	orrs	r3, r2
 8005480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005482:	4b20      	ldr	r3, [pc, #128]	; (8005504 <HAL_RCC_ClockConfig+0x1c4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e032      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4916      	ldr	r1, [pc, #88]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	490e      	ldr	r1, [pc, #56]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054d2:	f000 f821 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 80054d6:	4602      	mov	r2, r0
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_ClockConfig+0x1c8>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	490a      	ldr	r1, [pc, #40]	; (800550c <HAL_RCC_ClockConfig+0x1cc>)
 80054e4:	5ccb      	ldrb	r3, [r1, r3]
 80054e6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <HAL_RCC_ClockConfig+0x1d0>)
 80054ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <HAL_RCC_ClockConfig+0x1d4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fd fecc 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023c00 	.word	0x40023c00
 8005508:	40023800 	.word	0x40023800
 800550c:	0800c360 	.word	0x0800c360
 8005510:	200000b0 	.word	0x200000b0
 8005514:	200001e4 	.word	0x200001e4

08005518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005518:	b5b0      	push	{r4, r5, r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800551e:	2100      	movs	r1, #0
 8005520:	6079      	str	r1, [r7, #4]
 8005522:	2100      	movs	r1, #0
 8005524:	60f9      	str	r1, [r7, #12]
 8005526:	2100      	movs	r1, #0
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800552a:	2100      	movs	r1, #0
 800552c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800552e:	4952      	ldr	r1, [pc, #328]	; (8005678 <HAL_RCC_GetSysClockFreq+0x160>)
 8005530:	6889      	ldr	r1, [r1, #8]
 8005532:	f001 010c 	and.w	r1, r1, #12
 8005536:	2908      	cmp	r1, #8
 8005538:	d00d      	beq.n	8005556 <HAL_RCC_GetSysClockFreq+0x3e>
 800553a:	2908      	cmp	r1, #8
 800553c:	f200 8094 	bhi.w	8005668 <HAL_RCC_GetSysClockFreq+0x150>
 8005540:	2900      	cmp	r1, #0
 8005542:	d002      	beq.n	800554a <HAL_RCC_GetSysClockFreq+0x32>
 8005544:	2904      	cmp	r1, #4
 8005546:	d003      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x38>
 8005548:	e08e      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800554a:	4b4c      	ldr	r3, [pc, #304]	; (800567c <HAL_RCC_GetSysClockFreq+0x164>)
 800554c:	60bb      	str	r3, [r7, #8]
      break;
 800554e:	e08e      	b.n	800566e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005550:	4b4b      	ldr	r3, [pc, #300]	; (8005680 <HAL_RCC_GetSysClockFreq+0x168>)
 8005552:	60bb      	str	r3, [r7, #8]
      break;
 8005554:	e08b      	b.n	800566e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005556:	4948      	ldr	r1, [pc, #288]	; (8005678 <HAL_RCC_GetSysClockFreq+0x160>)
 8005558:	6849      	ldr	r1, [r1, #4]
 800555a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800555e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005560:	4945      	ldr	r1, [pc, #276]	; (8005678 <HAL_RCC_GetSysClockFreq+0x160>)
 8005562:	6849      	ldr	r1, [r1, #4]
 8005564:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005568:	2900      	cmp	r1, #0
 800556a:	d024      	beq.n	80055b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800556c:	4942      	ldr	r1, [pc, #264]	; (8005678 <HAL_RCC_GetSysClockFreq+0x160>)
 800556e:	6849      	ldr	r1, [r1, #4]
 8005570:	0989      	lsrs	r1, r1, #6
 8005572:	4608      	mov	r0, r1
 8005574:	f04f 0100 	mov.w	r1, #0
 8005578:	f240 14ff 	movw	r4, #511	; 0x1ff
 800557c:	f04f 0500 	mov.w	r5, #0
 8005580:	ea00 0204 	and.w	r2, r0, r4
 8005584:	ea01 0305 	and.w	r3, r1, r5
 8005588:	493d      	ldr	r1, [pc, #244]	; (8005680 <HAL_RCC_GetSysClockFreq+0x168>)
 800558a:	fb01 f003 	mul.w	r0, r1, r3
 800558e:	2100      	movs	r1, #0
 8005590:	fb01 f102 	mul.w	r1, r1, r2
 8005594:	1844      	adds	r4, r0, r1
 8005596:	493a      	ldr	r1, [pc, #232]	; (8005680 <HAL_RCC_GetSysClockFreq+0x168>)
 8005598:	fba2 0101 	umull	r0, r1, r2, r1
 800559c:	1863      	adds	r3, r4, r1
 800559e:	4619      	mov	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	f7fa feb2 	bl	8000310 <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4613      	mov	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e04a      	b.n	800564c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b6:	4b30      	ldr	r3, [pc, #192]	; (8005678 <HAL_RCC_GetSysClockFreq+0x160>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	099b      	lsrs	r3, r3, #6
 80055bc:	461a      	mov	r2, r3
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	ea02 0400 	and.w	r4, r2, r0
 80055ce:	ea03 0501 	and.w	r5, r3, r1
 80055d2:	4620      	mov	r0, r4
 80055d4:	4629      	mov	r1, r5
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	014b      	lsls	r3, r1, #5
 80055e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055e4:	0142      	lsls	r2, r0, #5
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	1b00      	subs	r0, r0, r4
 80055ec:	eb61 0105 	sbc.w	r1, r1, r5
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	018b      	lsls	r3, r1, #6
 80055fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055fe:	0182      	lsls	r2, r0, #6
 8005600:	1a12      	subs	r2, r2, r0
 8005602:	eb63 0301 	sbc.w	r3, r3, r1
 8005606:	f04f 0000 	mov.w	r0, #0
 800560a:	f04f 0100 	mov.w	r1, #0
 800560e:	00d9      	lsls	r1, r3, #3
 8005610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005614:	00d0      	lsls	r0, r2, #3
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	1912      	adds	r2, r2, r4
 800561c:	eb45 0303 	adc.w	r3, r5, r3
 8005620:	f04f 0000 	mov.w	r0, #0
 8005624:	f04f 0100 	mov.w	r1, #0
 8005628:	0299      	lsls	r1, r3, #10
 800562a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800562e:	0290      	lsls	r0, r2, #10
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4610      	mov	r0, r2
 8005636:	4619      	mov	r1, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	461a      	mov	r2, r3
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	f7fa fe66 	bl	8000310 <__aeabi_uldivmod>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4613      	mov	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <HAL_RCC_GetSysClockFreq+0x160>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	3301      	adds	r3, #1
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	60bb      	str	r3, [r7, #8]
      break;
 8005666:	e002      	b.n	800566e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <HAL_RCC_GetSysClockFreq+0x164>)
 800566a:	60bb      	str	r3, [r7, #8]
      break;
 800566c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800566e:	68bb      	ldr	r3, [r7, #8]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bdb0      	pop	{r4, r5, r7, pc}
 8005678:	40023800 	.word	0x40023800
 800567c:	00f42400 	.word	0x00f42400
 8005680:	017d7840 	.word	0x017d7840

08005684 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <HAL_RCC_GetHCLKFreq+0x14>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	200000b0 	.word	0x200000b0

0800569c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056a0:	f7ff fff0 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	0a9b      	lsrs	r3, r3, #10
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	4903      	ldr	r1, [pc, #12]	; (80056c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b2:	5ccb      	ldrb	r3, [r1, r3]
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40023800 	.word	0x40023800
 80056c0:	0800c370 	.word	0x0800c370

080056c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056c8:	f7ff ffdc 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80056cc:	4602      	mov	r2, r0
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	0b5b      	lsrs	r3, r3, #13
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	4903      	ldr	r1, [pc, #12]	; (80056e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056da:	5ccb      	ldrb	r3, [r1, r3]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40023800 	.word	0x40023800
 80056e8:	0800c370 	.word	0x0800c370

080056ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d012      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005714:	4b69      	ldr	r3, [pc, #420]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4a68      	ldr	r2, [pc, #416]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800571e:	6093      	str	r3, [r2, #8]
 8005720:	4b66      	ldr	r3, [pc, #408]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	4964      	ldr	r1, [pc, #400]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005736:	2301      	movs	r3, #1
 8005738:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d017      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005746:	4b5d      	ldr	r3, [pc, #372]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800574c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005754:	4959      	ldr	r1, [pc, #356]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005764:	d101      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005766:	2301      	movs	r3, #1
 8005768:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005772:	2301      	movs	r3, #1
 8005774:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d017      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005782:	4b4e      	ldr	r3, [pc, #312]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005788:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	494a      	ldr	r1, [pc, #296]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a0:	d101      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80057a2:	2301      	movs	r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80057ae:	2301      	movs	r3, #1
 80057b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80057be:	2301      	movs	r3, #1
 80057c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 808b 	beq.w	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057d0:	4b3a      	ldr	r3, [pc, #232]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	4a39      	ldr	r2, [pc, #228]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057da:	6413      	str	r3, [r2, #64]	; 0x40
 80057dc:	4b37      	ldr	r3, [pc, #220]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e4:	60bb      	str	r3, [r7, #8]
 80057e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057e8:	4b35      	ldr	r3, [pc, #212]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a34      	ldr	r2, [pc, #208]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f4:	f7fd fd90 	bl	8003318 <HAL_GetTick>
 80057f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fc:	f7fd fd8c 	bl	8003318 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	; 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e38f      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800580e:	4b2c      	ldr	r3, [pc, #176]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800581a:	4b28      	ldr	r3, [pc, #160]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005822:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d035      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	429a      	cmp	r2, r3
 8005836:	d02e      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005838:	4b20      	ldr	r3, [pc, #128]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005840:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005842:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	4a1d      	ldr	r2, [pc, #116]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800584e:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	4a1a      	ldr	r2, [pc, #104]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005858:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800585a:	4a18      	ldr	r2, [pc, #96]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005860:	4b16      	ldr	r3, [pc, #88]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b01      	cmp	r3, #1
 800586a:	d114      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fd fd54 	bl	8003318 <HAL_GetTick>
 8005870:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005872:	e00a      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005874:	f7fd fd50 	bl	8003318 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e351      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0ee      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a2:	d111      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058b0:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058b2:	400b      	ands	r3, r1
 80058b4:	4901      	ldr	r1, [pc, #4]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]
 80058ba:	e00b      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80058bc:	40023800 	.word	0x40023800
 80058c0:	40007000 	.word	0x40007000
 80058c4:	0ffffcff 	.word	0x0ffffcff
 80058c8:	4bb3      	ldr	r3, [pc, #716]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	4ab2      	ldr	r2, [pc, #712]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80058d2:	6093      	str	r3, [r2, #8]
 80058d4:	4bb0      	ldr	r3, [pc, #704]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e0:	49ad      	ldr	r1, [pc, #692]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d010      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058f2:	4ba9      	ldr	r3, [pc, #676]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058f8:	4aa7      	ldr	r2, [pc, #668]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005902:	4ba5      	ldr	r3, [pc, #660]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005904:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	49a2      	ldr	r1, [pc, #648]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005920:	4b9d      	ldr	r3, [pc, #628]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005926:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800592e:	499a      	ldr	r1, [pc, #616]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005942:	4b95      	ldr	r3, [pc, #596]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005950:	4991      	ldr	r1, [pc, #580]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005964:	4b8c      	ldr	r3, [pc, #560]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005972:	4989      	ldr	r1, [pc, #548]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005986:	4b84      	ldr	r3, [pc, #528]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	4980      	ldr	r1, [pc, #512]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059a8:	4b7b      	ldr	r3, [pc, #492]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	f023 0203 	bic.w	r2, r3, #3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	4978      	ldr	r1, [pc, #480]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059ca:	4b73      	ldr	r3, [pc, #460]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	f023 020c 	bic.w	r2, r3, #12
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d8:	496f      	ldr	r1, [pc, #444]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059ec:	4b6a      	ldr	r3, [pc, #424]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fa:	4967      	ldr	r1, [pc, #412]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a0e:	4b62      	ldr	r3, [pc, #392]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1c:	495e      	ldr	r1, [pc, #376]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a30:	4b59      	ldr	r3, [pc, #356]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	4956      	ldr	r1, [pc, #344]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005a52:	4b51      	ldr	r3, [pc, #324]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	494d      	ldr	r1, [pc, #308]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005a74:	4b48      	ldr	r3, [pc, #288]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a82:	4945      	ldr	r1, [pc, #276]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005a96:	4b40      	ldr	r3, [pc, #256]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa4:	493c      	ldr	r1, [pc, #240]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ab8:	4b37      	ldr	r3, [pc, #220]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ac6:	4934      	ldr	r1, [pc, #208]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d011      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ada:	4b2f      	ldr	r3, [pc, #188]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae8:	492b      	ldr	r1, [pc, #172]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af8:	d101      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005afa:	2301      	movs	r3, #1
 8005afc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b1a:	4b1f      	ldr	r3, [pc, #124]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b28:	491b      	ldr	r1, [pc, #108]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b3c:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b4c:	4912      	ldr	r1, [pc, #72]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b70:	4909      	ldr	r1, [pc, #36]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00f      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b84:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b94:	e002      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005b96:	bf00      	nop
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	4986      	ldr	r1, [pc, #536]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bb0:	4b81      	ldr	r3, [pc, #516]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc0:	497d      	ldr	r1, [pc, #500]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d006      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 80d6 	beq.w	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bdc:	4b76      	ldr	r3, [pc, #472]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a75      	ldr	r2, [pc, #468]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be8:	f7fd fb96 	bl	8003318 <HAL_GetTick>
 8005bec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bf0:	f7fd fb92 	bl	8003318 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	; 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e195      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c02:	4b6d      	ldr	r3, [pc, #436]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d021      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d11d      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c22:	4b65      	ldr	r3, [pc, #404]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c28:	0c1b      	lsrs	r3, r3, #16
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c30:	4b61      	ldr	r3, [pc, #388]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c36:	0e1b      	lsrs	r3, r3, #24
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	019a      	lsls	r2, r3, #6
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	041b      	lsls	r3, r3, #16
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	071b      	lsls	r3, r3, #28
 8005c56:	4958      	ldr	r1, [pc, #352]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d004      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c72:	d00a      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02e      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c88:	d129      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c8a:	4b4b      	ldr	r3, [pc, #300]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c98:	4b47      	ldr	r3, [pc, #284]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c9e:	0f1b      	lsrs	r3, r3, #28
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	019a      	lsls	r2, r3, #6
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	061b      	lsls	r3, r3, #24
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	071b      	lsls	r3, r3, #28
 8005cbe:	493e      	ldr	r1, [pc, #248]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005cc6:	4b3c      	ldr	r3, [pc, #240]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ccc:	f023 021f 	bic.w	r2, r3, #31
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	4938      	ldr	r1, [pc, #224]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d01d      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cea:	4b33      	ldr	r3, [pc, #204]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf0:	0e1b      	lsrs	r3, r3, #24
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cf8:	4b2f      	ldr	r3, [pc, #188]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfe:	0f1b      	lsrs	r3, r3, #28
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	019a      	lsls	r2, r3, #6
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	431a      	orrs	r2, r3
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	061b      	lsls	r3, r3, #24
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	071b      	lsls	r3, r3, #28
 8005d1e:	4926      	ldr	r1, [pc, #152]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d011      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	019a      	lsls	r2, r3, #6
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	061b      	lsls	r3, r3, #24
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	071b      	lsls	r3, r3, #28
 8005d4e:	491a      	ldr	r1, [pc, #104]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d56:	4b18      	ldr	r3, [pc, #96]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d62:	f7fd fad9 	bl	8003318 <HAL_GetTick>
 8005d66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d68:	e008      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d6a:	f7fd fad5 	bl	8003318 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b64      	cmp	r3, #100	; 0x64
 8005d76:	d901      	bls.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e0d8      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f0      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	f040 80ce 	bne.w	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d9c:	f7fd fabc 	bl	8003318 <HAL_GetTick>
 8005da0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005da2:	e00b      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005da4:	f7fd fab8 	bl	8003318 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b64      	cmp	r3, #100	; 0x64
 8005db0:	d904      	bls.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e0bb      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005db6:	bf00      	nop
 8005db8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dbc:	4b5e      	ldr	r3, [pc, #376]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dc8:	d0ec      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d009      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d02e      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d12a      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005df2:	4b51      	ldr	r3, [pc, #324]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e00:	4b4d      	ldr	r3, [pc, #308]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	0f1b      	lsrs	r3, r3, #28
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	019a      	lsls	r2, r3, #6
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	041b      	lsls	r3, r3, #16
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	431a      	orrs	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	071b      	lsls	r3, r3, #28
 8005e26:	4944      	ldr	r1, [pc, #272]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e2e:	4b42      	ldr	r3, [pc, #264]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	493d      	ldr	r1, [pc, #244]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d022      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e5c:	d11d      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e5e:	4b36      	ldr	r3, [pc, #216]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e64:	0e1b      	lsrs	r3, r3, #24
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e6c:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e72:	0f1b      	lsrs	r3, r3, #28
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	019a      	lsls	r2, r3, #6
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	431a      	orrs	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	061b      	lsls	r3, r3, #24
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	071b      	lsls	r3, r3, #28
 8005e92:	4929      	ldr	r1, [pc, #164]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d028      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ea6:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	0e1b      	lsrs	r3, r3, #24
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005eb4:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eba:	0c1b      	lsrs	r3, r3, #16
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	019a      	lsls	r2, r3, #6
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	061b      	lsls	r3, r3, #24
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	071b      	lsls	r3, r3, #28
 8005eda:	4917      	ldr	r1, [pc, #92]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	4911      	ldr	r1, [pc, #68]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a0e      	ldr	r2, [pc, #56]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f04:	f7fd fa08 	bl	8003318 <HAL_GetTick>
 8005f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f0c:	f7fd fa04 	bl	8003318 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	; 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e007      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f2a:	d1ef      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40023800 	.word	0x40023800

08005f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e09d      	b.n	800608a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d108      	bne.n	8005f68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f5e:	d009      	beq.n	8005f74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	61da      	str	r2, [r3, #28]
 8005f66:	e005      	b.n	8005f74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fc fa5a 	bl	8002448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005faa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fb4:	d902      	bls.n	8005fbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	e002      	b.n	8005fc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005fca:	d007      	beq.n	8005fdc <HAL_SPI_Init+0xa0>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	ea42 0103 	orr.w	r1, r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	0c1b      	lsrs	r3, r3, #16
 8006038:	f003 0204 	and.w	r2, r3, #4
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006058:	ea42 0103 	orr.w	r1, r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b088      	sub	sp, #32
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	603b      	str	r3, [r7, #0]
 800609e:	4613      	mov	r3, r2
 80060a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_SPI_Transmit+0x22>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e158      	b.n	8006366 <HAL_SPI_Transmit+0x2d4>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060bc:	f7fd f92c 	bl	8003318 <HAL_GetTick>
 80060c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d002      	beq.n	80060d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060d2:	2302      	movs	r3, #2
 80060d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060d6:	e13d      	b.n	8006354 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <HAL_SPI_Transmit+0x52>
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060e8:	e134      	b.n	8006354 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2203      	movs	r2, #3
 80060ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	88fa      	ldrh	r2, [r7, #6]
 8006102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006134:	d10f      	bne.n	8006156 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006144:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006154:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006160:	2b40      	cmp	r3, #64	; 0x40
 8006162:	d007      	beq.n	8006174 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006172:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800617c:	d94b      	bls.n	8006216 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_SPI_Transmit+0xfa>
 8006186:	8afb      	ldrh	r3, [r7, #22]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d13e      	bne.n	800620a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	881a      	ldrh	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061b0:	e02b      	b.n	800620a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d112      	bne.n	80061e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	881a      	ldrh	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	1c9a      	adds	r2, r3, #2
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061e4:	e011      	b.n	800620a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061e6:	f7fd f897 	bl	8003318 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d803      	bhi.n	80061fe <HAL_SPI_Transmit+0x16c>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d102      	bne.n	8006204 <HAL_SPI_Transmit+0x172>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006208:	e0a4      	b.n	8006354 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1ce      	bne.n	80061b2 <HAL_SPI_Transmit+0x120>
 8006214:	e07c      	b.n	8006310 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_SPI_Transmit+0x192>
 800621e:	8afb      	ldrh	r3, [r7, #22]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d170      	bne.n	8006306 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b01      	cmp	r3, #1
 800622c:	d912      	bls.n	8006254 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	881a      	ldrh	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	1c9a      	adds	r2, r3, #2
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b02      	subs	r3, #2
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006252:	e058      	b.n	8006306 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	330c      	adds	r3, #12
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800627a:	e044      	b.n	8006306 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b02      	cmp	r3, #2
 8006288:	d12b      	bne.n	80062e2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628e:	b29b      	uxth	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d912      	bls.n	80062ba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	881a      	ldrh	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	1c9a      	adds	r2, r3, #2
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b02      	subs	r3, #2
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062b8:	e025      	b.n	8006306 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	330c      	adds	r3, #12
 80062c4:	7812      	ldrb	r2, [r2, #0]
 80062c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062e0:	e011      	b.n	8006306 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062e2:	f7fd f819 	bl	8003318 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d803      	bhi.n	80062fa <HAL_SPI_Transmit+0x268>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d102      	bne.n	8006300 <HAL_SPI_Transmit+0x26e>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006304:	e026      	b.n	8006354 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1b5      	bne.n	800627c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fc77 	bl	8006c08 <SPI_EndRxTxTransaction>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	77fb      	strb	r3, [r7, #31]
 8006350:	e000      	b.n	8006354 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006352:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006364:	7ffb      	ldrb	r3, [r7, #31]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3720      	adds	r7, #32
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b08a      	sub	sp, #40	; 0x28
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800637c:	2301      	movs	r3, #1
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_SPI_TransmitReceive+0x26>
 8006390:	2302      	movs	r3, #2
 8006392:	e1fb      	b.n	800678c <HAL_SPI_TransmitReceive+0x41e>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800639c:	f7fc ffbc 	bl	8003318 <HAL_GetTick>
 80063a0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063a8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80063b0:	887b      	ldrh	r3, [r7, #2]
 80063b2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80063b4:	887b      	ldrh	r3, [r7, #2]
 80063b6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063b8:	7efb      	ldrb	r3, [r7, #27]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d00e      	beq.n	80063dc <HAL_SPI_TransmitReceive+0x6e>
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c4:	d106      	bne.n	80063d4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d102      	bne.n	80063d4 <HAL_SPI_TransmitReceive+0x66>
 80063ce:	7efb      	ldrb	r3, [r7, #27]
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d003      	beq.n	80063dc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80063d4:	2302      	movs	r3, #2
 80063d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80063da:	e1cd      	b.n	8006778 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_SPI_TransmitReceive+0x80>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <HAL_SPI_TransmitReceive+0x80>
 80063e8:	887b      	ldrh	r3, [r7, #2]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d103      	bne.n	80063f6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80063f4:	e1c0      	b.n	8006778 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d003      	beq.n	800640a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2205      	movs	r2, #5
 8006406:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	887a      	ldrh	r2, [r7, #2]
 800641a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	887a      	ldrh	r2, [r7, #2]
 8006422:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	887a      	ldrh	r2, [r7, #2]
 8006430:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	887a      	ldrh	r2, [r7, #2]
 8006436:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800644c:	d802      	bhi.n	8006454 <HAL_SPI_TransmitReceive+0xe6>
 800644e:	8a3b      	ldrh	r3, [r7, #16]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d908      	bls.n	8006466 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006462:	605a      	str	r2, [r3, #4]
 8006464:	e007      	b.n	8006476 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006474:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d007      	beq.n	8006494 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006492:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800649c:	d97c      	bls.n	8006598 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x13e>
 80064a6:	8a7b      	ldrh	r3, [r7, #18]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d169      	bne.n	8006580 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	881a      	ldrh	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	1c9a      	adds	r2, r3, #2
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064d0:	e056      	b.n	8006580 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d11b      	bne.n	8006518 <HAL_SPI_TransmitReceive+0x1aa>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d016      	beq.n	8006518 <HAL_SPI_TransmitReceive+0x1aa>
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d113      	bne.n	8006518 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	881a      	ldrh	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	1c9a      	adds	r2, r3, #2
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b01      	cmp	r3, #1
 8006524:	d11c      	bne.n	8006560 <HAL_SPI_TransmitReceive+0x1f2>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d016      	beq.n	8006560 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	b292      	uxth	r2, r2
 800653e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	1c9a      	adds	r2, r3, #2
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800655c:	2301      	movs	r3, #1
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006560:	f7fc feda 	bl	8003318 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800656c:	429a      	cmp	r2, r3
 800656e:	d807      	bhi.n	8006580 <HAL_SPI_TransmitReceive+0x212>
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d003      	beq.n	8006580 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800657e:	e0fb      	b.n	8006778 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006584:	b29b      	uxth	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1a3      	bne.n	80064d2 <HAL_SPI_TransmitReceive+0x164>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d19d      	bne.n	80064d2 <HAL_SPI_TransmitReceive+0x164>
 8006596:	e0df      	b.n	8006758 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0x23a>
 80065a0:	8a7b      	ldrh	r3, [r7, #18]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	f040 80cb 	bne.w	800673e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d912      	bls.n	80065d8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	881a      	ldrh	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	1c9a      	adds	r2, r3, #2
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b02      	subs	r3, #2
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d6:	e0b2      	b.n	800673e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065fe:	e09e      	b.n	800673e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b02      	cmp	r3, #2
 800660c:	d134      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x30a>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006612:	b29b      	uxth	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d02f      	beq.n	8006678 <HAL_SPI_TransmitReceive+0x30a>
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	2b01      	cmp	r3, #1
 800661c:	d12c      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b01      	cmp	r3, #1
 8006626:	d912      	bls.n	800664e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	881a      	ldrh	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b02      	subs	r3, #2
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800664c:	e012      	b.n	8006674 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	7812      	ldrb	r2, [r2, #0]
 800665a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b01      	cmp	r3, #1
 8006684:	d148      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x3aa>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d042      	beq.n	8006718 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b01      	cmp	r3, #1
 800669c:	d923      	bls.n	80066e6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	b292      	uxth	r2, r2
 80066aa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	1c9a      	adds	r2, r3, #2
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b02      	subs	r3, #2
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d81f      	bhi.n	8006714 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066e2:	605a      	str	r2, [r3, #4]
 80066e4:	e016      	b.n	8006714 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f103 020c 	add.w	r2, r3, #12
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006714:	2301      	movs	r3, #1
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006718:	f7fc fdfe 	bl	8003318 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006724:	429a      	cmp	r2, r3
 8006726:	d803      	bhi.n	8006730 <HAL_SPI_TransmitReceive+0x3c2>
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d102      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x3c8>
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	2b00      	cmp	r3, #0
 8006734:	d103      	bne.n	800673e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800673c:	e01c      	b.n	8006778 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	f47f af5b 	bne.w	8006600 <HAL_SPI_TransmitReceive+0x292>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006750:	b29b      	uxth	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	f47f af54 	bne.w	8006600 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fa53 	bl	8006c08 <SPI_EndRxTxTransaction>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d006      	beq.n	8006776 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	661a      	str	r2, [r3, #96]	; 0x60
 8006774:	e000      	b.n	8006778 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006776:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800678c:	4618      	mov	r0, r3
 800678e:	3728      	adds	r7, #40	; 0x28
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	099b      	lsrs	r3, r3, #6
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10f      	bne.n	80067d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	099b      	lsrs	r3, r3, #6
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d004      	beq.n	80067d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
    return;
 80067d6:	e0d7      	b.n	8006988 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	085b      	lsrs	r3, r3, #1
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <HAL_SPI_IRQHandler+0x66>
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	4798      	blx	r3
    return;
 80067f8:	e0c6      	b.n	8006988 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10c      	bne.n	8006820 <HAL_SPI_IRQHandler+0x8c>
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	099b      	lsrs	r3, r3, #6
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	0a1b      	lsrs	r3, r3, #8
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80b4 	beq.w	8006988 <HAL_SPI_IRQHandler+0x1f4>
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80ad 	beq.w	8006988 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	099b      	lsrs	r3, r3, #6
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d023      	beq.n	8006882 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b03      	cmp	r3, #3
 8006844:	d011      	beq.n	800686a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684a:	f043 0204 	orr.w	r2, r3, #4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	e00b      	b.n	8006882 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800686a:	2300      	movs	r3, #0
 800686c:	613b      	str	r3, [r7, #16]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	693b      	ldr	r3, [r7, #16]
        return;
 8006880:	e082      	b.n	8006988 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d014      	beq.n	80068b8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006892:	f043 0201 	orr.w	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00c      	beq.n	80068de <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c8:	f043 0208 	orr.w	r2, r3, #8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80068d0:	2300      	movs	r3, #0
 80068d2:	60bb      	str	r3, [r7, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	60bb      	str	r3, [r7, #8]
 80068dc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d04f      	beq.n	8006986 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068f4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <HAL_SPI_IRQHandler+0x17e>
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d034      	beq.n	800697c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0203 	bic.w	r2, r2, #3
 8006920:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006926:	2b00      	cmp	r3, #0
 8006928:	d011      	beq.n	800694e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692e:	4a18      	ldr	r2, [pc, #96]	; (8006990 <HAL_SPI_IRQHandler+0x1fc>)
 8006930:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006936:	4618      	mov	r0, r3
 8006938:	f7fd fd80 	bl	800443c <HAL_DMA_Abort_IT>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006946:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	4a0d      	ldr	r2, [pc, #52]	; (8006990 <HAL_SPI_IRQHandler+0x1fc>)
 800695c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	4618      	mov	r0, r3
 8006964:	f7fd fd6a 	bl	800443c <HAL_DMA_Abort_IT>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006972:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800697a:	e003      	b.n	8006984 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f809 	bl	8006994 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006982:	e000      	b.n	8006986 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006984:	bf00      	nop
    return;
 8006986:	bf00      	nop
  }
}
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	080069a9 	.word	0x080069a9

08006994 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff ffe5 	bl	8006994 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	4613      	mov	r3, r2
 80069e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069e4:	f7fc fc98 	bl	8003318 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	4413      	add	r3, r2
 80069f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069f4:	f7fc fc90 	bl	8003318 <HAL_GetTick>
 80069f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069fa:	4b39      	ldr	r3, [pc, #228]	; (8006ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	015b      	lsls	r3, r3, #5
 8006a00:	0d1b      	lsrs	r3, r3, #20
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	fb02 f303 	mul.w	r3, r2, r3
 8006a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a0a:	e054      	b.n	8006ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d050      	beq.n	8006ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a14:	f7fc fc80 	bl	8003318 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d902      	bls.n	8006a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d13d      	bne.n	8006aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a42:	d111      	bne.n	8006a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4c:	d004      	beq.n	8006a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a56:	d107      	bne.n	8006a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a70:	d10f      	bne.n	8006a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e017      	b.n	8006ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d19b      	bne.n	8006a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3720      	adds	r7, #32
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	200000b0 	.word	0x200000b0

08006ae4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006af2:	f7fc fc11 	bl	8003318 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	4413      	add	r3, r2
 8006b00:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b02:	f7fc fc09 	bl	8003318 <HAL_GetTick>
 8006b06:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b08:	4b3e      	ldr	r3, [pc, #248]	; (8006c04 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	00da      	lsls	r2, r3, #3
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	0d1b      	lsrs	r3, r3, #20
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	fb02 f303 	mul.w	r3, r2, r3
 8006b1e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b20:	e062      	b.n	8006be8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b28:	d109      	bne.n	8006b3e <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d106      	bne.n	8006b3e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006b3c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d050      	beq.n	8006be8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b46:	f7fc fbe7 	bl	8003318 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d902      	bls.n	8006b5c <SPI_WaitFifoStateUntilTimeout+0x78>
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d13d      	bne.n	8006bd8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b74:	d111      	bne.n	8006b9a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b7e:	d004      	beq.n	8006b8a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b88:	d107      	bne.n	8006b9a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba2:	d10f      	bne.n	8006bc4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e010      	b.n	8006bfa <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d194      	bne.n	8006b22 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	200000b0 	.word	0x200000b0

08006c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff ff5f 	bl	8006ae4 <SPI_WaitFifoStateUntilTimeout>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c30:	f043 0220 	orr.w	r2, r3, #32
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e027      	b.n	8006c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	2180      	movs	r1, #128	; 0x80
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff fec4 	bl	80069d4 <SPI_WaitFlagStateUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c56:	f043 0220 	orr.w	r2, r3, #32
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e014      	b.n	8006c8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f7ff ff38 	bl	8006ae4 <SPI_WaitFifoStateUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7e:	f043 0220 	orr.w	r2, r3, #32
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e000      	b.n	8006c8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e049      	b.n	8006d3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fb ff34 	bl	8002b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f000 fdcc 	bl	8007870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d001      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e054      	b.n	8006e06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a26      	ldr	r2, [pc, #152]	; (8006e14 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d022      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0x80>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d86:	d01d      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0x80>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d018      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0x80>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a21      	ldr	r2, [pc, #132]	; (8006e1c <HAL_TIM_Base_Start_IT+0xd8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0x80>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1f      	ldr	r2, [pc, #124]	; (8006e20 <HAL_TIM_Base_Start_IT+0xdc>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00e      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0x80>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <HAL_TIM_Base_Start_IT+0xe0>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d009      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0x80>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <HAL_TIM_Base_Start_IT+0xe4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <HAL_TIM_Base_Start_IT+0x80>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <HAL_TIM_Base_Start_IT+0xe8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d115      	bne.n	8006df0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689a      	ldr	r2, [r3, #8]
 8006dca:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <HAL_TIM_Base_Start_IT+0xec>)
 8006dcc:	4013      	ands	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b06      	cmp	r3, #6
 8006dd4:	d015      	beq.n	8006e02 <HAL_TIM_Base_Start_IT+0xbe>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ddc:	d011      	beq.n	8006e02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0201 	orr.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dee:	e008      	b.n	8006e02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e000      	b.n	8006e04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40010000 	.word	0x40010000
 8006e18:	40000400 	.word	0x40000400
 8006e1c:	40000800 	.word	0x40000800
 8006e20:	40000c00 	.word	0x40000c00
 8006e24:	40010400 	.word	0x40010400
 8006e28:	40014000 	.word	0x40014000
 8006e2c:	40001800 	.word	0x40001800
 8006e30:	00010007 	.word	0x00010007

08006e34 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0201 	bic.w	r2, r2, #1
 8006e4a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6a1a      	ldr	r2, [r3, #32]
 8006e52:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10f      	bne.n	8006e7c <HAL_TIM_Base_Stop_IT+0x48>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6a1a      	ldr	r2, [r3, #32]
 8006e62:	f240 4344 	movw	r3, #1092	; 0x444
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <HAL_TIM_Base_Stop_IT+0x48>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0201 	bic.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e049      	b.n	8006f38 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d106      	bne.n	8006ebe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7fb fe93 	bl	8002be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	f000 fccd 	bl	8007870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d109      	bne.n	8006f64 <HAL_TIM_PWM_Start+0x24>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	bf14      	ite	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	2300      	moveq	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	e03c      	b.n	8006fde <HAL_TIM_PWM_Start+0x9e>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d109      	bne.n	8006f7e <HAL_TIM_PWM_Start+0x3e>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	bf14      	ite	ne
 8006f76:	2301      	movne	r3, #1
 8006f78:	2300      	moveq	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	e02f      	b.n	8006fde <HAL_TIM_PWM_Start+0x9e>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d109      	bne.n	8006f98 <HAL_TIM_PWM_Start+0x58>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	bf14      	ite	ne
 8006f90:	2301      	movne	r3, #1
 8006f92:	2300      	moveq	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	e022      	b.n	8006fde <HAL_TIM_PWM_Start+0x9e>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2b0c      	cmp	r3, #12
 8006f9c:	d109      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0x72>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	bf14      	ite	ne
 8006faa:	2301      	movne	r3, #1
 8006fac:	2300      	moveq	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	e015      	b.n	8006fde <HAL_TIM_PWM_Start+0x9e>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b10      	cmp	r3, #16
 8006fb6:	d109      	bne.n	8006fcc <HAL_TIM_PWM_Start+0x8c>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	bf14      	ite	ne
 8006fc4:	2301      	movne	r3, #1
 8006fc6:	2300      	moveq	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	e008      	b.n	8006fde <HAL_TIM_PWM_Start+0x9e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	bf14      	ite	ne
 8006fd8:	2301      	movne	r3, #1
 8006fda:	2300      	moveq	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e092      	b.n	800710c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d104      	bne.n	8006ff6 <HAL_TIM_PWM_Start+0xb6>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff4:	e023      	b.n	800703e <HAL_TIM_PWM_Start+0xfe>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d104      	bne.n	8007006 <HAL_TIM_PWM_Start+0xc6>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007004:	e01b      	b.n	800703e <HAL_TIM_PWM_Start+0xfe>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d104      	bne.n	8007016 <HAL_TIM_PWM_Start+0xd6>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007014:	e013      	b.n	800703e <HAL_TIM_PWM_Start+0xfe>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b0c      	cmp	r3, #12
 800701a:	d104      	bne.n	8007026 <HAL_TIM_PWM_Start+0xe6>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007024:	e00b      	b.n	800703e <HAL_TIM_PWM_Start+0xfe>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b10      	cmp	r3, #16
 800702a:	d104      	bne.n	8007036 <HAL_TIM_PWM_Start+0xf6>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007034:	e003      	b.n	800703e <HAL_TIM_PWM_Start+0xfe>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2201      	movs	r2, #1
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 ffaa 	bl	8007fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a30      	ldr	r2, [pc, #192]	; (8007114 <HAL_TIM_PWM_Start+0x1d4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_TIM_PWM_Start+0x120>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a2f      	ldr	r2, [pc, #188]	; (8007118 <HAL_TIM_PWM_Start+0x1d8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d101      	bne.n	8007064 <HAL_TIM_PWM_Start+0x124>
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <HAL_TIM_PWM_Start+0x126>
 8007064:	2300      	movs	r3, #0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d007      	beq.n	800707a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a25      	ldr	r2, [pc, #148]	; (8007114 <HAL_TIM_PWM_Start+0x1d4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d022      	beq.n	80070ca <HAL_TIM_PWM_Start+0x18a>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708c:	d01d      	beq.n	80070ca <HAL_TIM_PWM_Start+0x18a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a22      	ldr	r2, [pc, #136]	; (800711c <HAL_TIM_PWM_Start+0x1dc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d018      	beq.n	80070ca <HAL_TIM_PWM_Start+0x18a>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a20      	ldr	r2, [pc, #128]	; (8007120 <HAL_TIM_PWM_Start+0x1e0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d013      	beq.n	80070ca <HAL_TIM_PWM_Start+0x18a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1f      	ldr	r2, [pc, #124]	; (8007124 <HAL_TIM_PWM_Start+0x1e4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00e      	beq.n	80070ca <HAL_TIM_PWM_Start+0x18a>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a19      	ldr	r2, [pc, #100]	; (8007118 <HAL_TIM_PWM_Start+0x1d8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d009      	beq.n	80070ca <HAL_TIM_PWM_Start+0x18a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <HAL_TIM_PWM_Start+0x1e8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d004      	beq.n	80070ca <HAL_TIM_PWM_Start+0x18a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a19      	ldr	r2, [pc, #100]	; (800712c <HAL_TIM_PWM_Start+0x1ec>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d115      	bne.n	80070f6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	4b17      	ldr	r3, [pc, #92]	; (8007130 <HAL_TIM_PWM_Start+0x1f0>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b06      	cmp	r3, #6
 80070da:	d015      	beq.n	8007108 <HAL_TIM_PWM_Start+0x1c8>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e2:	d011      	beq.n	8007108 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f4:	e008      	b.n	8007108 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0201 	orr.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	e000      	b.n	800710a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007108:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	40010000 	.word	0x40010000
 8007118:	40010400 	.word	0x40010400
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40000c00 	.word	0x40000c00
 8007128:	40014000 	.word	0x40014000
 800712c:	40001800 	.word	0x40001800
 8007130:	00010007 	.word	0x00010007

08007134 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 ff2a 	bl	8007fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a36      	ldr	r2, [pc, #216]	; (800722c <HAL_TIM_PWM_Stop+0xf8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_TIM_PWM_Stop+0x2c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a35      	ldr	r2, [pc, #212]	; (8007230 <HAL_TIM_PWM_Stop+0xfc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <HAL_TIM_PWM_Stop+0x30>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <HAL_TIM_PWM_Stop+0x32>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d017      	beq.n	800719a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6a1a      	ldr	r2, [r3, #32]
 8007170:	f241 1311 	movw	r3, #4369	; 0x1111
 8007174:	4013      	ands	r3, r2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10f      	bne.n	800719a <HAL_TIM_PWM_Stop+0x66>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6a1a      	ldr	r2, [r3, #32]
 8007180:	f240 4344 	movw	r3, #1092	; 0x444
 8007184:	4013      	ands	r3, r2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d107      	bne.n	800719a <HAL_TIM_PWM_Stop+0x66>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007198:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6a1a      	ldr	r2, [r3, #32]
 80071a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80071a4:	4013      	ands	r3, r2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10f      	bne.n	80071ca <HAL_TIM_PWM_Stop+0x96>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6a1a      	ldr	r2, [r3, #32]
 80071b0:	f240 4344 	movw	r3, #1092	; 0x444
 80071b4:	4013      	ands	r3, r2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d107      	bne.n	80071ca <HAL_TIM_PWM_Stop+0x96>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0201 	bic.w	r2, r2, #1
 80071c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <HAL_TIM_PWM_Stop+0xa6>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d8:	e023      	b.n	8007222 <HAL_TIM_PWM_Stop+0xee>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d104      	bne.n	80071ea <HAL_TIM_PWM_Stop+0xb6>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e8:	e01b      	b.n	8007222 <HAL_TIM_PWM_Stop+0xee>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d104      	bne.n	80071fa <HAL_TIM_PWM_Stop+0xc6>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f8:	e013      	b.n	8007222 <HAL_TIM_PWM_Stop+0xee>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b0c      	cmp	r3, #12
 80071fe:	d104      	bne.n	800720a <HAL_TIM_PWM_Stop+0xd6>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007208:	e00b      	b.n	8007222 <HAL_TIM_PWM_Stop+0xee>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b10      	cmp	r3, #16
 800720e:	d104      	bne.n	800721a <HAL_TIM_PWM_Stop+0xe6>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007218:	e003      	b.n	8007222 <HAL_TIM_PWM_Stop+0xee>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	40010000 	.word	0x40010000
 8007230:	40010400 	.word	0x40010400

08007234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b02      	cmp	r3, #2
 8007248:	d122      	bne.n	8007290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d11b      	bne.n	8007290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0202 	mvn.w	r2, #2
 8007260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fadc 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 800727c:	e005      	b.n	800728a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 face 	bl	8007820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fadf 	bl	8007848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b04      	cmp	r3, #4
 800729c:	d122      	bne.n	80072e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d11b      	bne.n	80072e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0204 	mvn.w	r2, #4
 80072b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2202      	movs	r2, #2
 80072ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fab2 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 80072d0:	e005      	b.n	80072de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 faa4 	bl	8007820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fab5 	bl	8007848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b08      	cmp	r3, #8
 80072f0:	d122      	bne.n	8007338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d11b      	bne.n	8007338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0208 	mvn.w	r2, #8
 8007308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2204      	movs	r2, #4
 800730e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa88 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 8007324:	e005      	b.n	8007332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa7a 	bl	8007820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fa8b 	bl	8007848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b10      	cmp	r3, #16
 8007344:	d122      	bne.n	800738c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b10      	cmp	r3, #16
 8007352:	d11b      	bne.n	800738c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0210 	mvn.w	r2, #16
 800735c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2208      	movs	r2, #8
 8007362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa5e 	bl	8007834 <HAL_TIM_IC_CaptureCallback>
 8007378:	e005      	b.n	8007386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa50 	bl	8007820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa61 	bl	8007848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b01      	cmp	r3, #1
 8007398:	d10e      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0201 	mvn.w	r2, #1
 80073b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7fb fcce 	bl	8002d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c2:	2b80      	cmp	r3, #128	; 0x80
 80073c4:	d10e      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d0:	2b80      	cmp	r3, #128	; 0x80
 80073d2:	d107      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fe9c 	bl	800811c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f2:	d10e      	bne.n	8007412 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fe:	2b80      	cmp	r3, #128	; 0x80
 8007400:	d107      	bne.n	8007412 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800740a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fe8f 	bl	8008130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	d10e      	bne.n	800743e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	d107      	bne.n	800743e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fa0f 	bl	800785c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b20      	cmp	r3, #32
 800744a:	d10e      	bne.n	800746a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b20      	cmp	r3, #32
 8007458:	d107      	bne.n	800746a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f06f 0220 	mvn.w	r2, #32
 8007462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fe4f 	bl	8008108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800748a:	2302      	movs	r3, #2
 800748c:	e0fd      	b.n	800768a <HAL_TIM_PWM_ConfigChannel+0x216>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b14      	cmp	r3, #20
 800749a:	f200 80f0 	bhi.w	800767e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800749e:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074f9 	.word	0x080074f9
 80074a8:	0800767f 	.word	0x0800767f
 80074ac:	0800767f 	.word	0x0800767f
 80074b0:	0800767f 	.word	0x0800767f
 80074b4:	08007539 	.word	0x08007539
 80074b8:	0800767f 	.word	0x0800767f
 80074bc:	0800767f 	.word	0x0800767f
 80074c0:	0800767f 	.word	0x0800767f
 80074c4:	0800757b 	.word	0x0800757b
 80074c8:	0800767f 	.word	0x0800767f
 80074cc:	0800767f 	.word	0x0800767f
 80074d0:	0800767f 	.word	0x0800767f
 80074d4:	080075bb 	.word	0x080075bb
 80074d8:	0800767f 	.word	0x0800767f
 80074dc:	0800767f 	.word	0x0800767f
 80074e0:	0800767f 	.word	0x0800767f
 80074e4:	080075fd 	.word	0x080075fd
 80074e8:	0800767f 	.word	0x0800767f
 80074ec:	0800767f 	.word	0x0800767f
 80074f0:	0800767f 	.word	0x0800767f
 80074f4:	0800763d 	.word	0x0800763d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fa56 	bl	80079b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0208 	orr.w	r2, r2, #8
 8007512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0204 	bic.w	r2, r2, #4
 8007522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6999      	ldr	r1, [r3, #24]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	619a      	str	r2, [r3, #24]
      break;
 8007536:	e0a3      	b.n	8007680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	4618      	mov	r0, r3
 8007540:	f000 faa8 	bl	8007a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6999      	ldr	r1, [r3, #24]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	021a      	lsls	r2, r3, #8
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	619a      	str	r2, [r3, #24]
      break;
 8007578:	e082      	b.n	8007680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	4618      	mov	r0, r3
 8007582:	f000 faff 	bl	8007b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69da      	ldr	r2, [r3, #28]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0208 	orr.w	r2, r2, #8
 8007594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69da      	ldr	r2, [r3, #28]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0204 	bic.w	r2, r2, #4
 80075a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69d9      	ldr	r1, [r3, #28]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	61da      	str	r2, [r3, #28]
      break;
 80075b8:	e062      	b.n	8007680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fb55 	bl	8007c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69d9      	ldr	r1, [r3, #28]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	021a      	lsls	r2, r3, #8
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	61da      	str	r2, [r3, #28]
      break;
 80075fa:	e041      	b.n	8007680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fb8c 	bl	8007d20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0208 	orr.w	r2, r2, #8
 8007616:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0204 	bic.w	r2, r2, #4
 8007626:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800763a:	e021      	b.n	8007680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fbbe 	bl	8007dc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007656:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007666:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	021a      	lsls	r2, r3, #8
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800767c:	e000      	b.n	8007680 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800767e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop

08007694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_TIM_ConfigClockSource+0x18>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e0b3      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x180>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4b55      	ldr	r3, [pc, #340]	; (800781c <HAL_TIM_ConfigClockSource+0x188>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076e4:	d03e      	beq.n	8007764 <HAL_TIM_ConfigClockSource+0xd0>
 80076e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ea:	f200 8087 	bhi.w	80077fc <HAL_TIM_ConfigClockSource+0x168>
 80076ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f2:	f000 8085 	beq.w	8007800 <HAL_TIM_ConfigClockSource+0x16c>
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fa:	d87f      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x168>
 80076fc:	2b70      	cmp	r3, #112	; 0x70
 80076fe:	d01a      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0xa2>
 8007700:	2b70      	cmp	r3, #112	; 0x70
 8007702:	d87b      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x168>
 8007704:	2b60      	cmp	r3, #96	; 0x60
 8007706:	d050      	beq.n	80077aa <HAL_TIM_ConfigClockSource+0x116>
 8007708:	2b60      	cmp	r3, #96	; 0x60
 800770a:	d877      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x168>
 800770c:	2b50      	cmp	r3, #80	; 0x50
 800770e:	d03c      	beq.n	800778a <HAL_TIM_ConfigClockSource+0xf6>
 8007710:	2b50      	cmp	r3, #80	; 0x50
 8007712:	d873      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x168>
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	d058      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x136>
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	d86f      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x168>
 800771c:	2b30      	cmp	r3, #48	; 0x30
 800771e:	d064      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x156>
 8007720:	2b30      	cmp	r3, #48	; 0x30
 8007722:	d86b      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x168>
 8007724:	2b20      	cmp	r3, #32
 8007726:	d060      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x156>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d867      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x168>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d05c      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x156>
 8007730:	2b10      	cmp	r3, #16
 8007732:	d05a      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007734:	e062      	b.n	80077fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6899      	ldr	r1, [r3, #8]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f000 fc0b 	bl	8007f60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007758:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	609a      	str	r2, [r3, #8]
      break;
 8007762:	e04e      	b.n	8007802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	6899      	ldr	r1, [r3, #8]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f000 fbf4 	bl	8007f60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007786:	609a      	str	r2, [r3, #8]
      break;
 8007788:	e03b      	b.n	8007802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	6859      	ldr	r1, [r3, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	461a      	mov	r2, r3
 8007798:	f000 fb68 	bl	8007e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2150      	movs	r1, #80	; 0x50
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fbc1 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 80077a8:	e02b      	b.n	8007802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	6859      	ldr	r1, [r3, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f000 fb87 	bl	8007eca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2160      	movs	r1, #96	; 0x60
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fbb1 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 80077c8:	e01b      	b.n	8007802 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6859      	ldr	r1, [r3, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f000 fb48 	bl	8007e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2140      	movs	r1, #64	; 0x40
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fba1 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 80077e8:	e00b      	b.n	8007802 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f000 fb98 	bl	8007f2a <TIM_ITRx_SetConfig>
        break;
 80077fa:	e002      	b.n	8007802 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80077fc:	bf00      	nop
 80077fe:	e000      	b.n	8007802 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007800:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	fffeff88 	.word	0xfffeff88

08007820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a40      	ldr	r2, [pc, #256]	; (8007984 <TIM_Base_SetConfig+0x114>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d013      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788e:	d00f      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a3d      	ldr	r2, [pc, #244]	; (8007988 <TIM_Base_SetConfig+0x118>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00b      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a3c      	ldr	r2, [pc, #240]	; (800798c <TIM_Base_SetConfig+0x11c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d007      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a3b      	ldr	r2, [pc, #236]	; (8007990 <TIM_Base_SetConfig+0x120>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d003      	beq.n	80078b0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a3a      	ldr	r2, [pc, #232]	; (8007994 <TIM_Base_SetConfig+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d108      	bne.n	80078c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2f      	ldr	r2, [pc, #188]	; (8007984 <TIM_Base_SetConfig+0x114>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d02b      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d0:	d027      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2c      	ldr	r2, [pc, #176]	; (8007988 <TIM_Base_SetConfig+0x118>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d023      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2b      	ldr	r2, [pc, #172]	; (800798c <TIM_Base_SetConfig+0x11c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01f      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2a      	ldr	r2, [pc, #168]	; (8007990 <TIM_Base_SetConfig+0x120>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d01b      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a29      	ldr	r2, [pc, #164]	; (8007994 <TIM_Base_SetConfig+0x124>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d017      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a28      	ldr	r2, [pc, #160]	; (8007998 <TIM_Base_SetConfig+0x128>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d013      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a27      	ldr	r2, [pc, #156]	; (800799c <TIM_Base_SetConfig+0x12c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00f      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a26      	ldr	r2, [pc, #152]	; (80079a0 <TIM_Base_SetConfig+0x130>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00b      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a25      	ldr	r2, [pc, #148]	; (80079a4 <TIM_Base_SetConfig+0x134>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d007      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a24      	ldr	r2, [pc, #144]	; (80079a8 <TIM_Base_SetConfig+0x138>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d003      	beq.n	8007922 <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a23      	ldr	r2, [pc, #140]	; (80079ac <TIM_Base_SetConfig+0x13c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d108      	bne.n	8007934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <TIM_Base_SetConfig+0x114>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_Base_SetConfig+0xf8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <TIM_Base_SetConfig+0x124>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40010000 	.word	0x40010000
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40010400 	.word	0x40010400
 8007998:	40014000 	.word	0x40014000
 800799c:	40014400 	.word	0x40014400
 80079a0:	40014800 	.word	0x40014800
 80079a4:	40001800 	.word	0x40001800
 80079a8:	40001c00 	.word	0x40001c00
 80079ac:	40002000 	.word	0x40002000

080079b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	f023 0201 	bic.w	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4b2b      	ldr	r3, [pc, #172]	; (8007a88 <TIM_OC1_SetConfig+0xd8>)
 80079dc:	4013      	ands	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0303 	bic.w	r3, r3, #3
 80079e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f023 0302 	bic.w	r3, r3, #2
 80079f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a21      	ldr	r2, [pc, #132]	; (8007a8c <TIM_OC1_SetConfig+0xdc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC1_SetConfig+0x64>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a20      	ldr	r2, [pc, #128]	; (8007a90 <TIM_OC1_SetConfig+0xe0>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d10c      	bne.n	8007a2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f023 0308 	bic.w	r3, r3, #8
 8007a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f023 0304 	bic.w	r3, r3, #4
 8007a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a16      	ldr	r2, [pc, #88]	; (8007a8c <TIM_OC1_SetConfig+0xdc>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d003      	beq.n	8007a3e <TIM_OC1_SetConfig+0x8e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a15      	ldr	r2, [pc, #84]	; (8007a90 <TIM_OC1_SetConfig+0xe0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d111      	bne.n	8007a62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	621a      	str	r2, [r3, #32]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	fffeff8f 	.word	0xfffeff8f
 8007a8c:	40010000 	.word	0x40010000
 8007a90:	40010400 	.word	0x40010400

08007a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	f023 0210 	bic.w	r2, r3, #16
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4b2e      	ldr	r3, [pc, #184]	; (8007b78 <TIM_OC2_SetConfig+0xe4>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 0320 	bic.w	r3, r3, #32
 8007ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a23      	ldr	r2, [pc, #140]	; (8007b7c <TIM_OC2_SetConfig+0xe8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <TIM_OC2_SetConfig+0x68>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a22      	ldr	r2, [pc, #136]	; (8007b80 <TIM_OC2_SetConfig+0xec>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d10d      	bne.n	8007b18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a18      	ldr	r2, [pc, #96]	; (8007b7c <TIM_OC2_SetConfig+0xe8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d003      	beq.n	8007b28 <TIM_OC2_SetConfig+0x94>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a17      	ldr	r2, [pc, #92]	; (8007b80 <TIM_OC2_SetConfig+0xec>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d113      	bne.n	8007b50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	feff8fff 	.word	0xfeff8fff
 8007b7c:	40010000 	.word	0x40010000
 8007b80:	40010400 	.word	0x40010400

08007b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4b2d      	ldr	r3, [pc, #180]	; (8007c64 <TIM_OC3_SetConfig+0xe0>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0303 	bic.w	r3, r3, #3
 8007bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a22      	ldr	r2, [pc, #136]	; (8007c68 <TIM_OC3_SetConfig+0xe4>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d003      	beq.n	8007bea <TIM_OC3_SetConfig+0x66>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a21      	ldr	r2, [pc, #132]	; (8007c6c <TIM_OC3_SetConfig+0xe8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d10d      	bne.n	8007c06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	021b      	lsls	r3, r3, #8
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a17      	ldr	r2, [pc, #92]	; (8007c68 <TIM_OC3_SetConfig+0xe4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d003      	beq.n	8007c16 <TIM_OC3_SetConfig+0x92>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a16      	ldr	r2, [pc, #88]	; (8007c6c <TIM_OC3_SetConfig+0xe8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d113      	bne.n	8007c3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	011b      	lsls	r3, r3, #4
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	621a      	str	r2, [r3, #32]
}
 8007c58:	bf00      	nop
 8007c5a:	371c      	adds	r7, #28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	fffeff8f 	.word	0xfffeff8f
 8007c68:	40010000 	.word	0x40010000
 8007c6c:	40010400 	.word	0x40010400

08007c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	4b1e      	ldr	r3, [pc, #120]	; (8007d14 <TIM_OC4_SetConfig+0xa4>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	031b      	lsls	r3, r3, #12
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a13      	ldr	r2, [pc, #76]	; (8007d18 <TIM_OC4_SetConfig+0xa8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d003      	beq.n	8007cd8 <TIM_OC4_SetConfig+0x68>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a12      	ldr	r2, [pc, #72]	; (8007d1c <TIM_OC4_SetConfig+0xac>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d109      	bne.n	8007cec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	019b      	lsls	r3, r3, #6
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	621a      	str	r2, [r3, #32]
}
 8007d06:	bf00      	nop
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	feff8fff 	.word	0xfeff8fff
 8007d18:	40010000 	.word	0x40010000
 8007d1c:	40010400 	.word	0x40010400

08007d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <TIM_OC5_SetConfig+0x98>)
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a12      	ldr	r2, [pc, #72]	; (8007dbc <TIM_OC5_SetConfig+0x9c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d003      	beq.n	8007d7e <TIM_OC5_SetConfig+0x5e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a11      	ldr	r2, [pc, #68]	; (8007dc0 <TIM_OC5_SetConfig+0xa0>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d109      	bne.n	8007d92 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	621a      	str	r2, [r3, #32]
}
 8007dac:	bf00      	nop
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	fffeff8f 	.word	0xfffeff8f
 8007dbc:	40010000 	.word	0x40010000
 8007dc0:	40010400 	.word	0x40010400

08007dc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	4b1c      	ldr	r3, [pc, #112]	; (8007e60 <TIM_OC6_SetConfig+0x9c>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	051b      	lsls	r3, r3, #20
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a13      	ldr	r2, [pc, #76]	; (8007e64 <TIM_OC6_SetConfig+0xa0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <TIM_OC6_SetConfig+0x60>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a12      	ldr	r2, [pc, #72]	; (8007e68 <TIM_OC6_SetConfig+0xa4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d109      	bne.n	8007e38 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	029b      	lsls	r3, r3, #10
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	621a      	str	r2, [r3, #32]
}
 8007e52:	bf00      	nop
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	feff8fff 	.word	0xfeff8fff
 8007e64:	40010000 	.word	0x40010000
 8007e68:	40010400 	.word	0x40010400

08007e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f023 0201 	bic.w	r2, r3, #1
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f023 030a 	bic.w	r3, r3, #10
 8007ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	621a      	str	r2, [r3, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b087      	sub	sp, #28
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f023 0210 	bic.w	r2, r3, #16
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	031b      	lsls	r3, r3, #12
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	621a      	str	r2, [r3, #32]
}
 8007f1e:	bf00      	nop
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f043 0307 	orr.w	r3, r3, #7
 8007f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	609a      	str	r2, [r3, #8]
}
 8007f54:	bf00      	nop
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b087      	sub	sp, #28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	021a      	lsls	r2, r3, #8
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	609a      	str	r2, [r3, #8]
}
 8007f94:	bf00      	nop
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f003 031f 	and.w	r3, r3, #31
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a1a      	ldr	r2, [r3, #32]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a1a      	ldr	r2, [r3, #32]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	621a      	str	r2, [r3, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
	...

08007fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008000:	2302      	movs	r3, #2
 8008002:	e06d      	b.n	80080e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a30      	ldr	r2, [pc, #192]	; (80080ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d004      	beq.n	8008038 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a2f      	ldr	r2, [pc, #188]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d108      	bne.n	800804a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800803e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008050:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a20      	ldr	r2, [pc, #128]	; (80080ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d022      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008076:	d01d      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d018      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a1c      	ldr	r2, [pc, #112]	; (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d013      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a1a      	ldr	r2, [pc, #104]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00e      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a15      	ldr	r2, [pc, #84]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d009      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a16      	ldr	r2, [pc, #88]	; (8008100 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d004      	beq.n	80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a15      	ldr	r2, [pc, #84]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d10c      	bne.n	80080ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	40010000 	.word	0x40010000
 80080f0:	40010400 	.word	0x40010400
 80080f4:	40000400 	.word	0x40000400
 80080f8:	40000800 	.word	0x40000800
 80080fc:	40000c00 	.word	0x40000c00
 8008100:	40014000 	.word	0x40014000
 8008104:	40001800 	.word	0x40001800

08008108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e040      	b.n	80081d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800815a:	2b00      	cmp	r3, #0
 800815c:	d106      	bne.n	800816c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7fa ff08 	bl	8002f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2224      	movs	r2, #36	; 0x24
 8008170:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0201 	bic.w	r2, r2, #1
 8008180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 faf0 	bl	8008768 <UART_SetConfig>
 8008188:	4603      	mov	r3, r0
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e022      	b.n	80081d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fd46 	bl	8008c2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fdcd 	bl	8008d70 <UART_CheckIdleState>
 80081d6:	4603      	mov	r3, r0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	4613      	mov	r3, r2
 80081ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	d145      	bne.n	8008282 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <HAL_UART_Transmit_IT+0x22>
 80081fc:	88fb      	ldrh	r3, [r7, #6]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e03e      	b.n	8008284 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_UART_Transmit_IT+0x34>
 8008210:	2302      	movs	r3, #2
 8008212:	e037      	b.n	8008284 <HAL_UART_Transmit_IT+0xa4>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	88fa      	ldrh	r2, [r7, #6]
 8008226:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	88fa      	ldrh	r2, [r7, #6]
 800822e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2221      	movs	r2, #33	; 0x21
 8008244:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824e:	d107      	bne.n	8008260 <HAL_UART_Transmit_IT+0x80>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d103      	bne.n	8008260 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4a0d      	ldr	r2, [pc, #52]	; (8008290 <HAL_UART_Transmit_IT+0xb0>)
 800825c:	669a      	str	r2, [r3, #104]	; 0x68
 800825e:	e002      	b.n	8008266 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4a0c      	ldr	r2, [pc, #48]	; (8008294 <HAL_UART_Transmit_IT+0xb4>)
 8008264:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800827c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	e000      	b.n	8008284 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8008282:	2302      	movs	r3, #2
  }
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	08009109 	.word	0x08009109
 8008294:	08009097 	.word	0x08009097

08008298 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d12c      	bne.n	8008308 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <HAL_UART_Receive_IT+0x22>
 80082b4:	88fb      	ldrh	r3, [r7, #6]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e025      	b.n	800830a <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_UART_Receive_IT+0x34>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e01e      	b.n	800830a <HAL_UART_Receive_IT+0x72>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d007      	beq.n	80082f8 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80082f6:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	461a      	mov	r2, r3
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 fdfc 	bl	8008efc <UART_Start_Receive_IT>
 8008304:	4603      	mov	r3, r0
 8008306:	e000      	b.n	800830a <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008308:	2302      	movs	r3, #2
  }
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008334:	69fa      	ldr	r2, [r7, #28]
 8008336:	f640 030f 	movw	r3, #2063	; 0x80f
 800833a:	4013      	ands	r3, r2
 800833c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d113      	bne.n	800836c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00e      	beq.n	800836c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	d009      	beq.n	800836c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 81cc 	beq.w	80086fa <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
      }
      return;
 800836a:	e1c6      	b.n	80086fa <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 80e3 	beq.w	800853a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d105      	bne.n	800838a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	4ba5      	ldr	r3, [pc, #660]	; (8008618 <HAL_UART_IRQHandler+0x304>)
 8008382:	4013      	ands	r3, r2
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80d8 	beq.w	800853a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b00      	cmp	r3, #0
 8008392:	d010      	beq.n	80083b6 <HAL_UART_IRQHandler+0xa2>
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00b      	beq.n	80083b6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2201      	movs	r2, #1
 80083a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083ac:	f043 0201 	orr.w	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d010      	beq.n	80083e2 <HAL_UART_IRQHandler+0xce>
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2202      	movs	r2, #2
 80083d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083d8:	f043 0204 	orr.w	r2, r3, #4
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d010      	beq.n	800840e <HAL_UART_IRQHandler+0xfa>
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00b      	beq.n	800840e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2204      	movs	r2, #4
 80083fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008404:	f043 0202 	orr.w	r2, r3, #2
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b00      	cmp	r3, #0
 8008416:	d015      	beq.n	8008444 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2208      	movs	r2, #8
 8008432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800843a:	f043 0208 	orr.w	r2, r3, #8
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800844a:	2b00      	cmp	r3, #0
 800844c:	d011      	beq.n	8008472 <HAL_UART_IRQHandler+0x15e>
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00c      	beq.n	8008472 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008468:	f043 0220 	orr.w	r2, r3, #32
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8140 	beq.w	80086fe <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00c      	beq.n	80084a2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b4:	2b40      	cmp	r3, #64	; 0x40
 80084b6:	d004      	beq.n	80084c2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d031      	beq.n	8008526 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fda2 	bl	800900c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	d123      	bne.n	800851e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d013      	beq.n	8008516 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f2:	4a4a      	ldr	r2, [pc, #296]	; (800861c <HAL_UART_IRQHandler+0x308>)
 80084f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fb ff9e 	bl	800443c <HAL_DMA_Abort_IT>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d017      	beq.n	8008536 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008514:	e00f      	b.n	8008536 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f906 	bl	8008728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800851c:	e00b      	b.n	8008536 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f902 	bl	8008728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008524:	e007      	b.n	8008536 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f8fe 	bl	8008728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008534:	e0e3      	b.n	80086fe <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008536:	bf00      	nop
    return;
 8008538:	e0e1      	b.n	80086fe <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853e:	2b01      	cmp	r3, #1
 8008540:	f040 80a7 	bne.w	8008692 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f003 0310 	and.w	r3, r3, #16
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 80a1 	beq.w	8008692 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	f003 0310 	and.w	r3, r3, #16
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 809b 	beq.w	8008692 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2210      	movs	r2, #16
 8008562:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856e:	2b40      	cmp	r3, #64	; 0x40
 8008570:	d156      	bne.n	8008620 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800857c:	893b      	ldrh	r3, [r7, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80bf 	beq.w	8008702 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800858a:	893a      	ldrh	r2, [r7, #8]
 800858c:	429a      	cmp	r2, r3
 800858e:	f080 80b8 	bcs.w	8008702 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	893a      	ldrh	r2, [r7, #8]
 8008596:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a4:	d02a      	beq.n	80085fc <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 0201 	bic.w	r2, r2, #1
 80085c4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689a      	ldr	r2, [r3, #8]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085d4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0210 	bic.w	r2, r2, #16
 80085f0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fb feb0 	bl	800435c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008608:	b29b      	uxth	r3, r3
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	b29b      	uxth	r3, r3
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f893 	bl	800873c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008616:	e074      	b.n	8008702 <HAL_UART_IRQHandler+0x3ee>
 8008618:	04000120 	.word	0x04000120
 800861c:	0800906b 	.word	0x0800906b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800862c:	b29b      	uxth	r3, r3
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008638:	b29b      	uxth	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d063      	beq.n	8008706 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800863e:	897b      	ldrh	r3, [r7, #10]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d060      	beq.n	8008706 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008652:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0201 	bic.w	r2, r2, #1
 8008662:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2220      	movs	r2, #32
 8008668:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 0210 	bic.w	r2, r2, #16
 8008684:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008686:	897b      	ldrh	r3, [r7, #10]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f856 	bl	800873c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008690:	e039      	b.n	8008706 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00d      	beq.n	80086b8 <HAL_UART_IRQHandler+0x3a4>
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d008      	beq.n	80086b8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f84f 	bl	8008754 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086b6:	e029      	b.n	800870c <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00d      	beq.n	80086de <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d008      	beq.n	80086de <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01a      	beq.n	800870a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	4798      	blx	r3
    }
    return;
 80086dc:	e015      	b.n	800870a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d011      	beq.n	800870c <HAL_UART_IRQHandler+0x3f8>
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00c      	beq.n	800870c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fd46 	bl	8009184 <UART_EndTransmit_IT>
    return;
 80086f8:	e008      	b.n	800870c <HAL_UART_IRQHandler+0x3f8>
      return;
 80086fa:	bf00      	nop
 80086fc:	e006      	b.n	800870c <HAL_UART_IRQHandler+0x3f8>
    return;
 80086fe:	bf00      	nop
 8008700:	e004      	b.n	800870c <HAL_UART_IRQHandler+0x3f8>
      return;
 8008702:	bf00      	nop
 8008704:	e002      	b.n	800870c <HAL_UART_IRQHandler+0x3f8>
      return;
 8008706:	bf00      	nop
 8008708:	e000      	b.n	800870c <HAL_UART_IRQHandler+0x3f8>
    return;
 800870a:	bf00      	nop
  }

}
 800870c:	3720      	adds	r7, #32
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop

08008714 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	431a      	orrs	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	4313      	orrs	r3, r2
 800878a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4ba7      	ldr	r3, [pc, #668]	; (8008a30 <UART_SetConfig+0x2c8>)
 8008794:	4013      	ands	r3, r2
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	6812      	ldr	r2, [r2, #0]
 800879a:	6979      	ldr	r1, [r7, #20]
 800879c:	430b      	orrs	r3, r1
 800879e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a95      	ldr	r2, [pc, #596]	; (8008a34 <UART_SetConfig+0x2cc>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d120      	bne.n	8008826 <UART_SetConfig+0xbe>
 80087e4:	4b94      	ldr	r3, [pc, #592]	; (8008a38 <UART_SetConfig+0x2d0>)
 80087e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d816      	bhi.n	8008820 <UART_SetConfig+0xb8>
 80087f2:	a201      	add	r2, pc, #4	; (adr r2, 80087f8 <UART_SetConfig+0x90>)
 80087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f8:	08008809 	.word	0x08008809
 80087fc:	08008815 	.word	0x08008815
 8008800:	0800880f 	.word	0x0800880f
 8008804:	0800881b 	.word	0x0800881b
 8008808:	2301      	movs	r3, #1
 800880a:	77fb      	strb	r3, [r7, #31]
 800880c:	e14f      	b.n	8008aae <UART_SetConfig+0x346>
 800880e:	2302      	movs	r3, #2
 8008810:	77fb      	strb	r3, [r7, #31]
 8008812:	e14c      	b.n	8008aae <UART_SetConfig+0x346>
 8008814:	2304      	movs	r3, #4
 8008816:	77fb      	strb	r3, [r7, #31]
 8008818:	e149      	b.n	8008aae <UART_SetConfig+0x346>
 800881a:	2308      	movs	r3, #8
 800881c:	77fb      	strb	r3, [r7, #31]
 800881e:	e146      	b.n	8008aae <UART_SetConfig+0x346>
 8008820:	2310      	movs	r3, #16
 8008822:	77fb      	strb	r3, [r7, #31]
 8008824:	e143      	b.n	8008aae <UART_SetConfig+0x346>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a84      	ldr	r2, [pc, #528]	; (8008a3c <UART_SetConfig+0x2d4>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d132      	bne.n	8008896 <UART_SetConfig+0x12e>
 8008830:	4b81      	ldr	r3, [pc, #516]	; (8008a38 <UART_SetConfig+0x2d0>)
 8008832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008836:	f003 030c 	and.w	r3, r3, #12
 800883a:	2b0c      	cmp	r3, #12
 800883c:	d828      	bhi.n	8008890 <UART_SetConfig+0x128>
 800883e:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <UART_SetConfig+0xdc>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	08008879 	.word	0x08008879
 8008848:	08008891 	.word	0x08008891
 800884c:	08008891 	.word	0x08008891
 8008850:	08008891 	.word	0x08008891
 8008854:	08008885 	.word	0x08008885
 8008858:	08008891 	.word	0x08008891
 800885c:	08008891 	.word	0x08008891
 8008860:	08008891 	.word	0x08008891
 8008864:	0800887f 	.word	0x0800887f
 8008868:	08008891 	.word	0x08008891
 800886c:	08008891 	.word	0x08008891
 8008870:	08008891 	.word	0x08008891
 8008874:	0800888b 	.word	0x0800888b
 8008878:	2300      	movs	r3, #0
 800887a:	77fb      	strb	r3, [r7, #31]
 800887c:	e117      	b.n	8008aae <UART_SetConfig+0x346>
 800887e:	2302      	movs	r3, #2
 8008880:	77fb      	strb	r3, [r7, #31]
 8008882:	e114      	b.n	8008aae <UART_SetConfig+0x346>
 8008884:	2304      	movs	r3, #4
 8008886:	77fb      	strb	r3, [r7, #31]
 8008888:	e111      	b.n	8008aae <UART_SetConfig+0x346>
 800888a:	2308      	movs	r3, #8
 800888c:	77fb      	strb	r3, [r7, #31]
 800888e:	e10e      	b.n	8008aae <UART_SetConfig+0x346>
 8008890:	2310      	movs	r3, #16
 8008892:	77fb      	strb	r3, [r7, #31]
 8008894:	e10b      	b.n	8008aae <UART_SetConfig+0x346>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a69      	ldr	r2, [pc, #420]	; (8008a40 <UART_SetConfig+0x2d8>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d120      	bne.n	80088e2 <UART_SetConfig+0x17a>
 80088a0:	4b65      	ldr	r3, [pc, #404]	; (8008a38 <UART_SetConfig+0x2d0>)
 80088a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088aa:	2b30      	cmp	r3, #48	; 0x30
 80088ac:	d013      	beq.n	80088d6 <UART_SetConfig+0x16e>
 80088ae:	2b30      	cmp	r3, #48	; 0x30
 80088b0:	d814      	bhi.n	80088dc <UART_SetConfig+0x174>
 80088b2:	2b20      	cmp	r3, #32
 80088b4:	d009      	beq.n	80088ca <UART_SetConfig+0x162>
 80088b6:	2b20      	cmp	r3, #32
 80088b8:	d810      	bhi.n	80088dc <UART_SetConfig+0x174>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <UART_SetConfig+0x15c>
 80088be:	2b10      	cmp	r3, #16
 80088c0:	d006      	beq.n	80088d0 <UART_SetConfig+0x168>
 80088c2:	e00b      	b.n	80088dc <UART_SetConfig+0x174>
 80088c4:	2300      	movs	r3, #0
 80088c6:	77fb      	strb	r3, [r7, #31]
 80088c8:	e0f1      	b.n	8008aae <UART_SetConfig+0x346>
 80088ca:	2302      	movs	r3, #2
 80088cc:	77fb      	strb	r3, [r7, #31]
 80088ce:	e0ee      	b.n	8008aae <UART_SetConfig+0x346>
 80088d0:	2304      	movs	r3, #4
 80088d2:	77fb      	strb	r3, [r7, #31]
 80088d4:	e0eb      	b.n	8008aae <UART_SetConfig+0x346>
 80088d6:	2308      	movs	r3, #8
 80088d8:	77fb      	strb	r3, [r7, #31]
 80088da:	e0e8      	b.n	8008aae <UART_SetConfig+0x346>
 80088dc:	2310      	movs	r3, #16
 80088de:	77fb      	strb	r3, [r7, #31]
 80088e0:	e0e5      	b.n	8008aae <UART_SetConfig+0x346>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a57      	ldr	r2, [pc, #348]	; (8008a44 <UART_SetConfig+0x2dc>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d120      	bne.n	800892e <UART_SetConfig+0x1c6>
 80088ec:	4b52      	ldr	r3, [pc, #328]	; (8008a38 <UART_SetConfig+0x2d0>)
 80088ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088f6:	2bc0      	cmp	r3, #192	; 0xc0
 80088f8:	d013      	beq.n	8008922 <UART_SetConfig+0x1ba>
 80088fa:	2bc0      	cmp	r3, #192	; 0xc0
 80088fc:	d814      	bhi.n	8008928 <UART_SetConfig+0x1c0>
 80088fe:	2b80      	cmp	r3, #128	; 0x80
 8008900:	d009      	beq.n	8008916 <UART_SetConfig+0x1ae>
 8008902:	2b80      	cmp	r3, #128	; 0x80
 8008904:	d810      	bhi.n	8008928 <UART_SetConfig+0x1c0>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <UART_SetConfig+0x1a8>
 800890a:	2b40      	cmp	r3, #64	; 0x40
 800890c:	d006      	beq.n	800891c <UART_SetConfig+0x1b4>
 800890e:	e00b      	b.n	8008928 <UART_SetConfig+0x1c0>
 8008910:	2300      	movs	r3, #0
 8008912:	77fb      	strb	r3, [r7, #31]
 8008914:	e0cb      	b.n	8008aae <UART_SetConfig+0x346>
 8008916:	2302      	movs	r3, #2
 8008918:	77fb      	strb	r3, [r7, #31]
 800891a:	e0c8      	b.n	8008aae <UART_SetConfig+0x346>
 800891c:	2304      	movs	r3, #4
 800891e:	77fb      	strb	r3, [r7, #31]
 8008920:	e0c5      	b.n	8008aae <UART_SetConfig+0x346>
 8008922:	2308      	movs	r3, #8
 8008924:	77fb      	strb	r3, [r7, #31]
 8008926:	e0c2      	b.n	8008aae <UART_SetConfig+0x346>
 8008928:	2310      	movs	r3, #16
 800892a:	77fb      	strb	r3, [r7, #31]
 800892c:	e0bf      	b.n	8008aae <UART_SetConfig+0x346>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a45      	ldr	r2, [pc, #276]	; (8008a48 <UART_SetConfig+0x2e0>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d125      	bne.n	8008984 <UART_SetConfig+0x21c>
 8008938:	4b3f      	ldr	r3, [pc, #252]	; (8008a38 <UART_SetConfig+0x2d0>)
 800893a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800893e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008946:	d017      	beq.n	8008978 <UART_SetConfig+0x210>
 8008948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800894c:	d817      	bhi.n	800897e <UART_SetConfig+0x216>
 800894e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008952:	d00b      	beq.n	800896c <UART_SetConfig+0x204>
 8008954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008958:	d811      	bhi.n	800897e <UART_SetConfig+0x216>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <UART_SetConfig+0x1fe>
 800895e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008962:	d006      	beq.n	8008972 <UART_SetConfig+0x20a>
 8008964:	e00b      	b.n	800897e <UART_SetConfig+0x216>
 8008966:	2300      	movs	r3, #0
 8008968:	77fb      	strb	r3, [r7, #31]
 800896a:	e0a0      	b.n	8008aae <UART_SetConfig+0x346>
 800896c:	2302      	movs	r3, #2
 800896e:	77fb      	strb	r3, [r7, #31]
 8008970:	e09d      	b.n	8008aae <UART_SetConfig+0x346>
 8008972:	2304      	movs	r3, #4
 8008974:	77fb      	strb	r3, [r7, #31]
 8008976:	e09a      	b.n	8008aae <UART_SetConfig+0x346>
 8008978:	2308      	movs	r3, #8
 800897a:	77fb      	strb	r3, [r7, #31]
 800897c:	e097      	b.n	8008aae <UART_SetConfig+0x346>
 800897e:	2310      	movs	r3, #16
 8008980:	77fb      	strb	r3, [r7, #31]
 8008982:	e094      	b.n	8008aae <UART_SetConfig+0x346>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a30      	ldr	r2, [pc, #192]	; (8008a4c <UART_SetConfig+0x2e4>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d125      	bne.n	80089da <UART_SetConfig+0x272>
 800898e:	4b2a      	ldr	r3, [pc, #168]	; (8008a38 <UART_SetConfig+0x2d0>)
 8008990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800899c:	d017      	beq.n	80089ce <UART_SetConfig+0x266>
 800899e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089a2:	d817      	bhi.n	80089d4 <UART_SetConfig+0x26c>
 80089a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089a8:	d00b      	beq.n	80089c2 <UART_SetConfig+0x25a>
 80089aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ae:	d811      	bhi.n	80089d4 <UART_SetConfig+0x26c>
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <UART_SetConfig+0x254>
 80089b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089b8:	d006      	beq.n	80089c8 <UART_SetConfig+0x260>
 80089ba:	e00b      	b.n	80089d4 <UART_SetConfig+0x26c>
 80089bc:	2301      	movs	r3, #1
 80089be:	77fb      	strb	r3, [r7, #31]
 80089c0:	e075      	b.n	8008aae <UART_SetConfig+0x346>
 80089c2:	2302      	movs	r3, #2
 80089c4:	77fb      	strb	r3, [r7, #31]
 80089c6:	e072      	b.n	8008aae <UART_SetConfig+0x346>
 80089c8:	2304      	movs	r3, #4
 80089ca:	77fb      	strb	r3, [r7, #31]
 80089cc:	e06f      	b.n	8008aae <UART_SetConfig+0x346>
 80089ce:	2308      	movs	r3, #8
 80089d0:	77fb      	strb	r3, [r7, #31]
 80089d2:	e06c      	b.n	8008aae <UART_SetConfig+0x346>
 80089d4:	2310      	movs	r3, #16
 80089d6:	77fb      	strb	r3, [r7, #31]
 80089d8:	e069      	b.n	8008aae <UART_SetConfig+0x346>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a1c      	ldr	r2, [pc, #112]	; (8008a50 <UART_SetConfig+0x2e8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d137      	bne.n	8008a54 <UART_SetConfig+0x2ec>
 80089e4:	4b14      	ldr	r3, [pc, #80]	; (8008a38 <UART_SetConfig+0x2d0>)
 80089e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80089ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089f2:	d017      	beq.n	8008a24 <UART_SetConfig+0x2bc>
 80089f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089f8:	d817      	bhi.n	8008a2a <UART_SetConfig+0x2c2>
 80089fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089fe:	d00b      	beq.n	8008a18 <UART_SetConfig+0x2b0>
 8008a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a04:	d811      	bhi.n	8008a2a <UART_SetConfig+0x2c2>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <UART_SetConfig+0x2aa>
 8008a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0e:	d006      	beq.n	8008a1e <UART_SetConfig+0x2b6>
 8008a10:	e00b      	b.n	8008a2a <UART_SetConfig+0x2c2>
 8008a12:	2300      	movs	r3, #0
 8008a14:	77fb      	strb	r3, [r7, #31]
 8008a16:	e04a      	b.n	8008aae <UART_SetConfig+0x346>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	77fb      	strb	r3, [r7, #31]
 8008a1c:	e047      	b.n	8008aae <UART_SetConfig+0x346>
 8008a1e:	2304      	movs	r3, #4
 8008a20:	77fb      	strb	r3, [r7, #31]
 8008a22:	e044      	b.n	8008aae <UART_SetConfig+0x346>
 8008a24:	2308      	movs	r3, #8
 8008a26:	77fb      	strb	r3, [r7, #31]
 8008a28:	e041      	b.n	8008aae <UART_SetConfig+0x346>
 8008a2a:	2310      	movs	r3, #16
 8008a2c:	77fb      	strb	r3, [r7, #31]
 8008a2e:	e03e      	b.n	8008aae <UART_SetConfig+0x346>
 8008a30:	efff69f3 	.word	0xefff69f3
 8008a34:	40011000 	.word	0x40011000
 8008a38:	40023800 	.word	0x40023800
 8008a3c:	40004400 	.word	0x40004400
 8008a40:	40004800 	.word	0x40004800
 8008a44:	40004c00 	.word	0x40004c00
 8008a48:	40005000 	.word	0x40005000
 8008a4c:	40011400 	.word	0x40011400
 8008a50:	40007800 	.word	0x40007800
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a71      	ldr	r2, [pc, #452]	; (8008c20 <UART_SetConfig+0x4b8>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d125      	bne.n	8008aaa <UART_SetConfig+0x342>
 8008a5e:	4b71      	ldr	r3, [pc, #452]	; (8008c24 <UART_SetConfig+0x4bc>)
 8008a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008a68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008a6c:	d017      	beq.n	8008a9e <UART_SetConfig+0x336>
 8008a6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008a72:	d817      	bhi.n	8008aa4 <UART_SetConfig+0x33c>
 8008a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a78:	d00b      	beq.n	8008a92 <UART_SetConfig+0x32a>
 8008a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a7e:	d811      	bhi.n	8008aa4 <UART_SetConfig+0x33c>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d003      	beq.n	8008a8c <UART_SetConfig+0x324>
 8008a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a88:	d006      	beq.n	8008a98 <UART_SetConfig+0x330>
 8008a8a:	e00b      	b.n	8008aa4 <UART_SetConfig+0x33c>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	77fb      	strb	r3, [r7, #31]
 8008a90:	e00d      	b.n	8008aae <UART_SetConfig+0x346>
 8008a92:	2302      	movs	r3, #2
 8008a94:	77fb      	strb	r3, [r7, #31]
 8008a96:	e00a      	b.n	8008aae <UART_SetConfig+0x346>
 8008a98:	2304      	movs	r3, #4
 8008a9a:	77fb      	strb	r3, [r7, #31]
 8008a9c:	e007      	b.n	8008aae <UART_SetConfig+0x346>
 8008a9e:	2308      	movs	r3, #8
 8008aa0:	77fb      	strb	r3, [r7, #31]
 8008aa2:	e004      	b.n	8008aae <UART_SetConfig+0x346>
 8008aa4:	2310      	movs	r3, #16
 8008aa6:	77fb      	strb	r3, [r7, #31]
 8008aa8:	e001      	b.n	8008aae <UART_SetConfig+0x346>
 8008aaa:	2310      	movs	r3, #16
 8008aac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab6:	d15b      	bne.n	8008b70 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8008ab8:	7ffb      	ldrb	r3, [r7, #31]
 8008aba:	2b08      	cmp	r3, #8
 8008abc:	d827      	bhi.n	8008b0e <UART_SetConfig+0x3a6>
 8008abe:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0x35c>)
 8008ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac4:	08008ae9 	.word	0x08008ae9
 8008ac8:	08008af1 	.word	0x08008af1
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	08008b0f 	.word	0x08008b0f
 8008ad4:	08008aff 	.word	0x08008aff
 8008ad8:	08008b0f 	.word	0x08008b0f
 8008adc:	08008b0f 	.word	0x08008b0f
 8008ae0:	08008b0f 	.word	0x08008b0f
 8008ae4:	08008b07 	.word	0x08008b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae8:	f7fc fdd8 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 8008aec:	61b8      	str	r0, [r7, #24]
        break;
 8008aee:	e013      	b.n	8008b18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008af0:	f7fc fde8 	bl	80056c4 <HAL_RCC_GetPCLK2Freq>
 8008af4:	61b8      	str	r0, [r7, #24]
        break;
 8008af6:	e00f      	b.n	8008b18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008af8:	4b4b      	ldr	r3, [pc, #300]	; (8008c28 <UART_SetConfig+0x4c0>)
 8008afa:	61bb      	str	r3, [r7, #24]
        break;
 8008afc:	e00c      	b.n	8008b18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008afe:	f7fc fd0b 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 8008b02:	61b8      	str	r0, [r7, #24]
        break;
 8008b04:	e008      	b.n	8008b18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b0a:	61bb      	str	r3, [r7, #24]
        break;
 8008b0c:	e004      	b.n	8008b18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	77bb      	strb	r3, [r7, #30]
        break;
 8008b16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d074      	beq.n	8008c08 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	005a      	lsls	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	085b      	lsrs	r3, r3, #1
 8008b28:	441a      	add	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2b0f      	cmp	r3, #15
 8008b3a:	d916      	bls.n	8008b6a <UART_SetConfig+0x402>
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b42:	d212      	bcs.n	8008b6a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f023 030f 	bic.w	r3, r3, #15
 8008b4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	085b      	lsrs	r3, r3, #1
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	f003 0307 	and.w	r3, r3, #7
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	89fb      	ldrh	r3, [r7, #14]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	89fa      	ldrh	r2, [r7, #14]
 8008b66:	60da      	str	r2, [r3, #12]
 8008b68:	e04e      	b.n	8008c08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	77bb      	strb	r3, [r7, #30]
 8008b6e:	e04b      	b.n	8008c08 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b70:	7ffb      	ldrb	r3, [r7, #31]
 8008b72:	2b08      	cmp	r3, #8
 8008b74:	d827      	bhi.n	8008bc6 <UART_SetConfig+0x45e>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <UART_SetConfig+0x414>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008ba1 	.word	0x08008ba1
 8008b80:	08008ba9 	.word	0x08008ba9
 8008b84:	08008bb1 	.word	0x08008bb1
 8008b88:	08008bc7 	.word	0x08008bc7
 8008b8c:	08008bb7 	.word	0x08008bb7
 8008b90:	08008bc7 	.word	0x08008bc7
 8008b94:	08008bc7 	.word	0x08008bc7
 8008b98:	08008bc7 	.word	0x08008bc7
 8008b9c:	08008bbf 	.word	0x08008bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba0:	f7fc fd7c 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 8008ba4:	61b8      	str	r0, [r7, #24]
        break;
 8008ba6:	e013      	b.n	8008bd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ba8:	f7fc fd8c 	bl	80056c4 <HAL_RCC_GetPCLK2Freq>
 8008bac:	61b8      	str	r0, [r7, #24]
        break;
 8008bae:	e00f      	b.n	8008bd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bb0:	4b1d      	ldr	r3, [pc, #116]	; (8008c28 <UART_SetConfig+0x4c0>)
 8008bb2:	61bb      	str	r3, [r7, #24]
        break;
 8008bb4:	e00c      	b.n	8008bd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bb6:	f7fc fcaf 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 8008bba:	61b8      	str	r0, [r7, #24]
        break;
 8008bbc:	e008      	b.n	8008bd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bc2:	61bb      	str	r3, [r7, #24]
        break;
 8008bc4:	e004      	b.n	8008bd0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	77bb      	strb	r3, [r7, #30]
        break;
 8008bce:	bf00      	nop
    }

    if (pclk != 0U)
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d018      	beq.n	8008c08 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	085a      	lsrs	r2, r3, #1
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	441a      	add	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	2b0f      	cmp	r3, #15
 8008bf0:	d908      	bls.n	8008c04 <UART_SetConfig+0x49c>
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf8:	d204      	bcs.n	8008c04 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	60da      	str	r2, [r3, #12]
 8008c02:	e001      	b.n	8008c08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008c14:	7fbb      	ldrb	r3, [r7, #30]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	40007c00 	.word	0x40007c00
 8008c24:	40023800 	.word	0x40023800
 8008c28:	00f42400 	.word	0x00f42400

08008c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00a      	beq.n	8008c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00a      	beq.n	8008c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	f003 0308 	and.w	r3, r3, #8
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	f003 0310 	and.w	r3, r3, #16
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f003 0320 	and.w	r3, r3, #32
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01a      	beq.n	8008d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d2a:	d10a      	bne.n	8008d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	430a      	orrs	r2, r1
 8008d62:	605a      	str	r2, [r3, #4]
  }
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af02      	add	r7, sp, #8
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d80:	f7fa faca 	bl	8003318 <HAL_GetTick>
 8008d84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0308 	and.w	r3, r3, #8
 8008d90:	2b08      	cmp	r3, #8
 8008d92:	d10e      	bne.n	8008db2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f82d 	bl	8008e02 <UART_WaitOnFlagUntilTimeout>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e023      	b.n	8008dfa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d10e      	bne.n	8008dde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f817 	bl	8008e02 <UART_WaitOnFlagUntilTimeout>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e00d      	b.n	8008dfa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2220      	movs	r2, #32
 8008de8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	603b      	str	r3, [r7, #0]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e12:	e05e      	b.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d05a      	beq.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e1c:	f7fa fa7c 	bl	8003318 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d302      	bcc.n	8008e32 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d11b      	bne.n	8008e6a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0201 	bic.w	r2, r2, #1
 8008e50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2220      	movs	r2, #32
 8008e56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e043      	b.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d02c      	beq.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e86:	d124      	bne.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ea0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0201 	bic.w	r2, r2, #1
 8008eb0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e00f      	b.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	4013      	ands	r3, r2
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	bf0c      	ite	eq
 8008ee2:	2301      	moveq	r3, #1
 8008ee4:	2300      	movne	r3, #0
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	461a      	mov	r2, r3
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d091      	beq.n	8008e14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	88fa      	ldrh	r2, [r7, #6]
 8008f14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	88fa      	ldrh	r2, [r7, #6]
 8008f1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2e:	d10e      	bne.n	8008f4e <UART_Start_Receive_IT+0x52>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d105      	bne.n	8008f44 <UART_Start_Receive_IT+0x48>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f42:	e02d      	b.n	8008fa0 <UART_Start_Receive_IT+0xa4>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	22ff      	movs	r2, #255	; 0xff
 8008f48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f4c:	e028      	b.n	8008fa0 <UART_Start_Receive_IT+0xa4>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10d      	bne.n	8008f72 <UART_Start_Receive_IT+0x76>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d104      	bne.n	8008f68 <UART_Start_Receive_IT+0x6c>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	22ff      	movs	r2, #255	; 0xff
 8008f62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f66:	e01b      	b.n	8008fa0 <UART_Start_Receive_IT+0xa4>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	227f      	movs	r2, #127	; 0x7f
 8008f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f70:	e016      	b.n	8008fa0 <UART_Start_Receive_IT+0xa4>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f7a:	d10d      	bne.n	8008f98 <UART_Start_Receive_IT+0x9c>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d104      	bne.n	8008f8e <UART_Start_Receive_IT+0x92>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	227f      	movs	r2, #127	; 0x7f
 8008f88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f8c:	e008      	b.n	8008fa0 <UART_Start_Receive_IT+0xa4>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	223f      	movs	r2, #63	; 0x3f
 8008f92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f96:	e003      	b.n	8008fa0 <UART_Start_Receive_IT+0xa4>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2222      	movs	r2, #34	; 0x22
 8008fac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f042 0201 	orr.w	r2, r2, #1
 8008fbc:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc6:	d107      	bne.n	8008fd8 <UART_Start_Receive_IT+0xdc>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d103      	bne.n	8008fd8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a0c      	ldr	r2, [pc, #48]	; (8009004 <UART_Start_Receive_IT+0x108>)
 8008fd4:	665a      	str	r2, [r3, #100]	; 0x64
 8008fd6:	e002      	b.n	8008fde <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4a0b      	ldr	r2, [pc, #44]	; (8009008 <UART_Start_Receive_IT+0x10c>)
 8008fdc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008ff4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	0800928b 	.word	0x0800928b
 8009008:	080091b7 	.word	0x080091b7

0800900c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009022:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689a      	ldr	r2, [r3, #8]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0201 	bic.w	r2, r2, #1
 8009032:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009038:	2b01      	cmp	r3, #1
 800903a:	d107      	bne.n	800904c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f022 0210 	bic.w	r2, r2, #16
 800904a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2220      	movs	r2, #32
 8009050:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800905e:	bf00      	nop
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f7ff fb4d 	bl	8008728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800908e:	bf00      	nop
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009096:	b480      	push	{r7}
 8009098:	b083      	sub	sp, #12
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090a2:	2b21      	cmp	r3, #33	; 0x21
 80090a4:	d12a      	bne.n	80090fc <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d110      	bne.n	80090d4 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090c0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090d0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80090d2:	e013      	b.n	80090fc <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009114:	2b21      	cmp	r3, #33	; 0x21
 8009116:	d12f      	bne.n	8009178 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800911e:	b29b      	uxth	r3, r3
 8009120:	2b00      	cmp	r3, #0
 8009122:	d110      	bne.n	8009146 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009132:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009142:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009144:	e018      	b.n	8009178 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800915a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009160:	1c9a      	adds	r2, r3, #2
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009178:	bf00      	nop
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800919a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2220      	movs	r2, #32
 80091a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff fab3 	bl	8008714 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091c4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ca:	2b22      	cmp	r3, #34	; 0x22
 80091cc:	d151      	bne.n	8009272 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091d6:	89bb      	ldrh	r3, [r7, #12]
 80091d8:	b2d9      	uxtb	r1, r3
 80091da:	89fb      	ldrh	r3, [r7, #14]
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e2:	400a      	ands	r2, r1
 80091e4:	b2d2      	uxtb	r2, r2
 80091e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ec:	1c5a      	adds	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	3b01      	subs	r3, #1
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800920a:	b29b      	uxth	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d138      	bne.n	8009282 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800921e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689a      	ldr	r2, [r3, #8]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 0201 	bic.w	r2, r2, #1
 800922e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2220      	movs	r2, #32
 8009234:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009240:	2b01      	cmp	r3, #1
 8009242:	d10f      	bne.n	8009264 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f022 0210 	bic.w	r2, r2, #16
 8009252:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff fa6d 	bl	800873c <HAL_UARTEx_RxEventCallback>
 8009262:	e002      	b.n	800926a <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7f9 ff89 	bl	800317c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009270:	e007      	b.n	8009282 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	699a      	ldr	r2, [r3, #24]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f042 0208 	orr.w	r2, r2, #8
 8009280:	619a      	str	r2, [r3, #24]
}
 8009282:	bf00      	nop
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009298:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929e:	2b22      	cmp	r3, #34	; 0x22
 80092a0:	d151      	bne.n	8009346 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ae:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80092b0:	89ba      	ldrh	r2, [r7, #12]
 80092b2:	89fb      	ldrh	r3, [r7, #14]
 80092b4:	4013      	ands	r3, r2
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c0:	1c9a      	adds	r2, r3, #2
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d138      	bne.n	8009356 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80092f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689a      	ldr	r2, [r3, #8]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 0201 	bic.w	r2, r2, #1
 8009302:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2220      	movs	r2, #32
 8009308:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009314:	2b01      	cmp	r3, #1
 8009316:	d10f      	bne.n	8009338 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f022 0210 	bic.w	r2, r2, #16
 8009326:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7ff fa03 	bl	800873c <HAL_UARTEx_RxEventCallback>
 8009336:	e002      	b.n	800933e <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7f9 ff1f 	bl	800317c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009344:	e007      	b.n	8009356 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	699a      	ldr	r2, [r3, #24]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f042 0208 	orr.w	r2, r2, #8
 8009354:	619a      	str	r2, [r3, #24]
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <__errno>:
 8009360:	4b01      	ldr	r3, [pc, #4]	; (8009368 <__errno+0x8>)
 8009362:	6818      	ldr	r0, [r3, #0]
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	200001ec 	.word	0x200001ec

0800936c <__libc_init_array>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	4d0d      	ldr	r5, [pc, #52]	; (80093a4 <__libc_init_array+0x38>)
 8009370:	4c0d      	ldr	r4, [pc, #52]	; (80093a8 <__libc_init_array+0x3c>)
 8009372:	1b64      	subs	r4, r4, r5
 8009374:	10a4      	asrs	r4, r4, #2
 8009376:	2600      	movs	r6, #0
 8009378:	42a6      	cmp	r6, r4
 800937a:	d109      	bne.n	8009390 <__libc_init_array+0x24>
 800937c:	4d0b      	ldr	r5, [pc, #44]	; (80093ac <__libc_init_array+0x40>)
 800937e:	4c0c      	ldr	r4, [pc, #48]	; (80093b0 <__libc_init_array+0x44>)
 8009380:	f002 fea6 	bl	800c0d0 <_init>
 8009384:	1b64      	subs	r4, r4, r5
 8009386:	10a4      	asrs	r4, r4, #2
 8009388:	2600      	movs	r6, #0
 800938a:	42a6      	cmp	r6, r4
 800938c:	d105      	bne.n	800939a <__libc_init_array+0x2e>
 800938e:	bd70      	pop	{r4, r5, r6, pc}
 8009390:	f855 3b04 	ldr.w	r3, [r5], #4
 8009394:	4798      	blx	r3
 8009396:	3601      	adds	r6, #1
 8009398:	e7ee      	b.n	8009378 <__libc_init_array+0xc>
 800939a:	f855 3b04 	ldr.w	r3, [r5], #4
 800939e:	4798      	blx	r3
 80093a0:	3601      	adds	r6, #1
 80093a2:	e7f2      	b.n	800938a <__libc_init_array+0x1e>
 80093a4:	0800c7d4 	.word	0x0800c7d4
 80093a8:	0800c7d4 	.word	0x0800c7d4
 80093ac:	0800c7d4 	.word	0x0800c7d4
 80093b0:	0800c7d8 	.word	0x0800c7d8

080093b4 <malloc>:
 80093b4:	4b02      	ldr	r3, [pc, #8]	; (80093c0 <malloc+0xc>)
 80093b6:	4601      	mov	r1, r0
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	f000 b863 	b.w	8009484 <_malloc_r>
 80093be:	bf00      	nop
 80093c0:	200001ec 	.word	0x200001ec

080093c4 <free>:
 80093c4:	4b02      	ldr	r3, [pc, #8]	; (80093d0 <free+0xc>)
 80093c6:	4601      	mov	r1, r0
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	f000 b80b 	b.w	80093e4 <_free_r>
 80093ce:	bf00      	nop
 80093d0:	200001ec 	.word	0x200001ec

080093d4 <memset>:
 80093d4:	4402      	add	r2, r0
 80093d6:	4603      	mov	r3, r0
 80093d8:	4293      	cmp	r3, r2
 80093da:	d100      	bne.n	80093de <memset+0xa>
 80093dc:	4770      	bx	lr
 80093de:	f803 1b01 	strb.w	r1, [r3], #1
 80093e2:	e7f9      	b.n	80093d8 <memset+0x4>

080093e4 <_free_r>:
 80093e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093e6:	2900      	cmp	r1, #0
 80093e8:	d048      	beq.n	800947c <_free_r+0x98>
 80093ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ee:	9001      	str	r0, [sp, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f1a1 0404 	sub.w	r4, r1, #4
 80093f6:	bfb8      	it	lt
 80093f8:	18e4      	addlt	r4, r4, r3
 80093fa:	f001 fbdf 	bl	800abbc <__malloc_lock>
 80093fe:	4a20      	ldr	r2, [pc, #128]	; (8009480 <_free_r+0x9c>)
 8009400:	9801      	ldr	r0, [sp, #4]
 8009402:	6813      	ldr	r3, [r2, #0]
 8009404:	4615      	mov	r5, r2
 8009406:	b933      	cbnz	r3, 8009416 <_free_r+0x32>
 8009408:	6063      	str	r3, [r4, #4]
 800940a:	6014      	str	r4, [r2, #0]
 800940c:	b003      	add	sp, #12
 800940e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009412:	f001 bbd9 	b.w	800abc8 <__malloc_unlock>
 8009416:	42a3      	cmp	r3, r4
 8009418:	d90b      	bls.n	8009432 <_free_r+0x4e>
 800941a:	6821      	ldr	r1, [r4, #0]
 800941c:	1862      	adds	r2, r4, r1
 800941e:	4293      	cmp	r3, r2
 8009420:	bf04      	itt	eq
 8009422:	681a      	ldreq	r2, [r3, #0]
 8009424:	685b      	ldreq	r3, [r3, #4]
 8009426:	6063      	str	r3, [r4, #4]
 8009428:	bf04      	itt	eq
 800942a:	1852      	addeq	r2, r2, r1
 800942c:	6022      	streq	r2, [r4, #0]
 800942e:	602c      	str	r4, [r5, #0]
 8009430:	e7ec      	b.n	800940c <_free_r+0x28>
 8009432:	461a      	mov	r2, r3
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	b10b      	cbz	r3, 800943c <_free_r+0x58>
 8009438:	42a3      	cmp	r3, r4
 800943a:	d9fa      	bls.n	8009432 <_free_r+0x4e>
 800943c:	6811      	ldr	r1, [r2, #0]
 800943e:	1855      	adds	r5, r2, r1
 8009440:	42a5      	cmp	r5, r4
 8009442:	d10b      	bne.n	800945c <_free_r+0x78>
 8009444:	6824      	ldr	r4, [r4, #0]
 8009446:	4421      	add	r1, r4
 8009448:	1854      	adds	r4, r2, r1
 800944a:	42a3      	cmp	r3, r4
 800944c:	6011      	str	r1, [r2, #0]
 800944e:	d1dd      	bne.n	800940c <_free_r+0x28>
 8009450:	681c      	ldr	r4, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	6053      	str	r3, [r2, #4]
 8009456:	4421      	add	r1, r4
 8009458:	6011      	str	r1, [r2, #0]
 800945a:	e7d7      	b.n	800940c <_free_r+0x28>
 800945c:	d902      	bls.n	8009464 <_free_r+0x80>
 800945e:	230c      	movs	r3, #12
 8009460:	6003      	str	r3, [r0, #0]
 8009462:	e7d3      	b.n	800940c <_free_r+0x28>
 8009464:	6825      	ldr	r5, [r4, #0]
 8009466:	1961      	adds	r1, r4, r5
 8009468:	428b      	cmp	r3, r1
 800946a:	bf04      	itt	eq
 800946c:	6819      	ldreq	r1, [r3, #0]
 800946e:	685b      	ldreq	r3, [r3, #4]
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	bf04      	itt	eq
 8009474:	1949      	addeq	r1, r1, r5
 8009476:	6021      	streq	r1, [r4, #0]
 8009478:	6054      	str	r4, [r2, #4]
 800947a:	e7c7      	b.n	800940c <_free_r+0x28>
 800947c:	b003      	add	sp, #12
 800947e:	bd30      	pop	{r4, r5, pc}
 8009480:	20000430 	.word	0x20000430

08009484 <_malloc_r>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	1ccd      	adds	r5, r1, #3
 8009488:	f025 0503 	bic.w	r5, r5, #3
 800948c:	3508      	adds	r5, #8
 800948e:	2d0c      	cmp	r5, #12
 8009490:	bf38      	it	cc
 8009492:	250c      	movcc	r5, #12
 8009494:	2d00      	cmp	r5, #0
 8009496:	4606      	mov	r6, r0
 8009498:	db01      	blt.n	800949e <_malloc_r+0x1a>
 800949a:	42a9      	cmp	r1, r5
 800949c:	d903      	bls.n	80094a6 <_malloc_r+0x22>
 800949e:	230c      	movs	r3, #12
 80094a0:	6033      	str	r3, [r6, #0]
 80094a2:	2000      	movs	r0, #0
 80094a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a6:	f001 fb89 	bl	800abbc <__malloc_lock>
 80094aa:	4921      	ldr	r1, [pc, #132]	; (8009530 <_malloc_r+0xac>)
 80094ac:	680a      	ldr	r2, [r1, #0]
 80094ae:	4614      	mov	r4, r2
 80094b0:	b99c      	cbnz	r4, 80094da <_malloc_r+0x56>
 80094b2:	4f20      	ldr	r7, [pc, #128]	; (8009534 <_malloc_r+0xb0>)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	b923      	cbnz	r3, 80094c2 <_malloc_r+0x3e>
 80094b8:	4621      	mov	r1, r4
 80094ba:	4630      	mov	r0, r6
 80094bc:	f000 fc86 	bl	8009dcc <_sbrk_r>
 80094c0:	6038      	str	r0, [r7, #0]
 80094c2:	4629      	mov	r1, r5
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 fc81 	bl	8009dcc <_sbrk_r>
 80094ca:	1c43      	adds	r3, r0, #1
 80094cc:	d123      	bne.n	8009516 <_malloc_r+0x92>
 80094ce:	230c      	movs	r3, #12
 80094d0:	6033      	str	r3, [r6, #0]
 80094d2:	4630      	mov	r0, r6
 80094d4:	f001 fb78 	bl	800abc8 <__malloc_unlock>
 80094d8:	e7e3      	b.n	80094a2 <_malloc_r+0x1e>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	1b5b      	subs	r3, r3, r5
 80094de:	d417      	bmi.n	8009510 <_malloc_r+0x8c>
 80094e0:	2b0b      	cmp	r3, #11
 80094e2:	d903      	bls.n	80094ec <_malloc_r+0x68>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	441c      	add	r4, r3
 80094e8:	6025      	str	r5, [r4, #0]
 80094ea:	e004      	b.n	80094f6 <_malloc_r+0x72>
 80094ec:	6863      	ldr	r3, [r4, #4]
 80094ee:	42a2      	cmp	r2, r4
 80094f0:	bf0c      	ite	eq
 80094f2:	600b      	streq	r3, [r1, #0]
 80094f4:	6053      	strne	r3, [r2, #4]
 80094f6:	4630      	mov	r0, r6
 80094f8:	f001 fb66 	bl	800abc8 <__malloc_unlock>
 80094fc:	f104 000b 	add.w	r0, r4, #11
 8009500:	1d23      	adds	r3, r4, #4
 8009502:	f020 0007 	bic.w	r0, r0, #7
 8009506:	1ac2      	subs	r2, r0, r3
 8009508:	d0cc      	beq.n	80094a4 <_malloc_r+0x20>
 800950a:	1a1b      	subs	r3, r3, r0
 800950c:	50a3      	str	r3, [r4, r2]
 800950e:	e7c9      	b.n	80094a4 <_malloc_r+0x20>
 8009510:	4622      	mov	r2, r4
 8009512:	6864      	ldr	r4, [r4, #4]
 8009514:	e7cc      	b.n	80094b0 <_malloc_r+0x2c>
 8009516:	1cc4      	adds	r4, r0, #3
 8009518:	f024 0403 	bic.w	r4, r4, #3
 800951c:	42a0      	cmp	r0, r4
 800951e:	d0e3      	beq.n	80094e8 <_malloc_r+0x64>
 8009520:	1a21      	subs	r1, r4, r0
 8009522:	4630      	mov	r0, r6
 8009524:	f000 fc52 	bl	8009dcc <_sbrk_r>
 8009528:	3001      	adds	r0, #1
 800952a:	d1dd      	bne.n	80094e8 <_malloc_r+0x64>
 800952c:	e7cf      	b.n	80094ce <_malloc_r+0x4a>
 800952e:	bf00      	nop
 8009530:	20000430 	.word	0x20000430
 8009534:	20000434 	.word	0x20000434

08009538 <__cvt>:
 8009538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953a:	ed2d 8b02 	vpush	{d8}
 800953e:	eeb0 8b40 	vmov.f64	d8, d0
 8009542:	b085      	sub	sp, #20
 8009544:	4617      	mov	r7, r2
 8009546:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009548:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800954a:	ee18 2a90 	vmov	r2, s17
 800954e:	f025 0520 	bic.w	r5, r5, #32
 8009552:	2a00      	cmp	r2, #0
 8009554:	bfb6      	itet	lt
 8009556:	222d      	movlt	r2, #45	; 0x2d
 8009558:	2200      	movge	r2, #0
 800955a:	eeb1 8b40 	vneglt.f64	d8, d0
 800955e:	2d46      	cmp	r5, #70	; 0x46
 8009560:	460c      	mov	r4, r1
 8009562:	701a      	strb	r2, [r3, #0]
 8009564:	d004      	beq.n	8009570 <__cvt+0x38>
 8009566:	2d45      	cmp	r5, #69	; 0x45
 8009568:	d100      	bne.n	800956c <__cvt+0x34>
 800956a:	3401      	adds	r4, #1
 800956c:	2102      	movs	r1, #2
 800956e:	e000      	b.n	8009572 <__cvt+0x3a>
 8009570:	2103      	movs	r1, #3
 8009572:	ab03      	add	r3, sp, #12
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	ab02      	add	r3, sp, #8
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	4622      	mov	r2, r4
 800957c:	4633      	mov	r3, r6
 800957e:	eeb0 0b48 	vmov.f64	d0, d8
 8009582:	f000 fd75 	bl	800a070 <_dtoa_r>
 8009586:	2d47      	cmp	r5, #71	; 0x47
 8009588:	d109      	bne.n	800959e <__cvt+0x66>
 800958a:	07fb      	lsls	r3, r7, #31
 800958c:	d407      	bmi.n	800959e <__cvt+0x66>
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009592:	1a1b      	subs	r3, r3, r0
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	b005      	add	sp, #20
 8009598:	ecbd 8b02 	vpop	{d8}
 800959c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959e:	2d46      	cmp	r5, #70	; 0x46
 80095a0:	eb00 0204 	add.w	r2, r0, r4
 80095a4:	d10c      	bne.n	80095c0 <__cvt+0x88>
 80095a6:	7803      	ldrb	r3, [r0, #0]
 80095a8:	2b30      	cmp	r3, #48	; 0x30
 80095aa:	d107      	bne.n	80095bc <__cvt+0x84>
 80095ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80095b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b4:	bf1c      	itt	ne
 80095b6:	f1c4 0401 	rsbne	r4, r4, #1
 80095ba:	6034      	strne	r4, [r6, #0]
 80095bc:	6833      	ldr	r3, [r6, #0]
 80095be:	441a      	add	r2, r3
 80095c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80095c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c8:	bf08      	it	eq
 80095ca:	9203      	streq	r2, [sp, #12]
 80095cc:	2130      	movs	r1, #48	; 0x30
 80095ce:	9b03      	ldr	r3, [sp, #12]
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d2dc      	bcs.n	800958e <__cvt+0x56>
 80095d4:	1c5c      	adds	r4, r3, #1
 80095d6:	9403      	str	r4, [sp, #12]
 80095d8:	7019      	strb	r1, [r3, #0]
 80095da:	e7f8      	b.n	80095ce <__cvt+0x96>

080095dc <__exponent>:
 80095dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095de:	4603      	mov	r3, r0
 80095e0:	2900      	cmp	r1, #0
 80095e2:	bfb8      	it	lt
 80095e4:	4249      	neglt	r1, r1
 80095e6:	f803 2b02 	strb.w	r2, [r3], #2
 80095ea:	bfb4      	ite	lt
 80095ec:	222d      	movlt	r2, #45	; 0x2d
 80095ee:	222b      	movge	r2, #43	; 0x2b
 80095f0:	2909      	cmp	r1, #9
 80095f2:	7042      	strb	r2, [r0, #1]
 80095f4:	dd2a      	ble.n	800964c <__exponent+0x70>
 80095f6:	f10d 0407 	add.w	r4, sp, #7
 80095fa:	46a4      	mov	ip, r4
 80095fc:	270a      	movs	r7, #10
 80095fe:	46a6      	mov	lr, r4
 8009600:	460a      	mov	r2, r1
 8009602:	fb91 f6f7 	sdiv	r6, r1, r7
 8009606:	fb07 1516 	mls	r5, r7, r6, r1
 800960a:	3530      	adds	r5, #48	; 0x30
 800960c:	2a63      	cmp	r2, #99	; 0x63
 800960e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009612:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009616:	4631      	mov	r1, r6
 8009618:	dcf1      	bgt.n	80095fe <__exponent+0x22>
 800961a:	3130      	adds	r1, #48	; 0x30
 800961c:	f1ae 0502 	sub.w	r5, lr, #2
 8009620:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009624:	1c44      	adds	r4, r0, #1
 8009626:	4629      	mov	r1, r5
 8009628:	4561      	cmp	r1, ip
 800962a:	d30a      	bcc.n	8009642 <__exponent+0x66>
 800962c:	f10d 0209 	add.w	r2, sp, #9
 8009630:	eba2 020e 	sub.w	r2, r2, lr
 8009634:	4565      	cmp	r5, ip
 8009636:	bf88      	it	hi
 8009638:	2200      	movhi	r2, #0
 800963a:	4413      	add	r3, r2
 800963c:	1a18      	subs	r0, r3, r0
 800963e:	b003      	add	sp, #12
 8009640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009646:	f804 2f01 	strb.w	r2, [r4, #1]!
 800964a:	e7ed      	b.n	8009628 <__exponent+0x4c>
 800964c:	2330      	movs	r3, #48	; 0x30
 800964e:	3130      	adds	r1, #48	; 0x30
 8009650:	7083      	strb	r3, [r0, #2]
 8009652:	70c1      	strb	r1, [r0, #3]
 8009654:	1d03      	adds	r3, r0, #4
 8009656:	e7f1      	b.n	800963c <__exponent+0x60>

08009658 <_printf_float>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	b08b      	sub	sp, #44	; 0x2c
 800965e:	460c      	mov	r4, r1
 8009660:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009664:	4616      	mov	r6, r2
 8009666:	461f      	mov	r7, r3
 8009668:	4605      	mov	r5, r0
 800966a:	f001 fa95 	bl	800ab98 <_localeconv_r>
 800966e:	f8d0 b000 	ldr.w	fp, [r0]
 8009672:	4658      	mov	r0, fp
 8009674:	f7f6 fdee 	bl	8000254 <strlen>
 8009678:	2300      	movs	r3, #0
 800967a:	9308      	str	r3, [sp, #32]
 800967c:	f8d8 3000 	ldr.w	r3, [r8]
 8009680:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009684:	6822      	ldr	r2, [r4, #0]
 8009686:	3307      	adds	r3, #7
 8009688:	f023 0307 	bic.w	r3, r3, #7
 800968c:	f103 0108 	add.w	r1, r3, #8
 8009690:	f8c8 1000 	str.w	r1, [r8]
 8009694:	4682      	mov	sl, r0
 8009696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800969a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800969e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009900 <_printf_float+0x2a8>
 80096a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80096a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80096aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80096ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b2:	dd24      	ble.n	80096fe <_printf_float+0xa6>
 80096b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80096b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096bc:	d502      	bpl.n	80096c4 <_printf_float+0x6c>
 80096be:	232d      	movs	r3, #45	; 0x2d
 80096c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c4:	4b90      	ldr	r3, [pc, #576]	; (8009908 <_printf_float+0x2b0>)
 80096c6:	4891      	ldr	r0, [pc, #580]	; (800990c <_printf_float+0x2b4>)
 80096c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80096cc:	bf94      	ite	ls
 80096ce:	4698      	movls	r8, r3
 80096d0:	4680      	movhi	r8, r0
 80096d2:	2303      	movs	r3, #3
 80096d4:	6123      	str	r3, [r4, #16]
 80096d6:	f022 0204 	bic.w	r2, r2, #4
 80096da:	2300      	movs	r3, #0
 80096dc:	6022      	str	r2, [r4, #0]
 80096de:	9304      	str	r3, [sp, #16]
 80096e0:	9700      	str	r7, [sp, #0]
 80096e2:	4633      	mov	r3, r6
 80096e4:	aa09      	add	r2, sp, #36	; 0x24
 80096e6:	4621      	mov	r1, r4
 80096e8:	4628      	mov	r0, r5
 80096ea:	f000 f9d3 	bl	8009a94 <_printf_common>
 80096ee:	3001      	adds	r0, #1
 80096f0:	f040 808a 	bne.w	8009808 <_printf_float+0x1b0>
 80096f4:	f04f 30ff 	mov.w	r0, #4294967295
 80096f8:	b00b      	add	sp, #44	; 0x2c
 80096fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8009702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009706:	d709      	bvc.n	800971c <_printf_float+0xc4>
 8009708:	ee10 3a90 	vmov	r3, s1
 800970c:	2b00      	cmp	r3, #0
 800970e:	bfbc      	itt	lt
 8009710:	232d      	movlt	r3, #45	; 0x2d
 8009712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009716:	487e      	ldr	r0, [pc, #504]	; (8009910 <_printf_float+0x2b8>)
 8009718:	4b7e      	ldr	r3, [pc, #504]	; (8009914 <_printf_float+0x2bc>)
 800971a:	e7d5      	b.n	80096c8 <_printf_float+0x70>
 800971c:	6863      	ldr	r3, [r4, #4]
 800971e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009722:	9104      	str	r1, [sp, #16]
 8009724:	1c59      	adds	r1, r3, #1
 8009726:	d13c      	bne.n	80097a2 <_printf_float+0x14a>
 8009728:	2306      	movs	r3, #6
 800972a:	6063      	str	r3, [r4, #4]
 800972c:	2300      	movs	r3, #0
 800972e:	9303      	str	r3, [sp, #12]
 8009730:	ab08      	add	r3, sp, #32
 8009732:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800973a:	ab07      	add	r3, sp, #28
 800973c:	6861      	ldr	r1, [r4, #4]
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	6022      	str	r2, [r4, #0]
 8009742:	f10d 031b 	add.w	r3, sp, #27
 8009746:	4628      	mov	r0, r5
 8009748:	f7ff fef6 	bl	8009538 <__cvt>
 800974c:	9b04      	ldr	r3, [sp, #16]
 800974e:	9907      	ldr	r1, [sp, #28]
 8009750:	2b47      	cmp	r3, #71	; 0x47
 8009752:	4680      	mov	r8, r0
 8009754:	d108      	bne.n	8009768 <_printf_float+0x110>
 8009756:	1cc8      	adds	r0, r1, #3
 8009758:	db02      	blt.n	8009760 <_printf_float+0x108>
 800975a:	6863      	ldr	r3, [r4, #4]
 800975c:	4299      	cmp	r1, r3
 800975e:	dd41      	ble.n	80097e4 <_printf_float+0x18c>
 8009760:	f1a9 0902 	sub.w	r9, r9, #2
 8009764:	fa5f f989 	uxtb.w	r9, r9
 8009768:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800976c:	d820      	bhi.n	80097b0 <_printf_float+0x158>
 800976e:	3901      	subs	r1, #1
 8009770:	464a      	mov	r2, r9
 8009772:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009776:	9107      	str	r1, [sp, #28]
 8009778:	f7ff ff30 	bl	80095dc <__exponent>
 800977c:	9a08      	ldr	r2, [sp, #32]
 800977e:	9004      	str	r0, [sp, #16]
 8009780:	1813      	adds	r3, r2, r0
 8009782:	2a01      	cmp	r2, #1
 8009784:	6123      	str	r3, [r4, #16]
 8009786:	dc02      	bgt.n	800978e <_printf_float+0x136>
 8009788:	6822      	ldr	r2, [r4, #0]
 800978a:	07d2      	lsls	r2, r2, #31
 800978c:	d501      	bpl.n	8009792 <_printf_float+0x13a>
 800978e:	3301      	adds	r3, #1
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0a2      	beq.n	80096e0 <_printf_float+0x88>
 800979a:	232d      	movs	r3, #45	; 0x2d
 800979c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097a0:	e79e      	b.n	80096e0 <_printf_float+0x88>
 80097a2:	9904      	ldr	r1, [sp, #16]
 80097a4:	2947      	cmp	r1, #71	; 0x47
 80097a6:	d1c1      	bne.n	800972c <_printf_float+0xd4>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1bf      	bne.n	800972c <_printf_float+0xd4>
 80097ac:	2301      	movs	r3, #1
 80097ae:	e7bc      	b.n	800972a <_printf_float+0xd2>
 80097b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80097b4:	d118      	bne.n	80097e8 <_printf_float+0x190>
 80097b6:	2900      	cmp	r1, #0
 80097b8:	6863      	ldr	r3, [r4, #4]
 80097ba:	dd0b      	ble.n	80097d4 <_printf_float+0x17c>
 80097bc:	6121      	str	r1, [r4, #16]
 80097be:	b913      	cbnz	r3, 80097c6 <_printf_float+0x16e>
 80097c0:	6822      	ldr	r2, [r4, #0]
 80097c2:	07d0      	lsls	r0, r2, #31
 80097c4:	d502      	bpl.n	80097cc <_printf_float+0x174>
 80097c6:	3301      	adds	r3, #1
 80097c8:	440b      	add	r3, r1
 80097ca:	6123      	str	r3, [r4, #16]
 80097cc:	2300      	movs	r3, #0
 80097ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	e7de      	b.n	8009792 <_printf_float+0x13a>
 80097d4:	b913      	cbnz	r3, 80097dc <_printf_float+0x184>
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	07d2      	lsls	r2, r2, #31
 80097da:	d501      	bpl.n	80097e0 <_printf_float+0x188>
 80097dc:	3302      	adds	r3, #2
 80097de:	e7f4      	b.n	80097ca <_printf_float+0x172>
 80097e0:	2301      	movs	r3, #1
 80097e2:	e7f2      	b.n	80097ca <_printf_float+0x172>
 80097e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097e8:	9b08      	ldr	r3, [sp, #32]
 80097ea:	4299      	cmp	r1, r3
 80097ec:	db05      	blt.n	80097fa <_printf_float+0x1a2>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	6121      	str	r1, [r4, #16]
 80097f2:	07d8      	lsls	r0, r3, #31
 80097f4:	d5ea      	bpl.n	80097cc <_printf_float+0x174>
 80097f6:	1c4b      	adds	r3, r1, #1
 80097f8:	e7e7      	b.n	80097ca <_printf_float+0x172>
 80097fa:	2900      	cmp	r1, #0
 80097fc:	bfd4      	ite	le
 80097fe:	f1c1 0202 	rsble	r2, r1, #2
 8009802:	2201      	movgt	r2, #1
 8009804:	4413      	add	r3, r2
 8009806:	e7e0      	b.n	80097ca <_printf_float+0x172>
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	055a      	lsls	r2, r3, #21
 800980c:	d407      	bmi.n	800981e <_printf_float+0x1c6>
 800980e:	6923      	ldr	r3, [r4, #16]
 8009810:	4642      	mov	r2, r8
 8009812:	4631      	mov	r1, r6
 8009814:	4628      	mov	r0, r5
 8009816:	47b8      	blx	r7
 8009818:	3001      	adds	r0, #1
 800981a:	d12a      	bne.n	8009872 <_printf_float+0x21a>
 800981c:	e76a      	b.n	80096f4 <_printf_float+0x9c>
 800981e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009822:	f240 80e2 	bls.w	80099ea <_printf_float+0x392>
 8009826:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800982a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800982e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009832:	d133      	bne.n	800989c <_printf_float+0x244>
 8009834:	4a38      	ldr	r2, [pc, #224]	; (8009918 <_printf_float+0x2c0>)
 8009836:	2301      	movs	r3, #1
 8009838:	4631      	mov	r1, r6
 800983a:	4628      	mov	r0, r5
 800983c:	47b8      	blx	r7
 800983e:	3001      	adds	r0, #1
 8009840:	f43f af58 	beq.w	80096f4 <_printf_float+0x9c>
 8009844:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009848:	429a      	cmp	r2, r3
 800984a:	db02      	blt.n	8009852 <_printf_float+0x1fa>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	07d8      	lsls	r0, r3, #31
 8009850:	d50f      	bpl.n	8009872 <_printf_float+0x21a>
 8009852:	4653      	mov	r3, sl
 8009854:	465a      	mov	r2, fp
 8009856:	4631      	mov	r1, r6
 8009858:	4628      	mov	r0, r5
 800985a:	47b8      	blx	r7
 800985c:	3001      	adds	r0, #1
 800985e:	f43f af49 	beq.w	80096f4 <_printf_float+0x9c>
 8009862:	f04f 0800 	mov.w	r8, #0
 8009866:	f104 091a 	add.w	r9, r4, #26
 800986a:	9b08      	ldr	r3, [sp, #32]
 800986c:	3b01      	subs	r3, #1
 800986e:	4543      	cmp	r3, r8
 8009870:	dc09      	bgt.n	8009886 <_printf_float+0x22e>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	079b      	lsls	r3, r3, #30
 8009876:	f100 8108 	bmi.w	8009a8a <_printf_float+0x432>
 800987a:	68e0      	ldr	r0, [r4, #12]
 800987c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987e:	4298      	cmp	r0, r3
 8009880:	bfb8      	it	lt
 8009882:	4618      	movlt	r0, r3
 8009884:	e738      	b.n	80096f8 <_printf_float+0xa0>
 8009886:	2301      	movs	r3, #1
 8009888:	464a      	mov	r2, r9
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f af2f 	beq.w	80096f4 <_printf_float+0x9c>
 8009896:	f108 0801 	add.w	r8, r8, #1
 800989a:	e7e6      	b.n	800986a <_printf_float+0x212>
 800989c:	9b07      	ldr	r3, [sp, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dc3c      	bgt.n	800991c <_printf_float+0x2c4>
 80098a2:	4a1d      	ldr	r2, [pc, #116]	; (8009918 <_printf_float+0x2c0>)
 80098a4:	2301      	movs	r3, #1
 80098a6:	4631      	mov	r1, r6
 80098a8:	4628      	mov	r0, r5
 80098aa:	47b8      	blx	r7
 80098ac:	3001      	adds	r0, #1
 80098ae:	f43f af21 	beq.w	80096f4 <_printf_float+0x9c>
 80098b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	d102      	bne.n	80098c0 <_printf_float+0x268>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	07d9      	lsls	r1, r3, #31
 80098be:	d5d8      	bpl.n	8009872 <_printf_float+0x21a>
 80098c0:	4653      	mov	r3, sl
 80098c2:	465a      	mov	r2, fp
 80098c4:	4631      	mov	r1, r6
 80098c6:	4628      	mov	r0, r5
 80098c8:	47b8      	blx	r7
 80098ca:	3001      	adds	r0, #1
 80098cc:	f43f af12 	beq.w	80096f4 <_printf_float+0x9c>
 80098d0:	f04f 0900 	mov.w	r9, #0
 80098d4:	f104 0a1a 	add.w	sl, r4, #26
 80098d8:	9b07      	ldr	r3, [sp, #28]
 80098da:	425b      	negs	r3, r3
 80098dc:	454b      	cmp	r3, r9
 80098de:	dc01      	bgt.n	80098e4 <_printf_float+0x28c>
 80098e0:	9b08      	ldr	r3, [sp, #32]
 80098e2:	e795      	b.n	8009810 <_printf_float+0x1b8>
 80098e4:	2301      	movs	r3, #1
 80098e6:	4652      	mov	r2, sl
 80098e8:	4631      	mov	r1, r6
 80098ea:	4628      	mov	r0, r5
 80098ec:	47b8      	blx	r7
 80098ee:	3001      	adds	r0, #1
 80098f0:	f43f af00 	beq.w	80096f4 <_printf_float+0x9c>
 80098f4:	f109 0901 	add.w	r9, r9, #1
 80098f8:	e7ee      	b.n	80098d8 <_printf_float+0x280>
 80098fa:	bf00      	nop
 80098fc:	f3af 8000 	nop.w
 8009900:	ffffffff 	.word	0xffffffff
 8009904:	7fefffff 	.word	0x7fefffff
 8009908:	0800c384 	.word	0x0800c384
 800990c:	0800c388 	.word	0x0800c388
 8009910:	0800c390 	.word	0x0800c390
 8009914:	0800c38c 	.word	0x0800c38c
 8009918:	0800c394 	.word	0x0800c394
 800991c:	9a08      	ldr	r2, [sp, #32]
 800991e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009920:	429a      	cmp	r2, r3
 8009922:	bfa8      	it	ge
 8009924:	461a      	movge	r2, r3
 8009926:	2a00      	cmp	r2, #0
 8009928:	4691      	mov	r9, r2
 800992a:	dc38      	bgt.n	800999e <_printf_float+0x346>
 800992c:	2300      	movs	r3, #0
 800992e:	9305      	str	r3, [sp, #20]
 8009930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009934:	f104 021a 	add.w	r2, r4, #26
 8009938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800993a:	9905      	ldr	r1, [sp, #20]
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	eba3 0309 	sub.w	r3, r3, r9
 8009942:	428b      	cmp	r3, r1
 8009944:	dc33      	bgt.n	80099ae <_printf_float+0x356>
 8009946:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800994a:	429a      	cmp	r2, r3
 800994c:	db3c      	blt.n	80099c8 <_printf_float+0x370>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	07da      	lsls	r2, r3, #31
 8009952:	d439      	bmi.n	80099c8 <_printf_float+0x370>
 8009954:	9a08      	ldr	r2, [sp, #32]
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	9907      	ldr	r1, [sp, #28]
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	eba2 0901 	sub.w	r9, r2, r1
 8009960:	4599      	cmp	r9, r3
 8009962:	bfa8      	it	ge
 8009964:	4699      	movge	r9, r3
 8009966:	f1b9 0f00 	cmp.w	r9, #0
 800996a:	dc35      	bgt.n	80099d8 <_printf_float+0x380>
 800996c:	f04f 0800 	mov.w	r8, #0
 8009970:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009974:	f104 0a1a 	add.w	sl, r4, #26
 8009978:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	eba3 0309 	sub.w	r3, r3, r9
 8009982:	4543      	cmp	r3, r8
 8009984:	f77f af75 	ble.w	8009872 <_printf_float+0x21a>
 8009988:	2301      	movs	r3, #1
 800998a:	4652      	mov	r2, sl
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f aeae 	beq.w	80096f4 <_printf_float+0x9c>
 8009998:	f108 0801 	add.w	r8, r8, #1
 800999c:	e7ec      	b.n	8009978 <_printf_float+0x320>
 800999e:	4613      	mov	r3, r2
 80099a0:	4631      	mov	r1, r6
 80099a2:	4642      	mov	r2, r8
 80099a4:	4628      	mov	r0, r5
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	d1bf      	bne.n	800992c <_printf_float+0x2d4>
 80099ac:	e6a2      	b.n	80096f4 <_printf_float+0x9c>
 80099ae:	2301      	movs	r3, #1
 80099b0:	4631      	mov	r1, r6
 80099b2:	4628      	mov	r0, r5
 80099b4:	9204      	str	r2, [sp, #16]
 80099b6:	47b8      	blx	r7
 80099b8:	3001      	adds	r0, #1
 80099ba:	f43f ae9b 	beq.w	80096f4 <_printf_float+0x9c>
 80099be:	9b05      	ldr	r3, [sp, #20]
 80099c0:	9a04      	ldr	r2, [sp, #16]
 80099c2:	3301      	adds	r3, #1
 80099c4:	9305      	str	r3, [sp, #20]
 80099c6:	e7b7      	b.n	8009938 <_printf_float+0x2e0>
 80099c8:	4653      	mov	r3, sl
 80099ca:	465a      	mov	r2, fp
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	d1be      	bne.n	8009954 <_printf_float+0x2fc>
 80099d6:	e68d      	b.n	80096f4 <_printf_float+0x9c>
 80099d8:	9a04      	ldr	r2, [sp, #16]
 80099da:	464b      	mov	r3, r9
 80099dc:	4442      	add	r2, r8
 80099de:	4631      	mov	r1, r6
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b8      	blx	r7
 80099e4:	3001      	adds	r0, #1
 80099e6:	d1c1      	bne.n	800996c <_printf_float+0x314>
 80099e8:	e684      	b.n	80096f4 <_printf_float+0x9c>
 80099ea:	9a08      	ldr	r2, [sp, #32]
 80099ec:	2a01      	cmp	r2, #1
 80099ee:	dc01      	bgt.n	80099f4 <_printf_float+0x39c>
 80099f0:	07db      	lsls	r3, r3, #31
 80099f2:	d537      	bpl.n	8009a64 <_printf_float+0x40c>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4642      	mov	r2, r8
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f ae78 	beq.w	80096f4 <_printf_float+0x9c>
 8009a04:	4653      	mov	r3, sl
 8009a06:	465a      	mov	r2, fp
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	47b8      	blx	r7
 8009a0e:	3001      	adds	r0, #1
 8009a10:	f43f ae70 	beq.w	80096f4 <_printf_float+0x9c>
 8009a14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009a18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a20:	d01b      	beq.n	8009a5a <_printf_float+0x402>
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	f108 0201 	add.w	r2, r8, #1
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	d10e      	bne.n	8009a52 <_printf_float+0x3fa>
 8009a34:	e65e      	b.n	80096f4 <_printf_float+0x9c>
 8009a36:	2301      	movs	r3, #1
 8009a38:	464a      	mov	r2, r9
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	f43f ae57 	beq.w	80096f4 <_printf_float+0x9c>
 8009a46:	f108 0801 	add.w	r8, r8, #1
 8009a4a:	9b08      	ldr	r3, [sp, #32]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	4543      	cmp	r3, r8
 8009a50:	dcf1      	bgt.n	8009a36 <_printf_float+0x3de>
 8009a52:	9b04      	ldr	r3, [sp, #16]
 8009a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a58:	e6db      	b.n	8009812 <_printf_float+0x1ba>
 8009a5a:	f04f 0800 	mov.w	r8, #0
 8009a5e:	f104 091a 	add.w	r9, r4, #26
 8009a62:	e7f2      	b.n	8009a4a <_printf_float+0x3f2>
 8009a64:	2301      	movs	r3, #1
 8009a66:	4642      	mov	r2, r8
 8009a68:	e7df      	b.n	8009a2a <_printf_float+0x3d2>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	464a      	mov	r2, r9
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b8      	blx	r7
 8009a74:	3001      	adds	r0, #1
 8009a76:	f43f ae3d 	beq.w	80096f4 <_printf_float+0x9c>
 8009a7a:	f108 0801 	add.w	r8, r8, #1
 8009a7e:	68e3      	ldr	r3, [r4, #12]
 8009a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a82:	1a5b      	subs	r3, r3, r1
 8009a84:	4543      	cmp	r3, r8
 8009a86:	dcf0      	bgt.n	8009a6a <_printf_float+0x412>
 8009a88:	e6f7      	b.n	800987a <_printf_float+0x222>
 8009a8a:	f04f 0800 	mov.w	r8, #0
 8009a8e:	f104 0919 	add.w	r9, r4, #25
 8009a92:	e7f4      	b.n	8009a7e <_printf_float+0x426>

08009a94 <_printf_common>:
 8009a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a98:	4616      	mov	r6, r2
 8009a9a:	4699      	mov	r9, r3
 8009a9c:	688a      	ldr	r2, [r1, #8]
 8009a9e:	690b      	ldr	r3, [r1, #16]
 8009aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	bfb8      	it	lt
 8009aa8:	4613      	movlt	r3, r2
 8009aaa:	6033      	str	r3, [r6, #0]
 8009aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ab0:	4607      	mov	r7, r0
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	b10a      	cbz	r2, 8009aba <_printf_common+0x26>
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	6033      	str	r3, [r6, #0]
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	0699      	lsls	r1, r3, #26
 8009abe:	bf42      	ittt	mi
 8009ac0:	6833      	ldrmi	r3, [r6, #0]
 8009ac2:	3302      	addmi	r3, #2
 8009ac4:	6033      	strmi	r3, [r6, #0]
 8009ac6:	6825      	ldr	r5, [r4, #0]
 8009ac8:	f015 0506 	ands.w	r5, r5, #6
 8009acc:	d106      	bne.n	8009adc <_printf_common+0x48>
 8009ace:	f104 0a19 	add.w	sl, r4, #25
 8009ad2:	68e3      	ldr	r3, [r4, #12]
 8009ad4:	6832      	ldr	r2, [r6, #0]
 8009ad6:	1a9b      	subs	r3, r3, r2
 8009ad8:	42ab      	cmp	r3, r5
 8009ada:	dc26      	bgt.n	8009b2a <_printf_common+0x96>
 8009adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ae0:	1e13      	subs	r3, r2, #0
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	bf18      	it	ne
 8009ae6:	2301      	movne	r3, #1
 8009ae8:	0692      	lsls	r2, r2, #26
 8009aea:	d42b      	bmi.n	8009b44 <_printf_common+0xb0>
 8009aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009af0:	4649      	mov	r1, r9
 8009af2:	4638      	mov	r0, r7
 8009af4:	47c0      	blx	r8
 8009af6:	3001      	adds	r0, #1
 8009af8:	d01e      	beq.n	8009b38 <_printf_common+0xa4>
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	68e5      	ldr	r5, [r4, #12]
 8009afe:	6832      	ldr	r2, [r6, #0]
 8009b00:	f003 0306 	and.w	r3, r3, #6
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	bf08      	it	eq
 8009b08:	1aad      	subeq	r5, r5, r2
 8009b0a:	68a3      	ldr	r3, [r4, #8]
 8009b0c:	6922      	ldr	r2, [r4, #16]
 8009b0e:	bf0c      	ite	eq
 8009b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b14:	2500      	movne	r5, #0
 8009b16:	4293      	cmp	r3, r2
 8009b18:	bfc4      	itt	gt
 8009b1a:	1a9b      	subgt	r3, r3, r2
 8009b1c:	18ed      	addgt	r5, r5, r3
 8009b1e:	2600      	movs	r6, #0
 8009b20:	341a      	adds	r4, #26
 8009b22:	42b5      	cmp	r5, r6
 8009b24:	d11a      	bne.n	8009b5c <_printf_common+0xc8>
 8009b26:	2000      	movs	r0, #0
 8009b28:	e008      	b.n	8009b3c <_printf_common+0xa8>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4652      	mov	r2, sl
 8009b2e:	4649      	mov	r1, r9
 8009b30:	4638      	mov	r0, r7
 8009b32:	47c0      	blx	r8
 8009b34:	3001      	adds	r0, #1
 8009b36:	d103      	bne.n	8009b40 <_printf_common+0xac>
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b40:	3501      	adds	r5, #1
 8009b42:	e7c6      	b.n	8009ad2 <_printf_common+0x3e>
 8009b44:	18e1      	adds	r1, r4, r3
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	2030      	movs	r0, #48	; 0x30
 8009b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b4e:	4422      	add	r2, r4
 8009b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b58:	3302      	adds	r3, #2
 8009b5a:	e7c7      	b.n	8009aec <_printf_common+0x58>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4649      	mov	r1, r9
 8009b62:	4638      	mov	r0, r7
 8009b64:	47c0      	blx	r8
 8009b66:	3001      	adds	r0, #1
 8009b68:	d0e6      	beq.n	8009b38 <_printf_common+0xa4>
 8009b6a:	3601      	adds	r6, #1
 8009b6c:	e7d9      	b.n	8009b22 <_printf_common+0x8e>
	...

08009b70 <_printf_i>:
 8009b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	460c      	mov	r4, r1
 8009b76:	4691      	mov	r9, r2
 8009b78:	7e27      	ldrb	r7, [r4, #24]
 8009b7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b7c:	2f78      	cmp	r7, #120	; 0x78
 8009b7e:	4680      	mov	r8, r0
 8009b80:	469a      	mov	sl, r3
 8009b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b86:	d807      	bhi.n	8009b98 <_printf_i+0x28>
 8009b88:	2f62      	cmp	r7, #98	; 0x62
 8009b8a:	d80a      	bhi.n	8009ba2 <_printf_i+0x32>
 8009b8c:	2f00      	cmp	r7, #0
 8009b8e:	f000 80d8 	beq.w	8009d42 <_printf_i+0x1d2>
 8009b92:	2f58      	cmp	r7, #88	; 0x58
 8009b94:	f000 80a3 	beq.w	8009cde <_printf_i+0x16e>
 8009b98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ba0:	e03a      	b.n	8009c18 <_printf_i+0xa8>
 8009ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ba6:	2b15      	cmp	r3, #21
 8009ba8:	d8f6      	bhi.n	8009b98 <_printf_i+0x28>
 8009baa:	a001      	add	r0, pc, #4	; (adr r0, 8009bb0 <_printf_i+0x40>)
 8009bac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009bb0:	08009c09 	.word	0x08009c09
 8009bb4:	08009c1d 	.word	0x08009c1d
 8009bb8:	08009b99 	.word	0x08009b99
 8009bbc:	08009b99 	.word	0x08009b99
 8009bc0:	08009b99 	.word	0x08009b99
 8009bc4:	08009b99 	.word	0x08009b99
 8009bc8:	08009c1d 	.word	0x08009c1d
 8009bcc:	08009b99 	.word	0x08009b99
 8009bd0:	08009b99 	.word	0x08009b99
 8009bd4:	08009b99 	.word	0x08009b99
 8009bd8:	08009b99 	.word	0x08009b99
 8009bdc:	08009d29 	.word	0x08009d29
 8009be0:	08009c4d 	.word	0x08009c4d
 8009be4:	08009d0b 	.word	0x08009d0b
 8009be8:	08009b99 	.word	0x08009b99
 8009bec:	08009b99 	.word	0x08009b99
 8009bf0:	08009d4b 	.word	0x08009d4b
 8009bf4:	08009b99 	.word	0x08009b99
 8009bf8:	08009c4d 	.word	0x08009c4d
 8009bfc:	08009b99 	.word	0x08009b99
 8009c00:	08009b99 	.word	0x08009b99
 8009c04:	08009d13 	.word	0x08009d13
 8009c08:	680b      	ldr	r3, [r1, #0]
 8009c0a:	1d1a      	adds	r2, r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	600a      	str	r2, [r1, #0]
 8009c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e0a3      	b.n	8009d64 <_printf_i+0x1f4>
 8009c1c:	6825      	ldr	r5, [r4, #0]
 8009c1e:	6808      	ldr	r0, [r1, #0]
 8009c20:	062e      	lsls	r6, r5, #24
 8009c22:	f100 0304 	add.w	r3, r0, #4
 8009c26:	d50a      	bpl.n	8009c3e <_printf_i+0xce>
 8009c28:	6805      	ldr	r5, [r0, #0]
 8009c2a:	600b      	str	r3, [r1, #0]
 8009c2c:	2d00      	cmp	r5, #0
 8009c2e:	da03      	bge.n	8009c38 <_printf_i+0xc8>
 8009c30:	232d      	movs	r3, #45	; 0x2d
 8009c32:	426d      	negs	r5, r5
 8009c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c38:	485e      	ldr	r0, [pc, #376]	; (8009db4 <_printf_i+0x244>)
 8009c3a:	230a      	movs	r3, #10
 8009c3c:	e019      	b.n	8009c72 <_printf_i+0x102>
 8009c3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c42:	6805      	ldr	r5, [r0, #0]
 8009c44:	600b      	str	r3, [r1, #0]
 8009c46:	bf18      	it	ne
 8009c48:	b22d      	sxthne	r5, r5
 8009c4a:	e7ef      	b.n	8009c2c <_printf_i+0xbc>
 8009c4c:	680b      	ldr	r3, [r1, #0]
 8009c4e:	6825      	ldr	r5, [r4, #0]
 8009c50:	1d18      	adds	r0, r3, #4
 8009c52:	6008      	str	r0, [r1, #0]
 8009c54:	0628      	lsls	r0, r5, #24
 8009c56:	d501      	bpl.n	8009c5c <_printf_i+0xec>
 8009c58:	681d      	ldr	r5, [r3, #0]
 8009c5a:	e002      	b.n	8009c62 <_printf_i+0xf2>
 8009c5c:	0669      	lsls	r1, r5, #25
 8009c5e:	d5fb      	bpl.n	8009c58 <_printf_i+0xe8>
 8009c60:	881d      	ldrh	r5, [r3, #0]
 8009c62:	4854      	ldr	r0, [pc, #336]	; (8009db4 <_printf_i+0x244>)
 8009c64:	2f6f      	cmp	r7, #111	; 0x6f
 8009c66:	bf0c      	ite	eq
 8009c68:	2308      	moveq	r3, #8
 8009c6a:	230a      	movne	r3, #10
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c72:	6866      	ldr	r6, [r4, #4]
 8009c74:	60a6      	str	r6, [r4, #8]
 8009c76:	2e00      	cmp	r6, #0
 8009c78:	bfa2      	ittt	ge
 8009c7a:	6821      	ldrge	r1, [r4, #0]
 8009c7c:	f021 0104 	bicge.w	r1, r1, #4
 8009c80:	6021      	strge	r1, [r4, #0]
 8009c82:	b90d      	cbnz	r5, 8009c88 <_printf_i+0x118>
 8009c84:	2e00      	cmp	r6, #0
 8009c86:	d04d      	beq.n	8009d24 <_printf_i+0x1b4>
 8009c88:	4616      	mov	r6, r2
 8009c8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c8e:	fb03 5711 	mls	r7, r3, r1, r5
 8009c92:	5dc7      	ldrb	r7, [r0, r7]
 8009c94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c98:	462f      	mov	r7, r5
 8009c9a:	42bb      	cmp	r3, r7
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	d9f4      	bls.n	8009c8a <_printf_i+0x11a>
 8009ca0:	2b08      	cmp	r3, #8
 8009ca2:	d10b      	bne.n	8009cbc <_printf_i+0x14c>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	07df      	lsls	r7, r3, #31
 8009ca8:	d508      	bpl.n	8009cbc <_printf_i+0x14c>
 8009caa:	6923      	ldr	r3, [r4, #16]
 8009cac:	6861      	ldr	r1, [r4, #4]
 8009cae:	4299      	cmp	r1, r3
 8009cb0:	bfde      	ittt	le
 8009cb2:	2330      	movle	r3, #48	; 0x30
 8009cb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cbc:	1b92      	subs	r2, r2, r6
 8009cbe:	6122      	str	r2, [r4, #16]
 8009cc0:	f8cd a000 	str.w	sl, [sp]
 8009cc4:	464b      	mov	r3, r9
 8009cc6:	aa03      	add	r2, sp, #12
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4640      	mov	r0, r8
 8009ccc:	f7ff fee2 	bl	8009a94 <_printf_common>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d14c      	bne.n	8009d6e <_printf_i+0x1fe>
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd8:	b004      	add	sp, #16
 8009cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cde:	4835      	ldr	r0, [pc, #212]	; (8009db4 <_printf_i+0x244>)
 8009ce0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	680e      	ldr	r6, [r1, #0]
 8009ce8:	061f      	lsls	r7, r3, #24
 8009cea:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cee:	600e      	str	r6, [r1, #0]
 8009cf0:	d514      	bpl.n	8009d1c <_printf_i+0x1ac>
 8009cf2:	07d9      	lsls	r1, r3, #31
 8009cf4:	bf44      	itt	mi
 8009cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cfa:	6023      	strmi	r3, [r4, #0]
 8009cfc:	b91d      	cbnz	r5, 8009d06 <_printf_i+0x196>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	f023 0320 	bic.w	r3, r3, #32
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	2310      	movs	r3, #16
 8009d08:	e7b0      	b.n	8009c6c <_printf_i+0xfc>
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	f043 0320 	orr.w	r3, r3, #32
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	2378      	movs	r3, #120	; 0x78
 8009d14:	4828      	ldr	r0, [pc, #160]	; (8009db8 <_printf_i+0x248>)
 8009d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d1a:	e7e3      	b.n	8009ce4 <_printf_i+0x174>
 8009d1c:	065e      	lsls	r6, r3, #25
 8009d1e:	bf48      	it	mi
 8009d20:	b2ad      	uxthmi	r5, r5
 8009d22:	e7e6      	b.n	8009cf2 <_printf_i+0x182>
 8009d24:	4616      	mov	r6, r2
 8009d26:	e7bb      	b.n	8009ca0 <_printf_i+0x130>
 8009d28:	680b      	ldr	r3, [r1, #0]
 8009d2a:	6826      	ldr	r6, [r4, #0]
 8009d2c:	6960      	ldr	r0, [r4, #20]
 8009d2e:	1d1d      	adds	r5, r3, #4
 8009d30:	600d      	str	r5, [r1, #0]
 8009d32:	0635      	lsls	r5, r6, #24
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	d501      	bpl.n	8009d3c <_printf_i+0x1cc>
 8009d38:	6018      	str	r0, [r3, #0]
 8009d3a:	e002      	b.n	8009d42 <_printf_i+0x1d2>
 8009d3c:	0671      	lsls	r1, r6, #25
 8009d3e:	d5fb      	bpl.n	8009d38 <_printf_i+0x1c8>
 8009d40:	8018      	strh	r0, [r3, #0]
 8009d42:	2300      	movs	r3, #0
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	4616      	mov	r6, r2
 8009d48:	e7ba      	b.n	8009cc0 <_printf_i+0x150>
 8009d4a:	680b      	ldr	r3, [r1, #0]
 8009d4c:	1d1a      	adds	r2, r3, #4
 8009d4e:	600a      	str	r2, [r1, #0]
 8009d50:	681e      	ldr	r6, [r3, #0]
 8009d52:	6862      	ldr	r2, [r4, #4]
 8009d54:	2100      	movs	r1, #0
 8009d56:	4630      	mov	r0, r6
 8009d58:	f7f6 fa8a 	bl	8000270 <memchr>
 8009d5c:	b108      	cbz	r0, 8009d62 <_printf_i+0x1f2>
 8009d5e:	1b80      	subs	r0, r0, r6
 8009d60:	6060      	str	r0, [r4, #4]
 8009d62:	6863      	ldr	r3, [r4, #4]
 8009d64:	6123      	str	r3, [r4, #16]
 8009d66:	2300      	movs	r3, #0
 8009d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d6c:	e7a8      	b.n	8009cc0 <_printf_i+0x150>
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	4632      	mov	r2, r6
 8009d72:	4649      	mov	r1, r9
 8009d74:	4640      	mov	r0, r8
 8009d76:	47d0      	blx	sl
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d0ab      	beq.n	8009cd4 <_printf_i+0x164>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	079b      	lsls	r3, r3, #30
 8009d80:	d413      	bmi.n	8009daa <_printf_i+0x23a>
 8009d82:	68e0      	ldr	r0, [r4, #12]
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	4298      	cmp	r0, r3
 8009d88:	bfb8      	it	lt
 8009d8a:	4618      	movlt	r0, r3
 8009d8c:	e7a4      	b.n	8009cd8 <_printf_i+0x168>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4632      	mov	r2, r6
 8009d92:	4649      	mov	r1, r9
 8009d94:	4640      	mov	r0, r8
 8009d96:	47d0      	blx	sl
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d09b      	beq.n	8009cd4 <_printf_i+0x164>
 8009d9c:	3501      	adds	r5, #1
 8009d9e:	68e3      	ldr	r3, [r4, #12]
 8009da0:	9903      	ldr	r1, [sp, #12]
 8009da2:	1a5b      	subs	r3, r3, r1
 8009da4:	42ab      	cmp	r3, r5
 8009da6:	dcf2      	bgt.n	8009d8e <_printf_i+0x21e>
 8009da8:	e7eb      	b.n	8009d82 <_printf_i+0x212>
 8009daa:	2500      	movs	r5, #0
 8009dac:	f104 0619 	add.w	r6, r4, #25
 8009db0:	e7f5      	b.n	8009d9e <_printf_i+0x22e>
 8009db2:	bf00      	nop
 8009db4:	0800c396 	.word	0x0800c396
 8009db8:	0800c3a7 	.word	0x0800c3a7

08009dbc <realloc>:
 8009dbc:	4b02      	ldr	r3, [pc, #8]	; (8009dc8 <realloc+0xc>)
 8009dbe:	460a      	mov	r2, r1
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	6818      	ldr	r0, [r3, #0]
 8009dc4:	f001 ba93 	b.w	800b2ee <_realloc_r>
 8009dc8:	200001ec 	.word	0x200001ec

08009dcc <_sbrk_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4d06      	ldr	r5, [pc, #24]	; (8009de8 <_sbrk_r+0x1c>)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	4608      	mov	r0, r1
 8009dd6:	602b      	str	r3, [r5, #0]
 8009dd8:	f7f8 fd50 	bl	800287c <_sbrk>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_sbrk_r+0x1a>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_sbrk_r+0x1a>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	2000089c 	.word	0x2000089c

08009dec <sniprintf>:
 8009dec:	b40c      	push	{r2, r3}
 8009dee:	b530      	push	{r4, r5, lr}
 8009df0:	4b17      	ldr	r3, [pc, #92]	; (8009e50 <sniprintf+0x64>)
 8009df2:	1e0c      	subs	r4, r1, #0
 8009df4:	681d      	ldr	r5, [r3, #0]
 8009df6:	b09d      	sub	sp, #116	; 0x74
 8009df8:	da08      	bge.n	8009e0c <sniprintf+0x20>
 8009dfa:	238b      	movs	r3, #139	; 0x8b
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009e02:	b01d      	add	sp, #116	; 0x74
 8009e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e08:	b002      	add	sp, #8
 8009e0a:	4770      	bx	lr
 8009e0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009e10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e14:	bf14      	ite	ne
 8009e16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e1a:	4623      	moveq	r3, r4
 8009e1c:	9304      	str	r3, [sp, #16]
 8009e1e:	9307      	str	r3, [sp, #28]
 8009e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e24:	9002      	str	r0, [sp, #8]
 8009e26:	9006      	str	r0, [sp, #24]
 8009e28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e2e:	ab21      	add	r3, sp, #132	; 0x84
 8009e30:	a902      	add	r1, sp, #8
 8009e32:	4628      	mov	r0, r5
 8009e34:	9301      	str	r3, [sp, #4]
 8009e36:	f001 fadb 	bl	800b3f0 <_svfiprintf_r>
 8009e3a:	1c43      	adds	r3, r0, #1
 8009e3c:	bfbc      	itt	lt
 8009e3e:	238b      	movlt	r3, #139	; 0x8b
 8009e40:	602b      	strlt	r3, [r5, #0]
 8009e42:	2c00      	cmp	r4, #0
 8009e44:	d0dd      	beq.n	8009e02 <sniprintf+0x16>
 8009e46:	9b02      	ldr	r3, [sp, #8]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	701a      	strb	r2, [r3, #0]
 8009e4c:	e7d9      	b.n	8009e02 <sniprintf+0x16>
 8009e4e:	bf00      	nop
 8009e50:	200001ec 	.word	0x200001ec

08009e54 <strcpy>:
 8009e54:	4603      	mov	r3, r0
 8009e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e5a:	f803 2b01 	strb.w	r2, [r3], #1
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	d1f9      	bne.n	8009e56 <strcpy+0x2>
 8009e62:	4770      	bx	lr

08009e64 <strtok>:
 8009e64:	4b16      	ldr	r3, [pc, #88]	; (8009ec0 <strtok+0x5c>)
 8009e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e68:	681e      	ldr	r6, [r3, #0]
 8009e6a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	b9fc      	cbnz	r4, 8009eb0 <strtok+0x4c>
 8009e70:	2050      	movs	r0, #80	; 0x50
 8009e72:	9101      	str	r1, [sp, #4]
 8009e74:	f7ff fa9e 	bl	80093b4 <malloc>
 8009e78:	9901      	ldr	r1, [sp, #4]
 8009e7a:	65b0      	str	r0, [r6, #88]	; 0x58
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	b920      	cbnz	r0, 8009e8a <strtok+0x26>
 8009e80:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <strtok+0x60>)
 8009e82:	4811      	ldr	r0, [pc, #68]	; (8009ec8 <strtok+0x64>)
 8009e84:	2157      	movs	r1, #87	; 0x57
 8009e86:	f000 f849 	bl	8009f1c <__assert_func>
 8009e8a:	e9c0 4400 	strd	r4, r4, [r0]
 8009e8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009e92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009e96:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009e9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009e9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009ea2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009ea6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009eaa:	6184      	str	r4, [r0, #24]
 8009eac:	7704      	strb	r4, [r0, #28]
 8009eae:	6244      	str	r4, [r0, #36]	; 0x24
 8009eb0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	b002      	add	sp, #8
 8009eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ebc:	f000 b806 	b.w	8009ecc <__strtok_r>
 8009ec0:	200001ec 	.word	0x200001ec
 8009ec4:	0800c3b8 	.word	0x0800c3b8
 8009ec8:	0800c3cf 	.word	0x0800c3cf

08009ecc <__strtok_r>:
 8009ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ece:	b908      	cbnz	r0, 8009ed4 <__strtok_r+0x8>
 8009ed0:	6810      	ldr	r0, [r2, #0]
 8009ed2:	b188      	cbz	r0, 8009ef8 <__strtok_r+0x2c>
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009edc:	460f      	mov	r7, r1
 8009ede:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009ee2:	b91e      	cbnz	r6, 8009eec <__strtok_r+0x20>
 8009ee4:	b965      	cbnz	r5, 8009f00 <__strtok_r+0x34>
 8009ee6:	6015      	str	r5, [r2, #0]
 8009ee8:	4628      	mov	r0, r5
 8009eea:	e005      	b.n	8009ef8 <__strtok_r+0x2c>
 8009eec:	42b5      	cmp	r5, r6
 8009eee:	d1f6      	bne.n	8009ede <__strtok_r+0x12>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1f0      	bne.n	8009ed6 <__strtok_r+0xa>
 8009ef4:	6014      	str	r4, [r2, #0]
 8009ef6:	7003      	strb	r3, [r0, #0]
 8009ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009efa:	461c      	mov	r4, r3
 8009efc:	e00c      	b.n	8009f18 <__strtok_r+0x4c>
 8009efe:	b915      	cbnz	r5, 8009f06 <__strtok_r+0x3a>
 8009f00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f04:	460e      	mov	r6, r1
 8009f06:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009f0a:	42ab      	cmp	r3, r5
 8009f0c:	d1f7      	bne.n	8009efe <__strtok_r+0x32>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0f3      	beq.n	8009efa <__strtok_r+0x2e>
 8009f12:	2300      	movs	r3, #0
 8009f14:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009f18:	6014      	str	r4, [r2, #0]
 8009f1a:	e7ed      	b.n	8009ef8 <__strtok_r+0x2c>

08009f1c <__assert_func>:
 8009f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f1e:	4614      	mov	r4, r2
 8009f20:	461a      	mov	r2, r3
 8009f22:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <__assert_func+0x2c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4605      	mov	r5, r0
 8009f28:	68d8      	ldr	r0, [r3, #12]
 8009f2a:	b14c      	cbz	r4, 8009f40 <__assert_func+0x24>
 8009f2c:	4b07      	ldr	r3, [pc, #28]	; (8009f4c <__assert_func+0x30>)
 8009f2e:	9100      	str	r1, [sp, #0]
 8009f30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f34:	4906      	ldr	r1, [pc, #24]	; (8009f50 <__assert_func+0x34>)
 8009f36:	462b      	mov	r3, r5
 8009f38:	f000 fe1c 	bl	800ab74 <fiprintf>
 8009f3c:	f001 fd72 	bl	800ba24 <abort>
 8009f40:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <__assert_func+0x38>)
 8009f42:	461c      	mov	r4, r3
 8009f44:	e7f3      	b.n	8009f2e <__assert_func+0x12>
 8009f46:	bf00      	nop
 8009f48:	200001ec 	.word	0x200001ec
 8009f4c:	0800c430 	.word	0x0800c430
 8009f50:	0800c43d 	.word	0x0800c43d
 8009f54:	0800c46b 	.word	0x0800c46b

08009f58 <quorem>:
 8009f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	6903      	ldr	r3, [r0, #16]
 8009f5e:	690c      	ldr	r4, [r1, #16]
 8009f60:	42a3      	cmp	r3, r4
 8009f62:	4607      	mov	r7, r0
 8009f64:	f2c0 8081 	blt.w	800a06a <quorem+0x112>
 8009f68:	3c01      	subs	r4, #1
 8009f6a:	f101 0814 	add.w	r8, r1, #20
 8009f6e:	f100 0514 	add.w	r5, r0, #20
 8009f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f80:	3301      	adds	r3, #1
 8009f82:	429a      	cmp	r2, r3
 8009f84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f90:	d331      	bcc.n	8009ff6 <quorem+0x9e>
 8009f92:	f04f 0e00 	mov.w	lr, #0
 8009f96:	4640      	mov	r0, r8
 8009f98:	46ac      	mov	ip, r5
 8009f9a:	46f2      	mov	sl, lr
 8009f9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009fa0:	b293      	uxth	r3, r2
 8009fa2:	fb06 e303 	mla	r3, r6, r3, lr
 8009fa6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	ebaa 0303 	sub.w	r3, sl, r3
 8009fb0:	0c12      	lsrs	r2, r2, #16
 8009fb2:	f8dc a000 	ldr.w	sl, [ip]
 8009fb6:	fb06 e202 	mla	r2, r6, r2, lr
 8009fba:	fa13 f38a 	uxtah	r3, r3, sl
 8009fbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fc2:	fa1f fa82 	uxth.w	sl, r2
 8009fc6:	f8dc 2000 	ldr.w	r2, [ip]
 8009fca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009fce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fd8:	4581      	cmp	r9, r0
 8009fda:	f84c 3b04 	str.w	r3, [ip], #4
 8009fde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fe2:	d2db      	bcs.n	8009f9c <quorem+0x44>
 8009fe4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fe8:	b92b      	cbnz	r3, 8009ff6 <quorem+0x9e>
 8009fea:	9b01      	ldr	r3, [sp, #4]
 8009fec:	3b04      	subs	r3, #4
 8009fee:	429d      	cmp	r5, r3
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	d32e      	bcc.n	800a052 <quorem+0xfa>
 8009ff4:	613c      	str	r4, [r7, #16]
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	f001 f86a 	bl	800b0d0 <__mcmp>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	db24      	blt.n	800a04a <quorem+0xf2>
 800a000:	3601      	adds	r6, #1
 800a002:	4628      	mov	r0, r5
 800a004:	f04f 0c00 	mov.w	ip, #0
 800a008:	f858 2b04 	ldr.w	r2, [r8], #4
 800a00c:	f8d0 e000 	ldr.w	lr, [r0]
 800a010:	b293      	uxth	r3, r2
 800a012:	ebac 0303 	sub.w	r3, ip, r3
 800a016:	0c12      	lsrs	r2, r2, #16
 800a018:	fa13 f38e 	uxtah	r3, r3, lr
 800a01c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a024:	b29b      	uxth	r3, r3
 800a026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a02a:	45c1      	cmp	r9, r8
 800a02c:	f840 3b04 	str.w	r3, [r0], #4
 800a030:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a034:	d2e8      	bcs.n	800a008 <quorem+0xb0>
 800a036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a03a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a03e:	b922      	cbnz	r2, 800a04a <quorem+0xf2>
 800a040:	3b04      	subs	r3, #4
 800a042:	429d      	cmp	r5, r3
 800a044:	461a      	mov	r2, r3
 800a046:	d30a      	bcc.n	800a05e <quorem+0x106>
 800a048:	613c      	str	r4, [r7, #16]
 800a04a:	4630      	mov	r0, r6
 800a04c:	b003      	add	sp, #12
 800a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a052:	6812      	ldr	r2, [r2, #0]
 800a054:	3b04      	subs	r3, #4
 800a056:	2a00      	cmp	r2, #0
 800a058:	d1cc      	bne.n	8009ff4 <quorem+0x9c>
 800a05a:	3c01      	subs	r4, #1
 800a05c:	e7c7      	b.n	8009fee <quorem+0x96>
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	3b04      	subs	r3, #4
 800a062:	2a00      	cmp	r2, #0
 800a064:	d1f0      	bne.n	800a048 <quorem+0xf0>
 800a066:	3c01      	subs	r4, #1
 800a068:	e7eb      	b.n	800a042 <quorem+0xea>
 800a06a:	2000      	movs	r0, #0
 800a06c:	e7ee      	b.n	800a04c <quorem+0xf4>
	...

0800a070 <_dtoa_r>:
 800a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	ec59 8b10 	vmov	r8, r9, d0
 800a078:	b095      	sub	sp, #84	; 0x54
 800a07a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a07c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800a07e:	9107      	str	r1, [sp, #28]
 800a080:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a084:	4606      	mov	r6, r0
 800a086:	9209      	str	r2, [sp, #36]	; 0x24
 800a088:	9310      	str	r3, [sp, #64]	; 0x40
 800a08a:	b975      	cbnz	r5, 800a0aa <_dtoa_r+0x3a>
 800a08c:	2010      	movs	r0, #16
 800a08e:	f7ff f991 	bl	80093b4 <malloc>
 800a092:	4602      	mov	r2, r0
 800a094:	6270      	str	r0, [r6, #36]	; 0x24
 800a096:	b920      	cbnz	r0, 800a0a2 <_dtoa_r+0x32>
 800a098:	4bab      	ldr	r3, [pc, #684]	; (800a348 <_dtoa_r+0x2d8>)
 800a09a:	21ea      	movs	r1, #234	; 0xea
 800a09c:	48ab      	ldr	r0, [pc, #684]	; (800a34c <_dtoa_r+0x2dc>)
 800a09e:	f7ff ff3d 	bl	8009f1c <__assert_func>
 800a0a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a0a6:	6005      	str	r5, [r0, #0]
 800a0a8:	60c5      	str	r5, [r0, #12]
 800a0aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a0ac:	6819      	ldr	r1, [r3, #0]
 800a0ae:	b151      	cbz	r1, 800a0c6 <_dtoa_r+0x56>
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	604a      	str	r2, [r1, #4]
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	4093      	lsls	r3, r2
 800a0b8:	608b      	str	r3, [r1, #8]
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f000 fdca 	bl	800ac54 <_Bfree>
 800a0c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]
 800a0c6:	f1b9 0300 	subs.w	r3, r9, #0
 800a0ca:	bfbb      	ittet	lt
 800a0cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0d0:	9303      	strlt	r3, [sp, #12]
 800a0d2:	2300      	movge	r3, #0
 800a0d4:	2201      	movlt	r2, #1
 800a0d6:	bfac      	ite	ge
 800a0d8:	6023      	strge	r3, [r4, #0]
 800a0da:	6022      	strlt	r2, [r4, #0]
 800a0dc:	4b9c      	ldr	r3, [pc, #624]	; (800a350 <_dtoa_r+0x2e0>)
 800a0de:	9c03      	ldr	r4, [sp, #12]
 800a0e0:	43a3      	bics	r3, r4
 800a0e2:	d11a      	bne.n	800a11a <_dtoa_r+0xaa>
 800a0e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a0f0:	ea53 0308 	orrs.w	r3, r3, r8
 800a0f4:	f000 8512 	beq.w	800ab1c <_dtoa_r+0xaac>
 800a0f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a0fa:	b953      	cbnz	r3, 800a112 <_dtoa_r+0xa2>
 800a0fc:	4b95      	ldr	r3, [pc, #596]	; (800a354 <_dtoa_r+0x2e4>)
 800a0fe:	e01f      	b.n	800a140 <_dtoa_r+0xd0>
 800a100:	4b95      	ldr	r3, [pc, #596]	; (800a358 <_dtoa_r+0x2e8>)
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	3308      	adds	r3, #8
 800a106:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	9800      	ldr	r0, [sp, #0]
 800a10c:	b015      	add	sp, #84	; 0x54
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	4b90      	ldr	r3, [pc, #576]	; (800a354 <_dtoa_r+0x2e4>)
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	3303      	adds	r3, #3
 800a118:	e7f5      	b.n	800a106 <_dtoa_r+0x96>
 800a11a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a11e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a126:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a12a:	d10b      	bne.n	800a144 <_dtoa_r+0xd4>
 800a12c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a12e:	2301      	movs	r3, #1
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 84ee 	beq.w	800ab16 <_dtoa_r+0xaa6>
 800a13a:	4888      	ldr	r0, [pc, #544]	; (800a35c <_dtoa_r+0x2ec>)
 800a13c:	6018      	str	r0, [r3, #0]
 800a13e:	1e43      	subs	r3, r0, #1
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	e7e2      	b.n	800a10a <_dtoa_r+0x9a>
 800a144:	a913      	add	r1, sp, #76	; 0x4c
 800a146:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a14a:	aa12      	add	r2, sp, #72	; 0x48
 800a14c:	4630      	mov	r0, r6
 800a14e:	f001 f863 	bl	800b218 <__d2b>
 800a152:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a156:	4605      	mov	r5, r0
 800a158:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a15a:	2900      	cmp	r1, #0
 800a15c:	d047      	beq.n	800a1ee <_dtoa_r+0x17e>
 800a15e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a160:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a164:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a168:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a16c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a170:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a174:	2400      	movs	r4, #0
 800a176:	ec43 2b16 	vmov	d6, r2, r3
 800a17a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a17e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800a330 <_dtoa_r+0x2c0>
 800a182:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a186:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800a338 <_dtoa_r+0x2c8>
 800a18a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a18e:	eeb0 7b46 	vmov.f64	d7, d6
 800a192:	ee06 1a90 	vmov	s13, r1
 800a196:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800a19a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a340 <_dtoa_r+0x2d0>
 800a19e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a1a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a1a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ae:	ee16 ba90 	vmov	fp, s13
 800a1b2:	9411      	str	r4, [sp, #68]	; 0x44
 800a1b4:	d508      	bpl.n	800a1c8 <_dtoa_r+0x158>
 800a1b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a1ba:	eeb4 6b47 	vcmp.f64	d6, d7
 800a1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c2:	bf18      	it	ne
 800a1c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a1c8:	f1bb 0f16 	cmp.w	fp, #22
 800a1cc:	d832      	bhi.n	800a234 <_dtoa_r+0x1c4>
 800a1ce:	4b64      	ldr	r3, [pc, #400]	; (800a360 <_dtoa_r+0x2f0>)
 800a1d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1d4:	ed93 7b00 	vldr	d7, [r3]
 800a1d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a1dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e4:	d501      	bpl.n	800a1ea <_dtoa_r+0x17a>
 800a1e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	e023      	b.n	800a236 <_dtoa_r+0x1c6>
 800a1ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a1f0:	4401      	add	r1, r0
 800a1f2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a1f6:	2b20      	cmp	r3, #32
 800a1f8:	bfc3      	ittte	gt
 800a1fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1fe:	fa04 f303 	lslgt.w	r3, r4, r3
 800a202:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a206:	f1c3 0320 	rsble	r3, r3, #32
 800a20a:	bfc6      	itte	gt
 800a20c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a210:	ea43 0308 	orrgt.w	r3, r3, r8
 800a214:	fa08 f303 	lslle.w	r3, r8, r3
 800a218:	ee07 3a90 	vmov	s15, r3
 800a21c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a220:	3901      	subs	r1, #1
 800a222:	ed8d 7b00 	vstr	d7, [sp]
 800a226:	9c01      	ldr	r4, [sp, #4]
 800a228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a22c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a230:	2401      	movs	r4, #1
 800a232:	e7a0      	b.n	800a176 <_dtoa_r+0x106>
 800a234:	2301      	movs	r3, #1
 800a236:	930f      	str	r3, [sp, #60]	; 0x3c
 800a238:	1a43      	subs	r3, r0, r1
 800a23a:	1e5a      	subs	r2, r3, #1
 800a23c:	bf45      	ittet	mi
 800a23e:	f1c3 0301 	rsbmi	r3, r3, #1
 800a242:	9305      	strmi	r3, [sp, #20]
 800a244:	2300      	movpl	r3, #0
 800a246:	2300      	movmi	r3, #0
 800a248:	9206      	str	r2, [sp, #24]
 800a24a:	bf54      	ite	pl
 800a24c:	9305      	strpl	r3, [sp, #20]
 800a24e:	9306      	strmi	r3, [sp, #24]
 800a250:	f1bb 0f00 	cmp.w	fp, #0
 800a254:	db18      	blt.n	800a288 <_dtoa_r+0x218>
 800a256:	9b06      	ldr	r3, [sp, #24]
 800a258:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a25c:	445b      	add	r3, fp
 800a25e:	9306      	str	r3, [sp, #24]
 800a260:	2300      	movs	r3, #0
 800a262:	9a07      	ldr	r2, [sp, #28]
 800a264:	2a09      	cmp	r2, #9
 800a266:	d849      	bhi.n	800a2fc <_dtoa_r+0x28c>
 800a268:	2a05      	cmp	r2, #5
 800a26a:	bfc4      	itt	gt
 800a26c:	3a04      	subgt	r2, #4
 800a26e:	9207      	strgt	r2, [sp, #28]
 800a270:	9a07      	ldr	r2, [sp, #28]
 800a272:	f1a2 0202 	sub.w	r2, r2, #2
 800a276:	bfcc      	ite	gt
 800a278:	2400      	movgt	r4, #0
 800a27a:	2401      	movle	r4, #1
 800a27c:	2a03      	cmp	r2, #3
 800a27e:	d848      	bhi.n	800a312 <_dtoa_r+0x2a2>
 800a280:	e8df f002 	tbb	[pc, r2]
 800a284:	3a2c2e0b 	.word	0x3a2c2e0b
 800a288:	9b05      	ldr	r3, [sp, #20]
 800a28a:	2200      	movs	r2, #0
 800a28c:	eba3 030b 	sub.w	r3, r3, fp
 800a290:	9305      	str	r3, [sp, #20]
 800a292:	920e      	str	r2, [sp, #56]	; 0x38
 800a294:	f1cb 0300 	rsb	r3, fp, #0
 800a298:	e7e3      	b.n	800a262 <_dtoa_r+0x1f2>
 800a29a:	2200      	movs	r2, #0
 800a29c:	9208      	str	r2, [sp, #32]
 800a29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2a0:	2a00      	cmp	r2, #0
 800a2a2:	dc39      	bgt.n	800a318 <_dtoa_r+0x2a8>
 800a2a4:	f04f 0a01 	mov.w	sl, #1
 800a2a8:	46d1      	mov	r9, sl
 800a2aa:	4652      	mov	r2, sl
 800a2ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a2b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	6079      	str	r1, [r7, #4]
 800a2b6:	2004      	movs	r0, #4
 800a2b8:	f100 0c14 	add.w	ip, r0, #20
 800a2bc:	4594      	cmp	ip, r2
 800a2be:	6879      	ldr	r1, [r7, #4]
 800a2c0:	d92f      	bls.n	800a322 <_dtoa_r+0x2b2>
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	930c      	str	r3, [sp, #48]	; 0x30
 800a2c6:	f000 fc85 	bl	800abd4 <_Balloc>
 800a2ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2cc:	9000      	str	r0, [sp, #0]
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d149      	bne.n	800a368 <_dtoa_r+0x2f8>
 800a2d4:	4b23      	ldr	r3, [pc, #140]	; (800a364 <_dtoa_r+0x2f4>)
 800a2d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a2da:	e6df      	b.n	800a09c <_dtoa_r+0x2c>
 800a2dc:	2201      	movs	r2, #1
 800a2de:	e7dd      	b.n	800a29c <_dtoa_r+0x22c>
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	9208      	str	r2, [sp, #32]
 800a2e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e6:	eb0b 0a02 	add.w	sl, fp, r2
 800a2ea:	f10a 0901 	add.w	r9, sl, #1
 800a2ee:	464a      	mov	r2, r9
 800a2f0:	2a01      	cmp	r2, #1
 800a2f2:	bfb8      	it	lt
 800a2f4:	2201      	movlt	r2, #1
 800a2f6:	e7db      	b.n	800a2b0 <_dtoa_r+0x240>
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	e7f2      	b.n	800a2e2 <_dtoa_r+0x272>
 800a2fc:	2401      	movs	r4, #1
 800a2fe:	2200      	movs	r2, #0
 800a300:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a304:	f04f 3aff 	mov.w	sl, #4294967295
 800a308:	2100      	movs	r1, #0
 800a30a:	46d1      	mov	r9, sl
 800a30c:	2212      	movs	r2, #18
 800a30e:	9109      	str	r1, [sp, #36]	; 0x24
 800a310:	e7ce      	b.n	800a2b0 <_dtoa_r+0x240>
 800a312:	2201      	movs	r2, #1
 800a314:	9208      	str	r2, [sp, #32]
 800a316:	e7f5      	b.n	800a304 <_dtoa_r+0x294>
 800a318:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a31c:	46d1      	mov	r9, sl
 800a31e:	4652      	mov	r2, sl
 800a320:	e7c6      	b.n	800a2b0 <_dtoa_r+0x240>
 800a322:	3101      	adds	r1, #1
 800a324:	6079      	str	r1, [r7, #4]
 800a326:	0040      	lsls	r0, r0, #1
 800a328:	e7c6      	b.n	800a2b8 <_dtoa_r+0x248>
 800a32a:	bf00      	nop
 800a32c:	f3af 8000 	nop.w
 800a330:	636f4361 	.word	0x636f4361
 800a334:	3fd287a7 	.word	0x3fd287a7
 800a338:	8b60c8b3 	.word	0x8b60c8b3
 800a33c:	3fc68a28 	.word	0x3fc68a28
 800a340:	509f79fb 	.word	0x509f79fb
 800a344:	3fd34413 	.word	0x3fd34413
 800a348:	0800c3b8 	.word	0x0800c3b8
 800a34c:	0800c479 	.word	0x0800c479
 800a350:	7ff00000 	.word	0x7ff00000
 800a354:	0800c475 	.word	0x0800c475
 800a358:	0800c46c 	.word	0x0800c46c
 800a35c:	0800c395 	.word	0x0800c395
 800a360:	0800c578 	.word	0x0800c578
 800a364:	0800c4d8 	.word	0x0800c4d8
 800a368:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a36a:	9900      	ldr	r1, [sp, #0]
 800a36c:	6011      	str	r1, [r2, #0]
 800a36e:	f1b9 0f0e 	cmp.w	r9, #14
 800a372:	d872      	bhi.n	800a45a <_dtoa_r+0x3ea>
 800a374:	2c00      	cmp	r4, #0
 800a376:	d070      	beq.n	800a45a <_dtoa_r+0x3ea>
 800a378:	f1bb 0f00 	cmp.w	fp, #0
 800a37c:	f340 80a6 	ble.w	800a4cc <_dtoa_r+0x45c>
 800a380:	49ca      	ldr	r1, [pc, #808]	; (800a6ac <_dtoa_r+0x63c>)
 800a382:	f00b 020f 	and.w	r2, fp, #15
 800a386:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a38a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a38e:	ed92 7b00 	vldr	d7, [r2]
 800a392:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a396:	f000 808d 	beq.w	800a4b4 <_dtoa_r+0x444>
 800a39a:	4ac5      	ldr	r2, [pc, #788]	; (800a6b0 <_dtoa_r+0x640>)
 800a39c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a3a0:	ed92 6b08 	vldr	d6, [r2, #32]
 800a3a4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a3a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a3ac:	f001 010f 	and.w	r1, r1, #15
 800a3b0:	2203      	movs	r2, #3
 800a3b2:	48bf      	ldr	r0, [pc, #764]	; (800a6b0 <_dtoa_r+0x640>)
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	d17f      	bne.n	800a4b8 <_dtoa_r+0x448>
 800a3b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a3bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a3c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a3c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	f000 80b2 	beq.w	800a530 <_dtoa_r+0x4c0>
 800a3cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a3d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3dc:	f140 80a8 	bpl.w	800a530 <_dtoa_r+0x4c0>
 800a3e0:	f1b9 0f00 	cmp.w	r9, #0
 800a3e4:	f000 80a4 	beq.w	800a530 <_dtoa_r+0x4c0>
 800a3e8:	f1ba 0f00 	cmp.w	sl, #0
 800a3ec:	dd31      	ble.n	800a452 <_dtoa_r+0x3e2>
 800a3ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a3f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a3f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a3fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a3fe:	3201      	adds	r2, #1
 800a400:	4650      	mov	r0, sl
 800a402:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a406:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a40a:	ee07 2a90 	vmov	s15, r2
 800a40e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a412:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a416:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a41a:	9c03      	ldr	r4, [sp, #12]
 800a41c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a420:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a424:	2800      	cmp	r0, #0
 800a426:	f040 8086 	bne.w	800a536 <_dtoa_r+0x4c6>
 800a42a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a42e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a432:	ec42 1b17 	vmov	d7, r1, r2
 800a436:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a43e:	f300 8272 	bgt.w	800a926 <_dtoa_r+0x8b6>
 800a442:	eeb1 7b47 	vneg.f64	d7, d7
 800a446:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a44e:	f100 8267 	bmi.w	800a920 <_dtoa_r+0x8b0>
 800a452:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800a456:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a45a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	f2c0 8129 	blt.w	800a6b4 <_dtoa_r+0x644>
 800a462:	f1bb 0f0e 	cmp.w	fp, #14
 800a466:	f300 8125 	bgt.w	800a6b4 <_dtoa_r+0x644>
 800a46a:	4b90      	ldr	r3, [pc, #576]	; (800a6ac <_dtoa_r+0x63c>)
 800a46c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a470:	ed93 6b00 	vldr	d6, [r3]
 800a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a476:	2b00      	cmp	r3, #0
 800a478:	f280 80c3 	bge.w	800a602 <_dtoa_r+0x592>
 800a47c:	f1b9 0f00 	cmp.w	r9, #0
 800a480:	f300 80bf 	bgt.w	800a602 <_dtoa_r+0x592>
 800a484:	f040 824c 	bne.w	800a920 <_dtoa_r+0x8b0>
 800a488:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a48c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a490:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a494:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a49c:	464c      	mov	r4, r9
 800a49e:	464f      	mov	r7, r9
 800a4a0:	f280 8222 	bge.w	800a8e8 <_dtoa_r+0x878>
 800a4a4:	f8dd 8000 	ldr.w	r8, [sp]
 800a4a8:	2331      	movs	r3, #49	; 0x31
 800a4aa:	f808 3b01 	strb.w	r3, [r8], #1
 800a4ae:	f10b 0b01 	add.w	fp, fp, #1
 800a4b2:	e21e      	b.n	800a8f2 <_dtoa_r+0x882>
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	e77c      	b.n	800a3b2 <_dtoa_r+0x342>
 800a4b8:	07cc      	lsls	r4, r1, #31
 800a4ba:	d504      	bpl.n	800a4c6 <_dtoa_r+0x456>
 800a4bc:	ed90 6b00 	vldr	d6, [r0]
 800a4c0:	3201      	adds	r2, #1
 800a4c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4c6:	1049      	asrs	r1, r1, #1
 800a4c8:	3008      	adds	r0, #8
 800a4ca:	e773      	b.n	800a3b4 <_dtoa_r+0x344>
 800a4cc:	d02e      	beq.n	800a52c <_dtoa_r+0x4bc>
 800a4ce:	f1cb 0100 	rsb	r1, fp, #0
 800a4d2:	4a76      	ldr	r2, [pc, #472]	; (800a6ac <_dtoa_r+0x63c>)
 800a4d4:	f001 000f 	and.w	r0, r1, #15
 800a4d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a4dc:	ed92 7b00 	vldr	d7, [r2]
 800a4e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a4e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a4e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a4ec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800a4f0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a4f4:	486e      	ldr	r0, [pc, #440]	; (800a6b0 <_dtoa_r+0x640>)
 800a4f6:	1109      	asrs	r1, r1, #4
 800a4f8:	2400      	movs	r4, #0
 800a4fa:	2202      	movs	r2, #2
 800a4fc:	b939      	cbnz	r1, 800a50e <_dtoa_r+0x49e>
 800a4fe:	2c00      	cmp	r4, #0
 800a500:	f43f af60 	beq.w	800a3c4 <_dtoa_r+0x354>
 800a504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a50c:	e75a      	b.n	800a3c4 <_dtoa_r+0x354>
 800a50e:	07cf      	lsls	r7, r1, #31
 800a510:	d509      	bpl.n	800a526 <_dtoa_r+0x4b6>
 800a512:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a516:	ed90 7b00 	vldr	d7, [r0]
 800a51a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a51e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a522:	3201      	adds	r2, #1
 800a524:	2401      	movs	r4, #1
 800a526:	1049      	asrs	r1, r1, #1
 800a528:	3008      	adds	r0, #8
 800a52a:	e7e7      	b.n	800a4fc <_dtoa_r+0x48c>
 800a52c:	2202      	movs	r2, #2
 800a52e:	e749      	b.n	800a3c4 <_dtoa_r+0x354>
 800a530:	465f      	mov	r7, fp
 800a532:	4648      	mov	r0, r9
 800a534:	e765      	b.n	800a402 <_dtoa_r+0x392>
 800a536:	ec42 1b17 	vmov	d7, r1, r2
 800a53a:	4a5c      	ldr	r2, [pc, #368]	; (800a6ac <_dtoa_r+0x63c>)
 800a53c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a540:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a544:	9a00      	ldr	r2, [sp, #0]
 800a546:	1814      	adds	r4, r2, r0
 800a548:	9a08      	ldr	r2, [sp, #32]
 800a54a:	b352      	cbz	r2, 800a5a2 <_dtoa_r+0x532>
 800a54c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a550:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a554:	f8dd 8000 	ldr.w	r8, [sp]
 800a558:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a55c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a560:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a564:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a568:	ee14 2a90 	vmov	r2, s9
 800a56c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a570:	3230      	adds	r2, #48	; 0x30
 800a572:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a576:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a57e:	f808 2b01 	strb.w	r2, [r8], #1
 800a582:	d439      	bmi.n	800a5f8 <_dtoa_r+0x588>
 800a584:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a588:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a590:	d472      	bmi.n	800a678 <_dtoa_r+0x608>
 800a592:	45a0      	cmp	r8, r4
 800a594:	f43f af5d 	beq.w	800a452 <_dtoa_r+0x3e2>
 800a598:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a59c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a5a0:	e7e0      	b.n	800a564 <_dtoa_r+0x4f4>
 800a5a2:	f8dd 8000 	ldr.w	r8, [sp]
 800a5a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a5aa:	4621      	mov	r1, r4
 800a5ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a5b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a5b4:	ee14 2a90 	vmov	r2, s9
 800a5b8:	3230      	adds	r2, #48	; 0x30
 800a5ba:	f808 2b01 	strb.w	r2, [r8], #1
 800a5be:	45a0      	cmp	r8, r4
 800a5c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a5c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a5c8:	d118      	bne.n	800a5fc <_dtoa_r+0x58c>
 800a5ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a5ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a5d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5da:	dc4d      	bgt.n	800a678 <_dtoa_r+0x608>
 800a5dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a5e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e8:	f57f af33 	bpl.w	800a452 <_dtoa_r+0x3e2>
 800a5ec:	4688      	mov	r8, r1
 800a5ee:	3901      	subs	r1, #1
 800a5f0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a5f4:	2b30      	cmp	r3, #48	; 0x30
 800a5f6:	d0f9      	beq.n	800a5ec <_dtoa_r+0x57c>
 800a5f8:	46bb      	mov	fp, r7
 800a5fa:	e02a      	b.n	800a652 <_dtoa_r+0x5e2>
 800a5fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a600:	e7d6      	b.n	800a5b0 <_dtoa_r+0x540>
 800a602:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a606:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a60a:	f8dd 8000 	ldr.w	r8, [sp]
 800a60e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a612:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a616:	ee15 3a10 	vmov	r3, s10
 800a61a:	3330      	adds	r3, #48	; 0x30
 800a61c:	f808 3b01 	strb.w	r3, [r8], #1
 800a620:	9b00      	ldr	r3, [sp, #0]
 800a622:	eba8 0303 	sub.w	r3, r8, r3
 800a626:	4599      	cmp	r9, r3
 800a628:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a62c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a630:	d133      	bne.n	800a69a <_dtoa_r+0x62a>
 800a632:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a636:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a63e:	dc1a      	bgt.n	800a676 <_dtoa_r+0x606>
 800a640:	eeb4 7b46 	vcmp.f64	d7, d6
 800a644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a648:	d103      	bne.n	800a652 <_dtoa_r+0x5e2>
 800a64a:	ee15 3a10 	vmov	r3, s10
 800a64e:	07d9      	lsls	r1, r3, #31
 800a650:	d411      	bmi.n	800a676 <_dtoa_r+0x606>
 800a652:	4629      	mov	r1, r5
 800a654:	4630      	mov	r0, r6
 800a656:	f000 fafd 	bl	800ac54 <_Bfree>
 800a65a:	2300      	movs	r3, #0
 800a65c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a65e:	f888 3000 	strb.w	r3, [r8]
 800a662:	f10b 0301 	add.w	r3, fp, #1
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f43f ad4d 	beq.w	800a10a <_dtoa_r+0x9a>
 800a670:	f8c3 8000 	str.w	r8, [r3]
 800a674:	e549      	b.n	800a10a <_dtoa_r+0x9a>
 800a676:	465f      	mov	r7, fp
 800a678:	4643      	mov	r3, r8
 800a67a:	4698      	mov	r8, r3
 800a67c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a680:	2a39      	cmp	r2, #57	; 0x39
 800a682:	d106      	bne.n	800a692 <_dtoa_r+0x622>
 800a684:	9a00      	ldr	r2, [sp, #0]
 800a686:	429a      	cmp	r2, r3
 800a688:	d1f7      	bne.n	800a67a <_dtoa_r+0x60a>
 800a68a:	9900      	ldr	r1, [sp, #0]
 800a68c:	2230      	movs	r2, #48	; 0x30
 800a68e:	3701      	adds	r7, #1
 800a690:	700a      	strb	r2, [r1, #0]
 800a692:	781a      	ldrb	r2, [r3, #0]
 800a694:	3201      	adds	r2, #1
 800a696:	701a      	strb	r2, [r3, #0]
 800a698:	e7ae      	b.n	800a5f8 <_dtoa_r+0x588>
 800a69a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a69e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a6:	d1b2      	bne.n	800a60e <_dtoa_r+0x59e>
 800a6a8:	e7d3      	b.n	800a652 <_dtoa_r+0x5e2>
 800a6aa:	bf00      	nop
 800a6ac:	0800c578 	.word	0x0800c578
 800a6b0:	0800c550 	.word	0x0800c550
 800a6b4:	9908      	ldr	r1, [sp, #32]
 800a6b6:	2900      	cmp	r1, #0
 800a6b8:	f000 80d1 	beq.w	800a85e <_dtoa_r+0x7ee>
 800a6bc:	9907      	ldr	r1, [sp, #28]
 800a6be:	2901      	cmp	r1, #1
 800a6c0:	f300 80b4 	bgt.w	800a82c <_dtoa_r+0x7bc>
 800a6c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a6c6:	2900      	cmp	r1, #0
 800a6c8:	f000 80ac 	beq.w	800a824 <_dtoa_r+0x7b4>
 800a6cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a6d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a6d4:	461c      	mov	r4, r3
 800a6d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a6d8:	9b05      	ldr	r3, [sp, #20]
 800a6da:	4413      	add	r3, r2
 800a6dc:	9305      	str	r3, [sp, #20]
 800a6de:	9b06      	ldr	r3, [sp, #24]
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	4413      	add	r3, r2
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	9306      	str	r3, [sp, #24]
 800a6e8:	f000 fb70 	bl	800adcc <__i2b>
 800a6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	f1b8 0f00 	cmp.w	r8, #0
 800a6f4:	dd0d      	ble.n	800a712 <_dtoa_r+0x6a2>
 800a6f6:	9a06      	ldr	r2, [sp, #24]
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	dd0a      	ble.n	800a712 <_dtoa_r+0x6a2>
 800a6fc:	4542      	cmp	r2, r8
 800a6fe:	9905      	ldr	r1, [sp, #20]
 800a700:	bfa8      	it	ge
 800a702:	4642      	movge	r2, r8
 800a704:	1a89      	subs	r1, r1, r2
 800a706:	9105      	str	r1, [sp, #20]
 800a708:	9906      	ldr	r1, [sp, #24]
 800a70a:	eba8 0802 	sub.w	r8, r8, r2
 800a70e:	1a8a      	subs	r2, r1, r2
 800a710:	9206      	str	r2, [sp, #24]
 800a712:	b303      	cbz	r3, 800a756 <_dtoa_r+0x6e6>
 800a714:	9a08      	ldr	r2, [sp, #32]
 800a716:	2a00      	cmp	r2, #0
 800a718:	f000 80a6 	beq.w	800a868 <_dtoa_r+0x7f8>
 800a71c:	2c00      	cmp	r4, #0
 800a71e:	dd13      	ble.n	800a748 <_dtoa_r+0x6d8>
 800a720:	4639      	mov	r1, r7
 800a722:	4622      	mov	r2, r4
 800a724:	4630      	mov	r0, r6
 800a726:	930c      	str	r3, [sp, #48]	; 0x30
 800a728:	f000 fc0c 	bl	800af44 <__pow5mult>
 800a72c:	462a      	mov	r2, r5
 800a72e:	4601      	mov	r1, r0
 800a730:	4607      	mov	r7, r0
 800a732:	4630      	mov	r0, r6
 800a734:	f000 fb60 	bl	800adf8 <__multiply>
 800a738:	4629      	mov	r1, r5
 800a73a:	900a      	str	r0, [sp, #40]	; 0x28
 800a73c:	4630      	mov	r0, r6
 800a73e:	f000 fa89 	bl	800ac54 <_Bfree>
 800a742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a746:	4615      	mov	r5, r2
 800a748:	1b1a      	subs	r2, r3, r4
 800a74a:	d004      	beq.n	800a756 <_dtoa_r+0x6e6>
 800a74c:	4629      	mov	r1, r5
 800a74e:	4630      	mov	r0, r6
 800a750:	f000 fbf8 	bl	800af44 <__pow5mult>
 800a754:	4605      	mov	r5, r0
 800a756:	2101      	movs	r1, #1
 800a758:	4630      	mov	r0, r6
 800a75a:	f000 fb37 	bl	800adcc <__i2b>
 800a75e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a760:	2b00      	cmp	r3, #0
 800a762:	4604      	mov	r4, r0
 800a764:	f340 8082 	ble.w	800a86c <_dtoa_r+0x7fc>
 800a768:	461a      	mov	r2, r3
 800a76a:	4601      	mov	r1, r0
 800a76c:	4630      	mov	r0, r6
 800a76e:	f000 fbe9 	bl	800af44 <__pow5mult>
 800a772:	9b07      	ldr	r3, [sp, #28]
 800a774:	2b01      	cmp	r3, #1
 800a776:	4604      	mov	r4, r0
 800a778:	dd7b      	ble.n	800a872 <_dtoa_r+0x802>
 800a77a:	2300      	movs	r3, #0
 800a77c:	930a      	str	r3, [sp, #40]	; 0x28
 800a77e:	6922      	ldr	r2, [r4, #16]
 800a780:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a784:	6910      	ldr	r0, [r2, #16]
 800a786:	f000 fad1 	bl	800ad2c <__hi0bits>
 800a78a:	f1c0 0020 	rsb	r0, r0, #32
 800a78e:	9b06      	ldr	r3, [sp, #24]
 800a790:	4418      	add	r0, r3
 800a792:	f010 001f 	ands.w	r0, r0, #31
 800a796:	f000 808d 	beq.w	800a8b4 <_dtoa_r+0x844>
 800a79a:	f1c0 0220 	rsb	r2, r0, #32
 800a79e:	2a04      	cmp	r2, #4
 800a7a0:	f340 8086 	ble.w	800a8b0 <_dtoa_r+0x840>
 800a7a4:	f1c0 001c 	rsb	r0, r0, #28
 800a7a8:	9b05      	ldr	r3, [sp, #20]
 800a7aa:	4403      	add	r3, r0
 800a7ac:	9305      	str	r3, [sp, #20]
 800a7ae:	9b06      	ldr	r3, [sp, #24]
 800a7b0:	4403      	add	r3, r0
 800a7b2:	4480      	add	r8, r0
 800a7b4:	9306      	str	r3, [sp, #24]
 800a7b6:	9b05      	ldr	r3, [sp, #20]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dd05      	ble.n	800a7c8 <_dtoa_r+0x758>
 800a7bc:	4629      	mov	r1, r5
 800a7be:	461a      	mov	r2, r3
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f000 fc19 	bl	800aff8 <__lshift>
 800a7c6:	4605      	mov	r5, r0
 800a7c8:	9b06      	ldr	r3, [sp, #24]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	dd05      	ble.n	800a7da <_dtoa_r+0x76a>
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f000 fc10 	bl	800aff8 <__lshift>
 800a7d8:	4604      	mov	r4, r0
 800a7da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d06b      	beq.n	800a8b8 <_dtoa_r+0x848>
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f000 fc74 	bl	800b0d0 <__mcmp>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	da65      	bge.n	800a8b8 <_dtoa_r+0x848>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	220a      	movs	r2, #10
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f000 fa50 	bl	800ac98 <__multadd>
 800a7f8:	9b08      	ldr	r3, [sp, #32]
 800a7fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7fe:	4605      	mov	r5, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	f000 8192 	beq.w	800ab2a <_dtoa_r+0xaba>
 800a806:	4639      	mov	r1, r7
 800a808:	2300      	movs	r3, #0
 800a80a:	220a      	movs	r2, #10
 800a80c:	4630      	mov	r0, r6
 800a80e:	f000 fa43 	bl	800ac98 <__multadd>
 800a812:	f1ba 0f00 	cmp.w	sl, #0
 800a816:	4607      	mov	r7, r0
 800a818:	f300 808e 	bgt.w	800a938 <_dtoa_r+0x8c8>
 800a81c:	9b07      	ldr	r3, [sp, #28]
 800a81e:	2b02      	cmp	r3, #2
 800a820:	dc51      	bgt.n	800a8c6 <_dtoa_r+0x856>
 800a822:	e089      	b.n	800a938 <_dtoa_r+0x8c8>
 800a824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a826:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a82a:	e751      	b.n	800a6d0 <_dtoa_r+0x660>
 800a82c:	f109 34ff 	add.w	r4, r9, #4294967295
 800a830:	42a3      	cmp	r3, r4
 800a832:	bfbf      	itttt	lt
 800a834:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a836:	1ae3      	sublt	r3, r4, r3
 800a838:	18d2      	addlt	r2, r2, r3
 800a83a:	4613      	movlt	r3, r2
 800a83c:	bfb7      	itett	lt
 800a83e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a840:	1b1c      	subge	r4, r3, r4
 800a842:	4623      	movlt	r3, r4
 800a844:	2400      	movlt	r4, #0
 800a846:	f1b9 0f00 	cmp.w	r9, #0
 800a84a:	bfb5      	itete	lt
 800a84c:	9a05      	ldrlt	r2, [sp, #20]
 800a84e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800a852:	eba2 0809 	sublt.w	r8, r2, r9
 800a856:	464a      	movge	r2, r9
 800a858:	bfb8      	it	lt
 800a85a:	2200      	movlt	r2, #0
 800a85c:	e73b      	b.n	800a6d6 <_dtoa_r+0x666>
 800a85e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a862:	9f08      	ldr	r7, [sp, #32]
 800a864:	461c      	mov	r4, r3
 800a866:	e743      	b.n	800a6f0 <_dtoa_r+0x680>
 800a868:	461a      	mov	r2, r3
 800a86a:	e76f      	b.n	800a74c <_dtoa_r+0x6dc>
 800a86c:	9b07      	ldr	r3, [sp, #28]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	dc18      	bgt.n	800a8a4 <_dtoa_r+0x834>
 800a872:	9b02      	ldr	r3, [sp, #8]
 800a874:	b9b3      	cbnz	r3, 800a8a4 <_dtoa_r+0x834>
 800a876:	9b03      	ldr	r3, [sp, #12]
 800a878:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a87c:	b9a2      	cbnz	r2, 800a8a8 <_dtoa_r+0x838>
 800a87e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a882:	0d12      	lsrs	r2, r2, #20
 800a884:	0512      	lsls	r2, r2, #20
 800a886:	b18a      	cbz	r2, 800a8ac <_dtoa_r+0x83c>
 800a888:	9b05      	ldr	r3, [sp, #20]
 800a88a:	3301      	adds	r3, #1
 800a88c:	9305      	str	r3, [sp, #20]
 800a88e:	9b06      	ldr	r3, [sp, #24]
 800a890:	3301      	adds	r3, #1
 800a892:	9306      	str	r3, [sp, #24]
 800a894:	2301      	movs	r3, #1
 800a896:	930a      	str	r3, [sp, #40]	; 0x28
 800a898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f47f af6f 	bne.w	800a77e <_dtoa_r+0x70e>
 800a8a0:	2001      	movs	r0, #1
 800a8a2:	e774      	b.n	800a78e <_dtoa_r+0x71e>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	e7f6      	b.n	800a896 <_dtoa_r+0x826>
 800a8a8:	9b02      	ldr	r3, [sp, #8]
 800a8aa:	e7f4      	b.n	800a896 <_dtoa_r+0x826>
 800a8ac:	920a      	str	r2, [sp, #40]	; 0x28
 800a8ae:	e7f3      	b.n	800a898 <_dtoa_r+0x828>
 800a8b0:	d081      	beq.n	800a7b6 <_dtoa_r+0x746>
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	301c      	adds	r0, #28
 800a8b6:	e777      	b.n	800a7a8 <_dtoa_r+0x738>
 800a8b8:	f1b9 0f00 	cmp.w	r9, #0
 800a8bc:	dc37      	bgt.n	800a92e <_dtoa_r+0x8be>
 800a8be:	9b07      	ldr	r3, [sp, #28]
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	dd34      	ble.n	800a92e <_dtoa_r+0x8be>
 800a8c4:	46ca      	mov	sl, r9
 800a8c6:	f1ba 0f00 	cmp.w	sl, #0
 800a8ca:	d10d      	bne.n	800a8e8 <_dtoa_r+0x878>
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4653      	mov	r3, sl
 800a8d0:	2205      	movs	r2, #5
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f000 f9e0 	bl	800ac98 <__multadd>
 800a8d8:	4601      	mov	r1, r0
 800a8da:	4604      	mov	r4, r0
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f000 fbf7 	bl	800b0d0 <__mcmp>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	f73f adde 	bgt.w	800a4a4 <_dtoa_r+0x434>
 800a8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ea:	f8dd 8000 	ldr.w	r8, [sp]
 800a8ee:	ea6f 0b03 	mvn.w	fp, r3
 800a8f2:	f04f 0900 	mov.w	r9, #0
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	f000 f9ab 	bl	800ac54 <_Bfree>
 800a8fe:	2f00      	cmp	r7, #0
 800a900:	f43f aea7 	beq.w	800a652 <_dtoa_r+0x5e2>
 800a904:	f1b9 0f00 	cmp.w	r9, #0
 800a908:	d005      	beq.n	800a916 <_dtoa_r+0x8a6>
 800a90a:	45b9      	cmp	r9, r7
 800a90c:	d003      	beq.n	800a916 <_dtoa_r+0x8a6>
 800a90e:	4649      	mov	r1, r9
 800a910:	4630      	mov	r0, r6
 800a912:	f000 f99f 	bl	800ac54 <_Bfree>
 800a916:	4639      	mov	r1, r7
 800a918:	4630      	mov	r0, r6
 800a91a:	f000 f99b 	bl	800ac54 <_Bfree>
 800a91e:	e698      	b.n	800a652 <_dtoa_r+0x5e2>
 800a920:	2400      	movs	r4, #0
 800a922:	4627      	mov	r7, r4
 800a924:	e7e0      	b.n	800a8e8 <_dtoa_r+0x878>
 800a926:	46bb      	mov	fp, r7
 800a928:	4604      	mov	r4, r0
 800a92a:	4607      	mov	r7, r0
 800a92c:	e5ba      	b.n	800a4a4 <_dtoa_r+0x434>
 800a92e:	9b08      	ldr	r3, [sp, #32]
 800a930:	46ca      	mov	sl, r9
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 8100 	beq.w	800ab38 <_dtoa_r+0xac8>
 800a938:	f1b8 0f00 	cmp.w	r8, #0
 800a93c:	dd05      	ble.n	800a94a <_dtoa_r+0x8da>
 800a93e:	4639      	mov	r1, r7
 800a940:	4642      	mov	r2, r8
 800a942:	4630      	mov	r0, r6
 800a944:	f000 fb58 	bl	800aff8 <__lshift>
 800a948:	4607      	mov	r7, r0
 800a94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d05d      	beq.n	800aa0c <_dtoa_r+0x99c>
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	4630      	mov	r0, r6
 800a954:	f000 f93e 	bl	800abd4 <_Balloc>
 800a958:	4680      	mov	r8, r0
 800a95a:	b928      	cbnz	r0, 800a968 <_dtoa_r+0x8f8>
 800a95c:	4b82      	ldr	r3, [pc, #520]	; (800ab68 <_dtoa_r+0xaf8>)
 800a95e:	4602      	mov	r2, r0
 800a960:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a964:	f7ff bb9a 	b.w	800a09c <_dtoa_r+0x2c>
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	3202      	adds	r2, #2
 800a96c:	0092      	lsls	r2, r2, #2
 800a96e:	f107 010c 	add.w	r1, r7, #12
 800a972:	300c      	adds	r0, #12
 800a974:	f000 f914 	bl	800aba0 <memcpy>
 800a978:	2201      	movs	r2, #1
 800a97a:	4641      	mov	r1, r8
 800a97c:	4630      	mov	r0, r6
 800a97e:	f000 fb3b 	bl	800aff8 <__lshift>
 800a982:	9b00      	ldr	r3, [sp, #0]
 800a984:	3301      	adds	r3, #1
 800a986:	9305      	str	r3, [sp, #20]
 800a988:	9b00      	ldr	r3, [sp, #0]
 800a98a:	4453      	add	r3, sl
 800a98c:	9309      	str	r3, [sp, #36]	; 0x24
 800a98e:	9b02      	ldr	r3, [sp, #8]
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	46b9      	mov	r9, r7
 800a996:	9308      	str	r3, [sp, #32]
 800a998:	4607      	mov	r7, r0
 800a99a:	9b05      	ldr	r3, [sp, #20]
 800a99c:	4621      	mov	r1, r4
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	9302      	str	r3, [sp, #8]
 800a9a4:	f7ff fad8 	bl	8009f58 <quorem>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	3330      	adds	r3, #48	; 0x30
 800a9ac:	9006      	str	r0, [sp, #24]
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a9b4:	f000 fb8c 	bl	800b0d0 <__mcmp>
 800a9b8:	463a      	mov	r2, r7
 800a9ba:	4682      	mov	sl, r0
 800a9bc:	4621      	mov	r1, r4
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f000 fba2 	bl	800b108 <__mdiff>
 800a9c4:	68c2      	ldr	r2, [r0, #12]
 800a9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c8:	4680      	mov	r8, r0
 800a9ca:	bb0a      	cbnz	r2, 800aa10 <_dtoa_r+0x9a0>
 800a9cc:	4601      	mov	r1, r0
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f000 fb7e 	bl	800b0d0 <__mcmp>
 800a9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	4641      	mov	r1, r8
 800a9da:	4630      	mov	r0, r6
 800a9dc:	920e      	str	r2, [sp, #56]	; 0x38
 800a9de:	930a      	str	r3, [sp, #40]	; 0x28
 800a9e0:	f000 f938 	bl	800ac54 <_Bfree>
 800a9e4:	9b07      	ldr	r3, [sp, #28]
 800a9e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a9ec:	ea43 0102 	orr.w	r1, r3, r2
 800a9f0:	9b08      	ldr	r3, [sp, #32]
 800a9f2:	430b      	orrs	r3, r1
 800a9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f6:	d10d      	bne.n	800aa14 <_dtoa_r+0x9a4>
 800a9f8:	2b39      	cmp	r3, #57	; 0x39
 800a9fa:	d029      	beq.n	800aa50 <_dtoa_r+0x9e0>
 800a9fc:	f1ba 0f00 	cmp.w	sl, #0
 800aa00:	dd01      	ble.n	800aa06 <_dtoa_r+0x996>
 800aa02:	9b06      	ldr	r3, [sp, #24]
 800aa04:	3331      	adds	r3, #49	; 0x31
 800aa06:	9a02      	ldr	r2, [sp, #8]
 800aa08:	7013      	strb	r3, [r2, #0]
 800aa0a:	e774      	b.n	800a8f6 <_dtoa_r+0x886>
 800aa0c:	4638      	mov	r0, r7
 800aa0e:	e7b8      	b.n	800a982 <_dtoa_r+0x912>
 800aa10:	2201      	movs	r2, #1
 800aa12:	e7e1      	b.n	800a9d8 <_dtoa_r+0x968>
 800aa14:	f1ba 0f00 	cmp.w	sl, #0
 800aa18:	db06      	blt.n	800aa28 <_dtoa_r+0x9b8>
 800aa1a:	9907      	ldr	r1, [sp, #28]
 800aa1c:	ea41 0a0a 	orr.w	sl, r1, sl
 800aa20:	9908      	ldr	r1, [sp, #32]
 800aa22:	ea5a 0101 	orrs.w	r1, sl, r1
 800aa26:	d120      	bne.n	800aa6a <_dtoa_r+0x9fa>
 800aa28:	2a00      	cmp	r2, #0
 800aa2a:	ddec      	ble.n	800aa06 <_dtoa_r+0x996>
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	2201      	movs	r2, #1
 800aa30:	4630      	mov	r0, r6
 800aa32:	9305      	str	r3, [sp, #20]
 800aa34:	f000 fae0 	bl	800aff8 <__lshift>
 800aa38:	4621      	mov	r1, r4
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	f000 fb48 	bl	800b0d0 <__mcmp>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	9b05      	ldr	r3, [sp, #20]
 800aa44:	dc02      	bgt.n	800aa4c <_dtoa_r+0x9dc>
 800aa46:	d1de      	bne.n	800aa06 <_dtoa_r+0x996>
 800aa48:	07da      	lsls	r2, r3, #31
 800aa4a:	d5dc      	bpl.n	800aa06 <_dtoa_r+0x996>
 800aa4c:	2b39      	cmp	r3, #57	; 0x39
 800aa4e:	d1d8      	bne.n	800aa02 <_dtoa_r+0x992>
 800aa50:	9a02      	ldr	r2, [sp, #8]
 800aa52:	2339      	movs	r3, #57	; 0x39
 800aa54:	7013      	strb	r3, [r2, #0]
 800aa56:	4643      	mov	r3, r8
 800aa58:	4698      	mov	r8, r3
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800aa60:	2a39      	cmp	r2, #57	; 0x39
 800aa62:	d051      	beq.n	800ab08 <_dtoa_r+0xa98>
 800aa64:	3201      	adds	r2, #1
 800aa66:	701a      	strb	r2, [r3, #0]
 800aa68:	e745      	b.n	800a8f6 <_dtoa_r+0x886>
 800aa6a:	2a00      	cmp	r2, #0
 800aa6c:	dd03      	ble.n	800aa76 <_dtoa_r+0xa06>
 800aa6e:	2b39      	cmp	r3, #57	; 0x39
 800aa70:	d0ee      	beq.n	800aa50 <_dtoa_r+0x9e0>
 800aa72:	3301      	adds	r3, #1
 800aa74:	e7c7      	b.n	800aa06 <_dtoa_r+0x996>
 800aa76:	9a05      	ldr	r2, [sp, #20]
 800aa78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa7a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa7e:	428a      	cmp	r2, r1
 800aa80:	d02b      	beq.n	800aada <_dtoa_r+0xa6a>
 800aa82:	4629      	mov	r1, r5
 800aa84:	2300      	movs	r3, #0
 800aa86:	220a      	movs	r2, #10
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f000 f905 	bl	800ac98 <__multadd>
 800aa8e:	45b9      	cmp	r9, r7
 800aa90:	4605      	mov	r5, r0
 800aa92:	f04f 0300 	mov.w	r3, #0
 800aa96:	f04f 020a 	mov.w	r2, #10
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	d107      	bne.n	800aab0 <_dtoa_r+0xa40>
 800aaa0:	f000 f8fa 	bl	800ac98 <__multadd>
 800aaa4:	4681      	mov	r9, r0
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	9b05      	ldr	r3, [sp, #20]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	9305      	str	r3, [sp, #20]
 800aaae:	e774      	b.n	800a99a <_dtoa_r+0x92a>
 800aab0:	f000 f8f2 	bl	800ac98 <__multadd>
 800aab4:	4639      	mov	r1, r7
 800aab6:	4681      	mov	r9, r0
 800aab8:	2300      	movs	r3, #0
 800aaba:	220a      	movs	r2, #10
 800aabc:	4630      	mov	r0, r6
 800aabe:	f000 f8eb 	bl	800ac98 <__multadd>
 800aac2:	4607      	mov	r7, r0
 800aac4:	e7f0      	b.n	800aaa8 <_dtoa_r+0xa38>
 800aac6:	f1ba 0f00 	cmp.w	sl, #0
 800aaca:	9a00      	ldr	r2, [sp, #0]
 800aacc:	bfcc      	ite	gt
 800aace:	46d0      	movgt	r8, sl
 800aad0:	f04f 0801 	movle.w	r8, #1
 800aad4:	4490      	add	r8, r2
 800aad6:	f04f 0900 	mov.w	r9, #0
 800aada:	4629      	mov	r1, r5
 800aadc:	2201      	movs	r2, #1
 800aade:	4630      	mov	r0, r6
 800aae0:	9302      	str	r3, [sp, #8]
 800aae2:	f000 fa89 	bl	800aff8 <__lshift>
 800aae6:	4621      	mov	r1, r4
 800aae8:	4605      	mov	r5, r0
 800aaea:	f000 faf1 	bl	800b0d0 <__mcmp>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	dcb1      	bgt.n	800aa56 <_dtoa_r+0x9e6>
 800aaf2:	d102      	bne.n	800aafa <_dtoa_r+0xa8a>
 800aaf4:	9b02      	ldr	r3, [sp, #8]
 800aaf6:	07db      	lsls	r3, r3, #31
 800aaf8:	d4ad      	bmi.n	800aa56 <_dtoa_r+0x9e6>
 800aafa:	4643      	mov	r3, r8
 800aafc:	4698      	mov	r8, r3
 800aafe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab02:	2a30      	cmp	r2, #48	; 0x30
 800ab04:	d0fa      	beq.n	800aafc <_dtoa_r+0xa8c>
 800ab06:	e6f6      	b.n	800a8f6 <_dtoa_r+0x886>
 800ab08:	9a00      	ldr	r2, [sp, #0]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d1a4      	bne.n	800aa58 <_dtoa_r+0x9e8>
 800ab0e:	f10b 0b01 	add.w	fp, fp, #1
 800ab12:	2331      	movs	r3, #49	; 0x31
 800ab14:	e778      	b.n	800aa08 <_dtoa_r+0x998>
 800ab16:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <_dtoa_r+0xafc>)
 800ab18:	f7ff bb12 	b.w	800a140 <_dtoa_r+0xd0>
 800ab1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f47f aaee 	bne.w	800a100 <_dtoa_r+0x90>
 800ab24:	4b12      	ldr	r3, [pc, #72]	; (800ab70 <_dtoa_r+0xb00>)
 800ab26:	f7ff bb0b 	b.w	800a140 <_dtoa_r+0xd0>
 800ab2a:	f1ba 0f00 	cmp.w	sl, #0
 800ab2e:	dc03      	bgt.n	800ab38 <_dtoa_r+0xac8>
 800ab30:	9b07      	ldr	r3, [sp, #28]
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	f73f aec7 	bgt.w	800a8c6 <_dtoa_r+0x856>
 800ab38:	f8dd 8000 	ldr.w	r8, [sp]
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f7ff fa0a 	bl	8009f58 <quorem>
 800ab44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab48:	f808 3b01 	strb.w	r3, [r8], #1
 800ab4c:	9a00      	ldr	r2, [sp, #0]
 800ab4e:	eba8 0202 	sub.w	r2, r8, r2
 800ab52:	4592      	cmp	sl, r2
 800ab54:	ddb7      	ble.n	800aac6 <_dtoa_r+0xa56>
 800ab56:	4629      	mov	r1, r5
 800ab58:	2300      	movs	r3, #0
 800ab5a:	220a      	movs	r2, #10
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f000 f89b 	bl	800ac98 <__multadd>
 800ab62:	4605      	mov	r5, r0
 800ab64:	e7ea      	b.n	800ab3c <_dtoa_r+0xacc>
 800ab66:	bf00      	nop
 800ab68:	0800c4d8 	.word	0x0800c4d8
 800ab6c:	0800c394 	.word	0x0800c394
 800ab70:	0800c46c 	.word	0x0800c46c

0800ab74 <fiprintf>:
 800ab74:	b40e      	push	{r1, r2, r3}
 800ab76:	b503      	push	{r0, r1, lr}
 800ab78:	4601      	mov	r1, r0
 800ab7a:	ab03      	add	r3, sp, #12
 800ab7c:	4805      	ldr	r0, [pc, #20]	; (800ab94 <fiprintf+0x20>)
 800ab7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab82:	6800      	ldr	r0, [r0, #0]
 800ab84:	9301      	str	r3, [sp, #4]
 800ab86:	f000 fd5d 	bl	800b644 <_vfiprintf_r>
 800ab8a:	b002      	add	sp, #8
 800ab8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab90:	b003      	add	sp, #12
 800ab92:	4770      	bx	lr
 800ab94:	200001ec 	.word	0x200001ec

0800ab98 <_localeconv_r>:
 800ab98:	4800      	ldr	r0, [pc, #0]	; (800ab9c <_localeconv_r+0x4>)
 800ab9a:	4770      	bx	lr
 800ab9c:	20000340 	.word	0x20000340

0800aba0 <memcpy>:
 800aba0:	440a      	add	r2, r1
 800aba2:	4291      	cmp	r1, r2
 800aba4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aba8:	d100      	bne.n	800abac <memcpy+0xc>
 800abaa:	4770      	bx	lr
 800abac:	b510      	push	{r4, lr}
 800abae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abb6:	4291      	cmp	r1, r2
 800abb8:	d1f9      	bne.n	800abae <memcpy+0xe>
 800abba:	bd10      	pop	{r4, pc}

0800abbc <__malloc_lock>:
 800abbc:	4801      	ldr	r0, [pc, #4]	; (800abc4 <__malloc_lock+0x8>)
 800abbe:	f001 b8f1 	b.w	800bda4 <__retarget_lock_acquire_recursive>
 800abc2:	bf00      	nop
 800abc4:	200008a4 	.word	0x200008a4

0800abc8 <__malloc_unlock>:
 800abc8:	4801      	ldr	r0, [pc, #4]	; (800abd0 <__malloc_unlock+0x8>)
 800abca:	f001 b8ec 	b.w	800bda6 <__retarget_lock_release_recursive>
 800abce:	bf00      	nop
 800abd0:	200008a4 	.word	0x200008a4

0800abd4 <_Balloc>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abd8:	4604      	mov	r4, r0
 800abda:	460d      	mov	r5, r1
 800abdc:	b976      	cbnz	r6, 800abfc <_Balloc+0x28>
 800abde:	2010      	movs	r0, #16
 800abe0:	f7fe fbe8 	bl	80093b4 <malloc>
 800abe4:	4602      	mov	r2, r0
 800abe6:	6260      	str	r0, [r4, #36]	; 0x24
 800abe8:	b920      	cbnz	r0, 800abf4 <_Balloc+0x20>
 800abea:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <_Balloc+0x78>)
 800abec:	4818      	ldr	r0, [pc, #96]	; (800ac50 <_Balloc+0x7c>)
 800abee:	2166      	movs	r1, #102	; 0x66
 800abf0:	f7ff f994 	bl	8009f1c <__assert_func>
 800abf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abf8:	6006      	str	r6, [r0, #0]
 800abfa:	60c6      	str	r6, [r0, #12]
 800abfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800abfe:	68f3      	ldr	r3, [r6, #12]
 800ac00:	b183      	cbz	r3, 800ac24 <_Balloc+0x50>
 800ac02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac0a:	b9b8      	cbnz	r0, 800ac3c <_Balloc+0x68>
 800ac0c:	2101      	movs	r1, #1
 800ac0e:	fa01 f605 	lsl.w	r6, r1, r5
 800ac12:	1d72      	adds	r2, r6, #5
 800ac14:	0092      	lsls	r2, r2, #2
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 fb5a 	bl	800b2d0 <_calloc_r>
 800ac1c:	b160      	cbz	r0, 800ac38 <_Balloc+0x64>
 800ac1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac22:	e00e      	b.n	800ac42 <_Balloc+0x6e>
 800ac24:	2221      	movs	r2, #33	; 0x21
 800ac26:	2104      	movs	r1, #4
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 fb51 	bl	800b2d0 <_calloc_r>
 800ac2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac30:	60f0      	str	r0, [r6, #12]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1e4      	bne.n	800ac02 <_Balloc+0x2e>
 800ac38:	2000      	movs	r0, #0
 800ac3a:	bd70      	pop	{r4, r5, r6, pc}
 800ac3c:	6802      	ldr	r2, [r0, #0]
 800ac3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac42:	2300      	movs	r3, #0
 800ac44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac48:	e7f7      	b.n	800ac3a <_Balloc+0x66>
 800ac4a:	bf00      	nop
 800ac4c:	0800c3b8 	.word	0x0800c3b8
 800ac50:	0800c4e9 	.word	0x0800c4e9

0800ac54 <_Bfree>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac58:	4605      	mov	r5, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	b976      	cbnz	r6, 800ac7c <_Bfree+0x28>
 800ac5e:	2010      	movs	r0, #16
 800ac60:	f7fe fba8 	bl	80093b4 <malloc>
 800ac64:	4602      	mov	r2, r0
 800ac66:	6268      	str	r0, [r5, #36]	; 0x24
 800ac68:	b920      	cbnz	r0, 800ac74 <_Bfree+0x20>
 800ac6a:	4b09      	ldr	r3, [pc, #36]	; (800ac90 <_Bfree+0x3c>)
 800ac6c:	4809      	ldr	r0, [pc, #36]	; (800ac94 <_Bfree+0x40>)
 800ac6e:	218a      	movs	r1, #138	; 0x8a
 800ac70:	f7ff f954 	bl	8009f1c <__assert_func>
 800ac74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac78:	6006      	str	r6, [r0, #0]
 800ac7a:	60c6      	str	r6, [r0, #12]
 800ac7c:	b13c      	cbz	r4, 800ac8e <_Bfree+0x3a>
 800ac7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac80:	6862      	ldr	r2, [r4, #4]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac88:	6021      	str	r1, [r4, #0]
 800ac8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
 800ac90:	0800c3b8 	.word	0x0800c3b8
 800ac94:	0800c4e9 	.word	0x0800c4e9

0800ac98 <__multadd>:
 800ac98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9c:	690e      	ldr	r6, [r1, #16]
 800ac9e:	4607      	mov	r7, r0
 800aca0:	4698      	mov	r8, r3
 800aca2:	460c      	mov	r4, r1
 800aca4:	f101 0014 	add.w	r0, r1, #20
 800aca8:	2300      	movs	r3, #0
 800acaa:	6805      	ldr	r5, [r0, #0]
 800acac:	b2a9      	uxth	r1, r5
 800acae:	fb02 8101 	mla	r1, r2, r1, r8
 800acb2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800acb6:	0c2d      	lsrs	r5, r5, #16
 800acb8:	fb02 c505 	mla	r5, r2, r5, ip
 800acbc:	b289      	uxth	r1, r1
 800acbe:	3301      	adds	r3, #1
 800acc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800acc4:	429e      	cmp	r6, r3
 800acc6:	f840 1b04 	str.w	r1, [r0], #4
 800acca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800acce:	dcec      	bgt.n	800acaa <__multadd+0x12>
 800acd0:	f1b8 0f00 	cmp.w	r8, #0
 800acd4:	d022      	beq.n	800ad1c <__multadd+0x84>
 800acd6:	68a3      	ldr	r3, [r4, #8]
 800acd8:	42b3      	cmp	r3, r6
 800acda:	dc19      	bgt.n	800ad10 <__multadd+0x78>
 800acdc:	6861      	ldr	r1, [r4, #4]
 800acde:	4638      	mov	r0, r7
 800ace0:	3101      	adds	r1, #1
 800ace2:	f7ff ff77 	bl	800abd4 <_Balloc>
 800ace6:	4605      	mov	r5, r0
 800ace8:	b928      	cbnz	r0, 800acf6 <__multadd+0x5e>
 800acea:	4602      	mov	r2, r0
 800acec:	4b0d      	ldr	r3, [pc, #52]	; (800ad24 <__multadd+0x8c>)
 800acee:	480e      	ldr	r0, [pc, #56]	; (800ad28 <__multadd+0x90>)
 800acf0:	21b5      	movs	r1, #181	; 0xb5
 800acf2:	f7ff f913 	bl	8009f1c <__assert_func>
 800acf6:	6922      	ldr	r2, [r4, #16]
 800acf8:	3202      	adds	r2, #2
 800acfa:	f104 010c 	add.w	r1, r4, #12
 800acfe:	0092      	lsls	r2, r2, #2
 800ad00:	300c      	adds	r0, #12
 800ad02:	f7ff ff4d 	bl	800aba0 <memcpy>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f7ff ffa3 	bl	800ac54 <_Bfree>
 800ad0e:	462c      	mov	r4, r5
 800ad10:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ad14:	3601      	adds	r6, #1
 800ad16:	f8c3 8014 	str.w	r8, [r3, #20]
 800ad1a:	6126      	str	r6, [r4, #16]
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad22:	bf00      	nop
 800ad24:	0800c4d8 	.word	0x0800c4d8
 800ad28:	0800c4e9 	.word	0x0800c4e9

0800ad2c <__hi0bits>:
 800ad2c:	0c03      	lsrs	r3, r0, #16
 800ad2e:	041b      	lsls	r3, r3, #16
 800ad30:	b9d3      	cbnz	r3, 800ad68 <__hi0bits+0x3c>
 800ad32:	0400      	lsls	r0, r0, #16
 800ad34:	2310      	movs	r3, #16
 800ad36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad3a:	bf04      	itt	eq
 800ad3c:	0200      	lsleq	r0, r0, #8
 800ad3e:	3308      	addeq	r3, #8
 800ad40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad44:	bf04      	itt	eq
 800ad46:	0100      	lsleq	r0, r0, #4
 800ad48:	3304      	addeq	r3, #4
 800ad4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad4e:	bf04      	itt	eq
 800ad50:	0080      	lsleq	r0, r0, #2
 800ad52:	3302      	addeq	r3, #2
 800ad54:	2800      	cmp	r0, #0
 800ad56:	db05      	blt.n	800ad64 <__hi0bits+0x38>
 800ad58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad5c:	f103 0301 	add.w	r3, r3, #1
 800ad60:	bf08      	it	eq
 800ad62:	2320      	moveq	r3, #32
 800ad64:	4618      	mov	r0, r3
 800ad66:	4770      	bx	lr
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e7e4      	b.n	800ad36 <__hi0bits+0xa>

0800ad6c <__lo0bits>:
 800ad6c:	6803      	ldr	r3, [r0, #0]
 800ad6e:	f013 0207 	ands.w	r2, r3, #7
 800ad72:	4601      	mov	r1, r0
 800ad74:	d00b      	beq.n	800ad8e <__lo0bits+0x22>
 800ad76:	07da      	lsls	r2, r3, #31
 800ad78:	d424      	bmi.n	800adc4 <__lo0bits+0x58>
 800ad7a:	0798      	lsls	r0, r3, #30
 800ad7c:	bf49      	itett	mi
 800ad7e:	085b      	lsrmi	r3, r3, #1
 800ad80:	089b      	lsrpl	r3, r3, #2
 800ad82:	2001      	movmi	r0, #1
 800ad84:	600b      	strmi	r3, [r1, #0]
 800ad86:	bf5c      	itt	pl
 800ad88:	600b      	strpl	r3, [r1, #0]
 800ad8a:	2002      	movpl	r0, #2
 800ad8c:	4770      	bx	lr
 800ad8e:	b298      	uxth	r0, r3
 800ad90:	b9b0      	cbnz	r0, 800adc0 <__lo0bits+0x54>
 800ad92:	0c1b      	lsrs	r3, r3, #16
 800ad94:	2010      	movs	r0, #16
 800ad96:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad9a:	bf04      	itt	eq
 800ad9c:	0a1b      	lsreq	r3, r3, #8
 800ad9e:	3008      	addeq	r0, #8
 800ada0:	071a      	lsls	r2, r3, #28
 800ada2:	bf04      	itt	eq
 800ada4:	091b      	lsreq	r3, r3, #4
 800ada6:	3004      	addeq	r0, #4
 800ada8:	079a      	lsls	r2, r3, #30
 800adaa:	bf04      	itt	eq
 800adac:	089b      	lsreq	r3, r3, #2
 800adae:	3002      	addeq	r0, #2
 800adb0:	07da      	lsls	r2, r3, #31
 800adb2:	d403      	bmi.n	800adbc <__lo0bits+0x50>
 800adb4:	085b      	lsrs	r3, r3, #1
 800adb6:	f100 0001 	add.w	r0, r0, #1
 800adba:	d005      	beq.n	800adc8 <__lo0bits+0x5c>
 800adbc:	600b      	str	r3, [r1, #0]
 800adbe:	4770      	bx	lr
 800adc0:	4610      	mov	r0, r2
 800adc2:	e7e8      	b.n	800ad96 <__lo0bits+0x2a>
 800adc4:	2000      	movs	r0, #0
 800adc6:	4770      	bx	lr
 800adc8:	2020      	movs	r0, #32
 800adca:	4770      	bx	lr

0800adcc <__i2b>:
 800adcc:	b510      	push	{r4, lr}
 800adce:	460c      	mov	r4, r1
 800add0:	2101      	movs	r1, #1
 800add2:	f7ff feff 	bl	800abd4 <_Balloc>
 800add6:	4602      	mov	r2, r0
 800add8:	b928      	cbnz	r0, 800ade6 <__i2b+0x1a>
 800adda:	4b05      	ldr	r3, [pc, #20]	; (800adf0 <__i2b+0x24>)
 800addc:	4805      	ldr	r0, [pc, #20]	; (800adf4 <__i2b+0x28>)
 800adde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ade2:	f7ff f89b 	bl	8009f1c <__assert_func>
 800ade6:	2301      	movs	r3, #1
 800ade8:	6144      	str	r4, [r0, #20]
 800adea:	6103      	str	r3, [r0, #16]
 800adec:	bd10      	pop	{r4, pc}
 800adee:	bf00      	nop
 800adf0:	0800c4d8 	.word	0x0800c4d8
 800adf4:	0800c4e9 	.word	0x0800c4e9

0800adf8 <__multiply>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	4614      	mov	r4, r2
 800adfe:	690a      	ldr	r2, [r1, #16]
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	bfb8      	it	lt
 800ae06:	460b      	movlt	r3, r1
 800ae08:	460d      	mov	r5, r1
 800ae0a:	bfbc      	itt	lt
 800ae0c:	4625      	movlt	r5, r4
 800ae0e:	461c      	movlt	r4, r3
 800ae10:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ae14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ae18:	68ab      	ldr	r3, [r5, #8]
 800ae1a:	6869      	ldr	r1, [r5, #4]
 800ae1c:	eb0a 0709 	add.w	r7, sl, r9
 800ae20:	42bb      	cmp	r3, r7
 800ae22:	b085      	sub	sp, #20
 800ae24:	bfb8      	it	lt
 800ae26:	3101      	addlt	r1, #1
 800ae28:	f7ff fed4 	bl	800abd4 <_Balloc>
 800ae2c:	b930      	cbnz	r0, 800ae3c <__multiply+0x44>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	4b42      	ldr	r3, [pc, #264]	; (800af3c <__multiply+0x144>)
 800ae32:	4843      	ldr	r0, [pc, #268]	; (800af40 <__multiply+0x148>)
 800ae34:	f240 115d 	movw	r1, #349	; 0x15d
 800ae38:	f7ff f870 	bl	8009f1c <__assert_func>
 800ae3c:	f100 0614 	add.w	r6, r0, #20
 800ae40:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ae44:	4633      	mov	r3, r6
 800ae46:	2200      	movs	r2, #0
 800ae48:	4543      	cmp	r3, r8
 800ae4a:	d31e      	bcc.n	800ae8a <__multiply+0x92>
 800ae4c:	f105 0c14 	add.w	ip, r5, #20
 800ae50:	f104 0314 	add.w	r3, r4, #20
 800ae54:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ae58:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ae5c:	9202      	str	r2, [sp, #8]
 800ae5e:	ebac 0205 	sub.w	r2, ip, r5
 800ae62:	3a15      	subs	r2, #21
 800ae64:	f022 0203 	bic.w	r2, r2, #3
 800ae68:	3204      	adds	r2, #4
 800ae6a:	f105 0115 	add.w	r1, r5, #21
 800ae6e:	458c      	cmp	ip, r1
 800ae70:	bf38      	it	cc
 800ae72:	2204      	movcc	r2, #4
 800ae74:	9201      	str	r2, [sp, #4]
 800ae76:	9a02      	ldr	r2, [sp, #8]
 800ae78:	9303      	str	r3, [sp, #12]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d808      	bhi.n	800ae90 <__multiply+0x98>
 800ae7e:	2f00      	cmp	r7, #0
 800ae80:	dc55      	bgt.n	800af2e <__multiply+0x136>
 800ae82:	6107      	str	r7, [r0, #16]
 800ae84:	b005      	add	sp, #20
 800ae86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8a:	f843 2b04 	str.w	r2, [r3], #4
 800ae8e:	e7db      	b.n	800ae48 <__multiply+0x50>
 800ae90:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae94:	f1ba 0f00 	cmp.w	sl, #0
 800ae98:	d020      	beq.n	800aedc <__multiply+0xe4>
 800ae9a:	f105 0e14 	add.w	lr, r5, #20
 800ae9e:	46b1      	mov	r9, r6
 800aea0:	2200      	movs	r2, #0
 800aea2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aea6:	f8d9 b000 	ldr.w	fp, [r9]
 800aeaa:	b2a1      	uxth	r1, r4
 800aeac:	fa1f fb8b 	uxth.w	fp, fp
 800aeb0:	fb0a b101 	mla	r1, sl, r1, fp
 800aeb4:	4411      	add	r1, r2
 800aeb6:	f8d9 2000 	ldr.w	r2, [r9]
 800aeba:	0c24      	lsrs	r4, r4, #16
 800aebc:	0c12      	lsrs	r2, r2, #16
 800aebe:	fb0a 2404 	mla	r4, sl, r4, r2
 800aec2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aec6:	b289      	uxth	r1, r1
 800aec8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aecc:	45f4      	cmp	ip, lr
 800aece:	f849 1b04 	str.w	r1, [r9], #4
 800aed2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aed6:	d8e4      	bhi.n	800aea2 <__multiply+0xaa>
 800aed8:	9901      	ldr	r1, [sp, #4]
 800aeda:	5072      	str	r2, [r6, r1]
 800aedc:	9a03      	ldr	r2, [sp, #12]
 800aede:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aee2:	3304      	adds	r3, #4
 800aee4:	f1b9 0f00 	cmp.w	r9, #0
 800aee8:	d01f      	beq.n	800af2a <__multiply+0x132>
 800aeea:	6834      	ldr	r4, [r6, #0]
 800aeec:	f105 0114 	add.w	r1, r5, #20
 800aef0:	46b6      	mov	lr, r6
 800aef2:	f04f 0a00 	mov.w	sl, #0
 800aef6:	880a      	ldrh	r2, [r1, #0]
 800aef8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aefc:	fb09 b202 	mla	r2, r9, r2, fp
 800af00:	4492      	add	sl, r2
 800af02:	b2a4      	uxth	r4, r4
 800af04:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800af08:	f84e 4b04 	str.w	r4, [lr], #4
 800af0c:	f851 4b04 	ldr.w	r4, [r1], #4
 800af10:	f8be 2000 	ldrh.w	r2, [lr]
 800af14:	0c24      	lsrs	r4, r4, #16
 800af16:	fb09 2404 	mla	r4, r9, r4, r2
 800af1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800af1e:	458c      	cmp	ip, r1
 800af20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800af24:	d8e7      	bhi.n	800aef6 <__multiply+0xfe>
 800af26:	9a01      	ldr	r2, [sp, #4]
 800af28:	50b4      	str	r4, [r6, r2]
 800af2a:	3604      	adds	r6, #4
 800af2c:	e7a3      	b.n	800ae76 <__multiply+0x7e>
 800af2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1a5      	bne.n	800ae82 <__multiply+0x8a>
 800af36:	3f01      	subs	r7, #1
 800af38:	e7a1      	b.n	800ae7e <__multiply+0x86>
 800af3a:	bf00      	nop
 800af3c:	0800c4d8 	.word	0x0800c4d8
 800af40:	0800c4e9 	.word	0x0800c4e9

0800af44 <__pow5mult>:
 800af44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af48:	4615      	mov	r5, r2
 800af4a:	f012 0203 	ands.w	r2, r2, #3
 800af4e:	4606      	mov	r6, r0
 800af50:	460f      	mov	r7, r1
 800af52:	d007      	beq.n	800af64 <__pow5mult+0x20>
 800af54:	4c25      	ldr	r4, [pc, #148]	; (800afec <__pow5mult+0xa8>)
 800af56:	3a01      	subs	r2, #1
 800af58:	2300      	movs	r3, #0
 800af5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af5e:	f7ff fe9b 	bl	800ac98 <__multadd>
 800af62:	4607      	mov	r7, r0
 800af64:	10ad      	asrs	r5, r5, #2
 800af66:	d03d      	beq.n	800afe4 <__pow5mult+0xa0>
 800af68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af6a:	b97c      	cbnz	r4, 800af8c <__pow5mult+0x48>
 800af6c:	2010      	movs	r0, #16
 800af6e:	f7fe fa21 	bl	80093b4 <malloc>
 800af72:	4602      	mov	r2, r0
 800af74:	6270      	str	r0, [r6, #36]	; 0x24
 800af76:	b928      	cbnz	r0, 800af84 <__pow5mult+0x40>
 800af78:	4b1d      	ldr	r3, [pc, #116]	; (800aff0 <__pow5mult+0xac>)
 800af7a:	481e      	ldr	r0, [pc, #120]	; (800aff4 <__pow5mult+0xb0>)
 800af7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af80:	f7fe ffcc 	bl	8009f1c <__assert_func>
 800af84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af88:	6004      	str	r4, [r0, #0]
 800af8a:	60c4      	str	r4, [r0, #12]
 800af8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af94:	b94c      	cbnz	r4, 800afaa <__pow5mult+0x66>
 800af96:	f240 2171 	movw	r1, #625	; 0x271
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7ff ff16 	bl	800adcc <__i2b>
 800afa0:	2300      	movs	r3, #0
 800afa2:	f8c8 0008 	str.w	r0, [r8, #8]
 800afa6:	4604      	mov	r4, r0
 800afa8:	6003      	str	r3, [r0, #0]
 800afaa:	f04f 0900 	mov.w	r9, #0
 800afae:	07eb      	lsls	r3, r5, #31
 800afb0:	d50a      	bpl.n	800afc8 <__pow5mult+0x84>
 800afb2:	4639      	mov	r1, r7
 800afb4:	4622      	mov	r2, r4
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7ff ff1e 	bl	800adf8 <__multiply>
 800afbc:	4639      	mov	r1, r7
 800afbe:	4680      	mov	r8, r0
 800afc0:	4630      	mov	r0, r6
 800afc2:	f7ff fe47 	bl	800ac54 <_Bfree>
 800afc6:	4647      	mov	r7, r8
 800afc8:	106d      	asrs	r5, r5, #1
 800afca:	d00b      	beq.n	800afe4 <__pow5mult+0xa0>
 800afcc:	6820      	ldr	r0, [r4, #0]
 800afce:	b938      	cbnz	r0, 800afe0 <__pow5mult+0x9c>
 800afd0:	4622      	mov	r2, r4
 800afd2:	4621      	mov	r1, r4
 800afd4:	4630      	mov	r0, r6
 800afd6:	f7ff ff0f 	bl	800adf8 <__multiply>
 800afda:	6020      	str	r0, [r4, #0]
 800afdc:	f8c0 9000 	str.w	r9, [r0]
 800afe0:	4604      	mov	r4, r0
 800afe2:	e7e4      	b.n	800afae <__pow5mult+0x6a>
 800afe4:	4638      	mov	r0, r7
 800afe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afea:	bf00      	nop
 800afec:	0800c640 	.word	0x0800c640
 800aff0:	0800c3b8 	.word	0x0800c3b8
 800aff4:	0800c4e9 	.word	0x0800c4e9

0800aff8 <__lshift>:
 800aff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800affc:	460c      	mov	r4, r1
 800affe:	6849      	ldr	r1, [r1, #4]
 800b000:	6923      	ldr	r3, [r4, #16]
 800b002:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b006:	68a3      	ldr	r3, [r4, #8]
 800b008:	4607      	mov	r7, r0
 800b00a:	4691      	mov	r9, r2
 800b00c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b010:	f108 0601 	add.w	r6, r8, #1
 800b014:	42b3      	cmp	r3, r6
 800b016:	db0b      	blt.n	800b030 <__lshift+0x38>
 800b018:	4638      	mov	r0, r7
 800b01a:	f7ff fddb 	bl	800abd4 <_Balloc>
 800b01e:	4605      	mov	r5, r0
 800b020:	b948      	cbnz	r0, 800b036 <__lshift+0x3e>
 800b022:	4602      	mov	r2, r0
 800b024:	4b28      	ldr	r3, [pc, #160]	; (800b0c8 <__lshift+0xd0>)
 800b026:	4829      	ldr	r0, [pc, #164]	; (800b0cc <__lshift+0xd4>)
 800b028:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b02c:	f7fe ff76 	bl	8009f1c <__assert_func>
 800b030:	3101      	adds	r1, #1
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	e7ee      	b.n	800b014 <__lshift+0x1c>
 800b036:	2300      	movs	r3, #0
 800b038:	f100 0114 	add.w	r1, r0, #20
 800b03c:	f100 0210 	add.w	r2, r0, #16
 800b040:	4618      	mov	r0, r3
 800b042:	4553      	cmp	r3, sl
 800b044:	db33      	blt.n	800b0ae <__lshift+0xb6>
 800b046:	6920      	ldr	r0, [r4, #16]
 800b048:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b04c:	f104 0314 	add.w	r3, r4, #20
 800b050:	f019 091f 	ands.w	r9, r9, #31
 800b054:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b058:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b05c:	d02b      	beq.n	800b0b6 <__lshift+0xbe>
 800b05e:	f1c9 0e20 	rsb	lr, r9, #32
 800b062:	468a      	mov	sl, r1
 800b064:	2200      	movs	r2, #0
 800b066:	6818      	ldr	r0, [r3, #0]
 800b068:	fa00 f009 	lsl.w	r0, r0, r9
 800b06c:	4302      	orrs	r2, r0
 800b06e:	f84a 2b04 	str.w	r2, [sl], #4
 800b072:	f853 2b04 	ldr.w	r2, [r3], #4
 800b076:	459c      	cmp	ip, r3
 800b078:	fa22 f20e 	lsr.w	r2, r2, lr
 800b07c:	d8f3      	bhi.n	800b066 <__lshift+0x6e>
 800b07e:	ebac 0304 	sub.w	r3, ip, r4
 800b082:	3b15      	subs	r3, #21
 800b084:	f023 0303 	bic.w	r3, r3, #3
 800b088:	3304      	adds	r3, #4
 800b08a:	f104 0015 	add.w	r0, r4, #21
 800b08e:	4584      	cmp	ip, r0
 800b090:	bf38      	it	cc
 800b092:	2304      	movcc	r3, #4
 800b094:	50ca      	str	r2, [r1, r3]
 800b096:	b10a      	cbz	r2, 800b09c <__lshift+0xa4>
 800b098:	f108 0602 	add.w	r6, r8, #2
 800b09c:	3e01      	subs	r6, #1
 800b09e:	4638      	mov	r0, r7
 800b0a0:	612e      	str	r6, [r5, #16]
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	f7ff fdd6 	bl	800ac54 <_Bfree>
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	e7c5      	b.n	800b042 <__lshift+0x4a>
 800b0b6:	3904      	subs	r1, #4
 800b0b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0c0:	459c      	cmp	ip, r3
 800b0c2:	d8f9      	bhi.n	800b0b8 <__lshift+0xc0>
 800b0c4:	e7ea      	b.n	800b09c <__lshift+0xa4>
 800b0c6:	bf00      	nop
 800b0c8:	0800c4d8 	.word	0x0800c4d8
 800b0cc:	0800c4e9 	.word	0x0800c4e9

0800b0d0 <__mcmp>:
 800b0d0:	b530      	push	{r4, r5, lr}
 800b0d2:	6902      	ldr	r2, [r0, #16]
 800b0d4:	690c      	ldr	r4, [r1, #16]
 800b0d6:	1b12      	subs	r2, r2, r4
 800b0d8:	d10e      	bne.n	800b0f8 <__mcmp+0x28>
 800b0da:	f100 0314 	add.w	r3, r0, #20
 800b0de:	3114      	adds	r1, #20
 800b0e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0f0:	42a5      	cmp	r5, r4
 800b0f2:	d003      	beq.n	800b0fc <__mcmp+0x2c>
 800b0f4:	d305      	bcc.n	800b102 <__mcmp+0x32>
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	bd30      	pop	{r4, r5, pc}
 800b0fc:	4283      	cmp	r3, r0
 800b0fe:	d3f3      	bcc.n	800b0e8 <__mcmp+0x18>
 800b100:	e7fa      	b.n	800b0f8 <__mcmp+0x28>
 800b102:	f04f 32ff 	mov.w	r2, #4294967295
 800b106:	e7f7      	b.n	800b0f8 <__mcmp+0x28>

0800b108 <__mdiff>:
 800b108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	460c      	mov	r4, r1
 800b10e:	4606      	mov	r6, r0
 800b110:	4611      	mov	r1, r2
 800b112:	4620      	mov	r0, r4
 800b114:	4617      	mov	r7, r2
 800b116:	f7ff ffdb 	bl	800b0d0 <__mcmp>
 800b11a:	1e05      	subs	r5, r0, #0
 800b11c:	d110      	bne.n	800b140 <__mdiff+0x38>
 800b11e:	4629      	mov	r1, r5
 800b120:	4630      	mov	r0, r6
 800b122:	f7ff fd57 	bl	800abd4 <_Balloc>
 800b126:	b930      	cbnz	r0, 800b136 <__mdiff+0x2e>
 800b128:	4b39      	ldr	r3, [pc, #228]	; (800b210 <__mdiff+0x108>)
 800b12a:	4602      	mov	r2, r0
 800b12c:	f240 2132 	movw	r1, #562	; 0x232
 800b130:	4838      	ldr	r0, [pc, #224]	; (800b214 <__mdiff+0x10c>)
 800b132:	f7fe fef3 	bl	8009f1c <__assert_func>
 800b136:	2301      	movs	r3, #1
 800b138:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b13c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b140:	bfa4      	itt	ge
 800b142:	463b      	movge	r3, r7
 800b144:	4627      	movge	r7, r4
 800b146:	4630      	mov	r0, r6
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	bfa6      	itte	ge
 800b14c:	461c      	movge	r4, r3
 800b14e:	2500      	movge	r5, #0
 800b150:	2501      	movlt	r5, #1
 800b152:	f7ff fd3f 	bl	800abd4 <_Balloc>
 800b156:	b920      	cbnz	r0, 800b162 <__mdiff+0x5a>
 800b158:	4b2d      	ldr	r3, [pc, #180]	; (800b210 <__mdiff+0x108>)
 800b15a:	4602      	mov	r2, r0
 800b15c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b160:	e7e6      	b.n	800b130 <__mdiff+0x28>
 800b162:	693e      	ldr	r6, [r7, #16]
 800b164:	60c5      	str	r5, [r0, #12]
 800b166:	6925      	ldr	r5, [r4, #16]
 800b168:	f107 0114 	add.w	r1, r7, #20
 800b16c:	f104 0914 	add.w	r9, r4, #20
 800b170:	f100 0e14 	add.w	lr, r0, #20
 800b174:	f107 0210 	add.w	r2, r7, #16
 800b178:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b17c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b180:	46f2      	mov	sl, lr
 800b182:	2700      	movs	r7, #0
 800b184:	f859 3b04 	ldr.w	r3, [r9], #4
 800b188:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b18c:	fa1f f883 	uxth.w	r8, r3
 800b190:	fa17 f78b 	uxtah	r7, r7, fp
 800b194:	0c1b      	lsrs	r3, r3, #16
 800b196:	eba7 0808 	sub.w	r8, r7, r8
 800b19a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b19e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b1a2:	fa1f f888 	uxth.w	r8, r8
 800b1a6:	141f      	asrs	r7, r3, #16
 800b1a8:	454d      	cmp	r5, r9
 800b1aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b1ae:	f84a 3b04 	str.w	r3, [sl], #4
 800b1b2:	d8e7      	bhi.n	800b184 <__mdiff+0x7c>
 800b1b4:	1b2b      	subs	r3, r5, r4
 800b1b6:	3b15      	subs	r3, #21
 800b1b8:	f023 0303 	bic.w	r3, r3, #3
 800b1bc:	3304      	adds	r3, #4
 800b1be:	3415      	adds	r4, #21
 800b1c0:	42a5      	cmp	r5, r4
 800b1c2:	bf38      	it	cc
 800b1c4:	2304      	movcc	r3, #4
 800b1c6:	4419      	add	r1, r3
 800b1c8:	4473      	add	r3, lr
 800b1ca:	469e      	mov	lr, r3
 800b1cc:	460d      	mov	r5, r1
 800b1ce:	4565      	cmp	r5, ip
 800b1d0:	d30e      	bcc.n	800b1f0 <__mdiff+0xe8>
 800b1d2:	f10c 0203 	add.w	r2, ip, #3
 800b1d6:	1a52      	subs	r2, r2, r1
 800b1d8:	f022 0203 	bic.w	r2, r2, #3
 800b1dc:	3903      	subs	r1, #3
 800b1de:	458c      	cmp	ip, r1
 800b1e0:	bf38      	it	cc
 800b1e2:	2200      	movcc	r2, #0
 800b1e4:	441a      	add	r2, r3
 800b1e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1ea:	b17b      	cbz	r3, 800b20c <__mdiff+0x104>
 800b1ec:	6106      	str	r6, [r0, #16]
 800b1ee:	e7a5      	b.n	800b13c <__mdiff+0x34>
 800b1f0:	f855 8b04 	ldr.w	r8, [r5], #4
 800b1f4:	fa17 f488 	uxtah	r4, r7, r8
 800b1f8:	1422      	asrs	r2, r4, #16
 800b1fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b1fe:	b2a4      	uxth	r4, r4
 800b200:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b204:	f84e 4b04 	str.w	r4, [lr], #4
 800b208:	1417      	asrs	r7, r2, #16
 800b20a:	e7e0      	b.n	800b1ce <__mdiff+0xc6>
 800b20c:	3e01      	subs	r6, #1
 800b20e:	e7ea      	b.n	800b1e6 <__mdiff+0xde>
 800b210:	0800c4d8 	.word	0x0800c4d8
 800b214:	0800c4e9 	.word	0x0800c4e9

0800b218 <__d2b>:
 800b218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b21c:	4689      	mov	r9, r1
 800b21e:	2101      	movs	r1, #1
 800b220:	ec57 6b10 	vmov	r6, r7, d0
 800b224:	4690      	mov	r8, r2
 800b226:	f7ff fcd5 	bl	800abd4 <_Balloc>
 800b22a:	4604      	mov	r4, r0
 800b22c:	b930      	cbnz	r0, 800b23c <__d2b+0x24>
 800b22e:	4602      	mov	r2, r0
 800b230:	4b25      	ldr	r3, [pc, #148]	; (800b2c8 <__d2b+0xb0>)
 800b232:	4826      	ldr	r0, [pc, #152]	; (800b2cc <__d2b+0xb4>)
 800b234:	f240 310a 	movw	r1, #778	; 0x30a
 800b238:	f7fe fe70 	bl	8009f1c <__assert_func>
 800b23c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b240:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b244:	bb35      	cbnz	r5, 800b294 <__d2b+0x7c>
 800b246:	2e00      	cmp	r6, #0
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	d028      	beq.n	800b29e <__d2b+0x86>
 800b24c:	4668      	mov	r0, sp
 800b24e:	9600      	str	r6, [sp, #0]
 800b250:	f7ff fd8c 	bl	800ad6c <__lo0bits>
 800b254:	9900      	ldr	r1, [sp, #0]
 800b256:	b300      	cbz	r0, 800b29a <__d2b+0x82>
 800b258:	9a01      	ldr	r2, [sp, #4]
 800b25a:	f1c0 0320 	rsb	r3, r0, #32
 800b25e:	fa02 f303 	lsl.w	r3, r2, r3
 800b262:	430b      	orrs	r3, r1
 800b264:	40c2      	lsrs	r2, r0
 800b266:	6163      	str	r3, [r4, #20]
 800b268:	9201      	str	r2, [sp, #4]
 800b26a:	9b01      	ldr	r3, [sp, #4]
 800b26c:	61a3      	str	r3, [r4, #24]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	bf14      	ite	ne
 800b272:	2202      	movne	r2, #2
 800b274:	2201      	moveq	r2, #1
 800b276:	6122      	str	r2, [r4, #16]
 800b278:	b1d5      	cbz	r5, 800b2b0 <__d2b+0x98>
 800b27a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b27e:	4405      	add	r5, r0
 800b280:	f8c9 5000 	str.w	r5, [r9]
 800b284:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b288:	f8c8 0000 	str.w	r0, [r8]
 800b28c:	4620      	mov	r0, r4
 800b28e:	b003      	add	sp, #12
 800b290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b298:	e7d5      	b.n	800b246 <__d2b+0x2e>
 800b29a:	6161      	str	r1, [r4, #20]
 800b29c:	e7e5      	b.n	800b26a <__d2b+0x52>
 800b29e:	a801      	add	r0, sp, #4
 800b2a0:	f7ff fd64 	bl	800ad6c <__lo0bits>
 800b2a4:	9b01      	ldr	r3, [sp, #4]
 800b2a6:	6163      	str	r3, [r4, #20]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	6122      	str	r2, [r4, #16]
 800b2ac:	3020      	adds	r0, #32
 800b2ae:	e7e3      	b.n	800b278 <__d2b+0x60>
 800b2b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2b8:	f8c9 0000 	str.w	r0, [r9]
 800b2bc:	6918      	ldr	r0, [r3, #16]
 800b2be:	f7ff fd35 	bl	800ad2c <__hi0bits>
 800b2c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2c6:	e7df      	b.n	800b288 <__d2b+0x70>
 800b2c8:	0800c4d8 	.word	0x0800c4d8
 800b2cc:	0800c4e9 	.word	0x0800c4e9

0800b2d0 <_calloc_r>:
 800b2d0:	b513      	push	{r0, r1, r4, lr}
 800b2d2:	434a      	muls	r2, r1
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	9201      	str	r2, [sp, #4]
 800b2d8:	f7fe f8d4 	bl	8009484 <_malloc_r>
 800b2dc:	4604      	mov	r4, r0
 800b2de:	b118      	cbz	r0, 800b2e8 <_calloc_r+0x18>
 800b2e0:	9a01      	ldr	r2, [sp, #4]
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	f7fe f876 	bl	80093d4 <memset>
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	b002      	add	sp, #8
 800b2ec:	bd10      	pop	{r4, pc}

0800b2ee <_realloc_r>:
 800b2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	4614      	mov	r4, r2
 800b2f4:	460e      	mov	r6, r1
 800b2f6:	b921      	cbnz	r1, 800b302 <_realloc_r+0x14>
 800b2f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b2fc:	4611      	mov	r1, r2
 800b2fe:	f7fe b8c1 	b.w	8009484 <_malloc_r>
 800b302:	b922      	cbnz	r2, 800b30e <_realloc_r+0x20>
 800b304:	f7fe f86e 	bl	80093e4 <_free_r>
 800b308:	4625      	mov	r5, r4
 800b30a:	4628      	mov	r0, r5
 800b30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b30e:	f000 fddb 	bl	800bec8 <_malloc_usable_size_r>
 800b312:	42a0      	cmp	r0, r4
 800b314:	d20f      	bcs.n	800b336 <_realloc_r+0x48>
 800b316:	4621      	mov	r1, r4
 800b318:	4638      	mov	r0, r7
 800b31a:	f7fe f8b3 	bl	8009484 <_malloc_r>
 800b31e:	4605      	mov	r5, r0
 800b320:	2800      	cmp	r0, #0
 800b322:	d0f2      	beq.n	800b30a <_realloc_r+0x1c>
 800b324:	4631      	mov	r1, r6
 800b326:	4622      	mov	r2, r4
 800b328:	f7ff fc3a 	bl	800aba0 <memcpy>
 800b32c:	4631      	mov	r1, r6
 800b32e:	4638      	mov	r0, r7
 800b330:	f7fe f858 	bl	80093e4 <_free_r>
 800b334:	e7e9      	b.n	800b30a <_realloc_r+0x1c>
 800b336:	4635      	mov	r5, r6
 800b338:	e7e7      	b.n	800b30a <_realloc_r+0x1c>

0800b33a <__ssputs_r>:
 800b33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33e:	688e      	ldr	r6, [r1, #8]
 800b340:	429e      	cmp	r6, r3
 800b342:	4682      	mov	sl, r0
 800b344:	460c      	mov	r4, r1
 800b346:	4690      	mov	r8, r2
 800b348:	461f      	mov	r7, r3
 800b34a:	d838      	bhi.n	800b3be <__ssputs_r+0x84>
 800b34c:	898a      	ldrh	r2, [r1, #12]
 800b34e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b352:	d032      	beq.n	800b3ba <__ssputs_r+0x80>
 800b354:	6825      	ldr	r5, [r4, #0]
 800b356:	6909      	ldr	r1, [r1, #16]
 800b358:	eba5 0901 	sub.w	r9, r5, r1
 800b35c:	6965      	ldr	r5, [r4, #20]
 800b35e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b362:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b366:	3301      	adds	r3, #1
 800b368:	444b      	add	r3, r9
 800b36a:	106d      	asrs	r5, r5, #1
 800b36c:	429d      	cmp	r5, r3
 800b36e:	bf38      	it	cc
 800b370:	461d      	movcc	r5, r3
 800b372:	0553      	lsls	r3, r2, #21
 800b374:	d531      	bpl.n	800b3da <__ssputs_r+0xa0>
 800b376:	4629      	mov	r1, r5
 800b378:	f7fe f884 	bl	8009484 <_malloc_r>
 800b37c:	4606      	mov	r6, r0
 800b37e:	b950      	cbnz	r0, 800b396 <__ssputs_r+0x5c>
 800b380:	230c      	movs	r3, #12
 800b382:	f8ca 3000 	str.w	r3, [sl]
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38c:	81a3      	strh	r3, [r4, #12]
 800b38e:	f04f 30ff 	mov.w	r0, #4294967295
 800b392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b396:	6921      	ldr	r1, [r4, #16]
 800b398:	464a      	mov	r2, r9
 800b39a:	f7ff fc01 	bl	800aba0 <memcpy>
 800b39e:	89a3      	ldrh	r3, [r4, #12]
 800b3a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	6126      	str	r6, [r4, #16]
 800b3ac:	6165      	str	r5, [r4, #20]
 800b3ae:	444e      	add	r6, r9
 800b3b0:	eba5 0509 	sub.w	r5, r5, r9
 800b3b4:	6026      	str	r6, [r4, #0]
 800b3b6:	60a5      	str	r5, [r4, #8]
 800b3b8:	463e      	mov	r6, r7
 800b3ba:	42be      	cmp	r6, r7
 800b3bc:	d900      	bls.n	800b3c0 <__ssputs_r+0x86>
 800b3be:	463e      	mov	r6, r7
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	6820      	ldr	r0, [r4, #0]
 800b3c4:	4641      	mov	r1, r8
 800b3c6:	f000 fd65 	bl	800be94 <memmove>
 800b3ca:	68a3      	ldr	r3, [r4, #8]
 800b3cc:	6822      	ldr	r2, [r4, #0]
 800b3ce:	1b9b      	subs	r3, r3, r6
 800b3d0:	4432      	add	r2, r6
 800b3d2:	60a3      	str	r3, [r4, #8]
 800b3d4:	6022      	str	r2, [r4, #0]
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	e7db      	b.n	800b392 <__ssputs_r+0x58>
 800b3da:	462a      	mov	r2, r5
 800b3dc:	f7ff ff87 	bl	800b2ee <_realloc_r>
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d1e1      	bne.n	800b3aa <__ssputs_r+0x70>
 800b3e6:	6921      	ldr	r1, [r4, #16]
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	f7fd fffb 	bl	80093e4 <_free_r>
 800b3ee:	e7c7      	b.n	800b380 <__ssputs_r+0x46>

0800b3f0 <_svfiprintf_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	4698      	mov	r8, r3
 800b3f6:	898b      	ldrh	r3, [r1, #12]
 800b3f8:	061b      	lsls	r3, r3, #24
 800b3fa:	b09d      	sub	sp, #116	; 0x74
 800b3fc:	4607      	mov	r7, r0
 800b3fe:	460d      	mov	r5, r1
 800b400:	4614      	mov	r4, r2
 800b402:	d50e      	bpl.n	800b422 <_svfiprintf_r+0x32>
 800b404:	690b      	ldr	r3, [r1, #16]
 800b406:	b963      	cbnz	r3, 800b422 <_svfiprintf_r+0x32>
 800b408:	2140      	movs	r1, #64	; 0x40
 800b40a:	f7fe f83b 	bl	8009484 <_malloc_r>
 800b40e:	6028      	str	r0, [r5, #0]
 800b410:	6128      	str	r0, [r5, #16]
 800b412:	b920      	cbnz	r0, 800b41e <_svfiprintf_r+0x2e>
 800b414:	230c      	movs	r3, #12
 800b416:	603b      	str	r3, [r7, #0]
 800b418:	f04f 30ff 	mov.w	r0, #4294967295
 800b41c:	e0d1      	b.n	800b5c2 <_svfiprintf_r+0x1d2>
 800b41e:	2340      	movs	r3, #64	; 0x40
 800b420:	616b      	str	r3, [r5, #20]
 800b422:	2300      	movs	r3, #0
 800b424:	9309      	str	r3, [sp, #36]	; 0x24
 800b426:	2320      	movs	r3, #32
 800b428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b42c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b430:	2330      	movs	r3, #48	; 0x30
 800b432:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b5dc <_svfiprintf_r+0x1ec>
 800b436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b43a:	f04f 0901 	mov.w	r9, #1
 800b43e:	4623      	mov	r3, r4
 800b440:	469a      	mov	sl, r3
 800b442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b446:	b10a      	cbz	r2, 800b44c <_svfiprintf_r+0x5c>
 800b448:	2a25      	cmp	r2, #37	; 0x25
 800b44a:	d1f9      	bne.n	800b440 <_svfiprintf_r+0x50>
 800b44c:	ebba 0b04 	subs.w	fp, sl, r4
 800b450:	d00b      	beq.n	800b46a <_svfiprintf_r+0x7a>
 800b452:	465b      	mov	r3, fp
 800b454:	4622      	mov	r2, r4
 800b456:	4629      	mov	r1, r5
 800b458:	4638      	mov	r0, r7
 800b45a:	f7ff ff6e 	bl	800b33a <__ssputs_r>
 800b45e:	3001      	adds	r0, #1
 800b460:	f000 80aa 	beq.w	800b5b8 <_svfiprintf_r+0x1c8>
 800b464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b466:	445a      	add	r2, fp
 800b468:	9209      	str	r2, [sp, #36]	; 0x24
 800b46a:	f89a 3000 	ldrb.w	r3, [sl]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f000 80a2 	beq.w	800b5b8 <_svfiprintf_r+0x1c8>
 800b474:	2300      	movs	r3, #0
 800b476:	f04f 32ff 	mov.w	r2, #4294967295
 800b47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b47e:	f10a 0a01 	add.w	sl, sl, #1
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	9307      	str	r3, [sp, #28]
 800b486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b48a:	931a      	str	r3, [sp, #104]	; 0x68
 800b48c:	4654      	mov	r4, sl
 800b48e:	2205      	movs	r2, #5
 800b490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b494:	4851      	ldr	r0, [pc, #324]	; (800b5dc <_svfiprintf_r+0x1ec>)
 800b496:	f7f4 feeb 	bl	8000270 <memchr>
 800b49a:	9a04      	ldr	r2, [sp, #16]
 800b49c:	b9d8      	cbnz	r0, 800b4d6 <_svfiprintf_r+0xe6>
 800b49e:	06d0      	lsls	r0, r2, #27
 800b4a0:	bf44      	itt	mi
 800b4a2:	2320      	movmi	r3, #32
 800b4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4a8:	0711      	lsls	r1, r2, #28
 800b4aa:	bf44      	itt	mi
 800b4ac:	232b      	movmi	r3, #43	; 0x2b
 800b4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b8:	d015      	beq.n	800b4e6 <_svfiprintf_r+0xf6>
 800b4ba:	9a07      	ldr	r2, [sp, #28]
 800b4bc:	4654      	mov	r4, sl
 800b4be:	2000      	movs	r0, #0
 800b4c0:	f04f 0c0a 	mov.w	ip, #10
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ca:	3b30      	subs	r3, #48	; 0x30
 800b4cc:	2b09      	cmp	r3, #9
 800b4ce:	d94e      	bls.n	800b56e <_svfiprintf_r+0x17e>
 800b4d0:	b1b0      	cbz	r0, 800b500 <_svfiprintf_r+0x110>
 800b4d2:	9207      	str	r2, [sp, #28]
 800b4d4:	e014      	b.n	800b500 <_svfiprintf_r+0x110>
 800b4d6:	eba0 0308 	sub.w	r3, r0, r8
 800b4da:	fa09 f303 	lsl.w	r3, r9, r3
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	9304      	str	r3, [sp, #16]
 800b4e2:	46a2      	mov	sl, r4
 800b4e4:	e7d2      	b.n	800b48c <_svfiprintf_r+0x9c>
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	1d19      	adds	r1, r3, #4
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	9103      	str	r1, [sp, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bfbb      	ittet	lt
 800b4f2:	425b      	neglt	r3, r3
 800b4f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b4f8:	9307      	strge	r3, [sp, #28]
 800b4fa:	9307      	strlt	r3, [sp, #28]
 800b4fc:	bfb8      	it	lt
 800b4fe:	9204      	strlt	r2, [sp, #16]
 800b500:	7823      	ldrb	r3, [r4, #0]
 800b502:	2b2e      	cmp	r3, #46	; 0x2e
 800b504:	d10c      	bne.n	800b520 <_svfiprintf_r+0x130>
 800b506:	7863      	ldrb	r3, [r4, #1]
 800b508:	2b2a      	cmp	r3, #42	; 0x2a
 800b50a:	d135      	bne.n	800b578 <_svfiprintf_r+0x188>
 800b50c:	9b03      	ldr	r3, [sp, #12]
 800b50e:	1d1a      	adds	r2, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	9203      	str	r2, [sp, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	bfb8      	it	lt
 800b518:	f04f 33ff 	movlt.w	r3, #4294967295
 800b51c:	3402      	adds	r4, #2
 800b51e:	9305      	str	r3, [sp, #20]
 800b520:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5ec <_svfiprintf_r+0x1fc>
 800b524:	7821      	ldrb	r1, [r4, #0]
 800b526:	2203      	movs	r2, #3
 800b528:	4650      	mov	r0, sl
 800b52a:	f7f4 fea1 	bl	8000270 <memchr>
 800b52e:	b140      	cbz	r0, 800b542 <_svfiprintf_r+0x152>
 800b530:	2340      	movs	r3, #64	; 0x40
 800b532:	eba0 000a 	sub.w	r0, r0, sl
 800b536:	fa03 f000 	lsl.w	r0, r3, r0
 800b53a:	9b04      	ldr	r3, [sp, #16]
 800b53c:	4303      	orrs	r3, r0
 800b53e:	3401      	adds	r4, #1
 800b540:	9304      	str	r3, [sp, #16]
 800b542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b546:	4826      	ldr	r0, [pc, #152]	; (800b5e0 <_svfiprintf_r+0x1f0>)
 800b548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b54c:	2206      	movs	r2, #6
 800b54e:	f7f4 fe8f 	bl	8000270 <memchr>
 800b552:	2800      	cmp	r0, #0
 800b554:	d038      	beq.n	800b5c8 <_svfiprintf_r+0x1d8>
 800b556:	4b23      	ldr	r3, [pc, #140]	; (800b5e4 <_svfiprintf_r+0x1f4>)
 800b558:	bb1b      	cbnz	r3, 800b5a2 <_svfiprintf_r+0x1b2>
 800b55a:	9b03      	ldr	r3, [sp, #12]
 800b55c:	3307      	adds	r3, #7
 800b55e:	f023 0307 	bic.w	r3, r3, #7
 800b562:	3308      	adds	r3, #8
 800b564:	9303      	str	r3, [sp, #12]
 800b566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b568:	4433      	add	r3, r6
 800b56a:	9309      	str	r3, [sp, #36]	; 0x24
 800b56c:	e767      	b.n	800b43e <_svfiprintf_r+0x4e>
 800b56e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b572:	460c      	mov	r4, r1
 800b574:	2001      	movs	r0, #1
 800b576:	e7a5      	b.n	800b4c4 <_svfiprintf_r+0xd4>
 800b578:	2300      	movs	r3, #0
 800b57a:	3401      	adds	r4, #1
 800b57c:	9305      	str	r3, [sp, #20]
 800b57e:	4619      	mov	r1, r3
 800b580:	f04f 0c0a 	mov.w	ip, #10
 800b584:	4620      	mov	r0, r4
 800b586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b58a:	3a30      	subs	r2, #48	; 0x30
 800b58c:	2a09      	cmp	r2, #9
 800b58e:	d903      	bls.n	800b598 <_svfiprintf_r+0x1a8>
 800b590:	2b00      	cmp	r3, #0
 800b592:	d0c5      	beq.n	800b520 <_svfiprintf_r+0x130>
 800b594:	9105      	str	r1, [sp, #20]
 800b596:	e7c3      	b.n	800b520 <_svfiprintf_r+0x130>
 800b598:	fb0c 2101 	mla	r1, ip, r1, r2
 800b59c:	4604      	mov	r4, r0
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e7f0      	b.n	800b584 <_svfiprintf_r+0x194>
 800b5a2:	ab03      	add	r3, sp, #12
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	462a      	mov	r2, r5
 800b5a8:	4b0f      	ldr	r3, [pc, #60]	; (800b5e8 <_svfiprintf_r+0x1f8>)
 800b5aa:	a904      	add	r1, sp, #16
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	f7fe f853 	bl	8009658 <_printf_float>
 800b5b2:	1c42      	adds	r2, r0, #1
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	d1d6      	bne.n	800b566 <_svfiprintf_r+0x176>
 800b5b8:	89ab      	ldrh	r3, [r5, #12]
 800b5ba:	065b      	lsls	r3, r3, #25
 800b5bc:	f53f af2c 	bmi.w	800b418 <_svfiprintf_r+0x28>
 800b5c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5c2:	b01d      	add	sp, #116	; 0x74
 800b5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c8:	ab03      	add	r3, sp, #12
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	462a      	mov	r2, r5
 800b5ce:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <_svfiprintf_r+0x1f8>)
 800b5d0:	a904      	add	r1, sp, #16
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f7fe facc 	bl	8009b70 <_printf_i>
 800b5d8:	e7eb      	b.n	800b5b2 <_svfiprintf_r+0x1c2>
 800b5da:	bf00      	nop
 800b5dc:	0800c64c 	.word	0x0800c64c
 800b5e0:	0800c656 	.word	0x0800c656
 800b5e4:	08009659 	.word	0x08009659
 800b5e8:	0800b33b 	.word	0x0800b33b
 800b5ec:	0800c652 	.word	0x0800c652

0800b5f0 <__sfputc_r>:
 800b5f0:	6893      	ldr	r3, [r2, #8]
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	b410      	push	{r4}
 800b5f8:	6093      	str	r3, [r2, #8]
 800b5fa:	da08      	bge.n	800b60e <__sfputc_r+0x1e>
 800b5fc:	6994      	ldr	r4, [r2, #24]
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	db01      	blt.n	800b606 <__sfputc_r+0x16>
 800b602:	290a      	cmp	r1, #10
 800b604:	d103      	bne.n	800b60e <__sfputc_r+0x1e>
 800b606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b60a:	f000 b94b 	b.w	800b8a4 <__swbuf_r>
 800b60e:	6813      	ldr	r3, [r2, #0]
 800b610:	1c58      	adds	r0, r3, #1
 800b612:	6010      	str	r0, [r2, #0]
 800b614:	7019      	strb	r1, [r3, #0]
 800b616:	4608      	mov	r0, r1
 800b618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <__sfputs_r>:
 800b61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b620:	4606      	mov	r6, r0
 800b622:	460f      	mov	r7, r1
 800b624:	4614      	mov	r4, r2
 800b626:	18d5      	adds	r5, r2, r3
 800b628:	42ac      	cmp	r4, r5
 800b62a:	d101      	bne.n	800b630 <__sfputs_r+0x12>
 800b62c:	2000      	movs	r0, #0
 800b62e:	e007      	b.n	800b640 <__sfputs_r+0x22>
 800b630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b634:	463a      	mov	r2, r7
 800b636:	4630      	mov	r0, r6
 800b638:	f7ff ffda 	bl	800b5f0 <__sfputc_r>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d1f3      	bne.n	800b628 <__sfputs_r+0xa>
 800b640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b644 <_vfiprintf_r>:
 800b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	460d      	mov	r5, r1
 800b64a:	b09d      	sub	sp, #116	; 0x74
 800b64c:	4614      	mov	r4, r2
 800b64e:	4698      	mov	r8, r3
 800b650:	4606      	mov	r6, r0
 800b652:	b118      	cbz	r0, 800b65c <_vfiprintf_r+0x18>
 800b654:	6983      	ldr	r3, [r0, #24]
 800b656:	b90b      	cbnz	r3, 800b65c <_vfiprintf_r+0x18>
 800b658:	f000 fb06 	bl	800bc68 <__sinit>
 800b65c:	4b89      	ldr	r3, [pc, #548]	; (800b884 <_vfiprintf_r+0x240>)
 800b65e:	429d      	cmp	r5, r3
 800b660:	d11b      	bne.n	800b69a <_vfiprintf_r+0x56>
 800b662:	6875      	ldr	r5, [r6, #4]
 800b664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b666:	07d9      	lsls	r1, r3, #31
 800b668:	d405      	bmi.n	800b676 <_vfiprintf_r+0x32>
 800b66a:	89ab      	ldrh	r3, [r5, #12]
 800b66c:	059a      	lsls	r2, r3, #22
 800b66e:	d402      	bmi.n	800b676 <_vfiprintf_r+0x32>
 800b670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b672:	f000 fb97 	bl	800bda4 <__retarget_lock_acquire_recursive>
 800b676:	89ab      	ldrh	r3, [r5, #12]
 800b678:	071b      	lsls	r3, r3, #28
 800b67a:	d501      	bpl.n	800b680 <_vfiprintf_r+0x3c>
 800b67c:	692b      	ldr	r3, [r5, #16]
 800b67e:	b9eb      	cbnz	r3, 800b6bc <_vfiprintf_r+0x78>
 800b680:	4629      	mov	r1, r5
 800b682:	4630      	mov	r0, r6
 800b684:	f000 f960 	bl	800b948 <__swsetup_r>
 800b688:	b1c0      	cbz	r0, 800b6bc <_vfiprintf_r+0x78>
 800b68a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b68c:	07dc      	lsls	r4, r3, #31
 800b68e:	d50e      	bpl.n	800b6ae <_vfiprintf_r+0x6a>
 800b690:	f04f 30ff 	mov.w	r0, #4294967295
 800b694:	b01d      	add	sp, #116	; 0x74
 800b696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69a:	4b7b      	ldr	r3, [pc, #492]	; (800b888 <_vfiprintf_r+0x244>)
 800b69c:	429d      	cmp	r5, r3
 800b69e:	d101      	bne.n	800b6a4 <_vfiprintf_r+0x60>
 800b6a0:	68b5      	ldr	r5, [r6, #8]
 800b6a2:	e7df      	b.n	800b664 <_vfiprintf_r+0x20>
 800b6a4:	4b79      	ldr	r3, [pc, #484]	; (800b88c <_vfiprintf_r+0x248>)
 800b6a6:	429d      	cmp	r5, r3
 800b6a8:	bf08      	it	eq
 800b6aa:	68f5      	ldreq	r5, [r6, #12]
 800b6ac:	e7da      	b.n	800b664 <_vfiprintf_r+0x20>
 800b6ae:	89ab      	ldrh	r3, [r5, #12]
 800b6b0:	0598      	lsls	r0, r3, #22
 800b6b2:	d4ed      	bmi.n	800b690 <_vfiprintf_r+0x4c>
 800b6b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6b6:	f000 fb76 	bl	800bda6 <__retarget_lock_release_recursive>
 800b6ba:	e7e9      	b.n	800b690 <_vfiprintf_r+0x4c>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c0:	2320      	movs	r3, #32
 800b6c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6ca:	2330      	movs	r3, #48	; 0x30
 800b6cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b890 <_vfiprintf_r+0x24c>
 800b6d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6d4:	f04f 0901 	mov.w	r9, #1
 800b6d8:	4623      	mov	r3, r4
 800b6da:	469a      	mov	sl, r3
 800b6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6e0:	b10a      	cbz	r2, 800b6e6 <_vfiprintf_r+0xa2>
 800b6e2:	2a25      	cmp	r2, #37	; 0x25
 800b6e4:	d1f9      	bne.n	800b6da <_vfiprintf_r+0x96>
 800b6e6:	ebba 0b04 	subs.w	fp, sl, r4
 800b6ea:	d00b      	beq.n	800b704 <_vfiprintf_r+0xc0>
 800b6ec:	465b      	mov	r3, fp
 800b6ee:	4622      	mov	r2, r4
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f7ff ff93 	bl	800b61e <__sfputs_r>
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	f000 80aa 	beq.w	800b852 <_vfiprintf_r+0x20e>
 800b6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b700:	445a      	add	r2, fp
 800b702:	9209      	str	r2, [sp, #36]	; 0x24
 800b704:	f89a 3000 	ldrb.w	r3, [sl]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 80a2 	beq.w	800b852 <_vfiprintf_r+0x20e>
 800b70e:	2300      	movs	r3, #0
 800b710:	f04f 32ff 	mov.w	r2, #4294967295
 800b714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b718:	f10a 0a01 	add.w	sl, sl, #1
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	9307      	str	r3, [sp, #28]
 800b720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b724:	931a      	str	r3, [sp, #104]	; 0x68
 800b726:	4654      	mov	r4, sl
 800b728:	2205      	movs	r2, #5
 800b72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72e:	4858      	ldr	r0, [pc, #352]	; (800b890 <_vfiprintf_r+0x24c>)
 800b730:	f7f4 fd9e 	bl	8000270 <memchr>
 800b734:	9a04      	ldr	r2, [sp, #16]
 800b736:	b9d8      	cbnz	r0, 800b770 <_vfiprintf_r+0x12c>
 800b738:	06d1      	lsls	r1, r2, #27
 800b73a:	bf44      	itt	mi
 800b73c:	2320      	movmi	r3, #32
 800b73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b742:	0713      	lsls	r3, r2, #28
 800b744:	bf44      	itt	mi
 800b746:	232b      	movmi	r3, #43	; 0x2b
 800b748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b74c:	f89a 3000 	ldrb.w	r3, [sl]
 800b750:	2b2a      	cmp	r3, #42	; 0x2a
 800b752:	d015      	beq.n	800b780 <_vfiprintf_r+0x13c>
 800b754:	9a07      	ldr	r2, [sp, #28]
 800b756:	4654      	mov	r4, sl
 800b758:	2000      	movs	r0, #0
 800b75a:	f04f 0c0a 	mov.w	ip, #10
 800b75e:	4621      	mov	r1, r4
 800b760:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b764:	3b30      	subs	r3, #48	; 0x30
 800b766:	2b09      	cmp	r3, #9
 800b768:	d94e      	bls.n	800b808 <_vfiprintf_r+0x1c4>
 800b76a:	b1b0      	cbz	r0, 800b79a <_vfiprintf_r+0x156>
 800b76c:	9207      	str	r2, [sp, #28]
 800b76e:	e014      	b.n	800b79a <_vfiprintf_r+0x156>
 800b770:	eba0 0308 	sub.w	r3, r0, r8
 800b774:	fa09 f303 	lsl.w	r3, r9, r3
 800b778:	4313      	orrs	r3, r2
 800b77a:	9304      	str	r3, [sp, #16]
 800b77c:	46a2      	mov	sl, r4
 800b77e:	e7d2      	b.n	800b726 <_vfiprintf_r+0xe2>
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	1d19      	adds	r1, r3, #4
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	9103      	str	r1, [sp, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	bfbb      	ittet	lt
 800b78c:	425b      	neglt	r3, r3
 800b78e:	f042 0202 	orrlt.w	r2, r2, #2
 800b792:	9307      	strge	r3, [sp, #28]
 800b794:	9307      	strlt	r3, [sp, #28]
 800b796:	bfb8      	it	lt
 800b798:	9204      	strlt	r2, [sp, #16]
 800b79a:	7823      	ldrb	r3, [r4, #0]
 800b79c:	2b2e      	cmp	r3, #46	; 0x2e
 800b79e:	d10c      	bne.n	800b7ba <_vfiprintf_r+0x176>
 800b7a0:	7863      	ldrb	r3, [r4, #1]
 800b7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a4:	d135      	bne.n	800b812 <_vfiprintf_r+0x1ce>
 800b7a6:	9b03      	ldr	r3, [sp, #12]
 800b7a8:	1d1a      	adds	r2, r3, #4
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	9203      	str	r2, [sp, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	bfb8      	it	lt
 800b7b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7b6:	3402      	adds	r4, #2
 800b7b8:	9305      	str	r3, [sp, #20]
 800b7ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8a0 <_vfiprintf_r+0x25c>
 800b7be:	7821      	ldrb	r1, [r4, #0]
 800b7c0:	2203      	movs	r2, #3
 800b7c2:	4650      	mov	r0, sl
 800b7c4:	f7f4 fd54 	bl	8000270 <memchr>
 800b7c8:	b140      	cbz	r0, 800b7dc <_vfiprintf_r+0x198>
 800b7ca:	2340      	movs	r3, #64	; 0x40
 800b7cc:	eba0 000a 	sub.w	r0, r0, sl
 800b7d0:	fa03 f000 	lsl.w	r0, r3, r0
 800b7d4:	9b04      	ldr	r3, [sp, #16]
 800b7d6:	4303      	orrs	r3, r0
 800b7d8:	3401      	adds	r4, #1
 800b7da:	9304      	str	r3, [sp, #16]
 800b7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e0:	482c      	ldr	r0, [pc, #176]	; (800b894 <_vfiprintf_r+0x250>)
 800b7e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7e6:	2206      	movs	r2, #6
 800b7e8:	f7f4 fd42 	bl	8000270 <memchr>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d03f      	beq.n	800b870 <_vfiprintf_r+0x22c>
 800b7f0:	4b29      	ldr	r3, [pc, #164]	; (800b898 <_vfiprintf_r+0x254>)
 800b7f2:	bb1b      	cbnz	r3, 800b83c <_vfiprintf_r+0x1f8>
 800b7f4:	9b03      	ldr	r3, [sp, #12]
 800b7f6:	3307      	adds	r3, #7
 800b7f8:	f023 0307 	bic.w	r3, r3, #7
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	9303      	str	r3, [sp, #12]
 800b800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b802:	443b      	add	r3, r7
 800b804:	9309      	str	r3, [sp, #36]	; 0x24
 800b806:	e767      	b.n	800b6d8 <_vfiprintf_r+0x94>
 800b808:	fb0c 3202 	mla	r2, ip, r2, r3
 800b80c:	460c      	mov	r4, r1
 800b80e:	2001      	movs	r0, #1
 800b810:	e7a5      	b.n	800b75e <_vfiprintf_r+0x11a>
 800b812:	2300      	movs	r3, #0
 800b814:	3401      	adds	r4, #1
 800b816:	9305      	str	r3, [sp, #20]
 800b818:	4619      	mov	r1, r3
 800b81a:	f04f 0c0a 	mov.w	ip, #10
 800b81e:	4620      	mov	r0, r4
 800b820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b824:	3a30      	subs	r2, #48	; 0x30
 800b826:	2a09      	cmp	r2, #9
 800b828:	d903      	bls.n	800b832 <_vfiprintf_r+0x1ee>
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d0c5      	beq.n	800b7ba <_vfiprintf_r+0x176>
 800b82e:	9105      	str	r1, [sp, #20]
 800b830:	e7c3      	b.n	800b7ba <_vfiprintf_r+0x176>
 800b832:	fb0c 2101 	mla	r1, ip, r1, r2
 800b836:	4604      	mov	r4, r0
 800b838:	2301      	movs	r3, #1
 800b83a:	e7f0      	b.n	800b81e <_vfiprintf_r+0x1da>
 800b83c:	ab03      	add	r3, sp, #12
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	462a      	mov	r2, r5
 800b842:	4b16      	ldr	r3, [pc, #88]	; (800b89c <_vfiprintf_r+0x258>)
 800b844:	a904      	add	r1, sp, #16
 800b846:	4630      	mov	r0, r6
 800b848:	f7fd ff06 	bl	8009658 <_printf_float>
 800b84c:	4607      	mov	r7, r0
 800b84e:	1c78      	adds	r0, r7, #1
 800b850:	d1d6      	bne.n	800b800 <_vfiprintf_r+0x1bc>
 800b852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b854:	07d9      	lsls	r1, r3, #31
 800b856:	d405      	bmi.n	800b864 <_vfiprintf_r+0x220>
 800b858:	89ab      	ldrh	r3, [r5, #12]
 800b85a:	059a      	lsls	r2, r3, #22
 800b85c:	d402      	bmi.n	800b864 <_vfiprintf_r+0x220>
 800b85e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b860:	f000 faa1 	bl	800bda6 <__retarget_lock_release_recursive>
 800b864:	89ab      	ldrh	r3, [r5, #12]
 800b866:	065b      	lsls	r3, r3, #25
 800b868:	f53f af12 	bmi.w	800b690 <_vfiprintf_r+0x4c>
 800b86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b86e:	e711      	b.n	800b694 <_vfiprintf_r+0x50>
 800b870:	ab03      	add	r3, sp, #12
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	462a      	mov	r2, r5
 800b876:	4b09      	ldr	r3, [pc, #36]	; (800b89c <_vfiprintf_r+0x258>)
 800b878:	a904      	add	r1, sp, #16
 800b87a:	4630      	mov	r0, r6
 800b87c:	f7fe f978 	bl	8009b70 <_printf_i>
 800b880:	e7e4      	b.n	800b84c <_vfiprintf_r+0x208>
 800b882:	bf00      	nop
 800b884:	0800c680 	.word	0x0800c680
 800b888:	0800c6a0 	.word	0x0800c6a0
 800b88c:	0800c660 	.word	0x0800c660
 800b890:	0800c64c 	.word	0x0800c64c
 800b894:	0800c656 	.word	0x0800c656
 800b898:	08009659 	.word	0x08009659
 800b89c:	0800b61f 	.word	0x0800b61f
 800b8a0:	0800c652 	.word	0x0800c652

0800b8a4 <__swbuf_r>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	460e      	mov	r6, r1
 800b8a8:	4614      	mov	r4, r2
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	b118      	cbz	r0, 800b8b6 <__swbuf_r+0x12>
 800b8ae:	6983      	ldr	r3, [r0, #24]
 800b8b0:	b90b      	cbnz	r3, 800b8b6 <__swbuf_r+0x12>
 800b8b2:	f000 f9d9 	bl	800bc68 <__sinit>
 800b8b6:	4b21      	ldr	r3, [pc, #132]	; (800b93c <__swbuf_r+0x98>)
 800b8b8:	429c      	cmp	r4, r3
 800b8ba:	d12b      	bne.n	800b914 <__swbuf_r+0x70>
 800b8bc:	686c      	ldr	r4, [r5, #4]
 800b8be:	69a3      	ldr	r3, [r4, #24]
 800b8c0:	60a3      	str	r3, [r4, #8]
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	071a      	lsls	r2, r3, #28
 800b8c6:	d52f      	bpl.n	800b928 <__swbuf_r+0x84>
 800b8c8:	6923      	ldr	r3, [r4, #16]
 800b8ca:	b36b      	cbz	r3, 800b928 <__swbuf_r+0x84>
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	6820      	ldr	r0, [r4, #0]
 800b8d0:	1ac0      	subs	r0, r0, r3
 800b8d2:	6963      	ldr	r3, [r4, #20]
 800b8d4:	b2f6      	uxtb	r6, r6
 800b8d6:	4283      	cmp	r3, r0
 800b8d8:	4637      	mov	r7, r6
 800b8da:	dc04      	bgt.n	800b8e6 <__swbuf_r+0x42>
 800b8dc:	4621      	mov	r1, r4
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f000 f92e 	bl	800bb40 <_fflush_r>
 800b8e4:	bb30      	cbnz	r0, 800b934 <__swbuf_r+0x90>
 800b8e6:	68a3      	ldr	r3, [r4, #8]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	60a3      	str	r3, [r4, #8]
 800b8ec:	6823      	ldr	r3, [r4, #0]
 800b8ee:	1c5a      	adds	r2, r3, #1
 800b8f0:	6022      	str	r2, [r4, #0]
 800b8f2:	701e      	strb	r6, [r3, #0]
 800b8f4:	6963      	ldr	r3, [r4, #20]
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	4283      	cmp	r3, r0
 800b8fa:	d004      	beq.n	800b906 <__swbuf_r+0x62>
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	07db      	lsls	r3, r3, #31
 800b900:	d506      	bpl.n	800b910 <__swbuf_r+0x6c>
 800b902:	2e0a      	cmp	r6, #10
 800b904:	d104      	bne.n	800b910 <__swbuf_r+0x6c>
 800b906:	4621      	mov	r1, r4
 800b908:	4628      	mov	r0, r5
 800b90a:	f000 f919 	bl	800bb40 <_fflush_r>
 800b90e:	b988      	cbnz	r0, 800b934 <__swbuf_r+0x90>
 800b910:	4638      	mov	r0, r7
 800b912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b914:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <__swbuf_r+0x9c>)
 800b916:	429c      	cmp	r4, r3
 800b918:	d101      	bne.n	800b91e <__swbuf_r+0x7a>
 800b91a:	68ac      	ldr	r4, [r5, #8]
 800b91c:	e7cf      	b.n	800b8be <__swbuf_r+0x1a>
 800b91e:	4b09      	ldr	r3, [pc, #36]	; (800b944 <__swbuf_r+0xa0>)
 800b920:	429c      	cmp	r4, r3
 800b922:	bf08      	it	eq
 800b924:	68ec      	ldreq	r4, [r5, #12]
 800b926:	e7ca      	b.n	800b8be <__swbuf_r+0x1a>
 800b928:	4621      	mov	r1, r4
 800b92a:	4628      	mov	r0, r5
 800b92c:	f000 f80c 	bl	800b948 <__swsetup_r>
 800b930:	2800      	cmp	r0, #0
 800b932:	d0cb      	beq.n	800b8cc <__swbuf_r+0x28>
 800b934:	f04f 37ff 	mov.w	r7, #4294967295
 800b938:	e7ea      	b.n	800b910 <__swbuf_r+0x6c>
 800b93a:	bf00      	nop
 800b93c:	0800c680 	.word	0x0800c680
 800b940:	0800c6a0 	.word	0x0800c6a0
 800b944:	0800c660 	.word	0x0800c660

0800b948 <__swsetup_r>:
 800b948:	4b32      	ldr	r3, [pc, #200]	; (800ba14 <__swsetup_r+0xcc>)
 800b94a:	b570      	push	{r4, r5, r6, lr}
 800b94c:	681d      	ldr	r5, [r3, #0]
 800b94e:	4606      	mov	r6, r0
 800b950:	460c      	mov	r4, r1
 800b952:	b125      	cbz	r5, 800b95e <__swsetup_r+0x16>
 800b954:	69ab      	ldr	r3, [r5, #24]
 800b956:	b913      	cbnz	r3, 800b95e <__swsetup_r+0x16>
 800b958:	4628      	mov	r0, r5
 800b95a:	f000 f985 	bl	800bc68 <__sinit>
 800b95e:	4b2e      	ldr	r3, [pc, #184]	; (800ba18 <__swsetup_r+0xd0>)
 800b960:	429c      	cmp	r4, r3
 800b962:	d10f      	bne.n	800b984 <__swsetup_r+0x3c>
 800b964:	686c      	ldr	r4, [r5, #4]
 800b966:	89a3      	ldrh	r3, [r4, #12]
 800b968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b96c:	0719      	lsls	r1, r3, #28
 800b96e:	d42c      	bmi.n	800b9ca <__swsetup_r+0x82>
 800b970:	06dd      	lsls	r5, r3, #27
 800b972:	d411      	bmi.n	800b998 <__swsetup_r+0x50>
 800b974:	2309      	movs	r3, #9
 800b976:	6033      	str	r3, [r6, #0]
 800b978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b97c:	81a3      	strh	r3, [r4, #12]
 800b97e:	f04f 30ff 	mov.w	r0, #4294967295
 800b982:	e03e      	b.n	800ba02 <__swsetup_r+0xba>
 800b984:	4b25      	ldr	r3, [pc, #148]	; (800ba1c <__swsetup_r+0xd4>)
 800b986:	429c      	cmp	r4, r3
 800b988:	d101      	bne.n	800b98e <__swsetup_r+0x46>
 800b98a:	68ac      	ldr	r4, [r5, #8]
 800b98c:	e7eb      	b.n	800b966 <__swsetup_r+0x1e>
 800b98e:	4b24      	ldr	r3, [pc, #144]	; (800ba20 <__swsetup_r+0xd8>)
 800b990:	429c      	cmp	r4, r3
 800b992:	bf08      	it	eq
 800b994:	68ec      	ldreq	r4, [r5, #12]
 800b996:	e7e6      	b.n	800b966 <__swsetup_r+0x1e>
 800b998:	0758      	lsls	r0, r3, #29
 800b99a:	d512      	bpl.n	800b9c2 <__swsetup_r+0x7a>
 800b99c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b99e:	b141      	cbz	r1, 800b9b2 <__swsetup_r+0x6a>
 800b9a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9a4:	4299      	cmp	r1, r3
 800b9a6:	d002      	beq.n	800b9ae <__swsetup_r+0x66>
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f7fd fd1b 	bl	80093e4 <_free_r>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	6363      	str	r3, [r4, #52]	; 0x34
 800b9b2:	89a3      	ldrh	r3, [r4, #12]
 800b9b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9b8:	81a3      	strh	r3, [r4, #12]
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	6063      	str	r3, [r4, #4]
 800b9be:	6923      	ldr	r3, [r4, #16]
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	f043 0308 	orr.w	r3, r3, #8
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	6923      	ldr	r3, [r4, #16]
 800b9cc:	b94b      	cbnz	r3, 800b9e2 <__swsetup_r+0x9a>
 800b9ce:	89a3      	ldrh	r3, [r4, #12]
 800b9d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9d8:	d003      	beq.n	800b9e2 <__swsetup_r+0x9a>
 800b9da:	4621      	mov	r1, r4
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f000 fa07 	bl	800bdf0 <__smakebuf_r>
 800b9e2:	89a0      	ldrh	r0, [r4, #12]
 800b9e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9e8:	f010 0301 	ands.w	r3, r0, #1
 800b9ec:	d00a      	beq.n	800ba04 <__swsetup_r+0xbc>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60a3      	str	r3, [r4, #8]
 800b9f2:	6963      	ldr	r3, [r4, #20]
 800b9f4:	425b      	negs	r3, r3
 800b9f6:	61a3      	str	r3, [r4, #24]
 800b9f8:	6923      	ldr	r3, [r4, #16]
 800b9fa:	b943      	cbnz	r3, 800ba0e <__swsetup_r+0xc6>
 800b9fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba00:	d1ba      	bne.n	800b978 <__swsetup_r+0x30>
 800ba02:	bd70      	pop	{r4, r5, r6, pc}
 800ba04:	0781      	lsls	r1, r0, #30
 800ba06:	bf58      	it	pl
 800ba08:	6963      	ldrpl	r3, [r4, #20]
 800ba0a:	60a3      	str	r3, [r4, #8]
 800ba0c:	e7f4      	b.n	800b9f8 <__swsetup_r+0xb0>
 800ba0e:	2000      	movs	r0, #0
 800ba10:	e7f7      	b.n	800ba02 <__swsetup_r+0xba>
 800ba12:	bf00      	nop
 800ba14:	200001ec 	.word	0x200001ec
 800ba18:	0800c680 	.word	0x0800c680
 800ba1c:	0800c6a0 	.word	0x0800c6a0
 800ba20:	0800c660 	.word	0x0800c660

0800ba24 <abort>:
 800ba24:	b508      	push	{r3, lr}
 800ba26:	2006      	movs	r0, #6
 800ba28:	f000 fa7e 	bl	800bf28 <raise>
 800ba2c:	2001      	movs	r0, #1
 800ba2e:	f7f6 fead 	bl	800278c <_exit>
	...

0800ba34 <__sflush_r>:
 800ba34:	898a      	ldrh	r2, [r1, #12]
 800ba36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3a:	4605      	mov	r5, r0
 800ba3c:	0710      	lsls	r0, r2, #28
 800ba3e:	460c      	mov	r4, r1
 800ba40:	d458      	bmi.n	800baf4 <__sflush_r+0xc0>
 800ba42:	684b      	ldr	r3, [r1, #4]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	dc05      	bgt.n	800ba54 <__sflush_r+0x20>
 800ba48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	dc02      	bgt.n	800ba54 <__sflush_r+0x20>
 800ba4e:	2000      	movs	r0, #0
 800ba50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba56:	2e00      	cmp	r6, #0
 800ba58:	d0f9      	beq.n	800ba4e <__sflush_r+0x1a>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba60:	682f      	ldr	r7, [r5, #0]
 800ba62:	602b      	str	r3, [r5, #0]
 800ba64:	d032      	beq.n	800bacc <__sflush_r+0x98>
 800ba66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba68:	89a3      	ldrh	r3, [r4, #12]
 800ba6a:	075a      	lsls	r2, r3, #29
 800ba6c:	d505      	bpl.n	800ba7a <__sflush_r+0x46>
 800ba6e:	6863      	ldr	r3, [r4, #4]
 800ba70:	1ac0      	subs	r0, r0, r3
 800ba72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba74:	b10b      	cbz	r3, 800ba7a <__sflush_r+0x46>
 800ba76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba78:	1ac0      	subs	r0, r0, r3
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba80:	6a21      	ldr	r1, [r4, #32]
 800ba82:	4628      	mov	r0, r5
 800ba84:	47b0      	blx	r6
 800ba86:	1c43      	adds	r3, r0, #1
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	d106      	bne.n	800ba9a <__sflush_r+0x66>
 800ba8c:	6829      	ldr	r1, [r5, #0]
 800ba8e:	291d      	cmp	r1, #29
 800ba90:	d82c      	bhi.n	800baec <__sflush_r+0xb8>
 800ba92:	4a2a      	ldr	r2, [pc, #168]	; (800bb3c <__sflush_r+0x108>)
 800ba94:	40ca      	lsrs	r2, r1
 800ba96:	07d6      	lsls	r6, r2, #31
 800ba98:	d528      	bpl.n	800baec <__sflush_r+0xb8>
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	6062      	str	r2, [r4, #4]
 800ba9e:	04d9      	lsls	r1, r3, #19
 800baa0:	6922      	ldr	r2, [r4, #16]
 800baa2:	6022      	str	r2, [r4, #0]
 800baa4:	d504      	bpl.n	800bab0 <__sflush_r+0x7c>
 800baa6:	1c42      	adds	r2, r0, #1
 800baa8:	d101      	bne.n	800baae <__sflush_r+0x7a>
 800baaa:	682b      	ldr	r3, [r5, #0]
 800baac:	b903      	cbnz	r3, 800bab0 <__sflush_r+0x7c>
 800baae:	6560      	str	r0, [r4, #84]	; 0x54
 800bab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bab2:	602f      	str	r7, [r5, #0]
 800bab4:	2900      	cmp	r1, #0
 800bab6:	d0ca      	beq.n	800ba4e <__sflush_r+0x1a>
 800bab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800babc:	4299      	cmp	r1, r3
 800babe:	d002      	beq.n	800bac6 <__sflush_r+0x92>
 800bac0:	4628      	mov	r0, r5
 800bac2:	f7fd fc8f 	bl	80093e4 <_free_r>
 800bac6:	2000      	movs	r0, #0
 800bac8:	6360      	str	r0, [r4, #52]	; 0x34
 800baca:	e7c1      	b.n	800ba50 <__sflush_r+0x1c>
 800bacc:	6a21      	ldr	r1, [r4, #32]
 800bace:	2301      	movs	r3, #1
 800bad0:	4628      	mov	r0, r5
 800bad2:	47b0      	blx	r6
 800bad4:	1c41      	adds	r1, r0, #1
 800bad6:	d1c7      	bne.n	800ba68 <__sflush_r+0x34>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d0c4      	beq.n	800ba68 <__sflush_r+0x34>
 800bade:	2b1d      	cmp	r3, #29
 800bae0:	d001      	beq.n	800bae6 <__sflush_r+0xb2>
 800bae2:	2b16      	cmp	r3, #22
 800bae4:	d101      	bne.n	800baea <__sflush_r+0xb6>
 800bae6:	602f      	str	r7, [r5, #0]
 800bae8:	e7b1      	b.n	800ba4e <__sflush_r+0x1a>
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf0:	81a3      	strh	r3, [r4, #12]
 800baf2:	e7ad      	b.n	800ba50 <__sflush_r+0x1c>
 800baf4:	690f      	ldr	r7, [r1, #16]
 800baf6:	2f00      	cmp	r7, #0
 800baf8:	d0a9      	beq.n	800ba4e <__sflush_r+0x1a>
 800bafa:	0793      	lsls	r3, r2, #30
 800bafc:	680e      	ldr	r6, [r1, #0]
 800bafe:	bf08      	it	eq
 800bb00:	694b      	ldreq	r3, [r1, #20]
 800bb02:	600f      	str	r7, [r1, #0]
 800bb04:	bf18      	it	ne
 800bb06:	2300      	movne	r3, #0
 800bb08:	eba6 0807 	sub.w	r8, r6, r7
 800bb0c:	608b      	str	r3, [r1, #8]
 800bb0e:	f1b8 0f00 	cmp.w	r8, #0
 800bb12:	dd9c      	ble.n	800ba4e <__sflush_r+0x1a>
 800bb14:	6a21      	ldr	r1, [r4, #32]
 800bb16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb18:	4643      	mov	r3, r8
 800bb1a:	463a      	mov	r2, r7
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	47b0      	blx	r6
 800bb20:	2800      	cmp	r0, #0
 800bb22:	dc06      	bgt.n	800bb32 <__sflush_r+0xfe>
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb30:	e78e      	b.n	800ba50 <__sflush_r+0x1c>
 800bb32:	4407      	add	r7, r0
 800bb34:	eba8 0800 	sub.w	r8, r8, r0
 800bb38:	e7e9      	b.n	800bb0e <__sflush_r+0xda>
 800bb3a:	bf00      	nop
 800bb3c:	20400001 	.word	0x20400001

0800bb40 <_fflush_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	690b      	ldr	r3, [r1, #16]
 800bb44:	4605      	mov	r5, r0
 800bb46:	460c      	mov	r4, r1
 800bb48:	b913      	cbnz	r3, 800bb50 <_fflush_r+0x10>
 800bb4a:	2500      	movs	r5, #0
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	b118      	cbz	r0, 800bb5a <_fflush_r+0x1a>
 800bb52:	6983      	ldr	r3, [r0, #24]
 800bb54:	b90b      	cbnz	r3, 800bb5a <_fflush_r+0x1a>
 800bb56:	f000 f887 	bl	800bc68 <__sinit>
 800bb5a:	4b14      	ldr	r3, [pc, #80]	; (800bbac <_fflush_r+0x6c>)
 800bb5c:	429c      	cmp	r4, r3
 800bb5e:	d11b      	bne.n	800bb98 <_fflush_r+0x58>
 800bb60:	686c      	ldr	r4, [r5, #4]
 800bb62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d0ef      	beq.n	800bb4a <_fflush_r+0xa>
 800bb6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb6c:	07d0      	lsls	r0, r2, #31
 800bb6e:	d404      	bmi.n	800bb7a <_fflush_r+0x3a>
 800bb70:	0599      	lsls	r1, r3, #22
 800bb72:	d402      	bmi.n	800bb7a <_fflush_r+0x3a>
 800bb74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb76:	f000 f915 	bl	800bda4 <__retarget_lock_acquire_recursive>
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	4621      	mov	r1, r4
 800bb7e:	f7ff ff59 	bl	800ba34 <__sflush_r>
 800bb82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb84:	07da      	lsls	r2, r3, #31
 800bb86:	4605      	mov	r5, r0
 800bb88:	d4e0      	bmi.n	800bb4c <_fflush_r+0xc>
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	059b      	lsls	r3, r3, #22
 800bb8e:	d4dd      	bmi.n	800bb4c <_fflush_r+0xc>
 800bb90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb92:	f000 f908 	bl	800bda6 <__retarget_lock_release_recursive>
 800bb96:	e7d9      	b.n	800bb4c <_fflush_r+0xc>
 800bb98:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <_fflush_r+0x70>)
 800bb9a:	429c      	cmp	r4, r3
 800bb9c:	d101      	bne.n	800bba2 <_fflush_r+0x62>
 800bb9e:	68ac      	ldr	r4, [r5, #8]
 800bba0:	e7df      	b.n	800bb62 <_fflush_r+0x22>
 800bba2:	4b04      	ldr	r3, [pc, #16]	; (800bbb4 <_fflush_r+0x74>)
 800bba4:	429c      	cmp	r4, r3
 800bba6:	bf08      	it	eq
 800bba8:	68ec      	ldreq	r4, [r5, #12]
 800bbaa:	e7da      	b.n	800bb62 <_fflush_r+0x22>
 800bbac:	0800c680 	.word	0x0800c680
 800bbb0:	0800c6a0 	.word	0x0800c6a0
 800bbb4:	0800c660 	.word	0x0800c660

0800bbb8 <std>:
 800bbb8:	2300      	movs	r3, #0
 800bbba:	b510      	push	{r4, lr}
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	e9c0 3300 	strd	r3, r3, [r0]
 800bbc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbc6:	6083      	str	r3, [r0, #8]
 800bbc8:	8181      	strh	r1, [r0, #12]
 800bbca:	6643      	str	r3, [r0, #100]	; 0x64
 800bbcc:	81c2      	strh	r2, [r0, #14]
 800bbce:	6183      	str	r3, [r0, #24]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	2208      	movs	r2, #8
 800bbd4:	305c      	adds	r0, #92	; 0x5c
 800bbd6:	f7fd fbfd 	bl	80093d4 <memset>
 800bbda:	4b05      	ldr	r3, [pc, #20]	; (800bbf0 <std+0x38>)
 800bbdc:	6263      	str	r3, [r4, #36]	; 0x24
 800bbde:	4b05      	ldr	r3, [pc, #20]	; (800bbf4 <std+0x3c>)
 800bbe0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbe2:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <std+0x40>)
 800bbe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbe6:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <std+0x44>)
 800bbe8:	6224      	str	r4, [r4, #32]
 800bbea:	6323      	str	r3, [r4, #48]	; 0x30
 800bbec:	bd10      	pop	{r4, pc}
 800bbee:	bf00      	nop
 800bbf0:	0800bf61 	.word	0x0800bf61
 800bbf4:	0800bf83 	.word	0x0800bf83
 800bbf8:	0800bfbb 	.word	0x0800bfbb
 800bbfc:	0800bfdf 	.word	0x0800bfdf

0800bc00 <_cleanup_r>:
 800bc00:	4901      	ldr	r1, [pc, #4]	; (800bc08 <_cleanup_r+0x8>)
 800bc02:	f000 b8af 	b.w	800bd64 <_fwalk_reent>
 800bc06:	bf00      	nop
 800bc08:	0800bb41 	.word	0x0800bb41

0800bc0c <__sfmoreglue>:
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	1e4a      	subs	r2, r1, #1
 800bc10:	2568      	movs	r5, #104	; 0x68
 800bc12:	4355      	muls	r5, r2
 800bc14:	460e      	mov	r6, r1
 800bc16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc1a:	f7fd fc33 	bl	8009484 <_malloc_r>
 800bc1e:	4604      	mov	r4, r0
 800bc20:	b140      	cbz	r0, 800bc34 <__sfmoreglue+0x28>
 800bc22:	2100      	movs	r1, #0
 800bc24:	e9c0 1600 	strd	r1, r6, [r0]
 800bc28:	300c      	adds	r0, #12
 800bc2a:	60a0      	str	r0, [r4, #8]
 800bc2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc30:	f7fd fbd0 	bl	80093d4 <memset>
 800bc34:	4620      	mov	r0, r4
 800bc36:	bd70      	pop	{r4, r5, r6, pc}

0800bc38 <__sfp_lock_acquire>:
 800bc38:	4801      	ldr	r0, [pc, #4]	; (800bc40 <__sfp_lock_acquire+0x8>)
 800bc3a:	f000 b8b3 	b.w	800bda4 <__retarget_lock_acquire_recursive>
 800bc3e:	bf00      	nop
 800bc40:	200008a8 	.word	0x200008a8

0800bc44 <__sfp_lock_release>:
 800bc44:	4801      	ldr	r0, [pc, #4]	; (800bc4c <__sfp_lock_release+0x8>)
 800bc46:	f000 b8ae 	b.w	800bda6 <__retarget_lock_release_recursive>
 800bc4a:	bf00      	nop
 800bc4c:	200008a8 	.word	0x200008a8

0800bc50 <__sinit_lock_acquire>:
 800bc50:	4801      	ldr	r0, [pc, #4]	; (800bc58 <__sinit_lock_acquire+0x8>)
 800bc52:	f000 b8a7 	b.w	800bda4 <__retarget_lock_acquire_recursive>
 800bc56:	bf00      	nop
 800bc58:	200008a3 	.word	0x200008a3

0800bc5c <__sinit_lock_release>:
 800bc5c:	4801      	ldr	r0, [pc, #4]	; (800bc64 <__sinit_lock_release+0x8>)
 800bc5e:	f000 b8a2 	b.w	800bda6 <__retarget_lock_release_recursive>
 800bc62:	bf00      	nop
 800bc64:	200008a3 	.word	0x200008a3

0800bc68 <__sinit>:
 800bc68:	b510      	push	{r4, lr}
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	f7ff fff0 	bl	800bc50 <__sinit_lock_acquire>
 800bc70:	69a3      	ldr	r3, [r4, #24]
 800bc72:	b11b      	cbz	r3, 800bc7c <__sinit+0x14>
 800bc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc78:	f7ff bff0 	b.w	800bc5c <__sinit_lock_release>
 800bc7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc80:	6523      	str	r3, [r4, #80]	; 0x50
 800bc82:	4b13      	ldr	r3, [pc, #76]	; (800bcd0 <__sinit+0x68>)
 800bc84:	4a13      	ldr	r2, [pc, #76]	; (800bcd4 <__sinit+0x6c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc8a:	42a3      	cmp	r3, r4
 800bc8c:	bf04      	itt	eq
 800bc8e:	2301      	moveq	r3, #1
 800bc90:	61a3      	streq	r3, [r4, #24]
 800bc92:	4620      	mov	r0, r4
 800bc94:	f000 f820 	bl	800bcd8 <__sfp>
 800bc98:	6060      	str	r0, [r4, #4]
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f000 f81c 	bl	800bcd8 <__sfp>
 800bca0:	60a0      	str	r0, [r4, #8]
 800bca2:	4620      	mov	r0, r4
 800bca4:	f000 f818 	bl	800bcd8 <__sfp>
 800bca8:	2200      	movs	r2, #0
 800bcaa:	60e0      	str	r0, [r4, #12]
 800bcac:	2104      	movs	r1, #4
 800bcae:	6860      	ldr	r0, [r4, #4]
 800bcb0:	f7ff ff82 	bl	800bbb8 <std>
 800bcb4:	68a0      	ldr	r0, [r4, #8]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	2109      	movs	r1, #9
 800bcba:	f7ff ff7d 	bl	800bbb8 <std>
 800bcbe:	68e0      	ldr	r0, [r4, #12]
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	2112      	movs	r1, #18
 800bcc4:	f7ff ff78 	bl	800bbb8 <std>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	61a3      	str	r3, [r4, #24]
 800bccc:	e7d2      	b.n	800bc74 <__sinit+0xc>
 800bcce:	bf00      	nop
 800bcd0:	0800c380 	.word	0x0800c380
 800bcd4:	0800bc01 	.word	0x0800bc01

0800bcd8 <__sfp>:
 800bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcda:	4607      	mov	r7, r0
 800bcdc:	f7ff ffac 	bl	800bc38 <__sfp_lock_acquire>
 800bce0:	4b1e      	ldr	r3, [pc, #120]	; (800bd5c <__sfp+0x84>)
 800bce2:	681e      	ldr	r6, [r3, #0]
 800bce4:	69b3      	ldr	r3, [r6, #24]
 800bce6:	b913      	cbnz	r3, 800bcee <__sfp+0x16>
 800bce8:	4630      	mov	r0, r6
 800bcea:	f7ff ffbd 	bl	800bc68 <__sinit>
 800bcee:	3648      	adds	r6, #72	; 0x48
 800bcf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	d503      	bpl.n	800bd00 <__sfp+0x28>
 800bcf8:	6833      	ldr	r3, [r6, #0]
 800bcfa:	b30b      	cbz	r3, 800bd40 <__sfp+0x68>
 800bcfc:	6836      	ldr	r6, [r6, #0]
 800bcfe:	e7f7      	b.n	800bcf0 <__sfp+0x18>
 800bd00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd04:	b9d5      	cbnz	r5, 800bd3c <__sfp+0x64>
 800bd06:	4b16      	ldr	r3, [pc, #88]	; (800bd60 <__sfp+0x88>)
 800bd08:	60e3      	str	r3, [r4, #12]
 800bd0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd0e:	6665      	str	r5, [r4, #100]	; 0x64
 800bd10:	f000 f847 	bl	800bda2 <__retarget_lock_init_recursive>
 800bd14:	f7ff ff96 	bl	800bc44 <__sfp_lock_release>
 800bd18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd20:	6025      	str	r5, [r4, #0]
 800bd22:	61a5      	str	r5, [r4, #24]
 800bd24:	2208      	movs	r2, #8
 800bd26:	4629      	mov	r1, r5
 800bd28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd2c:	f7fd fb52 	bl	80093d4 <memset>
 800bd30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd38:	4620      	mov	r0, r4
 800bd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd3c:	3468      	adds	r4, #104	; 0x68
 800bd3e:	e7d9      	b.n	800bcf4 <__sfp+0x1c>
 800bd40:	2104      	movs	r1, #4
 800bd42:	4638      	mov	r0, r7
 800bd44:	f7ff ff62 	bl	800bc0c <__sfmoreglue>
 800bd48:	4604      	mov	r4, r0
 800bd4a:	6030      	str	r0, [r6, #0]
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d1d5      	bne.n	800bcfc <__sfp+0x24>
 800bd50:	f7ff ff78 	bl	800bc44 <__sfp_lock_release>
 800bd54:	230c      	movs	r3, #12
 800bd56:	603b      	str	r3, [r7, #0]
 800bd58:	e7ee      	b.n	800bd38 <__sfp+0x60>
 800bd5a:	bf00      	nop
 800bd5c:	0800c380 	.word	0x0800c380
 800bd60:	ffff0001 	.word	0xffff0001

0800bd64 <_fwalk_reent>:
 800bd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd68:	4606      	mov	r6, r0
 800bd6a:	4688      	mov	r8, r1
 800bd6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd70:	2700      	movs	r7, #0
 800bd72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd76:	f1b9 0901 	subs.w	r9, r9, #1
 800bd7a:	d505      	bpl.n	800bd88 <_fwalk_reent+0x24>
 800bd7c:	6824      	ldr	r4, [r4, #0]
 800bd7e:	2c00      	cmp	r4, #0
 800bd80:	d1f7      	bne.n	800bd72 <_fwalk_reent+0xe>
 800bd82:	4638      	mov	r0, r7
 800bd84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd88:	89ab      	ldrh	r3, [r5, #12]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d907      	bls.n	800bd9e <_fwalk_reent+0x3a>
 800bd8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd92:	3301      	adds	r3, #1
 800bd94:	d003      	beq.n	800bd9e <_fwalk_reent+0x3a>
 800bd96:	4629      	mov	r1, r5
 800bd98:	4630      	mov	r0, r6
 800bd9a:	47c0      	blx	r8
 800bd9c:	4307      	orrs	r7, r0
 800bd9e:	3568      	adds	r5, #104	; 0x68
 800bda0:	e7e9      	b.n	800bd76 <_fwalk_reent+0x12>

0800bda2 <__retarget_lock_init_recursive>:
 800bda2:	4770      	bx	lr

0800bda4 <__retarget_lock_acquire_recursive>:
 800bda4:	4770      	bx	lr

0800bda6 <__retarget_lock_release_recursive>:
 800bda6:	4770      	bx	lr

0800bda8 <__swhatbuf_r>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	460e      	mov	r6, r1
 800bdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb0:	2900      	cmp	r1, #0
 800bdb2:	b096      	sub	sp, #88	; 0x58
 800bdb4:	4614      	mov	r4, r2
 800bdb6:	461d      	mov	r5, r3
 800bdb8:	da07      	bge.n	800bdca <__swhatbuf_r+0x22>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	602b      	str	r3, [r5, #0]
 800bdbe:	89b3      	ldrh	r3, [r6, #12]
 800bdc0:	061a      	lsls	r2, r3, #24
 800bdc2:	d410      	bmi.n	800bde6 <__swhatbuf_r+0x3e>
 800bdc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc8:	e00e      	b.n	800bde8 <__swhatbuf_r+0x40>
 800bdca:	466a      	mov	r2, sp
 800bdcc:	f000 f93a 	bl	800c044 <_fstat_r>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	dbf2      	blt.n	800bdba <__swhatbuf_r+0x12>
 800bdd4:	9a01      	ldr	r2, [sp, #4]
 800bdd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bdda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bdde:	425a      	negs	r2, r3
 800bde0:	415a      	adcs	r2, r3
 800bde2:	602a      	str	r2, [r5, #0]
 800bde4:	e7ee      	b.n	800bdc4 <__swhatbuf_r+0x1c>
 800bde6:	2340      	movs	r3, #64	; 0x40
 800bde8:	2000      	movs	r0, #0
 800bdea:	6023      	str	r3, [r4, #0]
 800bdec:	b016      	add	sp, #88	; 0x58
 800bdee:	bd70      	pop	{r4, r5, r6, pc}

0800bdf0 <__smakebuf_r>:
 800bdf0:	898b      	ldrh	r3, [r1, #12]
 800bdf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdf4:	079d      	lsls	r5, r3, #30
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	460c      	mov	r4, r1
 800bdfa:	d507      	bpl.n	800be0c <__smakebuf_r+0x1c>
 800bdfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	6123      	str	r3, [r4, #16]
 800be04:	2301      	movs	r3, #1
 800be06:	6163      	str	r3, [r4, #20]
 800be08:	b002      	add	sp, #8
 800be0a:	bd70      	pop	{r4, r5, r6, pc}
 800be0c:	ab01      	add	r3, sp, #4
 800be0e:	466a      	mov	r2, sp
 800be10:	f7ff ffca 	bl	800bda8 <__swhatbuf_r>
 800be14:	9900      	ldr	r1, [sp, #0]
 800be16:	4605      	mov	r5, r0
 800be18:	4630      	mov	r0, r6
 800be1a:	f7fd fb33 	bl	8009484 <_malloc_r>
 800be1e:	b948      	cbnz	r0, 800be34 <__smakebuf_r+0x44>
 800be20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be24:	059a      	lsls	r2, r3, #22
 800be26:	d4ef      	bmi.n	800be08 <__smakebuf_r+0x18>
 800be28:	f023 0303 	bic.w	r3, r3, #3
 800be2c:	f043 0302 	orr.w	r3, r3, #2
 800be30:	81a3      	strh	r3, [r4, #12]
 800be32:	e7e3      	b.n	800bdfc <__smakebuf_r+0xc>
 800be34:	4b0d      	ldr	r3, [pc, #52]	; (800be6c <__smakebuf_r+0x7c>)
 800be36:	62b3      	str	r3, [r6, #40]	; 0x28
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	6020      	str	r0, [r4, #0]
 800be3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be40:	81a3      	strh	r3, [r4, #12]
 800be42:	9b00      	ldr	r3, [sp, #0]
 800be44:	6163      	str	r3, [r4, #20]
 800be46:	9b01      	ldr	r3, [sp, #4]
 800be48:	6120      	str	r0, [r4, #16]
 800be4a:	b15b      	cbz	r3, 800be64 <__smakebuf_r+0x74>
 800be4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be50:	4630      	mov	r0, r6
 800be52:	f000 f909 	bl	800c068 <_isatty_r>
 800be56:	b128      	cbz	r0, 800be64 <__smakebuf_r+0x74>
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	f023 0303 	bic.w	r3, r3, #3
 800be5e:	f043 0301 	orr.w	r3, r3, #1
 800be62:	81a3      	strh	r3, [r4, #12]
 800be64:	89a0      	ldrh	r0, [r4, #12]
 800be66:	4305      	orrs	r5, r0
 800be68:	81a5      	strh	r5, [r4, #12]
 800be6a:	e7cd      	b.n	800be08 <__smakebuf_r+0x18>
 800be6c:	0800bc01 	.word	0x0800bc01

0800be70 <__ascii_mbtowc>:
 800be70:	b082      	sub	sp, #8
 800be72:	b901      	cbnz	r1, 800be76 <__ascii_mbtowc+0x6>
 800be74:	a901      	add	r1, sp, #4
 800be76:	b142      	cbz	r2, 800be8a <__ascii_mbtowc+0x1a>
 800be78:	b14b      	cbz	r3, 800be8e <__ascii_mbtowc+0x1e>
 800be7a:	7813      	ldrb	r3, [r2, #0]
 800be7c:	600b      	str	r3, [r1, #0]
 800be7e:	7812      	ldrb	r2, [r2, #0]
 800be80:	1e10      	subs	r0, r2, #0
 800be82:	bf18      	it	ne
 800be84:	2001      	movne	r0, #1
 800be86:	b002      	add	sp, #8
 800be88:	4770      	bx	lr
 800be8a:	4610      	mov	r0, r2
 800be8c:	e7fb      	b.n	800be86 <__ascii_mbtowc+0x16>
 800be8e:	f06f 0001 	mvn.w	r0, #1
 800be92:	e7f8      	b.n	800be86 <__ascii_mbtowc+0x16>

0800be94 <memmove>:
 800be94:	4288      	cmp	r0, r1
 800be96:	b510      	push	{r4, lr}
 800be98:	eb01 0402 	add.w	r4, r1, r2
 800be9c:	d902      	bls.n	800bea4 <memmove+0x10>
 800be9e:	4284      	cmp	r4, r0
 800bea0:	4623      	mov	r3, r4
 800bea2:	d807      	bhi.n	800beb4 <memmove+0x20>
 800bea4:	1e43      	subs	r3, r0, #1
 800bea6:	42a1      	cmp	r1, r4
 800bea8:	d008      	beq.n	800bebc <memmove+0x28>
 800beaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beb2:	e7f8      	b.n	800bea6 <memmove+0x12>
 800beb4:	4402      	add	r2, r0
 800beb6:	4601      	mov	r1, r0
 800beb8:	428a      	cmp	r2, r1
 800beba:	d100      	bne.n	800bebe <memmove+0x2a>
 800bebc:	bd10      	pop	{r4, pc}
 800bebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bec6:	e7f7      	b.n	800beb8 <memmove+0x24>

0800bec8 <_malloc_usable_size_r>:
 800bec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800becc:	1f18      	subs	r0, r3, #4
 800bece:	2b00      	cmp	r3, #0
 800bed0:	bfbc      	itt	lt
 800bed2:	580b      	ldrlt	r3, [r1, r0]
 800bed4:	18c0      	addlt	r0, r0, r3
 800bed6:	4770      	bx	lr

0800bed8 <_raise_r>:
 800bed8:	291f      	cmp	r1, #31
 800beda:	b538      	push	{r3, r4, r5, lr}
 800bedc:	4604      	mov	r4, r0
 800bede:	460d      	mov	r5, r1
 800bee0:	d904      	bls.n	800beec <_raise_r+0x14>
 800bee2:	2316      	movs	r3, #22
 800bee4:	6003      	str	r3, [r0, #0]
 800bee6:	f04f 30ff 	mov.w	r0, #4294967295
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800beee:	b112      	cbz	r2, 800bef6 <_raise_r+0x1e>
 800bef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bef4:	b94b      	cbnz	r3, 800bf0a <_raise_r+0x32>
 800bef6:	4620      	mov	r0, r4
 800bef8:	f000 f830 	bl	800bf5c <_getpid_r>
 800befc:	462a      	mov	r2, r5
 800befe:	4601      	mov	r1, r0
 800bf00:	4620      	mov	r0, r4
 800bf02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf06:	f000 b817 	b.w	800bf38 <_kill_r>
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d00a      	beq.n	800bf24 <_raise_r+0x4c>
 800bf0e:	1c59      	adds	r1, r3, #1
 800bf10:	d103      	bne.n	800bf1a <_raise_r+0x42>
 800bf12:	2316      	movs	r3, #22
 800bf14:	6003      	str	r3, [r0, #0]
 800bf16:	2001      	movs	r0, #1
 800bf18:	e7e7      	b.n	800beea <_raise_r+0x12>
 800bf1a:	2400      	movs	r4, #0
 800bf1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf20:	4628      	mov	r0, r5
 800bf22:	4798      	blx	r3
 800bf24:	2000      	movs	r0, #0
 800bf26:	e7e0      	b.n	800beea <_raise_r+0x12>

0800bf28 <raise>:
 800bf28:	4b02      	ldr	r3, [pc, #8]	; (800bf34 <raise+0xc>)
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	f7ff bfd3 	b.w	800bed8 <_raise_r>
 800bf32:	bf00      	nop
 800bf34:	200001ec 	.word	0x200001ec

0800bf38 <_kill_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d07      	ldr	r5, [pc, #28]	; (800bf58 <_kill_r+0x20>)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4608      	mov	r0, r1
 800bf42:	4611      	mov	r1, r2
 800bf44:	602b      	str	r3, [r5, #0]
 800bf46:	f7f6 fc11 	bl	800276c <_kill>
 800bf4a:	1c43      	adds	r3, r0, #1
 800bf4c:	d102      	bne.n	800bf54 <_kill_r+0x1c>
 800bf4e:	682b      	ldr	r3, [r5, #0]
 800bf50:	b103      	cbz	r3, 800bf54 <_kill_r+0x1c>
 800bf52:	6023      	str	r3, [r4, #0]
 800bf54:	bd38      	pop	{r3, r4, r5, pc}
 800bf56:	bf00      	nop
 800bf58:	2000089c 	.word	0x2000089c

0800bf5c <_getpid_r>:
 800bf5c:	f7f6 bbfe 	b.w	800275c <_getpid>

0800bf60 <__sread>:
 800bf60:	b510      	push	{r4, lr}
 800bf62:	460c      	mov	r4, r1
 800bf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf68:	f000 f8a0 	bl	800c0ac <_read_r>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	bfab      	itete	ge
 800bf70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf72:	89a3      	ldrhlt	r3, [r4, #12]
 800bf74:	181b      	addge	r3, r3, r0
 800bf76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf7a:	bfac      	ite	ge
 800bf7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf7e:	81a3      	strhlt	r3, [r4, #12]
 800bf80:	bd10      	pop	{r4, pc}

0800bf82 <__swrite>:
 800bf82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf86:	461f      	mov	r7, r3
 800bf88:	898b      	ldrh	r3, [r1, #12]
 800bf8a:	05db      	lsls	r3, r3, #23
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	460c      	mov	r4, r1
 800bf90:	4616      	mov	r6, r2
 800bf92:	d505      	bpl.n	800bfa0 <__swrite+0x1e>
 800bf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf98:	2302      	movs	r3, #2
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f000 f874 	bl	800c088 <_lseek_r>
 800bfa0:	89a3      	ldrh	r3, [r4, #12]
 800bfa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfaa:	81a3      	strh	r3, [r4, #12]
 800bfac:	4632      	mov	r2, r6
 800bfae:	463b      	mov	r3, r7
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb6:	f000 b823 	b.w	800c000 <_write_r>

0800bfba <__sseek>:
 800bfba:	b510      	push	{r4, lr}
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc2:	f000 f861 	bl	800c088 <_lseek_r>
 800bfc6:	1c43      	adds	r3, r0, #1
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	bf15      	itete	ne
 800bfcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfd6:	81a3      	strheq	r3, [r4, #12]
 800bfd8:	bf18      	it	ne
 800bfda:	81a3      	strhne	r3, [r4, #12]
 800bfdc:	bd10      	pop	{r4, pc}

0800bfde <__sclose>:
 800bfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe2:	f000 b81f 	b.w	800c024 <_close_r>

0800bfe6 <__ascii_wctomb>:
 800bfe6:	b149      	cbz	r1, 800bffc <__ascii_wctomb+0x16>
 800bfe8:	2aff      	cmp	r2, #255	; 0xff
 800bfea:	bf85      	ittet	hi
 800bfec:	238a      	movhi	r3, #138	; 0x8a
 800bfee:	6003      	strhi	r3, [r0, #0]
 800bff0:	700a      	strbls	r2, [r1, #0]
 800bff2:	f04f 30ff 	movhi.w	r0, #4294967295
 800bff6:	bf98      	it	ls
 800bff8:	2001      	movls	r0, #1
 800bffa:	4770      	bx	lr
 800bffc:	4608      	mov	r0, r1
 800bffe:	4770      	bx	lr

0800c000 <_write_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4d07      	ldr	r5, [pc, #28]	; (800c020 <_write_r+0x20>)
 800c004:	4604      	mov	r4, r0
 800c006:	4608      	mov	r0, r1
 800c008:	4611      	mov	r1, r2
 800c00a:	2200      	movs	r2, #0
 800c00c:	602a      	str	r2, [r5, #0]
 800c00e:	461a      	mov	r2, r3
 800c010:	f7f6 fbe3 	bl	80027da <_write>
 800c014:	1c43      	adds	r3, r0, #1
 800c016:	d102      	bne.n	800c01e <_write_r+0x1e>
 800c018:	682b      	ldr	r3, [r5, #0]
 800c01a:	b103      	cbz	r3, 800c01e <_write_r+0x1e>
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
 800c020:	2000089c 	.word	0x2000089c

0800c024 <_close_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	4d06      	ldr	r5, [pc, #24]	; (800c040 <_close_r+0x1c>)
 800c028:	2300      	movs	r3, #0
 800c02a:	4604      	mov	r4, r0
 800c02c:	4608      	mov	r0, r1
 800c02e:	602b      	str	r3, [r5, #0]
 800c030:	f7f6 fbef 	bl	8002812 <_close>
 800c034:	1c43      	adds	r3, r0, #1
 800c036:	d102      	bne.n	800c03e <_close_r+0x1a>
 800c038:	682b      	ldr	r3, [r5, #0]
 800c03a:	b103      	cbz	r3, 800c03e <_close_r+0x1a>
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	2000089c 	.word	0x2000089c

0800c044 <_fstat_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4d07      	ldr	r5, [pc, #28]	; (800c064 <_fstat_r+0x20>)
 800c048:	2300      	movs	r3, #0
 800c04a:	4604      	mov	r4, r0
 800c04c:	4608      	mov	r0, r1
 800c04e:	4611      	mov	r1, r2
 800c050:	602b      	str	r3, [r5, #0]
 800c052:	f7f6 fbea 	bl	800282a <_fstat>
 800c056:	1c43      	adds	r3, r0, #1
 800c058:	d102      	bne.n	800c060 <_fstat_r+0x1c>
 800c05a:	682b      	ldr	r3, [r5, #0]
 800c05c:	b103      	cbz	r3, 800c060 <_fstat_r+0x1c>
 800c05e:	6023      	str	r3, [r4, #0]
 800c060:	bd38      	pop	{r3, r4, r5, pc}
 800c062:	bf00      	nop
 800c064:	2000089c 	.word	0x2000089c

0800c068 <_isatty_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4d06      	ldr	r5, [pc, #24]	; (800c084 <_isatty_r+0x1c>)
 800c06c:	2300      	movs	r3, #0
 800c06e:	4604      	mov	r4, r0
 800c070:	4608      	mov	r0, r1
 800c072:	602b      	str	r3, [r5, #0]
 800c074:	f7f6 fbe9 	bl	800284a <_isatty>
 800c078:	1c43      	adds	r3, r0, #1
 800c07a:	d102      	bne.n	800c082 <_isatty_r+0x1a>
 800c07c:	682b      	ldr	r3, [r5, #0]
 800c07e:	b103      	cbz	r3, 800c082 <_isatty_r+0x1a>
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	2000089c 	.word	0x2000089c

0800c088 <_lseek_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d07      	ldr	r5, [pc, #28]	; (800c0a8 <_lseek_r+0x20>)
 800c08c:	4604      	mov	r4, r0
 800c08e:	4608      	mov	r0, r1
 800c090:	4611      	mov	r1, r2
 800c092:	2200      	movs	r2, #0
 800c094:	602a      	str	r2, [r5, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	f7f6 fbe2 	bl	8002860 <_lseek>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_lseek_r+0x1e>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_lseek_r+0x1e>
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	2000089c 	.word	0x2000089c

0800c0ac <_read_r>:
 800c0ac:	b538      	push	{r3, r4, r5, lr}
 800c0ae:	4d07      	ldr	r5, [pc, #28]	; (800c0cc <_read_r+0x20>)
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	4608      	mov	r0, r1
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	602a      	str	r2, [r5, #0]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f7f6 fb70 	bl	80027a0 <_read>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d102      	bne.n	800c0ca <_read_r+0x1e>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	b103      	cbz	r3, 800c0ca <_read_r+0x1e>
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	2000089c 	.word	0x2000089c

0800c0d0 <_init>:
 800c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d2:	bf00      	nop
 800c0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0d6:	bc08      	pop	{r3}
 800c0d8:	469e      	mov	lr, r3
 800c0da:	4770      	bx	lr

0800c0dc <_fini>:
 800c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0de:	bf00      	nop
 800c0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0e2:	bc08      	pop	{r3}
 800c0e4:	469e      	mov	lr, r3
 800c0e6:	4770      	bx	lr
