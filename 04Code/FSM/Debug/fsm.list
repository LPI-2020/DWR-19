
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000903c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08009240  08009240  00019240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800975c  0800975c  00020324  2**0
                  CONTENTS
  4 .ARM          00000008  0800975c  0800975c  0001975c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009764  08009764  00020324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009768  08009768  00019768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000324  20000000  0800976c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000324  08009a90  00020324  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  08009a90  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d649  00000000  00000000  00020352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cba  00000000  00000000  0003d99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00041658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  00042a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002be1e  00000000  00000000  00043c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019dfb  00000000  00000000  0006faa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105c9d  00000000  00000000  000898a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f53e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff0  00000000  00000000  0018f594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000324 	.word	0x20000324
 800021c:	00000000 	.word	0x00000000
 8000220:	08009224 	.word	0x08009224

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000328 	.word	0x20000328
 800023c:	08009224 	.word	0x08009224

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_ADC2_Init+0x9c>)
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <MX_ADC2_Init+0xa0>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_ADC2_Init+0x9c>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_ADC2_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC2_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_ADC2_Init+0x9c>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ADC2_Init+0x9c>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_ADC2_Init+0x9c>)
 8000644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_ADC2_Init+0x9c>)
 800064c:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC2_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_ADC2_Init+0x9c>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_ADC2_Init+0x9c>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_ADC2_Init+0x9c>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_ADC2_Init+0x9c>)
 800066e:	f001 fa8b 	bl	8001b88 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000678:	f000 fb2e 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800067c:	2303      	movs	r3, #3
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_ADC2_Init+0x9c>)
 800068e:	f001 fc15 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000698:	f000 fb1e 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000354 	.word	0x20000354
 80006a8:	40012100 	.word	0x40012100

080006ac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006be:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <MX_ADC3_Init+0x124>)
 80006c0:	4a44      	ldr	r2, [pc, #272]	; (80007d4 <MX_ADC3_Init+0x128>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c4:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <MX_ADC3_Init+0x124>)
 80006c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b40      	ldr	r3, [pc, #256]	; (80007d0 <MX_ADC3_Init+0x124>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006d2:	4b3f      	ldr	r3, [pc, #252]	; (80007d0 <MX_ADC3_Init+0x124>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006d8:	4b3d      	ldr	r3, [pc, #244]	; (80007d0 <MX_ADC3_Init+0x124>)
 80006da:	2201      	movs	r2, #1
 80006dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <MX_ADC3_Init+0x124>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e6:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <MX_ADC3_Init+0x124>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ec:	4b38      	ldr	r3, [pc, #224]	; (80007d0 <MX_ADC3_Init+0x124>)
 80006ee:	4a3a      	ldr	r2, [pc, #232]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <MX_ADC3_Init+0x124>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80006f8:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <MX_ADC3_Init+0x124>)
 80006fa:	2206      	movs	r2, #6
 80006fc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <MX_ADC3_Init+0x124>)
 8000700:	2201      	movs	r2, #1
 8000702:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <MX_ADC3_Init+0x124>)
 8000708:	2201      	movs	r2, #1
 800070a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800070c:	4830      	ldr	r0, [pc, #192]	; (80007d0 <MX_ADC3_Init+0x124>)
 800070e:	f001 fa3b 	bl	8001b88 <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000718:	f000 fade 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800071c:	230a      	movs	r3, #10
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000720:	2301      	movs	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000724:	2307      	movs	r3, #7
 8000726:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	4828      	ldr	r0, [pc, #160]	; (80007d0 <MX_ADC3_Init+0x124>)
 800072e:	f001 fbc5 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000738:	f000 face 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800073c:	230d      	movs	r3, #13
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000740:	2302      	movs	r3, #2
 8000742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4821      	ldr	r0, [pc, #132]	; (80007d0 <MX_ADC3_Init+0x124>)
 800074a:	f001 fbb7 	bl	8001ebc <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000754:	f000 fac0 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000758:	2309      	movs	r3, #9
 800075a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800075c:	2303      	movs	r3, #3
 800075e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	481a      	ldr	r0, [pc, #104]	; (80007d0 <MX_ADC3_Init+0x124>)
 8000766:	f001 fba9 	bl	8001ebc <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000770:	f000 fab2 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000774:	230f      	movs	r3, #15
 8000776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000778:	2304      	movs	r3, #4
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <MX_ADC3_Init+0x124>)
 8000782:	f001 fb9b 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800078c:	f000 faa4 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000790:	2308      	movs	r3, #8
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000794:	2305      	movs	r3, #5
 8000796:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <MX_ADC3_Init+0x124>)
 800079e:	f001 fb8d 	bl	8001ebc <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80007a8:	f000 fa96 	bl	8000cd8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ac:	2306      	movs	r3, #6
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007b0:	2306      	movs	r3, #6
 80007b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_ADC3_Init+0x124>)
 80007ba:	f001 fb7f 	bl	8001ebc <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80007c4:	f000 fa88 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200003fc 	.word	0x200003fc
 80007d4:	40012200 	.word	0x40012200
 80007d8:	0f000001 	.word	0x0f000001

080007dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a63      	ldr	r2, [pc, #396]	; (8000988 <HAL_ADC_MspInit+0x1ac>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12c      	bne.n	8000858 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007fe:	4b63      	ldr	r3, [pc, #396]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a62      	ldr	r2, [pc, #392]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 8000804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000812:	623b      	str	r3, [r7, #32]
 8000814:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b5d      	ldr	r3, [pc, #372]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a5c      	ldr	r2, [pc, #368]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b5a      	ldr	r3, [pc, #360]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	61fb      	str	r3, [r7, #28]
 800082c:	69fb      	ldr	r3, [r7, #28]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000832:	2303      	movs	r3, #3
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	4853      	ldr	r0, [pc, #332]	; (8000990 <HAL_ADC_MspInit+0x1b4>)
 8000842:	f002 fa17 	bl	8002c74 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2012      	movs	r0, #18
 800084c:	f001 fe5f 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000850:	2012      	movs	r0, #18
 8000852:	f001 fe78 	bl	8002546 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000856:	e093      	b.n	8000980 <HAL_ADC_MspInit+0x1a4>
  else if(adcHandle->Instance==ADC3)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a4d      	ldr	r2, [pc, #308]	; (8000994 <HAL_ADC_MspInit+0x1b8>)
 800085e:	4293      	cmp	r3, r2
 8000860:	f040 808e 	bne.w	8000980 <HAL_ADC_MspInit+0x1a4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000864:	4b49      	ldr	r3, [pc, #292]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 8000866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000868:	4a48      	ldr	r2, [pc, #288]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 800086a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086e:	6453      	str	r3, [r2, #68]	; 0x44
 8000870:	4b46      	ldr	r3, [pc, #280]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 8000872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800087c:	4b43      	ldr	r3, [pc, #268]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a42      	ldr	r2, [pc, #264]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	4b40      	ldr	r3, [pc, #256]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f003 0320 	and.w	r3, r3, #32
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000894:	4b3d      	ldr	r3, [pc, #244]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a3c      	ldr	r2, [pc, #240]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b3a      	ldr	r3, [pc, #232]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b37      	ldr	r3, [pc, #220]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	4a36      	ldr	r2, [pc, #216]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6313      	str	r3, [r2, #48]	; 0x30
 80008b8:	4b34      	ldr	r3, [pc, #208]	; (800098c <HAL_ADC_MspInit+0x1b0>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin|SENSOR8_Pin|SENSOR6_Pin;
 80008c4:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	2303      	movs	r3, #3
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	4619      	mov	r1, r3
 80008d8:	482f      	ldr	r0, [pc, #188]	; (8000998 <HAL_ADC_MspInit+0x1bc>)
 80008da:	f002 f9cb 	bl	8002c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR3_Pin;
 80008de:	2309      	movs	r3, #9
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e2:	2303      	movs	r3, #3
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	4619      	mov	r1, r3
 80008f0:	482a      	ldr	r0, [pc, #168]	; (800099c <HAL_ADC_MspInit+0x1c0>)
 80008f2:	f002 f9bf 	bl	8002c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 80008f6:	2308      	movs	r3, #8
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fa:	2303      	movs	r3, #3
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4821      	ldr	r0, [pc, #132]	; (8000990 <HAL_ADC_MspInit+0x1b4>)
 800090a:	f002 f9b3 	bl	8002c74 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800090e:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 8000910:	4a24      	ldr	r2, [pc, #144]	; (80009a4 <HAL_ADC_MspInit+0x1c8>)
 8000912:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 8000916:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800091a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091c:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 800092a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800092e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 8000932:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000936:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 800093a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800093e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 8000942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000946:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000954:	4812      	ldr	r0, [pc, #72]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 8000956:	f001 fe11 	bl	800257c <HAL_DMA_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_ADC_MspInit+0x188>
      Error_Handler();
 8000960:	f000 f9ba 	bl	8000cd8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 8000968:	639a      	str	r2, [r3, #56]	; 0x38
 800096a:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <HAL_ADC_MspInit+0x1c4>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2012      	movs	r0, #18
 8000976:	f001 fdca 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800097a:	2012      	movs	r0, #18
 800097c:	f001 fde3 	bl	8002546 <HAL_NVIC_EnableIRQ>
}
 8000980:	bf00      	nop
 8000982:	3738      	adds	r7, #56	; 0x38
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40012100 	.word	0x40012100
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000
 8000994:	40012200 	.word	0x40012200
 8000998:	40021400 	.word	0x40021400
 800099c:	40020800 	.word	0x40020800
 80009a0:	2000039c 	.word	0x2000039c
 80009a4:	40026428 	.word	0x40026428

080009a8 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
		// enters every 500ms

		// obstacle detector ISR
//		isr_obs_detector();
	}
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_DMA_Init+0x38>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <MX_DMA_Init+0x38>)
 80009c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_DMA_Init+0x38>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2039      	movs	r0, #57	; 0x39
 80009e0:	f001 fd95 	bl	800250e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009e4:	2039      	movs	r0, #57	; 0x39
 80009e6:	f001 fdae 	bl	8002546 <HAL_NVIC_EnableIRQ>

}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <MX_GPIO_Init>:

/** Configure pins
     PC0   ------> ADCx_IN10
*/
void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a4a      	ldr	r2, [pc, #296]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0320 	and.w	r3, r3, #32
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a3e      	ldr	r2, [pc, #248]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a38      	ldr	r2, [pc, #224]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a32      	ldr	r2, [pc, #200]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MX_GPIO_Init+0x144>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2160      	movs	r1, #96	; 0x60
 8000a8a:	482d      	ldr	r0, [pc, #180]	; (8000b40 <MX_GPIO_Init+0x148>)
 8000a8c:	f002 fa9e 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f244 2181 	movw	r1, #17025	; 0x4281
 8000a96:	482b      	ldr	r0, [pc, #172]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000a98:	f002 fa98 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f244 0104 	movw	r1, #16388	; 0x4004
 8000aa2:	4829      	ldr	r0, [pc, #164]	; (8000b48 <MX_GPIO_Init+0x150>)
 8000aa4:	f002 fa92 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aac:	2303      	movs	r3, #3
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4824      	ldr	r0, [pc, #144]	; (8000b4c <MX_GPIO_Init+0x154>)
 8000abc:	f002 f8da 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8000ac0:	2360      	movs	r3, #96	; 0x60
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481a      	ldr	r0, [pc, #104]	; (8000b40 <MX_GPIO_Init+0x148>)
 8000ad8:	f002 f8cc 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin;
 8000adc:	f244 2381 	movw	r3, #17025	; 0x4281
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4813      	ldr	r0, [pc, #76]	; (8000b44 <MX_GPIO_Init+0x14c>)
 8000af6:	f002 f8bd 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|SPI3_SDA_Pin;
 8000afa:	f244 0304 	movw	r3, #16388	; 0x4004
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_GPIO_Init+0x150>)
 8000b14:	f002 f8ae 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <MX_GPIO_Init+0x154>)
 8000b2e:	f002 f8a1 	bl	8002c74 <HAL_GPIO_Init>

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40020800 	.word	0x40020800

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b56:	f000 ffba 	bl	8001ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5a:	f000 f82b 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5e:	f7ff ff4b 	bl	80009f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b62:	f7ff ff2b 	bl	80009bc <MX_DMA_Init>
  MX_SPI3_Init();
 8000b66:	f000 f8bd 	bl	8000ce4 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000b6a:	f000 fe4b 	bl	8001804 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000b6e:	f000 fbd9 	bl	8001324 <MX_TIM6_Init>
  MX_ADC3_Init();
 8000b72:	f7ff fd9b 	bl	80006ac <MX_ADC3_Init>
  MX_TIM4_Init();
 8000b76:	f000 fb71 	bl	800125c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000b7a:	f000 fe13 	bl	80017a4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b7e:	f000 faf5 	bl	800116c <MX_TIM3_Init>
  MX_TIM7_Init();
 8000b82:	f000 fc07 	bl	8001394 <MX_TIM7_Init>
  MX_ADC2_Init();
 8000b86:	f7ff fd3f 	bl	8000608 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = S_STOPPED;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <main+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <main+0x5c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]

  //lfollower_start();
  //timeout_start();
  //obs_detector_init();

  int err = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]

  Rx_UART_init(&bluet_uart);
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <main+0x60>)
 8000b9c:	f000 ff38 	bl	8001a10 <Rx_UART_init>

  while (1)
  {

	  test_modules();
 8000ba0:	f000 fad8 	bl	8001154 <test_modules>
 8000ba4:	e7fc      	b.n	8000ba0 <main+0x50>
 8000ba6:	bf00      	nop
 8000ba8:	20000340 	.word	0x20000340
 8000bac:	20000341 	.word	0x20000341
 8000bb0:	200000b4 	.word	0x200000b4

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0b8      	sub	sp, #224	; 0xe0
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bbe:	2234      	movs	r2, #52	; 0x34
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 fe58 	bl	8006878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 0308 	add.w	r3, r7, #8
 8000bdc:	2290      	movs	r2, #144	; 0x90
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f005 fe49 	bl	8006878 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <SystemClock_Config+0x11c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a39      	ldr	r2, [pc, #228]	; (8000cd0 <SystemClock_Config+0x11c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <SystemClock_Config+0x11c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <SystemClock_Config+0x120>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <SystemClock_Config+0x120>)
 8000c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <SystemClock_Config+0x120>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c22:	2310      	movs	r3, #16
 8000c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c34:	2308      	movs	r3, #8
 8000c36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c3a:	23d8      	movs	r3, #216	; 0xd8
 8000c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c50:	4618      	mov	r0, r3
 8000c52:	f002 fa3f 	bl	80030d4 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c5c:	f000 f83c 	bl	8000cd8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c60:	f002 f9e8 	bl	8003034 <HAL_PWREx_EnableOverDrive>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c6a:	f000 f835 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2302      	movs	r3, #2
 8000c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c94:	2107      	movs	r1, #7
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fcca 	bl	8003630 <HAL_RCC_ClockConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000ca2:	f000 f819 	bl	8000cd8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000ca6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000caa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cac:	2300      	movs	r3, #0
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fe8f 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000cc4:	f000 f808 	bl	8000cd8 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	37e0      	adds	r7, #224	; 0xe0
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000cea:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <MX_SPI3_Init+0x78>)
 8000cec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000cf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000cfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d02:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d16:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d1a:	2218      	movs	r2, #24
 8000d1c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d32:	2207      	movs	r2, #7
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d44:	f003 fa72 	bl	800422c <HAL_SPI_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d4e:	f7ff ffc3 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000444 	.word	0x20000444
 8000d5c:	40003c00 	.word	0x40003c00

08000d60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <HAL_SPI_MspInit+0x8c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d130      	bne.n	8000de4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <HAL_SPI_MspInit+0x90>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a1a      	ldr	r2, [pc, #104]	; (8000df0 <HAL_SPI_MspInit+0x90>)
 8000d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_SPI_MspInit+0x90>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_SPI_MspInit+0x90>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <HAL_SPI_MspInit+0x90>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_SPI_MspInit+0x90>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000db2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4809      	ldr	r0, [pc, #36]	; (8000df4 <HAL_SPI_MspInit+0x94>)
 8000dd0:	f001 ff50 	bl	8002c74 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2033      	movs	r0, #51	; 0x33
 8000dda:	f001 fb98 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000dde:	2033      	movs	r0, #51	; 0x33
 8000de0:	f001 fbb1 	bl	8002546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40003c00 	.word	0x40003c00
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020800 	.word	0x40020800

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_MspInit+0x44>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_MspInit+0x44>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_MspInit+0x44>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_MspInit+0x44>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x44>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	; 0x44
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x44>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 fe5c 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <ADC_IRQHandler+0x14>)
 8000e9a:	f000 feb9 	bl	8001c10 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <ADC_IRQHandler+0x18>)
 8000ea0:	f000 feb6 	bl	8001c10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000354 	.word	0x20000354
 8000eac:	200003fc 	.word	0x200003fc

08000eb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <TIM3_IRQHandler+0x10>)
 8000eb6:	f003 fc93 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000558 	.word	0x20000558

08000ec4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM4_IRQHandler+0x10>)
 8000eca:	f003 fc89 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000050c 	.word	0x2000050c

08000ed8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <USART1_IRQHandler+0x10>)
 8000ede:	f004 fce3 	bl	80058a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200006c0 	.word	0x200006c0

08000eec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <USART3_IRQHandler+0x10>)
 8000ef2:	f004 fcd9 	bl	80058a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000063c 	.word	0x2000063c

08000f00 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <SPI3_IRQHandler+0x10>)
 8000f06:	f003 fa3d 	bl	8004384 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000444 	.word	0x20000444

08000f14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <TIM6_DAC_IRQHandler+0x10>)
 8000f1a:	f003 fc61 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200005a4 	.word	0x200005a4

08000f28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <TIM7_IRQHandler+0x10>)
 8000f2e:	f003 fc57 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200005f0 	.word	0x200005f0

08000f3c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <DMA2_Stream1_IRQHandler+0x10>)
 8000f42:	f001 fc5b 	bl	80027fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000039c 	.word	0x2000039c

08000f50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	return 1;
 8000f54:	2301      	movs	r3, #1
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_kill>:

int _kill(int pid, int sig)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f6a:	f005 fc4b 	bl	8006804 <__errno>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2216      	movs	r2, #22
 8000f72:	601a      	str	r2, [r3, #0]
	return -1;
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_exit>:

void _exit (int status)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ffe7 	bl	8000f60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f92:	e7fe      	b.n	8000f92 <_exit+0x12>

08000f94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e00a      	b.n	8000fbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fa6:	f3af 8000 	nop.w
 8000faa:	4601      	mov	r1, r0
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	60ba      	str	r2, [r7, #8]
 8000fb2:	b2ca      	uxtb	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dbf0      	blt.n	8000fa6 <_read+0x12>
	}

return len;
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e009      	b.n	8000ff4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	60ba      	str	r2, [r7, #8]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dbf1      	blt.n	8000fe0 <_write+0x12>
	}
	return len;
 8000ffc:	687b      	ldr	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <_close>:

int _close(int file)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	return -1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102e:	605a      	str	r2, [r3, #4]
	return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_isatty>:

int _isatty(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	return 1;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <_sbrk+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <_sbrk+0x60>)
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <_sbrk+0x64>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <_sbrk+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	429a      	cmp	r2, r3
 800109e:	d207      	bcs.n	80010b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a0:	f005 fbb0 	bl	8006804 <__errno>
 80010a4:	4603      	mov	r3, r0
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <_sbrk+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20080000 	.word	0x20080000
 80010d0:	00000400 	.word	0x00000400
 80010d4:	20000344 	.word	0x20000344
 80010d8:	20000760 	.word	0x20000760

080010dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <test_bluetooth>:

	return err;
}

void test_bluetooth(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
//		//pode ser usado o valor de retorno do parser  a função error_handler
//		ucmd_parse(&my_cmd_list," ",(char*) Message);
//		Rx_string_processing = 0;
//	}

	if(bluet_uart.Rx_flag)
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <test_bluetooth+0x40>)
 8001106:	7d5b      	ldrb	r3, [r3, #21]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d005      	beq.n	800111a <test_bluetooth+0x1a>
//			// Print prompt to insert cmd after last printed messages
//			UART_puts("...\n\r>");
//			printing_msg_flag = 0;
//		}

		UART_Receive(&bluet_uart); // Returns received char
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <test_bluetooth+0x40>)
 8001110:	f000 fc40 	bl	8001994 <UART_Receive>
//		if(c != (char)(-1))
//			// Its not a special character
//			UART_putchar(c); // Received char is echoed

		bluet_uart.Rx_flag = 0;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <test_bluetooth+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	755a      	strb	r2, [r3, #21]
	}

	if(cmd_received)
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <test_bluetooth+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00a      	beq.n	800113a <test_bluetooth+0x3a>
	{
		ucmd_parse(my_cmd_list," ",(char*) bluet_uart.Rx_Buffer);
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <test_bluetooth+0x48>)
 8001126:	4909      	ldr	r1, [pc, #36]	; (800114c <test_bluetooth+0x4c>)
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <test_bluetooth+0x50>)
 800112a:	f000 fa89 	bl	8001640 <ucmd_parse>
//			// cmd has been executed. free to continue printing messages
//			printing_msg_flag = 1;
//			// avoid printing old queued message
//			print_msg_flag = 0;
//		}
		cmd_received = 0;
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <test_bluetooth+0x44>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
		Rx_UART_init(&bluet_uart); // ready to begin reception
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <test_bluetooth+0x40>)
 8001136:	f000 fc6b 	bl	8001a10 <Rx_UART_init>
	}
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000b4 	.word	0x200000b4
 8001144:	20000349 	.word	0x20000349
 8001148:	200000b8 	.word	0x200000b8
 800114c:	0800926c 	.word	0x0800926c
 8001150:	20000000 	.word	0x20000000

08001154 <test_modules>:

/******************************************************************************
Test modules functions
******************************************************************************/
int test_modules(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
	int err = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
	//err = test_stop_sensor(E_CROSS_FOUND);

	//err = test_rfid();
	//test_stop_sensor();

	test_bluetooth();
 800115e:	f7ff ffcf 	bl	8001100 <test_bluetooth>

	return err;
 8001162:	687b      	ldr	r3, [r7, #4]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	615a      	str	r2, [r3, #20]
 800119c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <MX_TIM3_Init+0xe8>)
 80011a0:	4a2d      	ldr	r2, [pc, #180]	; (8001258 <MX_TIM3_Init+0xec>)
 80011a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <MX_TIM3_Init+0xe8>)
 80011a6:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80011aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <MX_TIM3_Init+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <MX_TIM3_Init+0xe8>)
 80011b4:	2263      	movs	r2, #99	; 0x63
 80011b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <MX_TIM3_Init+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <MX_TIM3_Init+0xe8>)
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c4:	4823      	ldr	r0, [pc, #140]	; (8001254 <MX_TIM3_Init+0xe8>)
 80011c6:	f003 f9fc 	bl	80045c2 <HAL_TIM_Base_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011d0:	f7ff fd82 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011de:	4619      	mov	r1, r3
 80011e0:	481c      	ldr	r0, [pc, #112]	; (8001254 <MX_TIM3_Init+0xe8>)
 80011e2:	f003 fda3 	bl	8004d2c <HAL_TIM_ConfigClockSource>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011ec:	f7ff fd74 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80011f0:	4818      	ldr	r0, [pc, #96]	; (8001254 <MX_TIM3_Init+0xe8>)
 80011f2:	f003 fa3d 	bl	8004670 <HAL_TIM_OC_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011fc:	f7ff fd6c 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001200:	2320      	movs	r3, #32
 8001202:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	4811      	ldr	r0, [pc, #68]	; (8001254 <MX_TIM3_Init+0xe8>)
 8001210:	f004 fa12 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800121a:	f7ff fd5d 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800121e:	2330      	movs	r3, #48	; 0x30
 8001220:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	220c      	movs	r2, #12
 8001232:	4619      	mov	r1, r3
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <MX_TIM3_Init+0xe8>)
 8001236:	f003 fbf3 	bl	8004a20 <HAL_TIM_OC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001240:	f7ff fd4a 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <MX_TIM3_Init+0xe8>)
 8001246:	f000 f961 	bl	800150c <HAL_TIM_MspPostInit>

}
 800124a:	bf00      	nop
 800124c:	3738      	adds	r7, #56	; 0x38
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000558 	.word	0x20000558
 8001258:	40000400 	.word	0x40000400

0800125c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	615a      	str	r2, [r3, #20]
 800127e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <MX_TIM4_Init+0xc0>)
 8001282:	4a27      	ldr	r2, [pc, #156]	; (8001320 <MX_TIM4_Init+0xc4>)
 8001284:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <MX_TIM4_Init+0xc0>)
 8001288:	226b      	movs	r2, #107	; 0x6b
 800128a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <MX_TIM4_Init+0xc0>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <MX_TIM4_Init+0xc0>)
 8001294:	2264      	movs	r2, #100	; 0x64
 8001296:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <MX_TIM4_Init+0xc0>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_TIM4_Init+0xc0>)
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012a4:	481d      	ldr	r0, [pc, #116]	; (800131c <MX_TIM4_Init+0xc0>)
 80012a6:	f003 fa44 	bl	8004732 <HAL_TIM_PWM_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80012b0:	f7ff fd12 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4816      	ldr	r0, [pc, #88]	; (800131c <MX_TIM4_Init+0xc0>)
 80012c4:	f004 f9b8 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80012ce:	f7ff fd03 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d2:	2360      	movs	r3, #96	; 0x60
 80012d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	2208      	movs	r2, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_TIM4_Init+0xc0>)
 80012ea:	f003 fc0f 	bl	8004b0c <HAL_TIM_PWM_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80012f4:	f7ff fcf0 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	220c      	movs	r2, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM4_Init+0xc0>)
 8001300:	f003 fc04 	bl	8004b0c <HAL_TIM_PWM_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800130a:	f7ff fce5 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800130e:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM4_Init+0xc0>)
 8001310:	f000 f8fc 	bl	800150c <HAL_TIM_MspPostInit>

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000050c 	.word	0x2000050c
 8001320:	40000800 	.word	0x40000800

08001324 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_TIM6_Init+0x68>)
 8001336:	4a16      	ldr	r2, [pc, #88]	; (8001390 <MX_TIM6_Init+0x6c>)
 8001338:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 864-1;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_TIM6_Init+0x68>)
 800133c:	f240 325f 	movw	r2, #863	; 0x35f
 8001340:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_TIM6_Init+0x68>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 62500-1;
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_TIM6_Init+0x68>)
 800134a:	f24f 4223 	movw	r2, #62499	; 0xf423
 800134e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_TIM6_Init+0x68>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <MX_TIM6_Init+0x68>)
 8001358:	f003 f933 	bl	80045c2 <HAL_TIM_Base_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001362:	f7ff fcb9 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001366:	2320      	movs	r3, #32
 8001368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <MX_TIM6_Init+0x68>)
 8001374:	f004 f960 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800137e:	f7ff fcab 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200005a4 	.word	0x200005a4
 8001390:	40001000 	.word	0x40001000

08001394 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_TIM7_Init+0x68>)
 80013a6:	4a16      	ldr	r2, [pc, #88]	; (8001400 <MX_TIM7_Init+0x6c>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_TIM7_Init+0x68>)
 80013ac:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80013b0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_TIM7_Init+0x68>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000-1;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_TIM7_Init+0x68>)
 80013ba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013be:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_TIM7_Init+0x68>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_TIM7_Init+0x68>)
 80013c8:	f003 f8fb 	bl	80045c2 <HAL_TIM_Base_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80013d2:	f7ff fc81 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013d6:	2320      	movs	r3, #32
 80013d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_TIM7_Init+0x68>)
 80013e4:	f004 f928 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80013ee:	f7ff fc73 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200005f0 	.word	0x200005f0
 8001400:	40001400 	.word	0x40001400

08001404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <HAL_TIM_Base_MspInit+0xac>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d114      	bne.n	8001440 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <HAL_TIM_Base_MspInit+0xb0>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	201d      	movs	r0, #29
 8001434:	f001 f86b 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001438:	201d      	movs	r0, #29
 800143a:	f001 f884 	bl	8002546 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800143e:	e032      	b.n	80014a6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d114      	bne.n	8001474 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_TIM_Base_MspInit+0xb0>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a19      	ldr	r2, [pc, #100]	; (80014b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2036      	movs	r0, #54	; 0x36
 8001468:	f001 f851 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800146c:	2036      	movs	r0, #54	; 0x36
 800146e:	f001 f86a 	bl	8002546 <HAL_NVIC_EnableIRQ>
}
 8001472:	e018      	b.n	80014a6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_TIM_Base_MspInit+0xb8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d113      	bne.n	80014a6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <HAL_TIM_Base_MspInit+0xb0>)
 8001484:	f043 0320 	orr.w	r3, r3, #32
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_TIM_Base_MspInit+0xb0>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2037      	movs	r0, #55	; 0x37
 800149c:	f001 f837 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80014a0:	2037      	movs	r0, #55	; 0x37
 80014a2:	f001 f850 	bl	8002546 <HAL_NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40000400 	.word	0x40000400
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40001000 	.word	0x40001000
 80014bc:	40001400 	.word	0x40001400

080014c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_TIM_PWM_MspInit+0x44>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d113      	bne.n	80014fa <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_TIM_PWM_MspInit+0x48>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_TIM_PWM_MspInit+0x48>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_TIM_PWM_MspInit+0x48>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	201e      	movs	r0, #30
 80014f0:	f001 f80d 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014f4:	201e      	movs	r0, #30
 80014f6:	f001 f826 	bl	8002546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40000800 	.word	0x40000800
 8001508:	40023800 	.word	0x40023800

0800150c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <HAL_TIM_MspPostInit+0xe4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d11c      	bne.n	8001568 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <HAL_TIM_MspPostInit+0xe8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a30      	ldr	r2, [pc, #192]	; (80015f4 <HAL_TIM_MspPostInit+0xe8>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <HAL_TIM_MspPostInit+0xe8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001546:	2302      	movs	r3, #2
 8001548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001556:	2302      	movs	r3, #2
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4825      	ldr	r0, [pc, #148]	; (80015f8 <HAL_TIM_MspPostInit+0xec>)
 8001562:	f001 fb87 	bl	8002c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001566:	e03e      	b.n	80015e6 <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM4)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a23      	ldr	r2, [pc, #140]	; (80015fc <HAL_TIM_MspPostInit+0xf0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d139      	bne.n	80015e6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_TIM_MspPostInit+0xe8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a1f      	ldr	r2, [pc, #124]	; (80015f4 <HAL_TIM_MspPostInit+0xe8>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_TIM_MspPostInit+0xe8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <HAL_TIM_MspPostInit+0xe8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_TIM_MspPostInit+0xe8>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_TIM_MspPostInit+0xe8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 80015a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015b4:	2302      	movs	r3, #2
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4810      	ldr	r0, [pc, #64]	; (8001600 <HAL_TIM_MspPostInit+0xf4>)
 80015c0:	f001 fb58 	bl	8002c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 80015c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015d6:	2302      	movs	r3, #2
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_TIM_MspPostInit+0xec>)
 80015e2:	f001 fb47 	bl	8002c74 <HAL_GPIO_Init>
}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40000400 	.word	0x40000400
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020400 	.word	0x40020400
 80015fc:	40000800 	.word	0x40000800
 8001600:	40020c00 	.word	0x40020c00

08001604 <HAL_TIM_PeriodElapsedCallback>:
	// stop Rotate_Timeout
	HAL_TIM_Base_Stop_IT(&TIM_TIMEOUTS);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d009      	beq.n	8001628 <HAL_TIM_PeriodElapsedCallback+0x24>
	{// enters every 10ms
		// line follower PID
//		lfollower_pid();
//		lfollower_control();
	}
	else if(htim == &TIM_TIMEOUTS)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d105      	bne.n	8001628 <HAL_TIM_PeriodElapsedCallback+0x24>
	{// enters every 2sec
		// count 2sec cycle
		num_timeout_2sec++;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001626:	701a      	strb	r2, [r3, #0]
	}
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	20000558 	.word	0x20000558
 8001638:	200005f0 	.word	0x200005f0
 800163c:	20000348 	.word	0x20000348

08001640 <ucmd_parse>:

///////////////////////
// Parsing functions //
///////////////////////
int ucmd_parse(Command cmd_list[], const char* delim, const char* in)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
    if (!in || strlen(in) == 0) return 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <ucmd_parse+0x1a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <ucmd_parse+0x1e>
 800165a:	2300      	movs	r3, #0
 800165c:	e078      	b.n	8001750 <ucmd_parse+0x110>
    if (!cmd_list) return UCMD_CMD_NOT_FOUND;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <ucmd_parse+0x2a>
 8001664:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001668:	e072      	b.n	8001750 <ucmd_parse+0x110>

    delim = (delim) ? delim : UCMD_DEFAULT_DELIMETER; //if delim is defined -> keep it, if not define as default
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <ucmd_parse+0x34>
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	e000      	b.n	8001676 <ucmd_parse+0x36>
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <ucmd_parse+0x118>)
 8001676:	60bb      	str	r3, [r7, #8]

    int retval = 0;     //return value
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c

    char* s = (char*)malloc(strlen(in) + 1);    //alocates and copies input string
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7fe fde9 	bl	8000254 <strlen>
 8001682:	4603      	mov	r3, r0
 8001684:	3301      	adds	r3, #1
 8001686:	4618      	mov	r0, r3
 8001688:	f005 f8e6 	bl	8006858 <malloc>
 800168c:	4603      	mov	r3, r0
 800168e:	617b      	str	r3, [r7, #20]

		strcpy(s, in);
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f005 fdfe 	bl	8007294 <strcpy>
    
    int argc = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
    char** argv = NULL;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24

    char* arg = strtok(s, delim);
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f005 fdfe 	bl	80072a4 <strtok>
 80016a8:	6238      	str	r0, [r7, #32]

    while (arg) {
 80016aa:	e017      	b.n	80016dc <ucmd_parse+0x9c>
        argc++;
 80016ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ae:	3301      	adds	r3, #1
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
        argv = (char**)realloc(argv, argc * sizeof(*argv));
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4619      	mov	r1, r3
 80016b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016ba:	f005 fdd3 	bl	8007264 <realloc>
 80016be:	6278      	str	r0, [r7, #36]	; 0x24
        argv[argc - 1] = arg;
 80016c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016c2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016cc:	4413      	add	r3, r2
 80016ce:	6a3a      	ldr	r2, [r7, #32]
 80016d0:	601a      	str	r2, [r3, #0]
        arg = strtok(NULL, delim);
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	2000      	movs	r0, #0
 80016d6:	f005 fde5 	bl	80072a4 <strtok>
 80016da:	6238      	str	r0, [r7, #32]
    while (arg) {
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1e4      	bne.n	80016ac <ucmd_parse+0x6c>
    }
		

    if (argc) {
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d02c      	beq.n	8001742 <ucmd_parse+0x102>
        Command* c = NULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
        for (Command* p = cmd_list; p->cmd; p++) {
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	e014      	b.n	800171c <ucmd_parse+0xdc>
            if (strcmp(p->cmd, argv[0]) == 0) {
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7fe fd9f 	bl	8000240 <strcmp>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <ucmd_parse+0xce>
                c = p;
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	61fb      	str	r3, [r7, #28]
								break;			//leaves if it has found cmd (avoids unncessary operations)
 800170c:	e00c      	b.n	8001728 <ucmd_parse+0xe8>
            }
						if(p->fn == NULL)	//failsafe condition to avoid anautorized memory access and cause a crash
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <ucmd_parse+0xe6>
        for (Command* p = cmd_list; p->cmd; p++) {
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	330c      	adds	r3, #12
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1e6      	bne.n	80016f2 <ucmd_parse+0xb2>
 8001724:	e000      	b.n	8001728 <ucmd_parse+0xe8>
							break;
 8001726:	bf00      	nop
        }
        if (c) {
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <ucmd_parse+0xfc>
            retval = c->fn(argc, argv);			
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001736:	4798      	blx	r3
 8001738:	62f8      	str	r0, [r7, #44]	; 0x2c
 800173a:	e002      	b.n	8001742 <ucmd_parse+0x102>
        }
        else {
            retval = UCMD_CMD_NOT_FOUND;
 800173c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }
    free(argv);
 8001742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001744:	f005 f890 	bl	8006868 <free>
    free(s);
 8001748:	6978      	ldr	r0, [r7, #20]
 800174a:	f005 f88d 	bl	8006868 <free>

    return retval;
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001750:	4618      	mov	r0, r3
 8001752:	3730      	adds	r7, #48	; 0x30
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	08009270 	.word	0x08009270

0800175c <led_on_cb>:
}

#ifdef _DEBUG_

int led_on_cb(int argc, char* argv[])
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
	if(argc != 2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d001      	beq.n	8001770 <led_on_cb+0x14>
		return UCMD_NOT_ENOUGH_PARAMETERS;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <led_on_cb+0x3c>)
 800176e:	e00f      	b.n	8001790 <led_on_cb+0x34>

	int result = strcmp(argv[1],"on");
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	3304      	adds	r3, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4909      	ldr	r1, [pc, #36]	; (800179c <led_on_cb+0x40>)
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fd61 	bl	8000240 <strcmp>
 800177e:	60f8      	str	r0, [r7, #12]

	if (result == 0)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <led_on_cb+0x32>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <led_on_cb+0x44>)
 800178a:	f001 fc38 	bl	8002ffe <HAL_GPIO_TogglePin>

	return 0;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	80000001 	.word	0x80000001
 800179c:	080092f0 	.word	0x080092f0
 80017a0:	40020400 	.word	0x40020400

080017a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017aa:	4a15      	ldr	r2, [pc, #84]	; (8001800 <MX_USART1_UART_Init+0x5c>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_USART1_UART_Init+0x58>)
 80017e8:	f003 ffd2 	bl	8005790 <HAL_UART_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017f2:	f7ff fa71 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200006c0 	.word	0x200006c0
 8001800:	40011000 	.word	0x40011000

08001804 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_USART3_UART_Init+0x58>)
 800180a:	4a15      	ldr	r2, [pc, #84]	; (8001860 <MX_USART3_UART_Init+0x5c>)
 800180c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_USART3_UART_Init+0x58>)
 8001810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_USART3_UART_Init+0x58>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <MX_USART3_UART_Init+0x58>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_USART3_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_USART3_UART_Init+0x58>)
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_USART3_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_USART3_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_USART3_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_USART3_UART_Init+0x58>)
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_USART3_UART_Init+0x58>)
 8001848:	f003 ffa2 	bl	8005790 <HAL_UART_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001852:	f7ff fa41 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000063c 	.word	0x2000063c
 8001860:	40004800 	.word	0x40004800

08001864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a3f      	ldr	r2, [pc, #252]	; (8001980 <HAL_UART_MspInit+0x11c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d141      	bne.n	800190a <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <HAL_UART_MspInit+0x120>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a3e      	ldr	r2, [pc, #248]	; (8001984 <HAL_UART_MspInit+0x120>)
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <HAL_UART_MspInit+0x120>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	4b39      	ldr	r3, [pc, #228]	; (8001984 <HAL_UART_MspInit+0x120>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a38      	ldr	r2, [pc, #224]	; (8001984 <HAL_UART_MspInit+0x120>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b36      	ldr	r3, [pc, #216]	; (8001984 <HAL_UART_MspInit+0x120>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUET_RX_Pin;
 80018b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80018c8:	2304      	movs	r3, #4
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	482d      	ldr	r0, [pc, #180]	; (8001988 <HAL_UART_MspInit+0x124>)
 80018d4:	f001 f9ce 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 80018d8:	2340      	movs	r3, #64	; 0x40
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018e8:	2307      	movs	r3, #7
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4825      	ldr	r0, [pc, #148]	; (8001988 <HAL_UART_MspInit+0x124>)
 80018f4:	f001 f9be 	bl	8002c74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	2025      	movs	r0, #37	; 0x25
 80018fe:	f000 fe06 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001902:	2025      	movs	r0, #37	; 0x25
 8001904:	f000 fe1f 	bl	8002546 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001908:	e035      	b.n	8001976 <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1f      	ldr	r2, [pc, #124]	; (800198c <HAL_UART_MspInit+0x128>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d130      	bne.n	8001976 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_UART_MspInit+0x120>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <HAL_UART_MspInit+0x120>)
 800191a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191e:	6413      	str	r3, [r2, #64]	; 0x40
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_UART_MspInit+0x120>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_UART_MspInit+0x120>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <HAL_UART_MspInit+0x120>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6313      	str	r3, [r2, #48]	; 0x30
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_UART_MspInit+0x120>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001944:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001956:	2307      	movs	r3, #7
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	480b      	ldr	r0, [pc, #44]	; (8001990 <HAL_UART_MspInit+0x12c>)
 8001962:	f001 f987 	bl	8002c74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2027      	movs	r0, #39	; 0x27
 800196c:	f000 fdcf 	bl	800250e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001970:	2027      	movs	r0, #39	; 0x27
 8001972:	f000 fde8 	bl	8002546 <HAL_NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3730      	adds	r7, #48	; 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40011000 	.word	0x40011000
 8001984:	40023800 	.word	0x40023800
 8001988:	40020400 	.word	0x40020400
 800198c:	40004800 	.word	0x40004800
 8001990:	40020c00 	.word	0x40020c00

08001994 <UART_Receive>:

/******************************************************************************
@brief	 	 Receives a char by UART serial port
******************************************************************************/
char UART_Receive(uart_t *huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	if(huart->Rx_index == (RX_BUFF_LEN - 1)) // Is the buffer full?
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7d1b      	ldrb	r3, [r3, #20]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	d102      	bne.n	80019ac <UART_Receive+0x18>
		// Treat as 'CR'
		c = NEW_LINE;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <UART_Receive+0x3c>)
 80019a8:	220d      	movs	r2, #13
 80019aa:	701a      	strb	r2, [r3, #0]
	
	if(c != NEW_LINE) // Is this the end of reception?
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <UART_Receive+0x3c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b0d      	cmp	r3, #13
 80019b4:	d002      	beq.n	80019bc <UART_Receive+0x28>
		Rx_UART_init(huart); // prepare for next character
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f82a 	bl	8001a10 <Rx_UART_init>
	
	//if(process_as_control() == 0) // Is the received char a control char?
	//	return (char)(-1);
	
	// Its not a special character
	process_as_data(huart);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f809 	bl	80019d4 <process_as_data>
	return c;
 80019c2:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <UART_Receive+0x3c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000744 	.word	0x20000744

080019d4 <process_as_data>:

@brief	 	 process the char received as a data character
******************************************************************************/

static void process_as_data(uart_t *huart)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	// add received char to Rx_Buffer
	huart->Rx_Buffer[huart->Rx_index] = c;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7d1b      	ldrb	r3, [r3, #20]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <process_as_data+0x38>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	440b      	add	r3, r1
 80019ee:	711a      	strb	r2, [r3, #4]
	huart->Rx_index++;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7d1b      	ldrb	r3, [r3, #20]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	751a      	strb	r2, [r3, #20]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000744 	.word	0x20000744

08001a10 <Rx_UART_init>:

// set the interrupt for UART
void Rx_UART_init(uart_t *huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart->uart, (uint8_t*)&c, 1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4904      	ldr	r1, [pc, #16]	; (8001a30 <Rx_UART_init+0x20>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 ff03 	bl	800582c <HAL_UART_Receive_IT>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000744 	.word	0x20000744

08001a34 <HAL_UART_RxCpltCallback>:

//implementation of UART ISR
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	// debug uart
	if (huart->Instance == debug_uart.uart->Instance)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_UART_RxCpltCallback+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d103      	bne.n	8001a52 <HAL_UART_RxCpltCallback+0x1e>
		debug_uart.Rx_flag = 1;
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_UART_RxCpltCallback+0x40>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	755a      	strb	r2, [r3, #21]

	// bluetooth uart
	else if (huart->Instance == bluet_uart.uart->Instance)
		bluet_uart.Rx_flag = 1;
}
 8001a50:	e009      	b.n	8001a66 <HAL_UART_RxCpltCallback+0x32>
	else if (huart->Instance == bluet_uart.uart->Instance)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_UART_RxCpltCallback+0x44>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d102      	bne.n	8001a66 <HAL_UART_RxCpltCallback+0x32>
		bluet_uart.Rx_flag = 1;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_UART_RxCpltCallback+0x44>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	755a      	strb	r2, [r3, #21]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000001c 	.word	0x2000001c
 8001a78:	200000b4 	.word	0x200000b4

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a82:	490e      	ldr	r1, [pc, #56]	; (8001abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a98:	4c0b      	ldr	r4, [pc, #44]	; (8001ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aa6:	f7ff fb19 	bl	80010dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f004 feb1 	bl	8006810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f7ff f84f 	bl	8000b50 <main>
  bx  lr    
 8001ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 8001ac0:	0800976c 	.word	0x0800976c
  ldr r2, =_sbss
 8001ac4:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 8001ac8:	2000075c 	.word	0x2000075c

08001acc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <CAN1_RX0_IRQHandler>

08001ace <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	f000 fd10 	bl	80024f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f000 f805 	bl	8001ae8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001ade:	f7ff f98b 	bl	8000df8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x54>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x58>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fd2b 	bl	8002562 <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f000 fcf3 	bl	800250e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_InitTick+0x5c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000018 	.word	0x20000018
 8001b40:	20000150 	.word	0x20000150
 8001b44:	2000014c 	.word	0x2000014c

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000150 	.word	0x20000150
 8001b6c:	20000748 	.word	0x20000748

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000748 	.word	0x20000748

08001b88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e031      	b.n	8001c02 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe fe18 	bl	80007dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_ADC_Init+0x84>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	f043 0202 	orr.w	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 faba 	bl	8002150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bf2:	e001      	b.n	8001bf8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	ffffeefd 	.word	0xffffeefd

08001c10 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d049      	beq.n	8001ce6 <HAL_ADC_IRQHandler+0xd6>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d046      	beq.n	8001ce6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12b      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d127      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d119      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0220 	bic.w	r2, r2, #32
 8001cb0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d105      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fe66 	bl	80009a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0212 	mvn.w	r2, #18
 8001ce4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	bf0c      	ite	eq
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	2300      	movne	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d057      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x1b8>
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d054      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d105      	bne.n	8001d36 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d139      	bne.n	8001db8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d12b      	bne.n	8001db8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d124      	bne.n	8001db8 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d11d      	bne.n	8001db8 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d119      	bne.n	8001db8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fac3 	bl	8002344 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 020c 	mvn.w	r2, #12
 8001dc6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d017      	beq.n	8001e2a <HAL_ADC_IRQHandler+0x21a>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d014      	beq.n	8001e2a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10d      	bne.n	8001e2a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f839 	bl	8001e92 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0201 	mvn.w	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d015      	beq.n	8001e8a <HAL_ADC_IRQHandler+0x27a>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d012      	beq.n	8001e8a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f043 0202 	orr.w	r2, r3, #2
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0220 	mvn.w	r2, #32
 8001e78:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f813 	bl	8001ea6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0220 	mvn.w	r2, #32
 8001e88:	601a      	str	r2, [r3, #0]
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1c>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e12a      	b.n	800212e <HAL_ADC_ConfigChannel+0x272>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b09      	cmp	r3, #9
 8001ee6:	d93a      	bls.n	8001f5e <HAL_ADC_ConfigChannel+0xa2>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ef0:	d035      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68d9      	ldr	r1, [r3, #12]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	2207      	movs	r2, #7
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	400a      	ands	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a87      	ldr	r2, [pc, #540]	; (800213c <HAL_ADC_ConfigChannel+0x280>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10a      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68d9      	ldr	r1, [r3, #12]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	061a      	lsls	r2, r3, #24
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f36:	e035      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68d9      	ldr	r1, [r3, #12]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4403      	add	r3, r0
 8001f50:	3b1e      	subs	r3, #30
 8001f52:	409a      	lsls	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f5c:	e022      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6919      	ldr	r1, [r3, #16]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	2207      	movs	r2, #7
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	400a      	ands	r2, r1
 8001f80:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6919      	ldr	r1, [r3, #16]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4403      	add	r3, r0
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b06      	cmp	r3, #6
 8001faa:	d824      	bhi.n	8001ff6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b05      	subs	r3, #5
 8001fbe:	221f      	movs	r2, #31
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	400a      	ands	r2, r1
 8001fcc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b05      	subs	r3, #5
 8001fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff4:	e04c      	b.n	8002090 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d824      	bhi.n	8002048 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	3b23      	subs	r3, #35	; 0x23
 8002010:	221f      	movs	r2, #31
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	400a      	ands	r2, r1
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3b23      	subs	r3, #35	; 0x23
 800203a:	fa00 f203 	lsl.w	r2, r0, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
 8002046:	e023      	b.n	8002090 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b41      	subs	r3, #65	; 0x41
 800205a:	221f      	movs	r2, #31
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43da      	mvns	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	400a      	ands	r2, r1
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b41      	subs	r3, #65	; 0x41
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <HAL_ADC_ConfigChannel+0x284>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10a      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1f4>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020a2:	d105      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_ADC_ConfigChannel+0x288>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a26      	ldr	r2, [pc, #152]	; (8002144 <HAL_ADC_ConfigChannel+0x288>)
 80020aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80020ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a22      	ldr	r2, [pc, #136]	; (8002140 <HAL_ADC_ConfigChannel+0x284>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d109      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x212>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b12      	cmp	r3, #18
 80020c0:	d105      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_ADC_ConfigChannel+0x288>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <HAL_ADC_ConfigChannel+0x288>)
 80020c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_ADC_ConfigChannel+0x284>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d125      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x268>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_ADC_ConfigChannel+0x280>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d003      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x22e>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b11      	cmp	r3, #17
 80020e8:	d11c      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_ADC_ConfigChannel+0x288>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_ADC_ConfigChannel+0x288>)
 80020f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <HAL_ADC_ConfigChannel+0x280>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d111      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_ADC_ConfigChannel+0x28c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_ADC_ConfigChannel+0x290>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9a      	lsrs	r2, r3, #18
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002116:	e002      	b.n	800211e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3b01      	subs	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f9      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	10000012 	.word	0x10000012
 8002140:	40012000 	.word	0x40012000
 8002144:	40012300 	.word	0x40012300
 8002148:	20000018 	.word	0x20000018
 800214c:	431bde83 	.word	0x431bde83

08002150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002158:	4b78      	ldr	r3, [pc, #480]	; (800233c <ADC_Init+0x1ec>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a77      	ldr	r2, [pc, #476]	; (800233c <ADC_Init+0x1ec>)
 800215e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002162:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002164:	4b75      	ldr	r3, [pc, #468]	; (800233c <ADC_Init+0x1ec>)
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4973      	ldr	r1, [pc, #460]	; (800233c <ADC_Init+0x1ec>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	021a      	lsls	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	4a58      	ldr	r2, [pc, #352]	; (8002340 <ADC_Init+0x1f0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d022      	beq.n	800222a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6899      	ldr	r1, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	e00f      	b.n	800224a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002248:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0202 	bic.w	r2, r2, #2
 8002258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	005a      	lsls	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01b      	beq.n	80022b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002286:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002296:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6859      	ldr	r1, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	3b01      	subs	r3, #1
 80022a4:	035a      	lsls	r2, r3, #13
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	e007      	b.n	80022c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	3b01      	subs	r3, #1
 80022dc:	051a      	lsls	r2, r3, #20
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6899      	ldr	r1, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002302:	025a      	lsls	r2, r3, #9
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	029a      	lsls	r2, r3, #10
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	609a      	str	r2, [r3, #8]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40012300 	.word	0x40012300
 8002340:	0f000001 	.word	0x0f000001

08002344 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <__NVIC_SetPriorityGrouping+0x40>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	4313      	orrs	r3, r2
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	; (8002398 <__NVIC_SetPriorityGrouping+0x40>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00
 800239c:	05fa0000 	.word	0x05fa0000

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db0b      	blt.n	80023e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	f003 021f 	and.w	r2, r3, #31
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <__NVIC_EnableIRQ+0x38>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	2001      	movs	r0, #1
 80023de:	fa00 f202 	lsl.w	r2, r0, r2
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	; (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c4:	d301      	bcc.n	80024ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00f      	b.n	80024ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <SysTick_Config+0x40>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d2:	210f      	movs	r1, #15
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f7ff ff8e 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <SysTick_Config+0x40>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e2:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <SysTick_Config+0x40>)
 80024e4:	2207      	movs	r2, #7
 80024e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	e000e010 	.word	0xe000e010

080024f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff29 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002520:	f7ff ff3e 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 8002524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f7ff ff8e 	bl	800244c <NVIC_EncodePriority>
 8002530:	4602      	mov	r2, r0
 8002532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff5d 	bl	80023f8 <__NVIC_SetPriority>
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff31 	bl	80023bc <__NVIC_EnableIRQ>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ffa2 	bl	80024b4 <SysTick_Config>
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff faf2 	bl	8001b70 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e099      	b.n	80026cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b8:	e00f      	b.n	80025da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ba:	f7ff fad9 	bl	8001b70 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d908      	bls.n	80025da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2203      	movs	r2, #3
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e078      	b.n	80026cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e8      	bne.n	80025ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <HAL_DMA_Init+0x158>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2b04      	cmp	r3, #4
 8002632:	d107      	bne.n	8002644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	4313      	orrs	r3, r2
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f023 0307 	bic.w	r3, r3, #7
 800265a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2b04      	cmp	r3, #4
 800266c:	d117      	bne.n	800269e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fa7b 	bl	8002b7c <DMA_CheckFifoParam>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2240      	movs	r2, #64	; 0x40
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800269a:	2301      	movs	r3, #1
 800269c:	e016      	b.n	80026cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa32 	bl	8002b10 <DMA_CalcBaseAndBitshift>
 80026ac:	4603      	mov	r3, r0
 80026ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	223f      	movs	r2, #63	; 0x3f
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	e010803f 	.word	0xe010803f

080026d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026e6:	f7ff fa43 	bl	8001b70 <HAL_GetTick>
 80026ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d008      	beq.n	800270a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e052      	b.n	80027b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0216 	bic.w	r2, r2, #22
 8002718:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002728:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_DMA_Abort+0x62>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0208 	bic.w	r2, r2, #8
 8002748:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275a:	e013      	b.n	8002784 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800275c:	f7ff fa08 	bl	8001b70 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b05      	cmp	r3, #5
 8002768:	d90c      	bls.n	8002784 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2203      	movs	r2, #3
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e015      	b.n	80027b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1e4      	bne.n	800275c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	223f      	movs	r2, #63	; 0x3f
 8002798:	409a      	lsls	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d004      	beq.n	80027d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00c      	b.n	80027f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2205      	movs	r2, #5
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002808:	4b92      	ldr	r3, [pc, #584]	; (8002a54 <HAL_DMA_IRQHandler+0x258>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a92      	ldr	r2, [pc, #584]	; (8002a58 <HAL_DMA_IRQHandler+0x25c>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0a9b      	lsrs	r3, r3, #10
 8002814:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	2208      	movs	r2, #8
 8002828:	409a      	lsls	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01a      	beq.n	8002868 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0204 	bic.w	r2, r2, #4
 800284e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	2208      	movs	r2, #8
 8002856:	409a      	lsls	r2, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	2201      	movs	r2, #1
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d012      	beq.n	800289e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	2201      	movs	r2, #1
 800288c:	409a      	lsls	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	f043 0202 	orr.w	r2, r3, #2
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	2204      	movs	r2, #4
 80028a4:	409a      	lsls	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00b      	beq.n	80028d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	2204      	movs	r2, #4
 80028c2:	409a      	lsls	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028cc:	f043 0204 	orr.w	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	2210      	movs	r2, #16
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d043      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d03c      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	2210      	movs	r2, #16
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d018      	beq.n	800293e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d024      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e01f      	b.n	800296c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01b      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
 800293c:	e016      	b.n	800296c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d107      	bne.n	800295c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0208 	bic.w	r2, r2, #8
 800295a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	2220      	movs	r2, #32
 8002972:	409a      	lsls	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 808e 	beq.w	8002a9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8086 	beq.w	8002a9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	2220      	movs	r2, #32
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d136      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0216 	bic.w	r2, r2, #22
 80029b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x1da>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0208 	bic.w	r2, r2, #8
 80029e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	223f      	movs	r2, #63	; 0x3f
 80029ec:	409a      	lsls	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d07d      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
        }
        return;
 8002a12:	e078      	b.n	8002b06 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01c      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d108      	bne.n	8002a42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d030      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	4798      	blx	r3
 8002a40:	e02b      	b.n	8002a9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d027      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
 8002a52:	e022      	b.n	8002a9a <HAL_DMA_IRQHandler+0x29e>
 8002a54:	20000018 	.word	0x20000018
 8002a58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0210 	bic.w	r2, r2, #16
 8002a78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d032      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d022      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2205      	movs	r2, #5
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d307      	bcc.n	8002ae2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f2      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0x2ca>
 8002ae0:	e000      	b.n	8002ae4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002ae2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
 8002b04:	e000      	b.n	8002b08 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b06:	bf00      	nop
    }
  }
}
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop

08002b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	3b10      	subs	r3, #16
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <DMA_CalcBaseAndBitshift+0x60>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <DMA_CalcBaseAndBitshift+0x64>)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d908      	bls.n	8002b50 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <DMA_CalcBaseAndBitshift+0x68>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	1d1a      	adds	r2, r3, #4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	659a      	str	r2, [r3, #88]	; 0x58
 8002b4e:	e006      	b.n	8002b5e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <DMA_CalcBaseAndBitshift+0x68>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	aaaaaaab 	.word	0xaaaaaaab
 8002b74:	0800930c 	.word	0x0800930c
 8002b78:	fffffc00 	.word	0xfffffc00

08002b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11f      	bne.n	8002bd6 <DMA_CheckFifoParam+0x5a>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d856      	bhi.n	8002c4a <DMA_CheckFifoParam+0xce>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <DMA_CheckFifoParam+0x28>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bc7 	.word	0x08002bc7
 8002bac:	08002bb5 	.word	0x08002bb5
 8002bb0:	08002c4b 	.word	0x08002c4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d046      	beq.n	8002c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e043      	b.n	8002c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bce:	d140      	bne.n	8002c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd4:	e03d      	b.n	8002c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bde:	d121      	bne.n	8002c24 <DMA_CheckFifoParam+0xa8>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d837      	bhi.n	8002c56 <DMA_CheckFifoParam+0xda>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <DMA_CheckFifoParam+0x70>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c03 	.word	0x08002c03
 8002bf4:	08002bfd 	.word	0x08002bfd
 8002bf8:	08002c15 	.word	0x08002c15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e030      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d025      	beq.n	8002c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c12:	e022      	b.n	8002c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c1c:	d11f      	bne.n	8002c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c22:	e01c      	b.n	8002c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d903      	bls.n	8002c32 <DMA_CheckFifoParam+0xb6>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d003      	beq.n	8002c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c30:	e018      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      break;
 8002c36:	e015      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
      break;
 8002c48:	e00b      	b.n	8002c62 <DMA_CheckFifoParam+0xe6>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e00a      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e008      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c52:	bf00      	nop
 8002c54:	e006      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
 8002c58:	e004      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
    }
  } 
  
  return status; 
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	e175      	b.n	8002f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c94:	2201      	movs	r2, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	f040 8164 	bne.w	8002f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_GPIO_Init+0x5e>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cc6:	2b11      	cmp	r3, #17
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d130      	bne.n	8002d34 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 0201 	and.w	r2, r3, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x100>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b12      	cmp	r3, #18
 8002d72:	d123      	bne.n	8002dbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	08da      	lsrs	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3208      	adds	r2, #8
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80be 	beq.w	8002f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfe:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <HAL_GPIO_Init+0x324>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4a65      	ldr	r2, [pc, #404]	; (8002f98 <HAL_GPIO_Init+0x324>)
 8002e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e08:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0a:	4b63      	ldr	r3, [pc, #396]	; (8002f98 <HAL_GPIO_Init+0x324>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e16:	4a61      	ldr	r2, [pc, #388]	; (8002f9c <HAL_GPIO_Init+0x328>)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <HAL_GPIO_Init+0x32c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d037      	beq.n	8002eb2 <HAL_GPIO_Init+0x23e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <HAL_GPIO_Init+0x330>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <HAL_GPIO_Init+0x23a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a56      	ldr	r2, [pc, #344]	; (8002fa8 <HAL_GPIO_Init+0x334>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d02b      	beq.n	8002eaa <HAL_GPIO_Init+0x236>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a55      	ldr	r2, [pc, #340]	; (8002fac <HAL_GPIO_Init+0x338>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d025      	beq.n	8002ea6 <HAL_GPIO_Init+0x232>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a54      	ldr	r2, [pc, #336]	; (8002fb0 <HAL_GPIO_Init+0x33c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01f      	beq.n	8002ea2 <HAL_GPIO_Init+0x22e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a53      	ldr	r2, [pc, #332]	; (8002fb4 <HAL_GPIO_Init+0x340>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d019      	beq.n	8002e9e <HAL_GPIO_Init+0x22a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a52      	ldr	r2, [pc, #328]	; (8002fb8 <HAL_GPIO_Init+0x344>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_GPIO_Init+0x226>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a51      	ldr	r2, [pc, #324]	; (8002fbc <HAL_GPIO_Init+0x348>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00d      	beq.n	8002e96 <HAL_GPIO_Init+0x222>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a50      	ldr	r2, [pc, #320]	; (8002fc0 <HAL_GPIO_Init+0x34c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d007      	beq.n	8002e92 <HAL_GPIO_Init+0x21e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4f      	ldr	r2, [pc, #316]	; (8002fc4 <HAL_GPIO_Init+0x350>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_GPIO_Init+0x21a>
 8002e8a:	2309      	movs	r3, #9
 8002e8c:	e012      	b.n	8002eb4 <HAL_GPIO_Init+0x240>
 8002e8e:	230a      	movs	r3, #10
 8002e90:	e010      	b.n	8002eb4 <HAL_GPIO_Init+0x240>
 8002e92:	2308      	movs	r3, #8
 8002e94:	e00e      	b.n	8002eb4 <HAL_GPIO_Init+0x240>
 8002e96:	2307      	movs	r3, #7
 8002e98:	e00c      	b.n	8002eb4 <HAL_GPIO_Init+0x240>
 8002e9a:	2306      	movs	r3, #6
 8002e9c:	e00a      	b.n	8002eb4 <HAL_GPIO_Init+0x240>
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	e008      	b.n	8002eb4 <HAL_GPIO_Init+0x240>
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	e006      	b.n	8002eb4 <HAL_GPIO_Init+0x240>
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e004      	b.n	8002eb4 <HAL_GPIO_Init+0x240>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e002      	b.n	8002eb4 <HAL_GPIO_Init+0x240>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_GPIO_Init+0x240>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f002 0203 	and.w	r2, r2, #3
 8002eba:	0092      	lsls	r2, r2, #2
 8002ebc:	4093      	lsls	r3, r2
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ec4:	4935      	ldr	r1, [pc, #212]	; (8002f9c <HAL_GPIO_Init+0x328>)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	089b      	lsrs	r3, r3, #2
 8002eca:	3302      	adds	r3, #2
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <HAL_GPIO_Init+0x354>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef6:	4a34      	ldr	r2, [pc, #208]	; (8002fc8 <HAL_GPIO_Init+0x354>)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002efc:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <HAL_GPIO_Init+0x354>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f20:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_GPIO_Init+0x354>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_GPIO_Init+0x354>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_GPIO_Init+0x354>)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_GPIO_Init+0x354>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <HAL_GPIO_Init+0x354>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b0f      	cmp	r3, #15
 8002f84:	f67f ae86 	bls.w	8002c94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3724      	adds	r7, #36	; 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40020400 	.word	0x40020400
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	40020c00 	.word	0x40020c00
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40021400 	.word	0x40021400
 8002fb8:	40021800 	.word	0x40021800
 8002fbc:	40021c00 	.word	0x40021c00
 8002fc0:	40022000 	.word	0x40022000
 8002fc4:	40022400 	.word	0x40022400
 8002fc8:	40013c00 	.word	0x40013c00

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	460b      	mov	r3, r1
 8003008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003010:	887a      	ldrh	r2, [r7, #2]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4013      	ands	r3, r2
 8003016:	041a      	lsls	r2, r3, #16
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43d9      	mvns	r1, r3
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	400b      	ands	r3, r1
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	4b23      	ldr	r3, [pc, #140]	; (80030cc <HAL_PWREx_EnableOverDrive+0x98>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4a22      	ldr	r2, [pc, #136]	; (80030cc <HAL_PWREx_EnableOverDrive+0x98>)
 8003044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003048:	6413      	str	r3, [r2, #64]	; 0x40
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_PWREx_EnableOverDrive+0x98>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003056:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003062:	f7fe fd85 	bl	8001b70 <HAL_GetTick>
 8003066:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003068:	e009      	b.n	800307e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800306a:	f7fe fd81 	bl	8001b70 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003078:	d901      	bls.n	800307e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e022      	b.n	80030c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308a:	d1ee      	bne.n	800306a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800308c:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003096:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003098:	f7fe fd6a 	bl	8001b70 <HAL_GetTick>
 800309c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800309e:	e009      	b.n	80030b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030a0:	f7fe fd66 	bl	8001b70 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ae:	d901      	bls.n	80030b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e007      	b.n	80030c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030c0:	d1ee      	bne.n	80030a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40007000 	.word	0x40007000

080030d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030dc:	2300      	movs	r3, #0
 80030de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e29b      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8087 	beq.w	8003206 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f8:	4b96      	ldr	r3, [pc, #600]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b04      	cmp	r3, #4
 8003102:	d00c      	beq.n	800311e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003104:	4b93      	ldr	r3, [pc, #588]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d112      	bne.n	8003136 <HAL_RCC_OscConfig+0x62>
 8003110:	4b90      	ldr	r3, [pc, #576]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311c:	d10b      	bne.n	8003136 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311e:	4b8d      	ldr	r3, [pc, #564]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RCC_OscConfig+0x130>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d168      	bne.n	8003204 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e275      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x7a>
 8003140:	4b84      	ldr	r3, [pc, #528]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a83      	ldr	r2, [pc, #524]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e02e      	b.n	80031ac <HAL_RCC_OscConfig+0xd8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x9c>
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7e      	ldr	r2, [pc, #504]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b7c      	ldr	r3, [pc, #496]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a7b      	ldr	r2, [pc, #492]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xd8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0xc0>
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b73      	ldr	r3, [pc, #460]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a72      	ldr	r2, [pc, #456]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xd8>
 8003194:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6e      	ldr	r2, [pc, #440]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b6c      	ldr	r3, [pc, #432]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6b      	ldr	r2, [pc, #428]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fe fcdc 	bl	8001b70 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fe fcd8 	bl	8001b70 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e229      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b61      	ldr	r3, [pc, #388]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xe8>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fcc8 	bl	8001b70 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fcc4 	bl	8001b70 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e215      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b57      	ldr	r3, [pc, #348]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x110>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d069      	beq.n	80032e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003212:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321e:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11c      	bne.n	8003264 <HAL_RCC_OscConfig+0x190>
 800322a:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x17a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1e9      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	493d      	ldr	r1, [pc, #244]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	e040      	b.n	80032e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d023      	beq.n	80032b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a38      	ldr	r2, [pc, #224]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe fc7a 	bl	8001b70 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003280:	f7fe fc76 	bl	8001b70 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e1c7      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4929      	ldr	r1, [pc, #164]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
 80032b2:	e018      	b.n	80032e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b4:	4b27      	ldr	r3, [pc, #156]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a26      	ldr	r2, [pc, #152]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fc56 	bl	8001b70 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c8:	f7fe fc52 	bl	8001b70 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1a3      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d038      	beq.n	8003364 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d019      	beq.n	800332e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fa:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 80032fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fe:	4a15      	ldr	r2, [pc, #84]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7fe fc33 	bl	8001b70 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330e:	f7fe fc2f 	bl	8001b70 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e180      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x23a>
 800332c:	e01a      	b.n	8003364 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <HAL_RCC_OscConfig+0x280>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fe fc19 	bl	8001b70 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003342:	f7fe fc15 	bl	8001b70 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d903      	bls.n	8003358 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e166      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
 8003354:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003358:	4b92      	ldr	r3, [pc, #584]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80a4 	beq.w	80034ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003372:	4b8c      	ldr	r3, [pc, #560]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	4b89      	ldr	r3, [pc, #548]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a88      	ldr	r2, [pc, #544]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b86      	ldr	r3, [pc, #536]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339a:	4b83      	ldr	r3, [pc, #524]	; (80035a8 <HAL_RCC_OscConfig+0x4d4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d118      	bne.n	80033d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033a6:	4b80      	ldr	r3, [pc, #512]	; (80035a8 <HAL_RCC_OscConfig+0x4d4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7f      	ldr	r2, [pc, #508]	; (80035a8 <HAL_RCC_OscConfig+0x4d4>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b2:	f7fe fbdd 	bl	8001b70 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7fe fbd9 	bl	8001b70 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b64      	cmp	r3, #100	; 0x64
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e12a      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033cc:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_RCC_OscConfig+0x4d4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x31a>
 80033e0:	4b70      	ldr	r3, [pc, #448]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a6f      	ldr	r2, [pc, #444]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
 80033ec:	e02d      	b.n	800344a <HAL_RCC_OscConfig+0x376>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x33c>
 80033f6:	4b6b      	ldr	r3, [pc, #428]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	4a6a      	ldr	r2, [pc, #424]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	6713      	str	r3, [r2, #112]	; 0x70
 8003402:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a67      	ldr	r2, [pc, #412]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
 800340e:	e01c      	b.n	800344a <HAL_RCC_OscConfig+0x376>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b05      	cmp	r3, #5
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_OscConfig+0x35e>
 8003418:	4b62      	ldr	r3, [pc, #392]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a61      	ldr	r2, [pc, #388]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
 8003424:	4b5f      	ldr	r3, [pc, #380]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a5e      	ldr	r2, [pc, #376]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	e00b      	b.n	800344a <HAL_RCC_OscConfig+0x376>
 8003432:	4b5c      	ldr	r3, [pc, #368]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a5b      	ldr	r2, [pc, #364]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a58      	ldr	r2, [pc, #352]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003452:	f7fe fb8d 	bl	8001b70 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fe fb89 	bl	8001b70 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0d8      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	4b4c      	ldr	r3, [pc, #304]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ee      	beq.n	800345a <HAL_RCC_OscConfig+0x386>
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7fe fb77 	bl	8001b70 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe fb73 	bl	8001b70 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0c2      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349c:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ee      	bne.n	8003486 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b3d      	ldr	r3, [pc, #244]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a3c      	ldr	r2, [pc, #240]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80ae 	beq.w	8003620 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c4:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d06d      	beq.n	80035ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d14b      	bne.n	8003570 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a31      	ldr	r2, [pc, #196]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 80034de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fb44 	bl	8001b70 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fe fb40 	bl	8001b70 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e091      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	3b01      	subs	r3, #1
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	061b      	lsls	r3, r3, #24
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	071b      	lsls	r3, r3, #28
 8003536:	491b      	ldr	r1, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fe fb12 	bl	8001b70 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003550:	f7fe fb0e 	bl	8001b70 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e05f      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x47c>
 800356e:	e057      	b.n	8003620 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800357a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe faf8 	bl	8001b70 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe faf4 	bl	8001b70 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e045      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCC_OscConfig+0x4d0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x4b0>
 80035a2:	e03d      	b.n	8003620 <HAL_RCC_OscConfig+0x54c>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035ac:	4b1f      	ldr	r3, [pc, #124]	; (800362c <HAL_RCC_OscConfig+0x558>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d030      	beq.n	800361c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d129      	bne.n	800361c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d122      	bne.n	800361c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035dc:	4013      	ands	r3, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d119      	bne.n	800361c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	3b01      	subs	r3, #1
 80035f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d10f      	bne.n	800361c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d107      	bne.n	800361c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0d0      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d910      	bls.n	8003678 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 020f 	bic.w	r2, r3, #15
 800365e:	4965      	ldr	r1, [pc, #404]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b63      	ldr	r3, [pc, #396]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0b8      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003690:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a58      	ldr	r2, [pc, #352]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800369a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a8:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a52      	ldr	r2, [pc, #328]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b4:	4b50      	ldr	r3, [pc, #320]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	494d      	ldr	r1, [pc, #308]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d040      	beq.n	8003754 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d115      	bne.n	8003712 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07f      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e073      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3d      	ldr	r3, [pc, #244]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06b      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4936      	ldr	r1, [pc, #216]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003724:	f7fe fa24 	bl	8001b70 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fe fa20 	bl	8001b70 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e053      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d210      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 020f 	bic.w	r2, r3, #15
 800376a:	4922      	ldr	r1, [pc, #136]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e032      	b.n	80037ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4916      	ldr	r1, [pc, #88]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	490e      	ldr	r1, [pc, #56]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037c2:	f000 f821 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 80037c6:	4602      	mov	r2, r0
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	490a      	ldr	r1, [pc, #40]	; (80037fc <HAL_RCC_ClockConfig+0x1cc>)
 80037d4:	5ccb      	ldrb	r3, [r1, r3]
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	4a09      	ldr	r2, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1d0>)
 80037dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <HAL_RCC_ClockConfig+0x1d4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe f980 	bl	8001ae8 <HAL_InitTick>

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023c00 	.word	0x40023c00
 80037f8:	40023800 	.word	0x40023800
 80037fc:	080092f4 	.word	0x080092f4
 8003800:	20000018 	.word	0x20000018
 8003804:	2000014c 	.word	0x2000014c

08003808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003808:	b5b0      	push	{r4, r5, r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800380e:	2100      	movs	r1, #0
 8003810:	6079      	str	r1, [r7, #4]
 8003812:	2100      	movs	r1, #0
 8003814:	60f9      	str	r1, [r7, #12]
 8003816:	2100      	movs	r1, #0
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800381a:	2100      	movs	r1, #0
 800381c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800381e:	4952      	ldr	r1, [pc, #328]	; (8003968 <HAL_RCC_GetSysClockFreq+0x160>)
 8003820:	6889      	ldr	r1, [r1, #8]
 8003822:	f001 010c 	and.w	r1, r1, #12
 8003826:	2908      	cmp	r1, #8
 8003828:	d00d      	beq.n	8003846 <HAL_RCC_GetSysClockFreq+0x3e>
 800382a:	2908      	cmp	r1, #8
 800382c:	f200 8094 	bhi.w	8003958 <HAL_RCC_GetSysClockFreq+0x150>
 8003830:	2900      	cmp	r1, #0
 8003832:	d002      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x32>
 8003834:	2904      	cmp	r1, #4
 8003836:	d003      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x38>
 8003838:	e08e      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800383a:	4b4c      	ldr	r3, [pc, #304]	; (800396c <HAL_RCC_GetSysClockFreq+0x164>)
 800383c:	60bb      	str	r3, [r7, #8]
      break;
 800383e:	e08e      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003840:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <HAL_RCC_GetSysClockFreq+0x168>)
 8003842:	60bb      	str	r3, [r7, #8]
      break;
 8003844:	e08b      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003846:	4948      	ldr	r1, [pc, #288]	; (8003968 <HAL_RCC_GetSysClockFreq+0x160>)
 8003848:	6849      	ldr	r1, [r1, #4]
 800384a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800384e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003850:	4945      	ldr	r1, [pc, #276]	; (8003968 <HAL_RCC_GetSysClockFreq+0x160>)
 8003852:	6849      	ldr	r1, [r1, #4]
 8003854:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003858:	2900      	cmp	r1, #0
 800385a:	d024      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385c:	4942      	ldr	r1, [pc, #264]	; (8003968 <HAL_RCC_GetSysClockFreq+0x160>)
 800385e:	6849      	ldr	r1, [r1, #4]
 8003860:	0989      	lsrs	r1, r1, #6
 8003862:	4608      	mov	r0, r1
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	f240 14ff 	movw	r4, #511	; 0x1ff
 800386c:	f04f 0500 	mov.w	r5, #0
 8003870:	ea00 0204 	and.w	r2, r0, r4
 8003874:	ea01 0305 	and.w	r3, r1, r5
 8003878:	493d      	ldr	r1, [pc, #244]	; (8003970 <HAL_RCC_GetSysClockFreq+0x168>)
 800387a:	fb01 f003 	mul.w	r0, r1, r3
 800387e:	2100      	movs	r1, #0
 8003880:	fb01 f102 	mul.w	r1, r1, r2
 8003884:	1844      	adds	r4, r0, r1
 8003886:	493a      	ldr	r1, [pc, #232]	; (8003970 <HAL_RCC_GetSysClockFreq+0x168>)
 8003888:	fba2 0101 	umull	r0, r1, r2, r1
 800388c:	1863      	adds	r3, r4, r1
 800388e:	4619      	mov	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	461a      	mov	r2, r3
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	f7fc fd3a 	bl	8000310 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e04a      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4b30      	ldr	r3, [pc, #192]	; (8003968 <HAL_RCC_GetSysClockFreq+0x160>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	461a      	mov	r2, r3
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	ea02 0400 	and.w	r4, r2, r0
 80038be:	ea03 0501 	and.w	r5, r3, r1
 80038c2:	4620      	mov	r0, r4
 80038c4:	4629      	mov	r1, r5
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	014b      	lsls	r3, r1, #5
 80038d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038d4:	0142      	lsls	r2, r0, #5
 80038d6:	4610      	mov	r0, r2
 80038d8:	4619      	mov	r1, r3
 80038da:	1b00      	subs	r0, r0, r4
 80038dc:	eb61 0105 	sbc.w	r1, r1, r5
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	018b      	lsls	r3, r1, #6
 80038ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038ee:	0182      	lsls	r2, r0, #6
 80038f0:	1a12      	subs	r2, r2, r0
 80038f2:	eb63 0301 	sbc.w	r3, r3, r1
 80038f6:	f04f 0000 	mov.w	r0, #0
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	00d9      	lsls	r1, r3, #3
 8003900:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003904:	00d0      	lsls	r0, r2, #3
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	1912      	adds	r2, r2, r4
 800390c:	eb45 0303 	adc.w	r3, r5, r3
 8003910:	f04f 0000 	mov.w	r0, #0
 8003914:	f04f 0100 	mov.w	r1, #0
 8003918:	0299      	lsls	r1, r3, #10
 800391a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800391e:	0290      	lsls	r0, r2, #10
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	461a      	mov	r2, r3
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	f7fc fcee 	bl	8000310 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <HAL_RCC_GetSysClockFreq+0x160>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	3301      	adds	r3, #1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	60bb      	str	r3, [r7, #8]
      break;
 8003956:	e002      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <HAL_RCC_GetSysClockFreq+0x164>)
 800395a:	60bb      	str	r3, [r7, #8]
      break;
 800395c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800395e:	68bb      	ldr	r3, [r7, #8]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bdb0      	pop	{r4, r5, r7, pc}
 8003968:	40023800 	.word	0x40023800
 800396c:	00f42400 	.word	0x00f42400
 8003970:	017d7840 	.word	0x017d7840

08003974 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_RCC_GetHCLKFreq+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000018 	.word	0x20000018

0800398c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003990:	f7ff fff0 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	0a9b      	lsrs	r3, r3, #10
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4903      	ldr	r1, [pc, #12]	; (80039b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	08009304 	.word	0x08009304

080039b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039b8:	f7ff ffdc 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0b5b      	lsrs	r3, r3, #13
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	08009304 	.word	0x08009304

080039dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d012      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a04:	4b69      	ldr	r3, [pc, #420]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a68      	ldr	r2, [pc, #416]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a0e:	6093      	str	r3, [r2, #8]
 8003a10:	4b66      	ldr	r3, [pc, #408]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a18:	4964      	ldr	r1, [pc, #400]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a26:	2301      	movs	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d017      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a36:	4b5d      	ldr	r3, [pc, #372]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	4959      	ldr	r1, [pc, #356]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a54:	d101      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d017      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a72:	4b4e      	ldr	r3, [pc, #312]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	494a      	ldr	r1, [pc, #296]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a90:	d101      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 808b 	beq.w	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	4a39      	ldr	r2, [pc, #228]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6413      	str	r3, [r2, #64]	; 0x40
 8003acc:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ad8:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a34      	ldr	r2, [pc, #208]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae4:	f7fe f844 	bl	8001b70 <HAL_GetTick>
 8003ae8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aec:	f7fe f840 	bl	8001b70 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e38f      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003afe:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b0a:	4b28      	ldr	r3, [pc, #160]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d035      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d02e      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b28:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	4a1a      	ldr	r2, [pc, #104]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b4a:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b50:	4b16      	ldr	r3, [pc, #88]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d114      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe f808 	bl	8001b70 <HAL_GetTick>
 8003b60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fe f804 	bl	8001b70 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e351      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0ee      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b92:	d111      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ba2:	400b      	ands	r3, r1
 8003ba4:	4901      	ldr	r1, [pc, #4]	; (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
 8003baa:	e00b      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	0ffffcff 	.word	0x0ffffcff
 8003bb8:	4bb3      	ldr	r3, [pc, #716]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4ab2      	ldr	r2, [pc, #712]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bbe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bc2:	6093      	str	r3, [r2, #8]
 8003bc4:	4bb0      	ldr	r3, [pc, #704]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd0:	49ad      	ldr	r1, [pc, #692]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003be2:	4ba9      	ldr	r3, [pc, #676]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be8:	4aa7      	ldr	r2, [pc, #668]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003bf2:	4ba5      	ldr	r3, [pc, #660]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	49a2      	ldr	r1, [pc, #648]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c10:	4b9d      	ldr	r3, [pc, #628]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c1e:	499a      	ldr	r1, [pc, #616]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c32:	4b95      	ldr	r3, [pc, #596]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c40:	4991      	ldr	r1, [pc, #580]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c54:	4b8c      	ldr	r3, [pc, #560]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c62:	4989      	ldr	r1, [pc, #548]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c76:	4b84      	ldr	r3, [pc, #528]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	4980      	ldr	r1, [pc, #512]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c98:	4b7b      	ldr	r3, [pc, #492]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	4978      	ldr	r1, [pc, #480]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cba:	4b73      	ldr	r3, [pc, #460]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f023 020c 	bic.w	r2, r3, #12
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc8:	496f      	ldr	r1, [pc, #444]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cdc:	4b6a      	ldr	r3, [pc, #424]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	4967      	ldr	r1, [pc, #412]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cfe:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0c:	495e      	ldr	r1, [pc, #376]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d20:	4b59      	ldr	r3, [pc, #356]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	4956      	ldr	r1, [pc, #344]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d42:	4b51      	ldr	r3, [pc, #324]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	494d      	ldr	r1, [pc, #308]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d64:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	4945      	ldr	r1, [pc, #276]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d86:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d94:	493c      	ldr	r1, [pc, #240]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003da8:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003db6:	4934      	ldr	r1, [pc, #208]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d011      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dca:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd8:	492b      	ldr	r1, [pc, #172]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de8:	d101      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0a:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e18:	491b      	ldr	r1, [pc, #108]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3c:	4912      	ldr	r1, [pc, #72]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e50:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e56:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e60:	4909      	ldr	r1, [pc, #36]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00f      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	e002      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	4986      	ldr	r1, [pc, #536]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ea0:	4b81      	ldr	r3, [pc, #516]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb0:	497d      	ldr	r1, [pc, #500]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d006      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80d6 	beq.w	8004078 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ecc:	4b76      	ldr	r3, [pc, #472]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a75      	ldr	r2, [pc, #468]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ed2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed8:	f7fd fe4a 	bl	8001b70 <HAL_GetTick>
 8003edc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ee0:	f7fd fe46 	bl	8001b70 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e195      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef2:	4b6d      	ldr	r3, [pc, #436]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d021      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d11d      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f12:	4b65      	ldr	r3, [pc, #404]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f20:	4b61      	ldr	r3, [pc, #388]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f26:	0e1b      	lsrs	r3, r3, #24
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	019a      	lsls	r2, r3, #6
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	071b      	lsls	r3, r3, #28
 8003f46:	4958      	ldr	r1, [pc, #352]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d004      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02e      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f78:	d129      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f7a:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f88:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8e:	0f1b      	lsrs	r3, r3, #28
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	019a      	lsls	r2, r3, #6
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	071b      	lsls	r3, r3, #28
 8003fae:	493e      	ldr	r1, [pc, #248]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fb6:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fbc:	f023 021f 	bic.w	r2, r3, #31
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	4938      	ldr	r1, [pc, #224]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01d      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fda:	4b33      	ldr	r3, [pc, #204]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe0:	0e1b      	lsrs	r3, r3, #24
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fe8:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fee:	0f1b      	lsrs	r3, r3, #28
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	019a      	lsls	r2, r3, #6
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	431a      	orrs	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	431a      	orrs	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	071b      	lsls	r3, r3, #28
 800400e:	4926      	ldr	r1, [pc, #152]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d011      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	019a      	lsls	r2, r3, #6
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	071b      	lsls	r3, r3, #28
 800403e:	491a      	ldr	r1, [pc, #104]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004046:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800404c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004052:	f7fd fd8d 	bl	8001b70 <HAL_GetTick>
 8004056:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800405a:	f7fd fd89 	bl	8001b70 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b64      	cmp	r3, #100	; 0x64
 8004066:	d901      	bls.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0d8      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b01      	cmp	r3, #1
 800407c:	f040 80ce 	bne.w	800421c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fd fd70 	bl	8001b70 <HAL_GetTick>
 8004090:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004092:	e00b      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004094:	f7fd fd6c 	bl	8001b70 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d904      	bls.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e0bb      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040ac:	4b5e      	ldr	r3, [pc, #376]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b8:	d0ec      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d02e      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d12a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040e2:	4b51      	ldr	r3, [pc, #324]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040f0:	4b4d      	ldr	r3, [pc, #308]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	0f1b      	lsrs	r3, r3, #28
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	019a      	lsls	r2, r3, #6
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	061b      	lsls	r3, r3, #24
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	071b      	lsls	r3, r3, #28
 8004116:	4944      	ldr	r1, [pc, #272]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800411e:	4b42      	ldr	r3, [pc, #264]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004124:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	3b01      	subs	r3, #1
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	493d      	ldr	r1, [pc, #244]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d022      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800414c:	d11d      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800414e:	4b36      	ldr	r3, [pc, #216]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	0e1b      	lsrs	r3, r3, #24
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800415c:	4b32      	ldr	r3, [pc, #200]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	0f1b      	lsrs	r3, r3, #28
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	019a      	lsls	r2, r3, #6
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	061b      	lsls	r3, r3, #24
 800417c:	431a      	orrs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	071b      	lsls	r3, r3, #28
 8004182:	4929      	ldr	r1, [pc, #164]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d028      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	0e1b      	lsrs	r3, r3, #24
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041a4:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	0c1b      	lsrs	r3, r3, #16
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	019a      	lsls	r2, r3, #6
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	041b      	lsls	r3, r3, #16
 80041bc:	431a      	orrs	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	071b      	lsls	r3, r3, #28
 80041ca:	4917      	ldr	r1, [pc, #92]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	4911      	ldr	r1, [pc, #68]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f4:	f7fd fcbc 	bl	8001b70 <HAL_GetTick>
 80041f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041fc:	f7fd fcb8 	bl	8001b70 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e007      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800421a:	d1ef      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800

0800422c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e09d      	b.n	800437a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	2b00      	cmp	r3, #0
 8004244:	d108      	bne.n	8004258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800424e:	d009      	beq.n	8004264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	61da      	str	r2, [r3, #28]
 8004256:	e005      	b.n	8004264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fc fd6e 	bl	8000d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042a4:	d902      	bls.n	80042ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e002      	b.n	80042b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042ba:	d007      	beq.n	80042cc <HAL_SPI_Init+0xa0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042c4:	d002      	beq.n	80042cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	ea42 0103 	orr.w	r1, r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	f003 0204 	and.w	r2, r3, #4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004348:	ea42 0103 	orr.w	r1, r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	099b      	lsrs	r3, r3, #6
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10f      	bne.n	80043c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	099b      	lsrs	r3, r3, #6
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
    return;
 80043c6:	e0d7      	b.n	8004578 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_SPI_IRQHandler+0x66>
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	09db      	lsrs	r3, r3, #7
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
    return;
 80043e8:	e0c6      	b.n	8004578 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10c      	bne.n	8004410 <HAL_SPI_IRQHandler+0x8c>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	0a1b      	lsrs	r3, r3, #8
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80b4 	beq.w	8004578 <HAL_SPI_IRQHandler+0x1f4>
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80ad 	beq.w	8004578 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	099b      	lsrs	r3, r3, #6
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d023      	beq.n	8004472 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b03      	cmp	r3, #3
 8004434:	d011      	beq.n	800445a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	e00b      	b.n	8004472 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	693b      	ldr	r3, [r7, #16]
        return;
 8004470:	e082      	b.n	8004578 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d014      	beq.n	80044a8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	f043 0201 	orr.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00c      	beq.n	80044ce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b8:	f043 0208 	orr.w	r2, r3, #8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044c0:	2300      	movs	r3, #0
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d04f      	beq.n	8004576 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044e4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <HAL_SPI_IRQHandler+0x17e>
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d034      	beq.n	800456c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0203 	bic.w	r2, r2, #3
 8004510:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	2b00      	cmp	r3, #0
 8004518:	d011      	beq.n	800453e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	4a18      	ldr	r2, [pc, #96]	; (8004580 <HAL_SPI_IRQHandler+0x1fc>)
 8004520:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe f946 	bl	80027b8 <HAL_DMA_Abort_IT>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d005      	beq.n	800453e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	4a0d      	ldr	r2, [pc, #52]	; (8004580 <HAL_SPI_IRQHandler+0x1fc>)
 800454c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe f930 	bl	80027b8 <HAL_DMA_Abort_IT>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800456a:	e003      	b.n	8004574 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f809 	bl	8004584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004572:	e000      	b.n	8004576 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004574:	bf00      	nop
    return;
 8004576:	bf00      	nop
  }
}
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	08004599 	.word	0x08004599

08004584 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff ffe5 	bl	8004584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e049      	b.n	8004668 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fc ff0b 	bl	8001404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f000 fc81 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e049      	b.n	8004716 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f841 	bl	800471e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f000 fc2a 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e049      	b.n	80047d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fc feb1 	bl	80014c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f000 fbc9 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d122      	bne.n	800483c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d11b      	bne.n	800483c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0202 	mvn.w	r2, #2
 800480c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fb52 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fb44 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fb55 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d122      	bne.n	8004890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d11b      	bne.n	8004890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0204 	mvn.w	r2, #4
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fb28 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fb1a 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fb2b 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b08      	cmp	r3, #8
 800489c:	d122      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d11b      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0208 	mvn.w	r2, #8
 80048b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2204      	movs	r2, #4
 80048ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fafe 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 faf0 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fb01 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0210 	mvn.w	r2, #16
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2208      	movs	r2, #8
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fad4 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fac6 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fad7 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10e      	bne.n	8004964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0201 	mvn.w	r2, #1
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc fe50 	bl	8001604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d107      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 feec 	bl	8005768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800499e:	d10e      	bne.n	80049be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b80      	cmp	r3, #128	; 0x80
 80049ac:	d107      	bne.n	80049be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fedf 	bl	800577c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d10e      	bne.n	80049ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d107      	bne.n	80049ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fa85 	bl	8004ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d10e      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d107      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f06f 0220 	mvn.w	r2, #32
 8004a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fe9f 	bl	8005754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e064      	b.n	8004b04 <HAL_TIM_OC_ConfigChannel+0xe4>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b14      	cmp	r3, #20
 8004a46:	d857      	bhi.n	8004af8 <HAL_TIM_OC_ConfigChannel+0xd8>
 8004a48:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004aa5 	.word	0x08004aa5
 8004a54:	08004af9 	.word	0x08004af9
 8004a58:	08004af9 	.word	0x08004af9
 8004a5c:	08004af9 	.word	0x08004af9
 8004a60:	08004ab3 	.word	0x08004ab3
 8004a64:	08004af9 	.word	0x08004af9
 8004a68:	08004af9 	.word	0x08004af9
 8004a6c:	08004af9 	.word	0x08004af9
 8004a70:	08004ac1 	.word	0x08004ac1
 8004a74:	08004af9 	.word	0x08004af9
 8004a78:	08004af9 	.word	0x08004af9
 8004a7c:	08004af9 	.word	0x08004af9
 8004a80:	08004acf 	.word	0x08004acf
 8004a84:	08004af9 	.word	0x08004af9
 8004a88:	08004af9 	.word	0x08004af9
 8004a8c:	08004af9 	.word	0x08004af9
 8004a90:	08004add 	.word	0x08004add
 8004a94:	08004af9 	.word	0x08004af9
 8004a98:	08004af9 	.word	0x08004af9
 8004a9c:	08004af9 	.word	0x08004af9
 8004aa0:	08004aeb 	.word	0x08004aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 facc 	bl	8005048 <TIM_OC1_SetConfig>
      break;
 8004ab0:	e023      	b.n	8004afa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fb37 	bl	800512c <TIM_OC2_SetConfig>
      break;
 8004abe:	e01c      	b.n	8004afa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fba8 	bl	800521c <TIM_OC3_SetConfig>
      break;
 8004acc:	e015      	b.n	8004afa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fc17 	bl	8005308 <TIM_OC4_SetConfig>
      break;
 8004ada:	e00e      	b.n	8004afa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fc68 	bl	80053b8 <TIM_OC5_SetConfig>
      break;
 8004ae8:	e007      	b.n	8004afa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fcb3 	bl	800545c <TIM_OC6_SetConfig>
      break;
 8004af6:	e000      	b.n	8004afa <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8004af8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e0fd      	b.n	8004d22 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b14      	cmp	r3, #20
 8004b32:	f200 80f0 	bhi.w	8004d16 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004d17 	.word	0x08004d17
 8004b44:	08004d17 	.word	0x08004d17
 8004b48:	08004d17 	.word	0x08004d17
 8004b4c:	08004bd1 	.word	0x08004bd1
 8004b50:	08004d17 	.word	0x08004d17
 8004b54:	08004d17 	.word	0x08004d17
 8004b58:	08004d17 	.word	0x08004d17
 8004b5c:	08004c13 	.word	0x08004c13
 8004b60:	08004d17 	.word	0x08004d17
 8004b64:	08004d17 	.word	0x08004d17
 8004b68:	08004d17 	.word	0x08004d17
 8004b6c:	08004c53 	.word	0x08004c53
 8004b70:	08004d17 	.word	0x08004d17
 8004b74:	08004d17 	.word	0x08004d17
 8004b78:	08004d17 	.word	0x08004d17
 8004b7c:	08004c95 	.word	0x08004c95
 8004b80:	08004d17 	.word	0x08004d17
 8004b84:	08004d17 	.word	0x08004d17
 8004b88:	08004d17 	.word	0x08004d17
 8004b8c:	08004cd5 	.word	0x08004cd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fa56 	bl	8005048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0204 	bic.w	r2, r2, #4
 8004bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6999      	ldr	r1, [r3, #24]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	619a      	str	r2, [r3, #24]
      break;
 8004bce:	e0a3      	b.n	8004d18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 faa8 	bl	800512c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699a      	ldr	r2, [r3, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6999      	ldr	r1, [r3, #24]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	619a      	str	r2, [r3, #24]
      break;
 8004c10:	e082      	b.n	8004d18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 faff 	bl	800521c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69da      	ldr	r2, [r3, #28]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0208 	orr.w	r2, r2, #8
 8004c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0204 	bic.w	r2, r2, #4
 8004c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69d9      	ldr	r1, [r3, #28]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	61da      	str	r2, [r3, #28]
      break;
 8004c50:	e062      	b.n	8004d18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fb55 	bl	8005308 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69d9      	ldr	r1, [r3, #28]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	021a      	lsls	r2, r3, #8
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	61da      	str	r2, [r3, #28]
      break;
 8004c92:	e041      	b.n	8004d18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fb8c 	bl	80053b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0208 	orr.w	r2, r2, #8
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0204 	bic.w	r2, r2, #4
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cd2:	e021      	b.n	8004d18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fbbe 	bl	800545c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d14:	e000      	b.n	8004d18 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004d16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop

08004d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIM_ConfigClockSource+0x18>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e0b3      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x180>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4b55      	ldr	r3, [pc, #340]	; (8004eb4 <HAL_TIM_ConfigClockSource+0x188>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7c:	d03e      	beq.n	8004dfc <HAL_TIM_ConfigClockSource+0xd0>
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d82:	f200 8087 	bhi.w	8004e94 <HAL_TIM_ConfigClockSource+0x168>
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8a:	f000 8085 	beq.w	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d92:	d87f      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x168>
 8004d94:	2b70      	cmp	r3, #112	; 0x70
 8004d96:	d01a      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0xa2>
 8004d98:	2b70      	cmp	r3, #112	; 0x70
 8004d9a:	d87b      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x168>
 8004d9c:	2b60      	cmp	r3, #96	; 0x60
 8004d9e:	d050      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x116>
 8004da0:	2b60      	cmp	r3, #96	; 0x60
 8004da2:	d877      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x168>
 8004da4:	2b50      	cmp	r3, #80	; 0x50
 8004da6:	d03c      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0xf6>
 8004da8:	2b50      	cmp	r3, #80	; 0x50
 8004daa:	d873      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x168>
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d058      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x136>
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d86f      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x168>
 8004db4:	2b30      	cmp	r3, #48	; 0x30
 8004db6:	d064      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x156>
 8004db8:	2b30      	cmp	r3, #48	; 0x30
 8004dba:	d86b      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x168>
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d060      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x156>
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d867      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x168>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d05c      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x156>
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d05a      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004dcc:	e062      	b.n	8004e94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6899      	ldr	r1, [r3, #8]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f000 fc0b 	bl	80055f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004df0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	609a      	str	r2, [r3, #8]
      break;
 8004dfa:	e04e      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	6899      	ldr	r1, [r3, #8]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f000 fbf4 	bl	80055f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e1e:	609a      	str	r2, [r3, #8]
      break;
 8004e20:	e03b      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f000 fb68 	bl	8005504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2150      	movs	r1, #80	; 0x50
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fbc1 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8004e40:	e02b      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6859      	ldr	r1, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f000 fb87 	bl	8005562 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2160      	movs	r1, #96	; 0x60
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fbb1 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8004e60:	e01b      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6859      	ldr	r1, [r3, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f000 fb48 	bl	8005504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2140      	movs	r1, #64	; 0x40
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fba1 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8004e80:	e00b      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	f000 fb98 	bl	80055c2 <TIM_ITRx_SetConfig>
        break;
 8004e92:	e002      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e94:	bf00      	nop
 8004e96:	e000      	b.n	8004e9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	fffeff88 	.word	0xfffeff88

08004eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a40      	ldr	r2, [pc, #256]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d00f      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00b      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3c      	ldr	r2, [pc, #240]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3b      	ldr	r2, [pc, #236]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3a      	ldr	r2, [pc, #232]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2f      	ldr	r2, [pc, #188]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f68:	d027      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <TIM_Base_SetConfig+0x118>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d023      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2b      	ldr	r2, [pc, #172]	; (8005024 <TIM_Base_SetConfig+0x11c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01f      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <TIM_Base_SetConfig+0x120>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a29      	ldr	r2, [pc, #164]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d017      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <TIM_Base_SetConfig+0x128>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00f      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a25      	ldr	r2, [pc, #148]	; (800503c <TIM_Base_SetConfig+0x134>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a24      	ldr	r2, [pc, #144]	; (8005040 <TIM_Base_SetConfig+0x138>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a23      	ldr	r2, [pc, #140]	; (8005044 <TIM_Base_SetConfig+0x13c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	; (800501c <TIM_Base_SetConfig+0x114>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0xf8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0c      	ldr	r2, [pc, #48]	; (800502c <TIM_Base_SetConfig+0x124>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d103      	bne.n	8005008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	615a      	str	r2, [r3, #20]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40010000 	.word	0x40010000
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40010400 	.word	0x40010400
 8005030:	40014000 	.word	0x40014000
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800
 800503c:	40001800 	.word	0x40001800
 8005040:	40001c00 	.word	0x40001c00
 8005044:	40002000 	.word	0x40002000

08005048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0201 	bic.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <TIM_OC1_SetConfig+0xd8>)
 8005074:	4013      	ands	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0303 	bic.w	r3, r3, #3
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f023 0302 	bic.w	r3, r3, #2
 8005090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a21      	ldr	r2, [pc, #132]	; (8005124 <TIM_OC1_SetConfig+0xdc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC1_SetConfig+0x64>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a20      	ldr	r2, [pc, #128]	; (8005128 <TIM_OC1_SetConfig+0xe0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d10c      	bne.n	80050c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f023 0308 	bic.w	r3, r3, #8
 80050b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f023 0304 	bic.w	r3, r3, #4
 80050c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a16      	ldr	r2, [pc, #88]	; (8005124 <TIM_OC1_SetConfig+0xdc>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_OC1_SetConfig+0x8e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <TIM_OC1_SetConfig+0xe0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d111      	bne.n	80050fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	fffeff8f 	.word	0xfffeff8f
 8005124:	40010000 	.word	0x40010000
 8005128:	40010400 	.word	0x40010400

0800512c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f023 0210 	bic.w	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4b2e      	ldr	r3, [pc, #184]	; (8005210 <TIM_OC2_SetConfig+0xe4>)
 8005158:	4013      	ands	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0320 	bic.w	r3, r3, #32
 8005176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a23      	ldr	r2, [pc, #140]	; (8005214 <TIM_OC2_SetConfig+0xe8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_OC2_SetConfig+0x68>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a22      	ldr	r2, [pc, #136]	; (8005218 <TIM_OC2_SetConfig+0xec>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d10d      	bne.n	80051b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800519a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a18      	ldr	r2, [pc, #96]	; (8005214 <TIM_OC2_SetConfig+0xe8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_OC2_SetConfig+0x94>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a17      	ldr	r2, [pc, #92]	; (8005218 <TIM_OC2_SetConfig+0xec>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d113      	bne.n	80051e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	feff8fff 	.word	0xfeff8fff
 8005214:	40010000 	.word	0x40010000
 8005218:	40010400 	.word	0x40010400

0800521c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4b2d      	ldr	r3, [pc, #180]	; (80052fc <TIM_OC3_SetConfig+0xe0>)
 8005248:	4013      	ands	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a22      	ldr	r2, [pc, #136]	; (8005300 <TIM_OC3_SetConfig+0xe4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_OC3_SetConfig+0x66>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a21      	ldr	r2, [pc, #132]	; (8005304 <TIM_OC3_SetConfig+0xe8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d10d      	bne.n	800529e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800529c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a17      	ldr	r2, [pc, #92]	; (8005300 <TIM_OC3_SetConfig+0xe4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_OC3_SetConfig+0x92>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a16      	ldr	r2, [pc, #88]	; (8005304 <TIM_OC3_SetConfig+0xe8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d113      	bne.n	80052d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	fffeff8f 	.word	0xfffeff8f
 8005300:	40010000 	.word	0x40010000
 8005304:	40010400 	.word	0x40010400

08005308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4b1e      	ldr	r3, [pc, #120]	; (80053ac <TIM_OC4_SetConfig+0xa4>)
 8005334:	4013      	ands	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	031b      	lsls	r3, r3, #12
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a13      	ldr	r2, [pc, #76]	; (80053b0 <TIM_OC4_SetConfig+0xa8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_OC4_SetConfig+0x68>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a12      	ldr	r2, [pc, #72]	; (80053b4 <TIM_OC4_SetConfig+0xac>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d109      	bne.n	8005384 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	019b      	lsls	r3, r3, #6
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	621a      	str	r2, [r3, #32]
}
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	feff8fff 	.word	0xfeff8fff
 80053b0:	40010000 	.word	0x40010000
 80053b4:	40010400 	.word	0x40010400

080053b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4b1b      	ldr	r3, [pc, #108]	; (8005450 <TIM_OC5_SetConfig+0x98>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a12      	ldr	r2, [pc, #72]	; (8005454 <TIM_OC5_SetConfig+0x9c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC5_SetConfig+0x5e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a11      	ldr	r2, [pc, #68]	; (8005458 <TIM_OC5_SetConfig+0xa0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d109      	bne.n	800542a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	621a      	str	r2, [r3, #32]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	fffeff8f 	.word	0xfffeff8f
 8005454:	40010000 	.word	0x40010000
 8005458:	40010400 	.word	0x40010400

0800545c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4b1c      	ldr	r3, [pc, #112]	; (80054f8 <TIM_OC6_SetConfig+0x9c>)
 8005488:	4013      	ands	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800549e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	051b      	lsls	r3, r3, #20
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <TIM_OC6_SetConfig+0xa0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_OC6_SetConfig+0x60>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a12      	ldr	r2, [pc, #72]	; (8005500 <TIM_OC6_SetConfig+0xa4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d109      	bne.n	80054d0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	029b      	lsls	r3, r3, #10
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	feff8fff 	.word	0xfeff8fff
 80054fc:	40010000 	.word	0x40010000
 8005500:	40010400 	.word	0x40010400

08005504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f023 0201 	bic.w	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800552e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f023 030a 	bic.w	r3, r3, #10
 8005540:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005562:	b480      	push	{r7}
 8005564:	b087      	sub	sp, #28
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f023 0210 	bic.w	r2, r3, #16
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800558c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	031b      	lsls	r3, r3, #12
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800559e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	f043 0307 	orr.w	r3, r3, #7
 80055e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	021a      	lsls	r2, r3, #8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	431a      	orrs	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4313      	orrs	r3, r2
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	609a      	str	r2, [r3, #8]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800564c:	2302      	movs	r3, #2
 800564e:	e06d      	b.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a30      	ldr	r2, [pc, #192]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2f      	ldr	r2, [pc, #188]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d108      	bne.n	8005696 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800568a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a20      	ldr	r2, [pc, #128]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d022      	beq.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c2:	d01d      	beq.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d018      	beq.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d013      	beq.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00e      	beq.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a15      	ldr	r2, [pc, #84]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d009      	beq.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a16      	ldr	r2, [pc, #88]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a15      	ldr	r2, [pc, #84]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d10c      	bne.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005706:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	4313      	orrs	r3, r2
 8005710:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	40010000 	.word	0x40010000
 800573c:	40010400 	.word	0x40010400
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800
 8005748:	40000c00 	.word	0x40000c00
 800574c:	40014000 	.word	0x40014000
 8005750:	40001800 	.word	0x40001800

08005754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e040      	b.n	8005824 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fc f856 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2224      	movs	r2, #36	; 0x24
 80057bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0201 	bic.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa94 	bl	8005cfc <UART_SetConfig>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e022      	b.n	8005824 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fcea 	bl	80061c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800580a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fd71 	bl	8006304 <UART_CheckIdleState>
 8005822:	4603      	mov	r3, r0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	4613      	mov	r3, r2
 8005838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583e:	2b20      	cmp	r3, #32
 8005840:	d12c      	bne.n	800589c <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_UART_Receive_IT+0x22>
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e025      	b.n	800589e <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_UART_Receive_IT+0x34>
 800585c:	2302      	movs	r3, #2
 800585e:	e01e      	b.n	800589e <HAL_UART_Receive_IT+0x72>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800588a:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	461a      	mov	r2, r3
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 fdfc 	bl	8006490 <UART_Start_Receive_IT>
 8005898:	4603      	mov	r3, r0
 800589a:	e000      	b.n	800589e <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80058ce:	4013      	ands	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d113      	bne.n	8005900 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00e      	beq.n	8005900 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d009      	beq.n	8005900 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 81cc 	beq.w	8005c8e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	4798      	blx	r3
      }
      return;
 80058fe:	e1c6      	b.n	8005c8e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80e3 	beq.w	8005ace <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d105      	bne.n	800591e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4ba5      	ldr	r3, [pc, #660]	; (8005bac <HAL_UART_IRQHandler+0x304>)
 8005916:	4013      	ands	r3, r2
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80d8 	beq.w	8005ace <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d010      	beq.n	800594a <HAL_UART_IRQHandler+0xa2>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00b      	beq.n	800594a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2201      	movs	r2, #1
 8005938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005940:	f043 0201 	orr.w	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d010      	beq.n	8005976 <HAL_UART_IRQHandler+0xce>
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2202      	movs	r2, #2
 8005964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800596c:	f043 0204 	orr.w	r2, r3, #4
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d010      	beq.n	80059a2 <HAL_UART_IRQHandler+0xfa>
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2204      	movs	r2, #4
 8005990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005998:	f043 0202 	orr.w	r2, r3, #2
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d015      	beq.n	80059d8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00b      	beq.n	80059d8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2208      	movs	r2, #8
 80059c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ce:	f043 0208 	orr.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d011      	beq.n	8005a06 <HAL_UART_IRQHandler+0x15e>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00c      	beq.n	8005a06 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8140 	beq.w	8005c92 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00c      	beq.n	8005a36 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a3c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	d004      	beq.n	8005a56 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d031      	beq.n	8005aba <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fda2 	bl	80065a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a66:	2b40      	cmp	r3, #64	; 0x40
 8005a68:	d123      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a78:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d013      	beq.n	8005aaa <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	4a4a      	ldr	r2, [pc, #296]	; (8005bb0 <HAL_UART_IRQHandler+0x308>)
 8005a88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fc fe92 	bl	80027b8 <HAL_DMA_Abort_IT>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	e00f      	b.n	8005aca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f906 	bl	8005cbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	e00b      	b.n	8005aca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f902 	bl	8005cbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e007      	b.n	8005aca <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f8fe 	bl	8005cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005ac8:	e0e3      	b.n	8005c92 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aca:	bf00      	nop
    return;
 8005acc:	e0e1      	b.n	8005c92 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	f040 80a7 	bne.w	8005c26 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80a1 	beq.w	8005c26 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 809b 	beq.w	8005c26 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2210      	movs	r2, #16
 8005af6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d156      	bne.n	8005bb4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005b10:	893b      	ldrh	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80bf 	beq.w	8005c96 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b1e:	893a      	ldrh	r2, [r7, #8]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	f080 80b8 	bcs.w	8005c96 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	893a      	ldrh	r2, [r7, #8]
 8005b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b38:	d02a      	beq.n	8005b90 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b48:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0201 	bic.w	r2, r2, #1
 8005b58:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b68:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0210 	bic.w	r2, r2, #16
 8005b84:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fc fda4 	bl	80026d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f893 	bl	8005cd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005baa:	e074      	b.n	8005c96 <HAL_UART_IRQHandler+0x3ee>
 8005bac:	04000120 	.word	0x04000120
 8005bb0:	080065ff 	.word	0x080065ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d063      	beq.n	8005c9a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8005bd2:	897b      	ldrh	r3, [r7, #10]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d060      	beq.n	8005c9a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005be6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0210 	bic.w	r2, r2, #16
 8005c18:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c1a:	897b      	ldrh	r3, [r7, #10]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f856 	bl	8005cd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c24:	e039      	b.n	8005c9a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00d      	beq.n	8005c4c <HAL_UART_IRQHandler+0x3a4>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d008      	beq.n	8005c4c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f84f 	bl	8005ce8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c4a:	e029      	b.n	8005ca0 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00d      	beq.n	8005c72 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01a      	beq.n	8005c9e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
    }
    return;
 8005c70:	e015      	b.n	8005c9e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d011      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x3f8>
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fccf 	bl	800662a <UART_EndTransmit_IT>
    return;
 8005c8c:	e008      	b.n	8005ca0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8005c8e:	bf00      	nop
 8005c90:	e006      	b.n	8005ca0 <HAL_UART_IRQHandler+0x3f8>
    return;
 8005c92:	bf00      	nop
 8005c94:	e004      	b.n	8005ca0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8005c96:	bf00      	nop
 8005c98:	e002      	b.n	8005ca0 <HAL_UART_IRQHandler+0x3f8>
      return;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <HAL_UART_IRQHandler+0x3f8>
    return;
 8005c9e:	bf00      	nop
  }

}
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop

08005ca8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4ba7      	ldr	r3, [pc, #668]	; (8005fc4 <UART_SetConfig+0x2c8>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	6979      	ldr	r1, [r7, #20]
 8005d30:	430b      	orrs	r3, r1
 8005d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a95      	ldr	r2, [pc, #596]	; (8005fc8 <UART_SetConfig+0x2cc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d120      	bne.n	8005dba <UART_SetConfig+0xbe>
 8005d78:	4b94      	ldr	r3, [pc, #592]	; (8005fcc <UART_SetConfig+0x2d0>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d816      	bhi.n	8005db4 <UART_SetConfig+0xb8>
 8005d86:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <UART_SetConfig+0x90>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005da9 	.word	0x08005da9
 8005d94:	08005da3 	.word	0x08005da3
 8005d98:	08005daf 	.word	0x08005daf
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e14f      	b.n	8006042 <UART_SetConfig+0x346>
 8005da2:	2302      	movs	r3, #2
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e14c      	b.n	8006042 <UART_SetConfig+0x346>
 8005da8:	2304      	movs	r3, #4
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e149      	b.n	8006042 <UART_SetConfig+0x346>
 8005dae:	2308      	movs	r3, #8
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e146      	b.n	8006042 <UART_SetConfig+0x346>
 8005db4:	2310      	movs	r3, #16
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e143      	b.n	8006042 <UART_SetConfig+0x346>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a84      	ldr	r2, [pc, #528]	; (8005fd0 <UART_SetConfig+0x2d4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d132      	bne.n	8005e2a <UART_SetConfig+0x12e>
 8005dc4:	4b81      	ldr	r3, [pc, #516]	; (8005fcc <UART_SetConfig+0x2d0>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	2b0c      	cmp	r3, #12
 8005dd0:	d828      	bhi.n	8005e24 <UART_SetConfig+0x128>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <UART_SetConfig+0xdc>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e25 	.word	0x08005e25
 8005de0:	08005e25 	.word	0x08005e25
 8005de4:	08005e25 	.word	0x08005e25
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005e25 	.word	0x08005e25
 8005df0:	08005e25 	.word	0x08005e25
 8005df4:	08005e25 	.word	0x08005e25
 8005df8:	08005e13 	.word	0x08005e13
 8005dfc:	08005e25 	.word	0x08005e25
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e25 	.word	0x08005e25
 8005e08:	08005e1f 	.word	0x08005e1f
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e117      	b.n	8006042 <UART_SetConfig+0x346>
 8005e12:	2302      	movs	r3, #2
 8005e14:	77fb      	strb	r3, [r7, #31]
 8005e16:	e114      	b.n	8006042 <UART_SetConfig+0x346>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e111      	b.n	8006042 <UART_SetConfig+0x346>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e10e      	b.n	8006042 <UART_SetConfig+0x346>
 8005e24:	2310      	movs	r3, #16
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e10b      	b.n	8006042 <UART_SetConfig+0x346>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a69      	ldr	r2, [pc, #420]	; (8005fd4 <UART_SetConfig+0x2d8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d120      	bne.n	8005e76 <UART_SetConfig+0x17a>
 8005e34:	4b65      	ldr	r3, [pc, #404]	; (8005fcc <UART_SetConfig+0x2d0>)
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e3e:	2b30      	cmp	r3, #48	; 0x30
 8005e40:	d013      	beq.n	8005e6a <UART_SetConfig+0x16e>
 8005e42:	2b30      	cmp	r3, #48	; 0x30
 8005e44:	d814      	bhi.n	8005e70 <UART_SetConfig+0x174>
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d009      	beq.n	8005e5e <UART_SetConfig+0x162>
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d810      	bhi.n	8005e70 <UART_SetConfig+0x174>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <UART_SetConfig+0x15c>
 8005e52:	2b10      	cmp	r3, #16
 8005e54:	d006      	beq.n	8005e64 <UART_SetConfig+0x168>
 8005e56:	e00b      	b.n	8005e70 <UART_SetConfig+0x174>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e0f1      	b.n	8006042 <UART_SetConfig+0x346>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e0ee      	b.n	8006042 <UART_SetConfig+0x346>
 8005e64:	2304      	movs	r3, #4
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e0eb      	b.n	8006042 <UART_SetConfig+0x346>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e0e8      	b.n	8006042 <UART_SetConfig+0x346>
 8005e70:	2310      	movs	r3, #16
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e0e5      	b.n	8006042 <UART_SetConfig+0x346>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a57      	ldr	r2, [pc, #348]	; (8005fd8 <UART_SetConfig+0x2dc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d120      	bne.n	8005ec2 <UART_SetConfig+0x1c6>
 8005e80:	4b52      	ldr	r3, [pc, #328]	; (8005fcc <UART_SetConfig+0x2d0>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e8c:	d013      	beq.n	8005eb6 <UART_SetConfig+0x1ba>
 8005e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e90:	d814      	bhi.n	8005ebc <UART_SetConfig+0x1c0>
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d009      	beq.n	8005eaa <UART_SetConfig+0x1ae>
 8005e96:	2b80      	cmp	r3, #128	; 0x80
 8005e98:	d810      	bhi.n	8005ebc <UART_SetConfig+0x1c0>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <UART_SetConfig+0x1a8>
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d006      	beq.n	8005eb0 <UART_SetConfig+0x1b4>
 8005ea2:	e00b      	b.n	8005ebc <UART_SetConfig+0x1c0>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e0cb      	b.n	8006042 <UART_SetConfig+0x346>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	77fb      	strb	r3, [r7, #31]
 8005eae:	e0c8      	b.n	8006042 <UART_SetConfig+0x346>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e0c5      	b.n	8006042 <UART_SetConfig+0x346>
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e0c2      	b.n	8006042 <UART_SetConfig+0x346>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e0bf      	b.n	8006042 <UART_SetConfig+0x346>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a45      	ldr	r2, [pc, #276]	; (8005fdc <UART_SetConfig+0x2e0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d125      	bne.n	8005f18 <UART_SetConfig+0x21c>
 8005ecc:	4b3f      	ldr	r3, [pc, #252]	; (8005fcc <UART_SetConfig+0x2d0>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eda:	d017      	beq.n	8005f0c <UART_SetConfig+0x210>
 8005edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee0:	d817      	bhi.n	8005f12 <UART_SetConfig+0x216>
 8005ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee6:	d00b      	beq.n	8005f00 <UART_SetConfig+0x204>
 8005ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eec:	d811      	bhi.n	8005f12 <UART_SetConfig+0x216>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <UART_SetConfig+0x1fe>
 8005ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef6:	d006      	beq.n	8005f06 <UART_SetConfig+0x20a>
 8005ef8:	e00b      	b.n	8005f12 <UART_SetConfig+0x216>
 8005efa:	2300      	movs	r3, #0
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e0a0      	b.n	8006042 <UART_SetConfig+0x346>
 8005f00:	2302      	movs	r3, #2
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e09d      	b.n	8006042 <UART_SetConfig+0x346>
 8005f06:	2304      	movs	r3, #4
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e09a      	b.n	8006042 <UART_SetConfig+0x346>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e097      	b.n	8006042 <UART_SetConfig+0x346>
 8005f12:	2310      	movs	r3, #16
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e094      	b.n	8006042 <UART_SetConfig+0x346>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a30      	ldr	r2, [pc, #192]	; (8005fe0 <UART_SetConfig+0x2e4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d125      	bne.n	8005f6e <UART_SetConfig+0x272>
 8005f22:	4b2a      	ldr	r3, [pc, #168]	; (8005fcc <UART_SetConfig+0x2d0>)
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f30:	d017      	beq.n	8005f62 <UART_SetConfig+0x266>
 8005f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f36:	d817      	bhi.n	8005f68 <UART_SetConfig+0x26c>
 8005f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f3c:	d00b      	beq.n	8005f56 <UART_SetConfig+0x25a>
 8005f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f42:	d811      	bhi.n	8005f68 <UART_SetConfig+0x26c>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <UART_SetConfig+0x254>
 8005f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4c:	d006      	beq.n	8005f5c <UART_SetConfig+0x260>
 8005f4e:	e00b      	b.n	8005f68 <UART_SetConfig+0x26c>
 8005f50:	2301      	movs	r3, #1
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e075      	b.n	8006042 <UART_SetConfig+0x346>
 8005f56:	2302      	movs	r3, #2
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e072      	b.n	8006042 <UART_SetConfig+0x346>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e06f      	b.n	8006042 <UART_SetConfig+0x346>
 8005f62:	2308      	movs	r3, #8
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e06c      	b.n	8006042 <UART_SetConfig+0x346>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e069      	b.n	8006042 <UART_SetConfig+0x346>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1c      	ldr	r2, [pc, #112]	; (8005fe4 <UART_SetConfig+0x2e8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d137      	bne.n	8005fe8 <UART_SetConfig+0x2ec>
 8005f78:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <UART_SetConfig+0x2d0>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f86:	d017      	beq.n	8005fb8 <UART_SetConfig+0x2bc>
 8005f88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f8c:	d817      	bhi.n	8005fbe <UART_SetConfig+0x2c2>
 8005f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f92:	d00b      	beq.n	8005fac <UART_SetConfig+0x2b0>
 8005f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f98:	d811      	bhi.n	8005fbe <UART_SetConfig+0x2c2>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <UART_SetConfig+0x2aa>
 8005f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa2:	d006      	beq.n	8005fb2 <UART_SetConfig+0x2b6>
 8005fa4:	e00b      	b.n	8005fbe <UART_SetConfig+0x2c2>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e04a      	b.n	8006042 <UART_SetConfig+0x346>
 8005fac:	2302      	movs	r3, #2
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e047      	b.n	8006042 <UART_SetConfig+0x346>
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e044      	b.n	8006042 <UART_SetConfig+0x346>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e041      	b.n	8006042 <UART_SetConfig+0x346>
 8005fbe:	2310      	movs	r3, #16
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e03e      	b.n	8006042 <UART_SetConfig+0x346>
 8005fc4:	efff69f3 	.word	0xefff69f3
 8005fc8:	40011000 	.word	0x40011000
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	40004400 	.word	0x40004400
 8005fd4:	40004800 	.word	0x40004800
 8005fd8:	40004c00 	.word	0x40004c00
 8005fdc:	40005000 	.word	0x40005000
 8005fe0:	40011400 	.word	0x40011400
 8005fe4:	40007800 	.word	0x40007800
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a71      	ldr	r2, [pc, #452]	; (80061b4 <UART_SetConfig+0x4b8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d125      	bne.n	800603e <UART_SetConfig+0x342>
 8005ff2:	4b71      	ldr	r3, [pc, #452]	; (80061b8 <UART_SetConfig+0x4bc>)
 8005ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ffc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006000:	d017      	beq.n	8006032 <UART_SetConfig+0x336>
 8006002:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006006:	d817      	bhi.n	8006038 <UART_SetConfig+0x33c>
 8006008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800600c:	d00b      	beq.n	8006026 <UART_SetConfig+0x32a>
 800600e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006012:	d811      	bhi.n	8006038 <UART_SetConfig+0x33c>
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <UART_SetConfig+0x324>
 8006018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800601c:	d006      	beq.n	800602c <UART_SetConfig+0x330>
 800601e:	e00b      	b.n	8006038 <UART_SetConfig+0x33c>
 8006020:	2300      	movs	r3, #0
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e00d      	b.n	8006042 <UART_SetConfig+0x346>
 8006026:	2302      	movs	r3, #2
 8006028:	77fb      	strb	r3, [r7, #31]
 800602a:	e00a      	b.n	8006042 <UART_SetConfig+0x346>
 800602c:	2304      	movs	r3, #4
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e007      	b.n	8006042 <UART_SetConfig+0x346>
 8006032:	2308      	movs	r3, #8
 8006034:	77fb      	strb	r3, [r7, #31]
 8006036:	e004      	b.n	8006042 <UART_SetConfig+0x346>
 8006038:	2310      	movs	r3, #16
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e001      	b.n	8006042 <UART_SetConfig+0x346>
 800603e:	2310      	movs	r3, #16
 8006040:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604a:	d15b      	bne.n	8006104 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800604c:	7ffb      	ldrb	r3, [r7, #31]
 800604e:	2b08      	cmp	r3, #8
 8006050:	d827      	bhi.n	80060a2 <UART_SetConfig+0x3a6>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <UART_SetConfig+0x35c>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	0800607d 	.word	0x0800607d
 800605c:	08006085 	.word	0x08006085
 8006060:	0800608d 	.word	0x0800608d
 8006064:	080060a3 	.word	0x080060a3
 8006068:	08006093 	.word	0x08006093
 800606c:	080060a3 	.word	0x080060a3
 8006070:	080060a3 	.word	0x080060a3
 8006074:	080060a3 	.word	0x080060a3
 8006078:	0800609b 	.word	0x0800609b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607c:	f7fd fc86 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8006080:	61b8      	str	r0, [r7, #24]
        break;
 8006082:	e013      	b.n	80060ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006084:	f7fd fc96 	bl	80039b4 <HAL_RCC_GetPCLK2Freq>
 8006088:	61b8      	str	r0, [r7, #24]
        break;
 800608a:	e00f      	b.n	80060ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800608c:	4b4b      	ldr	r3, [pc, #300]	; (80061bc <UART_SetConfig+0x4c0>)
 800608e:	61bb      	str	r3, [r7, #24]
        break;
 8006090:	e00c      	b.n	80060ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006092:	f7fd fbb9 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 8006096:	61b8      	str	r0, [r7, #24]
        break;
 8006098:	e008      	b.n	80060ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609e:	61bb      	str	r3, [r7, #24]
        break;
 80060a0:	e004      	b.n	80060ac <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	77bb      	strb	r3, [r7, #30]
        break;
 80060aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d074      	beq.n	800619c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	005a      	lsls	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	441a      	add	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	2b0f      	cmp	r3, #15
 80060ce:	d916      	bls.n	80060fe <UART_SetConfig+0x402>
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d6:	d212      	bcs.n	80060fe <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f023 030f 	bic.w	r3, r3, #15
 80060e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	89fb      	ldrh	r3, [r7, #14]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	89fa      	ldrh	r2, [r7, #14]
 80060fa:	60da      	str	r2, [r3, #12]
 80060fc:	e04e      	b.n	800619c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	77bb      	strb	r3, [r7, #30]
 8006102:	e04b      	b.n	800619c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006104:	7ffb      	ldrb	r3, [r7, #31]
 8006106:	2b08      	cmp	r3, #8
 8006108:	d827      	bhi.n	800615a <UART_SetConfig+0x45e>
 800610a:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <UART_SetConfig+0x414>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	08006135 	.word	0x08006135
 8006114:	0800613d 	.word	0x0800613d
 8006118:	08006145 	.word	0x08006145
 800611c:	0800615b 	.word	0x0800615b
 8006120:	0800614b 	.word	0x0800614b
 8006124:	0800615b 	.word	0x0800615b
 8006128:	0800615b 	.word	0x0800615b
 800612c:	0800615b 	.word	0x0800615b
 8006130:	08006153 	.word	0x08006153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006134:	f7fd fc2a 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8006138:	61b8      	str	r0, [r7, #24]
        break;
 800613a:	e013      	b.n	8006164 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800613c:	f7fd fc3a 	bl	80039b4 <HAL_RCC_GetPCLK2Freq>
 8006140:	61b8      	str	r0, [r7, #24]
        break;
 8006142:	e00f      	b.n	8006164 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006144:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <UART_SetConfig+0x4c0>)
 8006146:	61bb      	str	r3, [r7, #24]
        break;
 8006148:	e00c      	b.n	8006164 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614a:	f7fd fb5d 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 800614e:	61b8      	str	r0, [r7, #24]
        break;
 8006150:	e008      	b.n	8006164 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006156:	61bb      	str	r3, [r7, #24]
        break;
 8006158:	e004      	b.n	8006164 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	77bb      	strb	r3, [r7, #30]
        break;
 8006162:	bf00      	nop
    }

    if (pclk != 0U)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d018      	beq.n	800619c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	085a      	lsrs	r2, r3, #1
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	441a      	add	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	b29b      	uxth	r3, r3
 800617e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b0f      	cmp	r3, #15
 8006184:	d908      	bls.n	8006198 <UART_SetConfig+0x49c>
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800618c:	d204      	bcs.n	8006198 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	60da      	str	r2, [r3, #12]
 8006196:	e001      	b.n	800619c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80061a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40007c00 	.word	0x40007c00
 80061b8:	40023800 	.word	0x40023800
 80061bc:	00f42400 	.word	0x00f42400

080061c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01a      	beq.n	80062d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062be:	d10a      	bne.n	80062d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]
  }
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af02      	add	r7, sp, #8
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006314:	f7fb fc2c 	bl	8001b70 <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b08      	cmp	r3, #8
 8006326:	d10e      	bne.n	8006346 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f82d 	bl	8006396 <UART_WaitOnFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e023      	b.n	800638e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b04      	cmp	r3, #4
 8006352:	d10e      	bne.n	8006372 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006354:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f817 	bl	8006396 <UART_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e00d      	b.n	800638e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4613      	mov	r3, r2
 80063a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a6:	e05e      	b.n	8006466 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d05a      	beq.n	8006466 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b0:	f7fb fbde 	bl	8001b70 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d302      	bcc.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d11b      	bne.n	80063fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e043      	b.n	8006486 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d02c      	beq.n	8006466 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641a:	d124      	bne.n	8006466 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006424:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006434:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0201 	bic.w	r2, r2, #1
 8006444:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2220      	movs	r2, #32
 800644a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e00f      	b.n	8006486 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4013      	ands	r3, r2
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	429a      	cmp	r2, r3
 8006474:	bf0c      	ite	eq
 8006476:	2301      	moveq	r3, #1
 8006478:	2300      	movne	r3, #0
 800647a:	b2db      	uxtb	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	79fb      	ldrb	r3, [r7, #7]
 8006480:	429a      	cmp	r2, r3
 8006482:	d091      	beq.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c2:	d10e      	bne.n	80064e2 <UART_Start_Receive_IT+0x52>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d105      	bne.n	80064d8 <UART_Start_Receive_IT+0x48>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064d6:	e02d      	b.n	8006534 <UART_Start_Receive_IT+0xa4>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	22ff      	movs	r2, #255	; 0xff
 80064dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064e0:	e028      	b.n	8006534 <UART_Start_Receive_IT+0xa4>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10d      	bne.n	8006506 <UART_Start_Receive_IT+0x76>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <UART_Start_Receive_IT+0x6c>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	22ff      	movs	r2, #255	; 0xff
 80064f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064fa:	e01b      	b.n	8006534 <UART_Start_Receive_IT+0xa4>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	227f      	movs	r2, #127	; 0x7f
 8006500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006504:	e016      	b.n	8006534 <UART_Start_Receive_IT+0xa4>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800650e:	d10d      	bne.n	800652c <UART_Start_Receive_IT+0x9c>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <UART_Start_Receive_IT+0x92>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	227f      	movs	r2, #127	; 0x7f
 800651c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006520:	e008      	b.n	8006534 <UART_Start_Receive_IT+0xa4>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	223f      	movs	r2, #63	; 0x3f
 8006526:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800652a:	e003      	b.n	8006534 <UART_Start_Receive_IT+0xa4>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2222      	movs	r2, #34	; 0x22
 8006540:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655a:	d107      	bne.n	800656c <UART_Start_Receive_IT+0xdc>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <UART_Start_Receive_IT+0x108>)
 8006568:	665a      	str	r2, [r3, #100]	; 0x64
 800656a:	e002      	b.n	8006572 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a0b      	ldr	r2, [pc, #44]	; (800659c <UART_Start_Receive_IT+0x10c>)
 8006570:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006588:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	08006731 	.word	0x08006731
 800659c:	0800665d 	.word	0x0800665d

080065a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0201 	bic.w	r2, r2, #1
 80065c6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d107      	bne.n	80065e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0210 	bic.w	r2, r2, #16
 80065de:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2220      	movs	r2, #32
 80065e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff fb4d 	bl	8005cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006640:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fb2a 	bl	8005ca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800666a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006670:	2b22      	cmp	r3, #34	; 0x22
 8006672:	d151      	bne.n	8006718 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800667c:	89bb      	ldrh	r3, [r7, #12]
 800667e:	b2d9      	uxtb	r1, r3
 8006680:	89fb      	ldrh	r3, [r7, #14]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006688:	400a      	ands	r2, r1
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d138      	bne.n	8006728 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066c4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d10f      	bne.n	800670a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0210 	bic.w	r2, r2, #16
 80066f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fae4 	bl	8005cd0 <HAL_UARTEx_RxEventCallback>
 8006708:	e002      	b.n	8006710 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fb f992 	bl	8001a34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006716:	e007      	b.n	8006728 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0208 	orr.w	r2, r2, #8
 8006726:	619a      	str	r2, [r3, #24]
}
 8006728:	bf00      	nop
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800673e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006744:	2b22      	cmp	r3, #34	; 0x22
 8006746:	d151      	bne.n	80067ec <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006754:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006756:	89ba      	ldrh	r2, [r7, #12]
 8006758:	89fb      	ldrh	r3, [r7, #14]
 800675a:	4013      	ands	r3, r2
 800675c:	b29a      	uxth	r2, r3
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006766:	1c9a      	adds	r2, r3, #2
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d138      	bne.n	80067fc <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006798:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0201 	bic.w	r2, r2, #1
 80067a8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d10f      	bne.n	80067de <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0210 	bic.w	r2, r2, #16
 80067cc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff fa7a 	bl	8005cd0 <HAL_UARTEx_RxEventCallback>
 80067dc:	e002      	b.n	80067e4 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fb f928 	bl	8001a34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067ea:	e007      	b.n	80067fc <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0208 	orr.w	r2, r2, #8
 80067fa:	619a      	str	r2, [r3, #24]
}
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <__errno>:
 8006804:	4b01      	ldr	r3, [pc, #4]	; (800680c <__errno+0x8>)
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	20000154 	.word	0x20000154

08006810 <__libc_init_array>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	4d0d      	ldr	r5, [pc, #52]	; (8006848 <__libc_init_array+0x38>)
 8006814:	4c0d      	ldr	r4, [pc, #52]	; (800684c <__libc_init_array+0x3c>)
 8006816:	1b64      	subs	r4, r4, r5
 8006818:	10a4      	asrs	r4, r4, #2
 800681a:	2600      	movs	r6, #0
 800681c:	42a6      	cmp	r6, r4
 800681e:	d109      	bne.n	8006834 <__libc_init_array+0x24>
 8006820:	4d0b      	ldr	r5, [pc, #44]	; (8006850 <__libc_init_array+0x40>)
 8006822:	4c0c      	ldr	r4, [pc, #48]	; (8006854 <__libc_init_array+0x44>)
 8006824:	f002 fcfe 	bl	8009224 <_init>
 8006828:	1b64      	subs	r4, r4, r5
 800682a:	10a4      	asrs	r4, r4, #2
 800682c:	2600      	movs	r6, #0
 800682e:	42a6      	cmp	r6, r4
 8006830:	d105      	bne.n	800683e <__libc_init_array+0x2e>
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	f855 3b04 	ldr.w	r3, [r5], #4
 8006838:	4798      	blx	r3
 800683a:	3601      	adds	r6, #1
 800683c:	e7ee      	b.n	800681c <__libc_init_array+0xc>
 800683e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006842:	4798      	blx	r3
 8006844:	3601      	adds	r6, #1
 8006846:	e7f2      	b.n	800682e <__libc_init_array+0x1e>
 8006848:	08009764 	.word	0x08009764
 800684c:	08009764 	.word	0x08009764
 8006850:	08009764 	.word	0x08009764
 8006854:	08009768 	.word	0x08009768

08006858 <malloc>:
 8006858:	4b02      	ldr	r3, [pc, #8]	; (8006864 <malloc+0xc>)
 800685a:	4601      	mov	r1, r0
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	f000 b863 	b.w	8006928 <_malloc_r>
 8006862:	bf00      	nop
 8006864:	20000154 	.word	0x20000154

08006868 <free>:
 8006868:	4b02      	ldr	r3, [pc, #8]	; (8006874 <free+0xc>)
 800686a:	4601      	mov	r1, r0
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	f000 b80b 	b.w	8006888 <_free_r>
 8006872:	bf00      	nop
 8006874:	20000154 	.word	0x20000154

08006878 <memset>:
 8006878:	4402      	add	r2, r0
 800687a:	4603      	mov	r3, r0
 800687c:	4293      	cmp	r3, r2
 800687e:	d100      	bne.n	8006882 <memset+0xa>
 8006880:	4770      	bx	lr
 8006882:	f803 1b01 	strb.w	r1, [r3], #1
 8006886:	e7f9      	b.n	800687c <memset+0x4>

08006888 <_free_r>:
 8006888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800688a:	2900      	cmp	r1, #0
 800688c:	d048      	beq.n	8006920 <_free_r+0x98>
 800688e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006892:	9001      	str	r0, [sp, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f1a1 0404 	sub.w	r4, r1, #4
 800689a:	bfb8      	it	lt
 800689c:	18e4      	addlt	r4, r4, r3
 800689e:	f001 fbad 	bl	8007ffc <__malloc_lock>
 80068a2:	4a20      	ldr	r2, [pc, #128]	; (8006924 <_free_r+0x9c>)
 80068a4:	9801      	ldr	r0, [sp, #4]
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	4615      	mov	r5, r2
 80068aa:	b933      	cbnz	r3, 80068ba <_free_r+0x32>
 80068ac:	6063      	str	r3, [r4, #4]
 80068ae:	6014      	str	r4, [r2, #0]
 80068b0:	b003      	add	sp, #12
 80068b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068b6:	f001 bba7 	b.w	8008008 <__malloc_unlock>
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	d90b      	bls.n	80068d6 <_free_r+0x4e>
 80068be:	6821      	ldr	r1, [r4, #0]
 80068c0:	1862      	adds	r2, r4, r1
 80068c2:	4293      	cmp	r3, r2
 80068c4:	bf04      	itt	eq
 80068c6:	681a      	ldreq	r2, [r3, #0]
 80068c8:	685b      	ldreq	r3, [r3, #4]
 80068ca:	6063      	str	r3, [r4, #4]
 80068cc:	bf04      	itt	eq
 80068ce:	1852      	addeq	r2, r2, r1
 80068d0:	6022      	streq	r2, [r4, #0]
 80068d2:	602c      	str	r4, [r5, #0]
 80068d4:	e7ec      	b.n	80068b0 <_free_r+0x28>
 80068d6:	461a      	mov	r2, r3
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	b10b      	cbz	r3, 80068e0 <_free_r+0x58>
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d9fa      	bls.n	80068d6 <_free_r+0x4e>
 80068e0:	6811      	ldr	r1, [r2, #0]
 80068e2:	1855      	adds	r5, r2, r1
 80068e4:	42a5      	cmp	r5, r4
 80068e6:	d10b      	bne.n	8006900 <_free_r+0x78>
 80068e8:	6824      	ldr	r4, [r4, #0]
 80068ea:	4421      	add	r1, r4
 80068ec:	1854      	adds	r4, r2, r1
 80068ee:	42a3      	cmp	r3, r4
 80068f0:	6011      	str	r1, [r2, #0]
 80068f2:	d1dd      	bne.n	80068b0 <_free_r+0x28>
 80068f4:	681c      	ldr	r4, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	6053      	str	r3, [r2, #4]
 80068fa:	4421      	add	r1, r4
 80068fc:	6011      	str	r1, [r2, #0]
 80068fe:	e7d7      	b.n	80068b0 <_free_r+0x28>
 8006900:	d902      	bls.n	8006908 <_free_r+0x80>
 8006902:	230c      	movs	r3, #12
 8006904:	6003      	str	r3, [r0, #0]
 8006906:	e7d3      	b.n	80068b0 <_free_r+0x28>
 8006908:	6825      	ldr	r5, [r4, #0]
 800690a:	1961      	adds	r1, r4, r5
 800690c:	428b      	cmp	r3, r1
 800690e:	bf04      	itt	eq
 8006910:	6819      	ldreq	r1, [r3, #0]
 8006912:	685b      	ldreq	r3, [r3, #4]
 8006914:	6063      	str	r3, [r4, #4]
 8006916:	bf04      	itt	eq
 8006918:	1949      	addeq	r1, r1, r5
 800691a:	6021      	streq	r1, [r4, #0]
 800691c:	6054      	str	r4, [r2, #4]
 800691e:	e7c7      	b.n	80068b0 <_free_r+0x28>
 8006920:	b003      	add	sp, #12
 8006922:	bd30      	pop	{r4, r5, pc}
 8006924:	2000034c 	.word	0x2000034c

08006928 <_malloc_r>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	1ccd      	adds	r5, r1, #3
 800692c:	f025 0503 	bic.w	r5, r5, #3
 8006930:	3508      	adds	r5, #8
 8006932:	2d0c      	cmp	r5, #12
 8006934:	bf38      	it	cc
 8006936:	250c      	movcc	r5, #12
 8006938:	2d00      	cmp	r5, #0
 800693a:	4606      	mov	r6, r0
 800693c:	db01      	blt.n	8006942 <_malloc_r+0x1a>
 800693e:	42a9      	cmp	r1, r5
 8006940:	d903      	bls.n	800694a <_malloc_r+0x22>
 8006942:	230c      	movs	r3, #12
 8006944:	6033      	str	r3, [r6, #0]
 8006946:	2000      	movs	r0, #0
 8006948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694a:	f001 fb57 	bl	8007ffc <__malloc_lock>
 800694e:	4921      	ldr	r1, [pc, #132]	; (80069d4 <_malloc_r+0xac>)
 8006950:	680a      	ldr	r2, [r1, #0]
 8006952:	4614      	mov	r4, r2
 8006954:	b99c      	cbnz	r4, 800697e <_malloc_r+0x56>
 8006956:	4f20      	ldr	r7, [pc, #128]	; (80069d8 <_malloc_r+0xb0>)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	b923      	cbnz	r3, 8006966 <_malloc_r+0x3e>
 800695c:	4621      	mov	r1, r4
 800695e:	4630      	mov	r0, r6
 8006960:	f000 fc88 	bl	8007274 <_sbrk_r>
 8006964:	6038      	str	r0, [r7, #0]
 8006966:	4629      	mov	r1, r5
 8006968:	4630      	mov	r0, r6
 800696a:	f000 fc83 	bl	8007274 <_sbrk_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d123      	bne.n	80069ba <_malloc_r+0x92>
 8006972:	230c      	movs	r3, #12
 8006974:	6033      	str	r3, [r6, #0]
 8006976:	4630      	mov	r0, r6
 8006978:	f001 fb46 	bl	8008008 <__malloc_unlock>
 800697c:	e7e3      	b.n	8006946 <_malloc_r+0x1e>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	1b5b      	subs	r3, r3, r5
 8006982:	d417      	bmi.n	80069b4 <_malloc_r+0x8c>
 8006984:	2b0b      	cmp	r3, #11
 8006986:	d903      	bls.n	8006990 <_malloc_r+0x68>
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	441c      	add	r4, r3
 800698c:	6025      	str	r5, [r4, #0]
 800698e:	e004      	b.n	800699a <_malloc_r+0x72>
 8006990:	6863      	ldr	r3, [r4, #4]
 8006992:	42a2      	cmp	r2, r4
 8006994:	bf0c      	ite	eq
 8006996:	600b      	streq	r3, [r1, #0]
 8006998:	6053      	strne	r3, [r2, #4]
 800699a:	4630      	mov	r0, r6
 800699c:	f001 fb34 	bl	8008008 <__malloc_unlock>
 80069a0:	f104 000b 	add.w	r0, r4, #11
 80069a4:	1d23      	adds	r3, r4, #4
 80069a6:	f020 0007 	bic.w	r0, r0, #7
 80069aa:	1ac2      	subs	r2, r0, r3
 80069ac:	d0cc      	beq.n	8006948 <_malloc_r+0x20>
 80069ae:	1a1b      	subs	r3, r3, r0
 80069b0:	50a3      	str	r3, [r4, r2]
 80069b2:	e7c9      	b.n	8006948 <_malloc_r+0x20>
 80069b4:	4622      	mov	r2, r4
 80069b6:	6864      	ldr	r4, [r4, #4]
 80069b8:	e7cc      	b.n	8006954 <_malloc_r+0x2c>
 80069ba:	1cc4      	adds	r4, r0, #3
 80069bc:	f024 0403 	bic.w	r4, r4, #3
 80069c0:	42a0      	cmp	r0, r4
 80069c2:	d0e3      	beq.n	800698c <_malloc_r+0x64>
 80069c4:	1a21      	subs	r1, r4, r0
 80069c6:	4630      	mov	r0, r6
 80069c8:	f000 fc54 	bl	8007274 <_sbrk_r>
 80069cc:	3001      	adds	r0, #1
 80069ce:	d1dd      	bne.n	800698c <_malloc_r+0x64>
 80069d0:	e7cf      	b.n	8006972 <_malloc_r+0x4a>
 80069d2:	bf00      	nop
 80069d4:	2000034c 	.word	0x2000034c
 80069d8:	20000350 	.word	0x20000350

080069dc <__cvt>:
 80069dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069de:	ed2d 8b02 	vpush	{d8}
 80069e2:	eeb0 8b40 	vmov.f64	d8, d0
 80069e6:	b085      	sub	sp, #20
 80069e8:	4617      	mov	r7, r2
 80069ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80069ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80069ee:	ee18 2a90 	vmov	r2, s17
 80069f2:	f025 0520 	bic.w	r5, r5, #32
 80069f6:	2a00      	cmp	r2, #0
 80069f8:	bfb6      	itet	lt
 80069fa:	222d      	movlt	r2, #45	; 0x2d
 80069fc:	2200      	movge	r2, #0
 80069fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8006a02:	2d46      	cmp	r5, #70	; 0x46
 8006a04:	460c      	mov	r4, r1
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	d004      	beq.n	8006a14 <__cvt+0x38>
 8006a0a:	2d45      	cmp	r5, #69	; 0x45
 8006a0c:	d100      	bne.n	8006a10 <__cvt+0x34>
 8006a0e:	3401      	adds	r4, #1
 8006a10:	2102      	movs	r1, #2
 8006a12:	e000      	b.n	8006a16 <__cvt+0x3a>
 8006a14:	2103      	movs	r1, #3
 8006a16:	ab03      	add	r3, sp, #12
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	ab02      	add	r3, sp, #8
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4622      	mov	r2, r4
 8006a20:	4633      	mov	r3, r6
 8006a22:	eeb0 0b48 	vmov.f64	d0, d8
 8006a26:	f000 fd43 	bl	80074b0 <_dtoa_r>
 8006a2a:	2d47      	cmp	r5, #71	; 0x47
 8006a2c:	d109      	bne.n	8006a42 <__cvt+0x66>
 8006a2e:	07fb      	lsls	r3, r7, #31
 8006a30:	d407      	bmi.n	8006a42 <__cvt+0x66>
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a36:	1a1b      	subs	r3, r3, r0
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	b005      	add	sp, #20
 8006a3c:	ecbd 8b02 	vpop	{d8}
 8006a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a42:	2d46      	cmp	r5, #70	; 0x46
 8006a44:	eb00 0204 	add.w	r2, r0, r4
 8006a48:	d10c      	bne.n	8006a64 <__cvt+0x88>
 8006a4a:	7803      	ldrb	r3, [r0, #0]
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d107      	bne.n	8006a60 <__cvt+0x84>
 8006a50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a58:	bf1c      	itt	ne
 8006a5a:	f1c4 0401 	rsbne	r4, r4, #1
 8006a5e:	6034      	strne	r4, [r6, #0]
 8006a60:	6833      	ldr	r3, [r6, #0]
 8006a62:	441a      	add	r2, r3
 8006a64:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6c:	bf08      	it	eq
 8006a6e:	9203      	streq	r2, [sp, #12]
 8006a70:	2130      	movs	r1, #48	; 0x30
 8006a72:	9b03      	ldr	r3, [sp, #12]
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d2dc      	bcs.n	8006a32 <__cvt+0x56>
 8006a78:	1c5c      	adds	r4, r3, #1
 8006a7a:	9403      	str	r4, [sp, #12]
 8006a7c:	7019      	strb	r1, [r3, #0]
 8006a7e:	e7f8      	b.n	8006a72 <__cvt+0x96>

08006a80 <__exponent>:
 8006a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a82:	4603      	mov	r3, r0
 8006a84:	2900      	cmp	r1, #0
 8006a86:	bfb8      	it	lt
 8006a88:	4249      	neglt	r1, r1
 8006a8a:	f803 2b02 	strb.w	r2, [r3], #2
 8006a8e:	bfb4      	ite	lt
 8006a90:	222d      	movlt	r2, #45	; 0x2d
 8006a92:	222b      	movge	r2, #43	; 0x2b
 8006a94:	2909      	cmp	r1, #9
 8006a96:	7042      	strb	r2, [r0, #1]
 8006a98:	dd2a      	ble.n	8006af0 <__exponent+0x70>
 8006a9a:	f10d 0407 	add.w	r4, sp, #7
 8006a9e:	46a4      	mov	ip, r4
 8006aa0:	270a      	movs	r7, #10
 8006aa2:	46a6      	mov	lr, r4
 8006aa4:	460a      	mov	r2, r1
 8006aa6:	fb91 f6f7 	sdiv	r6, r1, r7
 8006aaa:	fb07 1516 	mls	r5, r7, r6, r1
 8006aae:	3530      	adds	r5, #48	; 0x30
 8006ab0:	2a63      	cmp	r2, #99	; 0x63
 8006ab2:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ab6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006aba:	4631      	mov	r1, r6
 8006abc:	dcf1      	bgt.n	8006aa2 <__exponent+0x22>
 8006abe:	3130      	adds	r1, #48	; 0x30
 8006ac0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ac4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ac8:	1c44      	adds	r4, r0, #1
 8006aca:	4629      	mov	r1, r5
 8006acc:	4561      	cmp	r1, ip
 8006ace:	d30a      	bcc.n	8006ae6 <__exponent+0x66>
 8006ad0:	f10d 0209 	add.w	r2, sp, #9
 8006ad4:	eba2 020e 	sub.w	r2, r2, lr
 8006ad8:	4565      	cmp	r5, ip
 8006ada:	bf88      	it	hi
 8006adc:	2200      	movhi	r2, #0
 8006ade:	4413      	add	r3, r2
 8006ae0:	1a18      	subs	r0, r3, r0
 8006ae2:	b003      	add	sp, #12
 8006ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006aee:	e7ed      	b.n	8006acc <__exponent+0x4c>
 8006af0:	2330      	movs	r3, #48	; 0x30
 8006af2:	3130      	adds	r1, #48	; 0x30
 8006af4:	7083      	strb	r3, [r0, #2]
 8006af6:	70c1      	strb	r1, [r0, #3]
 8006af8:	1d03      	adds	r3, r0, #4
 8006afa:	e7f1      	b.n	8006ae0 <__exponent+0x60>
 8006afc:	0000      	movs	r0, r0
	...

08006b00 <_printf_float>:
 8006b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	b08b      	sub	sp, #44	; 0x2c
 8006b06:	460c      	mov	r4, r1
 8006b08:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	461f      	mov	r7, r3
 8006b10:	4605      	mov	r5, r0
 8006b12:	f001 fa61 	bl	8007fd8 <_localeconv_r>
 8006b16:	f8d0 b000 	ldr.w	fp, [r0]
 8006b1a:	4658      	mov	r0, fp
 8006b1c:	f7f9 fb9a 	bl	8000254 <strlen>
 8006b20:	2300      	movs	r3, #0
 8006b22:	9308      	str	r3, [sp, #32]
 8006b24:	f8d8 3000 	ldr.w	r3, [r8]
 8006b28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b2c:	6822      	ldr	r2, [r4, #0]
 8006b2e:	3307      	adds	r3, #7
 8006b30:	f023 0307 	bic.w	r3, r3, #7
 8006b34:	f103 0108 	add.w	r1, r3, #8
 8006b38:	f8c8 1000 	str.w	r1, [r8]
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b42:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006b46:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006da8 <_printf_float+0x2a8>
 8006b4a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006b4e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006b52:	eeb4 6b47 	vcmp.f64	d6, d7
 8006b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5a:	dd24      	ble.n	8006ba6 <_printf_float+0xa6>
 8006b5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b64:	d502      	bpl.n	8006b6c <_printf_float+0x6c>
 8006b66:	232d      	movs	r3, #45	; 0x2d
 8006b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6c:	4b90      	ldr	r3, [pc, #576]	; (8006db0 <_printf_float+0x2b0>)
 8006b6e:	4891      	ldr	r0, [pc, #580]	; (8006db4 <_printf_float+0x2b4>)
 8006b70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b74:	bf94      	ite	ls
 8006b76:	4698      	movls	r8, r3
 8006b78:	4680      	movhi	r8, r0
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	6123      	str	r3, [r4, #16]
 8006b7e:	f022 0204 	bic.w	r2, r2, #4
 8006b82:	2300      	movs	r3, #0
 8006b84:	6022      	str	r2, [r4, #0]
 8006b86:	9304      	str	r3, [sp, #16]
 8006b88:	9700      	str	r7, [sp, #0]
 8006b8a:	4633      	mov	r3, r6
 8006b8c:	aa09      	add	r2, sp, #36	; 0x24
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 f9d3 	bl	8006f3c <_printf_common>
 8006b96:	3001      	adds	r0, #1
 8006b98:	f040 808a 	bne.w	8006cb0 <_printf_float+0x1b0>
 8006b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba0:	b00b      	add	sp, #44	; 0x2c
 8006ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba6:	eeb4 0b40 	vcmp.f64	d0, d0
 8006baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bae:	d709      	bvc.n	8006bc4 <_printf_float+0xc4>
 8006bb0:	ee10 3a90 	vmov	r3, s1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	bfbc      	itt	lt
 8006bb8:	232d      	movlt	r3, #45	; 0x2d
 8006bba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bbe:	487e      	ldr	r0, [pc, #504]	; (8006db8 <_printf_float+0x2b8>)
 8006bc0:	4b7e      	ldr	r3, [pc, #504]	; (8006dbc <_printf_float+0x2bc>)
 8006bc2:	e7d5      	b.n	8006b70 <_printf_float+0x70>
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006bca:	9104      	str	r1, [sp, #16]
 8006bcc:	1c59      	adds	r1, r3, #1
 8006bce:	d13c      	bne.n	8006c4a <_printf_float+0x14a>
 8006bd0:	2306      	movs	r3, #6
 8006bd2:	6063      	str	r3, [r4, #4]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9303      	str	r3, [sp, #12]
 8006bd8:	ab08      	add	r3, sp, #32
 8006bda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006bde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006be2:	ab07      	add	r3, sp, #28
 8006be4:	6861      	ldr	r1, [r4, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	6022      	str	r2, [r4, #0]
 8006bea:	f10d 031b 	add.w	r3, sp, #27
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f7ff fef4 	bl	80069dc <__cvt>
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	9907      	ldr	r1, [sp, #28]
 8006bf8:	2b47      	cmp	r3, #71	; 0x47
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	d108      	bne.n	8006c10 <_printf_float+0x110>
 8006bfe:	1cc8      	adds	r0, r1, #3
 8006c00:	db02      	blt.n	8006c08 <_printf_float+0x108>
 8006c02:	6863      	ldr	r3, [r4, #4]
 8006c04:	4299      	cmp	r1, r3
 8006c06:	dd41      	ble.n	8006c8c <_printf_float+0x18c>
 8006c08:	f1a9 0902 	sub.w	r9, r9, #2
 8006c0c:	fa5f f989 	uxtb.w	r9, r9
 8006c10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c14:	d820      	bhi.n	8006c58 <_printf_float+0x158>
 8006c16:	3901      	subs	r1, #1
 8006c18:	464a      	mov	r2, r9
 8006c1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c1e:	9107      	str	r1, [sp, #28]
 8006c20:	f7ff ff2e 	bl	8006a80 <__exponent>
 8006c24:	9a08      	ldr	r2, [sp, #32]
 8006c26:	9004      	str	r0, [sp, #16]
 8006c28:	1813      	adds	r3, r2, r0
 8006c2a:	2a01      	cmp	r2, #1
 8006c2c:	6123      	str	r3, [r4, #16]
 8006c2e:	dc02      	bgt.n	8006c36 <_printf_float+0x136>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	07d2      	lsls	r2, r2, #31
 8006c34:	d501      	bpl.n	8006c3a <_printf_float+0x13a>
 8006c36:	3301      	adds	r3, #1
 8006c38:	6123      	str	r3, [r4, #16]
 8006c3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0a2      	beq.n	8006b88 <_printf_float+0x88>
 8006c42:	232d      	movs	r3, #45	; 0x2d
 8006c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c48:	e79e      	b.n	8006b88 <_printf_float+0x88>
 8006c4a:	9904      	ldr	r1, [sp, #16]
 8006c4c:	2947      	cmp	r1, #71	; 0x47
 8006c4e:	d1c1      	bne.n	8006bd4 <_printf_float+0xd4>
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1bf      	bne.n	8006bd4 <_printf_float+0xd4>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e7bc      	b.n	8006bd2 <_printf_float+0xd2>
 8006c58:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006c5c:	d118      	bne.n	8006c90 <_printf_float+0x190>
 8006c5e:	2900      	cmp	r1, #0
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	dd0b      	ble.n	8006c7c <_printf_float+0x17c>
 8006c64:	6121      	str	r1, [r4, #16]
 8006c66:	b913      	cbnz	r3, 8006c6e <_printf_float+0x16e>
 8006c68:	6822      	ldr	r2, [r4, #0]
 8006c6a:	07d0      	lsls	r0, r2, #31
 8006c6c:	d502      	bpl.n	8006c74 <_printf_float+0x174>
 8006c6e:	3301      	adds	r3, #1
 8006c70:	440b      	add	r3, r1
 8006c72:	6123      	str	r3, [r4, #16]
 8006c74:	2300      	movs	r3, #0
 8006c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c78:	9304      	str	r3, [sp, #16]
 8006c7a:	e7de      	b.n	8006c3a <_printf_float+0x13a>
 8006c7c:	b913      	cbnz	r3, 8006c84 <_printf_float+0x184>
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	07d2      	lsls	r2, r2, #31
 8006c82:	d501      	bpl.n	8006c88 <_printf_float+0x188>
 8006c84:	3302      	adds	r3, #2
 8006c86:	e7f4      	b.n	8006c72 <_printf_float+0x172>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e7f2      	b.n	8006c72 <_printf_float+0x172>
 8006c8c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006c90:	9b08      	ldr	r3, [sp, #32]
 8006c92:	4299      	cmp	r1, r3
 8006c94:	db05      	blt.n	8006ca2 <_printf_float+0x1a2>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	6121      	str	r1, [r4, #16]
 8006c9a:	07d8      	lsls	r0, r3, #31
 8006c9c:	d5ea      	bpl.n	8006c74 <_printf_float+0x174>
 8006c9e:	1c4b      	adds	r3, r1, #1
 8006ca0:	e7e7      	b.n	8006c72 <_printf_float+0x172>
 8006ca2:	2900      	cmp	r1, #0
 8006ca4:	bfd4      	ite	le
 8006ca6:	f1c1 0202 	rsble	r2, r1, #2
 8006caa:	2201      	movgt	r2, #1
 8006cac:	4413      	add	r3, r2
 8006cae:	e7e0      	b.n	8006c72 <_printf_float+0x172>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	055a      	lsls	r2, r3, #21
 8006cb4:	d407      	bmi.n	8006cc6 <_printf_float+0x1c6>
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	4642      	mov	r2, r8
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	47b8      	blx	r7
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d12a      	bne.n	8006d1a <_printf_float+0x21a>
 8006cc4:	e76a      	b.n	8006b9c <_printf_float+0x9c>
 8006cc6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cca:	f240 80e2 	bls.w	8006e92 <_printf_float+0x392>
 8006cce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006cd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cda:	d133      	bne.n	8006d44 <_printf_float+0x244>
 8006cdc:	4a38      	ldr	r2, [pc, #224]	; (8006dc0 <_printf_float+0x2c0>)
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	47b8      	blx	r7
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	f43f af58 	beq.w	8006b9c <_printf_float+0x9c>
 8006cec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	db02      	blt.n	8006cfa <_printf_float+0x1fa>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	07d8      	lsls	r0, r3, #31
 8006cf8:	d50f      	bpl.n	8006d1a <_printf_float+0x21a>
 8006cfa:	4653      	mov	r3, sl
 8006cfc:	465a      	mov	r2, fp
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4628      	mov	r0, r5
 8006d02:	47b8      	blx	r7
 8006d04:	3001      	adds	r0, #1
 8006d06:	f43f af49 	beq.w	8006b9c <_printf_float+0x9c>
 8006d0a:	f04f 0800 	mov.w	r8, #0
 8006d0e:	f104 091a 	add.w	r9, r4, #26
 8006d12:	9b08      	ldr	r3, [sp, #32]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	4543      	cmp	r3, r8
 8006d18:	dc09      	bgt.n	8006d2e <_printf_float+0x22e>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	079b      	lsls	r3, r3, #30
 8006d1e:	f100 8108 	bmi.w	8006f32 <_printf_float+0x432>
 8006d22:	68e0      	ldr	r0, [r4, #12]
 8006d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d26:	4298      	cmp	r0, r3
 8006d28:	bfb8      	it	lt
 8006d2a:	4618      	movlt	r0, r3
 8006d2c:	e738      	b.n	8006ba0 <_printf_float+0xa0>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	464a      	mov	r2, r9
 8006d32:	4631      	mov	r1, r6
 8006d34:	4628      	mov	r0, r5
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f43f af2f 	beq.w	8006b9c <_printf_float+0x9c>
 8006d3e:	f108 0801 	add.w	r8, r8, #1
 8006d42:	e7e6      	b.n	8006d12 <_printf_float+0x212>
 8006d44:	9b07      	ldr	r3, [sp, #28]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	dc3c      	bgt.n	8006dc4 <_printf_float+0x2c4>
 8006d4a:	4a1d      	ldr	r2, [pc, #116]	; (8006dc0 <_printf_float+0x2c0>)
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b8      	blx	r7
 8006d54:	3001      	adds	r0, #1
 8006d56:	f43f af21 	beq.w	8006b9c <_printf_float+0x9c>
 8006d5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	d102      	bne.n	8006d68 <_printf_float+0x268>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	07d9      	lsls	r1, r3, #31
 8006d66:	d5d8      	bpl.n	8006d1a <_printf_float+0x21a>
 8006d68:	4653      	mov	r3, sl
 8006d6a:	465a      	mov	r2, fp
 8006d6c:	4631      	mov	r1, r6
 8006d6e:	4628      	mov	r0, r5
 8006d70:	47b8      	blx	r7
 8006d72:	3001      	adds	r0, #1
 8006d74:	f43f af12 	beq.w	8006b9c <_printf_float+0x9c>
 8006d78:	f04f 0900 	mov.w	r9, #0
 8006d7c:	f104 0a1a 	add.w	sl, r4, #26
 8006d80:	9b07      	ldr	r3, [sp, #28]
 8006d82:	425b      	negs	r3, r3
 8006d84:	454b      	cmp	r3, r9
 8006d86:	dc01      	bgt.n	8006d8c <_printf_float+0x28c>
 8006d88:	9b08      	ldr	r3, [sp, #32]
 8006d8a:	e795      	b.n	8006cb8 <_printf_float+0x1b8>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4652      	mov	r2, sl
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f af00 	beq.w	8006b9c <_printf_float+0x9c>
 8006d9c:	f109 0901 	add.w	r9, r9, #1
 8006da0:	e7ee      	b.n	8006d80 <_printf_float+0x280>
 8006da2:	bf00      	nop
 8006da4:	f3af 8000 	nop.w
 8006da8:	ffffffff 	.word	0xffffffff
 8006dac:	7fefffff 	.word	0x7fefffff
 8006db0:	08009318 	.word	0x08009318
 8006db4:	0800931c 	.word	0x0800931c
 8006db8:	08009324 	.word	0x08009324
 8006dbc:	08009320 	.word	0x08009320
 8006dc0:	08009328 	.word	0x08009328
 8006dc4:	9a08      	ldr	r2, [sp, #32]
 8006dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	bfa8      	it	ge
 8006dcc:	461a      	movge	r2, r3
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	4691      	mov	r9, r2
 8006dd2:	dc38      	bgt.n	8006e46 <_printf_float+0x346>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9305      	str	r3, [sp, #20]
 8006dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ddc:	f104 021a 	add.w	r2, r4, #26
 8006de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006de2:	9905      	ldr	r1, [sp, #20]
 8006de4:	9304      	str	r3, [sp, #16]
 8006de6:	eba3 0309 	sub.w	r3, r3, r9
 8006dea:	428b      	cmp	r3, r1
 8006dec:	dc33      	bgt.n	8006e56 <_printf_float+0x356>
 8006dee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	db3c      	blt.n	8006e70 <_printf_float+0x370>
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	07da      	lsls	r2, r3, #31
 8006dfa:	d439      	bmi.n	8006e70 <_printf_float+0x370>
 8006dfc:	9a08      	ldr	r2, [sp, #32]
 8006dfe:	9b04      	ldr	r3, [sp, #16]
 8006e00:	9907      	ldr	r1, [sp, #28]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	eba2 0901 	sub.w	r9, r2, r1
 8006e08:	4599      	cmp	r9, r3
 8006e0a:	bfa8      	it	ge
 8006e0c:	4699      	movge	r9, r3
 8006e0e:	f1b9 0f00 	cmp.w	r9, #0
 8006e12:	dc35      	bgt.n	8006e80 <_printf_float+0x380>
 8006e14:	f04f 0800 	mov.w	r8, #0
 8006e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e1c:	f104 0a1a 	add.w	sl, r4, #26
 8006e20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e24:	1a9b      	subs	r3, r3, r2
 8006e26:	eba3 0309 	sub.w	r3, r3, r9
 8006e2a:	4543      	cmp	r3, r8
 8006e2c:	f77f af75 	ble.w	8006d1a <_printf_float+0x21a>
 8006e30:	2301      	movs	r3, #1
 8006e32:	4652      	mov	r2, sl
 8006e34:	4631      	mov	r1, r6
 8006e36:	4628      	mov	r0, r5
 8006e38:	47b8      	blx	r7
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	f43f aeae 	beq.w	8006b9c <_printf_float+0x9c>
 8006e40:	f108 0801 	add.w	r8, r8, #1
 8006e44:	e7ec      	b.n	8006e20 <_printf_float+0x320>
 8006e46:	4613      	mov	r3, r2
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4642      	mov	r2, r8
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	47b8      	blx	r7
 8006e50:	3001      	adds	r0, #1
 8006e52:	d1bf      	bne.n	8006dd4 <_printf_float+0x2d4>
 8006e54:	e6a2      	b.n	8006b9c <_printf_float+0x9c>
 8006e56:	2301      	movs	r3, #1
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	9204      	str	r2, [sp, #16]
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	f43f ae9b 	beq.w	8006b9c <_printf_float+0x9c>
 8006e66:	9b05      	ldr	r3, [sp, #20]
 8006e68:	9a04      	ldr	r2, [sp, #16]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	9305      	str	r3, [sp, #20]
 8006e6e:	e7b7      	b.n	8006de0 <_printf_float+0x2e0>
 8006e70:	4653      	mov	r3, sl
 8006e72:	465a      	mov	r2, fp
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	d1be      	bne.n	8006dfc <_printf_float+0x2fc>
 8006e7e:	e68d      	b.n	8006b9c <_printf_float+0x9c>
 8006e80:	9a04      	ldr	r2, [sp, #16]
 8006e82:	464b      	mov	r3, r9
 8006e84:	4442      	add	r2, r8
 8006e86:	4631      	mov	r1, r6
 8006e88:	4628      	mov	r0, r5
 8006e8a:	47b8      	blx	r7
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d1c1      	bne.n	8006e14 <_printf_float+0x314>
 8006e90:	e684      	b.n	8006b9c <_printf_float+0x9c>
 8006e92:	9a08      	ldr	r2, [sp, #32]
 8006e94:	2a01      	cmp	r2, #1
 8006e96:	dc01      	bgt.n	8006e9c <_printf_float+0x39c>
 8006e98:	07db      	lsls	r3, r3, #31
 8006e9a:	d537      	bpl.n	8006f0c <_printf_float+0x40c>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4642      	mov	r2, r8
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f43f ae78 	beq.w	8006b9c <_printf_float+0x9c>
 8006eac:	4653      	mov	r3, sl
 8006eae:	465a      	mov	r2, fp
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	47b8      	blx	r7
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	f43f ae70 	beq.w	8006b9c <_printf_float+0x9c>
 8006ebc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006ec0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec8:	d01b      	beq.n	8006f02 <_printf_float+0x402>
 8006eca:	9b08      	ldr	r3, [sp, #32]
 8006ecc:	f108 0201 	add.w	r2, r8, #1
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	47b8      	blx	r7
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d10e      	bne.n	8006efa <_printf_float+0x3fa>
 8006edc:	e65e      	b.n	8006b9c <_printf_float+0x9c>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	464a      	mov	r2, r9
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f43f ae57 	beq.w	8006b9c <_printf_float+0x9c>
 8006eee:	f108 0801 	add.w	r8, r8, #1
 8006ef2:	9b08      	ldr	r3, [sp, #32]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	4543      	cmp	r3, r8
 8006ef8:	dcf1      	bgt.n	8006ede <_printf_float+0x3de>
 8006efa:	9b04      	ldr	r3, [sp, #16]
 8006efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f00:	e6db      	b.n	8006cba <_printf_float+0x1ba>
 8006f02:	f04f 0800 	mov.w	r8, #0
 8006f06:	f104 091a 	add.w	r9, r4, #26
 8006f0a:	e7f2      	b.n	8006ef2 <_printf_float+0x3f2>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4642      	mov	r2, r8
 8006f10:	e7df      	b.n	8006ed2 <_printf_float+0x3d2>
 8006f12:	2301      	movs	r3, #1
 8006f14:	464a      	mov	r2, r9
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f43f ae3d 	beq.w	8006b9c <_printf_float+0x9c>
 8006f22:	f108 0801 	add.w	r8, r8, #1
 8006f26:	68e3      	ldr	r3, [r4, #12]
 8006f28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f2a:	1a5b      	subs	r3, r3, r1
 8006f2c:	4543      	cmp	r3, r8
 8006f2e:	dcf0      	bgt.n	8006f12 <_printf_float+0x412>
 8006f30:	e6f7      	b.n	8006d22 <_printf_float+0x222>
 8006f32:	f04f 0800 	mov.w	r8, #0
 8006f36:	f104 0919 	add.w	r9, r4, #25
 8006f3a:	e7f4      	b.n	8006f26 <_printf_float+0x426>

08006f3c <_printf_common>:
 8006f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	4616      	mov	r6, r2
 8006f42:	4699      	mov	r9, r3
 8006f44:	688a      	ldr	r2, [r1, #8]
 8006f46:	690b      	ldr	r3, [r1, #16]
 8006f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	bfb8      	it	lt
 8006f50:	4613      	movlt	r3, r2
 8006f52:	6033      	str	r3, [r6, #0]
 8006f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f58:	4607      	mov	r7, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	b10a      	cbz	r2, 8006f62 <_printf_common+0x26>
 8006f5e:	3301      	adds	r3, #1
 8006f60:	6033      	str	r3, [r6, #0]
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	0699      	lsls	r1, r3, #26
 8006f66:	bf42      	ittt	mi
 8006f68:	6833      	ldrmi	r3, [r6, #0]
 8006f6a:	3302      	addmi	r3, #2
 8006f6c:	6033      	strmi	r3, [r6, #0]
 8006f6e:	6825      	ldr	r5, [r4, #0]
 8006f70:	f015 0506 	ands.w	r5, r5, #6
 8006f74:	d106      	bne.n	8006f84 <_printf_common+0x48>
 8006f76:	f104 0a19 	add.w	sl, r4, #25
 8006f7a:	68e3      	ldr	r3, [r4, #12]
 8006f7c:	6832      	ldr	r2, [r6, #0]
 8006f7e:	1a9b      	subs	r3, r3, r2
 8006f80:	42ab      	cmp	r3, r5
 8006f82:	dc26      	bgt.n	8006fd2 <_printf_common+0x96>
 8006f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f88:	1e13      	subs	r3, r2, #0
 8006f8a:	6822      	ldr	r2, [r4, #0]
 8006f8c:	bf18      	it	ne
 8006f8e:	2301      	movne	r3, #1
 8006f90:	0692      	lsls	r2, r2, #26
 8006f92:	d42b      	bmi.n	8006fec <_printf_common+0xb0>
 8006f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f98:	4649      	mov	r1, r9
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	47c0      	blx	r8
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d01e      	beq.n	8006fe0 <_printf_common+0xa4>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	68e5      	ldr	r5, [r4, #12]
 8006fa6:	6832      	ldr	r2, [r6, #0]
 8006fa8:	f003 0306 	and.w	r3, r3, #6
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	bf08      	it	eq
 8006fb0:	1aad      	subeq	r5, r5, r2
 8006fb2:	68a3      	ldr	r3, [r4, #8]
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	bf0c      	ite	eq
 8006fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fbc:	2500      	movne	r5, #0
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	bfc4      	itt	gt
 8006fc2:	1a9b      	subgt	r3, r3, r2
 8006fc4:	18ed      	addgt	r5, r5, r3
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	341a      	adds	r4, #26
 8006fca:	42b5      	cmp	r5, r6
 8006fcc:	d11a      	bne.n	8007004 <_printf_common+0xc8>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	e008      	b.n	8006fe4 <_printf_common+0xa8>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4652      	mov	r2, sl
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4638      	mov	r0, r7
 8006fda:	47c0      	blx	r8
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d103      	bne.n	8006fe8 <_printf_common+0xac>
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe8:	3501      	adds	r5, #1
 8006fea:	e7c6      	b.n	8006f7a <_printf_common+0x3e>
 8006fec:	18e1      	adds	r1, r4, r3
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	2030      	movs	r0, #48	; 0x30
 8006ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ff6:	4422      	add	r2, r4
 8006ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007000:	3302      	adds	r3, #2
 8007002:	e7c7      	b.n	8006f94 <_printf_common+0x58>
 8007004:	2301      	movs	r3, #1
 8007006:	4622      	mov	r2, r4
 8007008:	4649      	mov	r1, r9
 800700a:	4638      	mov	r0, r7
 800700c:	47c0      	blx	r8
 800700e:	3001      	adds	r0, #1
 8007010:	d0e6      	beq.n	8006fe0 <_printf_common+0xa4>
 8007012:	3601      	adds	r6, #1
 8007014:	e7d9      	b.n	8006fca <_printf_common+0x8e>
	...

08007018 <_printf_i>:
 8007018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800701c:	460c      	mov	r4, r1
 800701e:	4691      	mov	r9, r2
 8007020:	7e27      	ldrb	r7, [r4, #24]
 8007022:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007024:	2f78      	cmp	r7, #120	; 0x78
 8007026:	4680      	mov	r8, r0
 8007028:	469a      	mov	sl, r3
 800702a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800702e:	d807      	bhi.n	8007040 <_printf_i+0x28>
 8007030:	2f62      	cmp	r7, #98	; 0x62
 8007032:	d80a      	bhi.n	800704a <_printf_i+0x32>
 8007034:	2f00      	cmp	r7, #0
 8007036:	f000 80d8 	beq.w	80071ea <_printf_i+0x1d2>
 800703a:	2f58      	cmp	r7, #88	; 0x58
 800703c:	f000 80a3 	beq.w	8007186 <_printf_i+0x16e>
 8007040:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007048:	e03a      	b.n	80070c0 <_printf_i+0xa8>
 800704a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800704e:	2b15      	cmp	r3, #21
 8007050:	d8f6      	bhi.n	8007040 <_printf_i+0x28>
 8007052:	a001      	add	r0, pc, #4	; (adr r0, 8007058 <_printf_i+0x40>)
 8007054:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007058:	080070b1 	.word	0x080070b1
 800705c:	080070c5 	.word	0x080070c5
 8007060:	08007041 	.word	0x08007041
 8007064:	08007041 	.word	0x08007041
 8007068:	08007041 	.word	0x08007041
 800706c:	08007041 	.word	0x08007041
 8007070:	080070c5 	.word	0x080070c5
 8007074:	08007041 	.word	0x08007041
 8007078:	08007041 	.word	0x08007041
 800707c:	08007041 	.word	0x08007041
 8007080:	08007041 	.word	0x08007041
 8007084:	080071d1 	.word	0x080071d1
 8007088:	080070f5 	.word	0x080070f5
 800708c:	080071b3 	.word	0x080071b3
 8007090:	08007041 	.word	0x08007041
 8007094:	08007041 	.word	0x08007041
 8007098:	080071f3 	.word	0x080071f3
 800709c:	08007041 	.word	0x08007041
 80070a0:	080070f5 	.word	0x080070f5
 80070a4:	08007041 	.word	0x08007041
 80070a8:	08007041 	.word	0x08007041
 80070ac:	080071bb 	.word	0x080071bb
 80070b0:	680b      	ldr	r3, [r1, #0]
 80070b2:	1d1a      	adds	r2, r3, #4
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	600a      	str	r2, [r1, #0]
 80070b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070c0:	2301      	movs	r3, #1
 80070c2:	e0a3      	b.n	800720c <_printf_i+0x1f4>
 80070c4:	6825      	ldr	r5, [r4, #0]
 80070c6:	6808      	ldr	r0, [r1, #0]
 80070c8:	062e      	lsls	r6, r5, #24
 80070ca:	f100 0304 	add.w	r3, r0, #4
 80070ce:	d50a      	bpl.n	80070e6 <_printf_i+0xce>
 80070d0:	6805      	ldr	r5, [r0, #0]
 80070d2:	600b      	str	r3, [r1, #0]
 80070d4:	2d00      	cmp	r5, #0
 80070d6:	da03      	bge.n	80070e0 <_printf_i+0xc8>
 80070d8:	232d      	movs	r3, #45	; 0x2d
 80070da:	426d      	negs	r5, r5
 80070dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e0:	485e      	ldr	r0, [pc, #376]	; (800725c <_printf_i+0x244>)
 80070e2:	230a      	movs	r3, #10
 80070e4:	e019      	b.n	800711a <_printf_i+0x102>
 80070e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070ea:	6805      	ldr	r5, [r0, #0]
 80070ec:	600b      	str	r3, [r1, #0]
 80070ee:	bf18      	it	ne
 80070f0:	b22d      	sxthne	r5, r5
 80070f2:	e7ef      	b.n	80070d4 <_printf_i+0xbc>
 80070f4:	680b      	ldr	r3, [r1, #0]
 80070f6:	6825      	ldr	r5, [r4, #0]
 80070f8:	1d18      	adds	r0, r3, #4
 80070fa:	6008      	str	r0, [r1, #0]
 80070fc:	0628      	lsls	r0, r5, #24
 80070fe:	d501      	bpl.n	8007104 <_printf_i+0xec>
 8007100:	681d      	ldr	r5, [r3, #0]
 8007102:	e002      	b.n	800710a <_printf_i+0xf2>
 8007104:	0669      	lsls	r1, r5, #25
 8007106:	d5fb      	bpl.n	8007100 <_printf_i+0xe8>
 8007108:	881d      	ldrh	r5, [r3, #0]
 800710a:	4854      	ldr	r0, [pc, #336]	; (800725c <_printf_i+0x244>)
 800710c:	2f6f      	cmp	r7, #111	; 0x6f
 800710e:	bf0c      	ite	eq
 8007110:	2308      	moveq	r3, #8
 8007112:	230a      	movne	r3, #10
 8007114:	2100      	movs	r1, #0
 8007116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800711a:	6866      	ldr	r6, [r4, #4]
 800711c:	60a6      	str	r6, [r4, #8]
 800711e:	2e00      	cmp	r6, #0
 8007120:	bfa2      	ittt	ge
 8007122:	6821      	ldrge	r1, [r4, #0]
 8007124:	f021 0104 	bicge.w	r1, r1, #4
 8007128:	6021      	strge	r1, [r4, #0]
 800712a:	b90d      	cbnz	r5, 8007130 <_printf_i+0x118>
 800712c:	2e00      	cmp	r6, #0
 800712e:	d04d      	beq.n	80071cc <_printf_i+0x1b4>
 8007130:	4616      	mov	r6, r2
 8007132:	fbb5 f1f3 	udiv	r1, r5, r3
 8007136:	fb03 5711 	mls	r7, r3, r1, r5
 800713a:	5dc7      	ldrb	r7, [r0, r7]
 800713c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007140:	462f      	mov	r7, r5
 8007142:	42bb      	cmp	r3, r7
 8007144:	460d      	mov	r5, r1
 8007146:	d9f4      	bls.n	8007132 <_printf_i+0x11a>
 8007148:	2b08      	cmp	r3, #8
 800714a:	d10b      	bne.n	8007164 <_printf_i+0x14c>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	07df      	lsls	r7, r3, #31
 8007150:	d508      	bpl.n	8007164 <_printf_i+0x14c>
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	6861      	ldr	r1, [r4, #4]
 8007156:	4299      	cmp	r1, r3
 8007158:	bfde      	ittt	le
 800715a:	2330      	movle	r3, #48	; 0x30
 800715c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007160:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007164:	1b92      	subs	r2, r2, r6
 8007166:	6122      	str	r2, [r4, #16]
 8007168:	f8cd a000 	str.w	sl, [sp]
 800716c:	464b      	mov	r3, r9
 800716e:	aa03      	add	r2, sp, #12
 8007170:	4621      	mov	r1, r4
 8007172:	4640      	mov	r0, r8
 8007174:	f7ff fee2 	bl	8006f3c <_printf_common>
 8007178:	3001      	adds	r0, #1
 800717a:	d14c      	bne.n	8007216 <_printf_i+0x1fe>
 800717c:	f04f 30ff 	mov.w	r0, #4294967295
 8007180:	b004      	add	sp, #16
 8007182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007186:	4835      	ldr	r0, [pc, #212]	; (800725c <_printf_i+0x244>)
 8007188:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	680e      	ldr	r6, [r1, #0]
 8007190:	061f      	lsls	r7, r3, #24
 8007192:	f856 5b04 	ldr.w	r5, [r6], #4
 8007196:	600e      	str	r6, [r1, #0]
 8007198:	d514      	bpl.n	80071c4 <_printf_i+0x1ac>
 800719a:	07d9      	lsls	r1, r3, #31
 800719c:	bf44      	itt	mi
 800719e:	f043 0320 	orrmi.w	r3, r3, #32
 80071a2:	6023      	strmi	r3, [r4, #0]
 80071a4:	b91d      	cbnz	r5, 80071ae <_printf_i+0x196>
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	f023 0320 	bic.w	r3, r3, #32
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	2310      	movs	r3, #16
 80071b0:	e7b0      	b.n	8007114 <_printf_i+0xfc>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	f043 0320 	orr.w	r3, r3, #32
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	2378      	movs	r3, #120	; 0x78
 80071bc:	4828      	ldr	r0, [pc, #160]	; (8007260 <_printf_i+0x248>)
 80071be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071c2:	e7e3      	b.n	800718c <_printf_i+0x174>
 80071c4:	065e      	lsls	r6, r3, #25
 80071c6:	bf48      	it	mi
 80071c8:	b2ad      	uxthmi	r5, r5
 80071ca:	e7e6      	b.n	800719a <_printf_i+0x182>
 80071cc:	4616      	mov	r6, r2
 80071ce:	e7bb      	b.n	8007148 <_printf_i+0x130>
 80071d0:	680b      	ldr	r3, [r1, #0]
 80071d2:	6826      	ldr	r6, [r4, #0]
 80071d4:	6960      	ldr	r0, [r4, #20]
 80071d6:	1d1d      	adds	r5, r3, #4
 80071d8:	600d      	str	r5, [r1, #0]
 80071da:	0635      	lsls	r5, r6, #24
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	d501      	bpl.n	80071e4 <_printf_i+0x1cc>
 80071e0:	6018      	str	r0, [r3, #0]
 80071e2:	e002      	b.n	80071ea <_printf_i+0x1d2>
 80071e4:	0671      	lsls	r1, r6, #25
 80071e6:	d5fb      	bpl.n	80071e0 <_printf_i+0x1c8>
 80071e8:	8018      	strh	r0, [r3, #0]
 80071ea:	2300      	movs	r3, #0
 80071ec:	6123      	str	r3, [r4, #16]
 80071ee:	4616      	mov	r6, r2
 80071f0:	e7ba      	b.n	8007168 <_printf_i+0x150>
 80071f2:	680b      	ldr	r3, [r1, #0]
 80071f4:	1d1a      	adds	r2, r3, #4
 80071f6:	600a      	str	r2, [r1, #0]
 80071f8:	681e      	ldr	r6, [r3, #0]
 80071fa:	6862      	ldr	r2, [r4, #4]
 80071fc:	2100      	movs	r1, #0
 80071fe:	4630      	mov	r0, r6
 8007200:	f7f9 f836 	bl	8000270 <memchr>
 8007204:	b108      	cbz	r0, 800720a <_printf_i+0x1f2>
 8007206:	1b80      	subs	r0, r0, r6
 8007208:	6060      	str	r0, [r4, #4]
 800720a:	6863      	ldr	r3, [r4, #4]
 800720c:	6123      	str	r3, [r4, #16]
 800720e:	2300      	movs	r3, #0
 8007210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007214:	e7a8      	b.n	8007168 <_printf_i+0x150>
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	4632      	mov	r2, r6
 800721a:	4649      	mov	r1, r9
 800721c:	4640      	mov	r0, r8
 800721e:	47d0      	blx	sl
 8007220:	3001      	adds	r0, #1
 8007222:	d0ab      	beq.n	800717c <_printf_i+0x164>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	079b      	lsls	r3, r3, #30
 8007228:	d413      	bmi.n	8007252 <_printf_i+0x23a>
 800722a:	68e0      	ldr	r0, [r4, #12]
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	4298      	cmp	r0, r3
 8007230:	bfb8      	it	lt
 8007232:	4618      	movlt	r0, r3
 8007234:	e7a4      	b.n	8007180 <_printf_i+0x168>
 8007236:	2301      	movs	r3, #1
 8007238:	4632      	mov	r2, r6
 800723a:	4649      	mov	r1, r9
 800723c:	4640      	mov	r0, r8
 800723e:	47d0      	blx	sl
 8007240:	3001      	adds	r0, #1
 8007242:	d09b      	beq.n	800717c <_printf_i+0x164>
 8007244:	3501      	adds	r5, #1
 8007246:	68e3      	ldr	r3, [r4, #12]
 8007248:	9903      	ldr	r1, [sp, #12]
 800724a:	1a5b      	subs	r3, r3, r1
 800724c:	42ab      	cmp	r3, r5
 800724e:	dcf2      	bgt.n	8007236 <_printf_i+0x21e>
 8007250:	e7eb      	b.n	800722a <_printf_i+0x212>
 8007252:	2500      	movs	r5, #0
 8007254:	f104 0619 	add.w	r6, r4, #25
 8007258:	e7f5      	b.n	8007246 <_printf_i+0x22e>
 800725a:	bf00      	nop
 800725c:	0800932a 	.word	0x0800932a
 8007260:	0800933b 	.word	0x0800933b

08007264 <realloc>:
 8007264:	4b02      	ldr	r3, [pc, #8]	; (8007270 <realloc+0xc>)
 8007266:	460a      	mov	r2, r1
 8007268:	4601      	mov	r1, r0
 800726a:	6818      	ldr	r0, [r3, #0]
 800726c:	f001 ba5f 	b.w	800872e <_realloc_r>
 8007270:	20000154 	.word	0x20000154

08007274 <_sbrk_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d06      	ldr	r5, [pc, #24]	; (8007290 <_sbrk_r+0x1c>)
 8007278:	2300      	movs	r3, #0
 800727a:	4604      	mov	r4, r0
 800727c:	4608      	mov	r0, r1
 800727e:	602b      	str	r3, [r5, #0]
 8007280:	f7f9 fef6 	bl	8001070 <_sbrk>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_sbrk_r+0x1a>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_sbrk_r+0x1a>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	2000074c 	.word	0x2000074c

08007294 <strcpy>:
 8007294:	4603      	mov	r3, r0
 8007296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800729a:	f803 2b01 	strb.w	r2, [r3], #1
 800729e:	2a00      	cmp	r2, #0
 80072a0:	d1f9      	bne.n	8007296 <strcpy+0x2>
 80072a2:	4770      	bx	lr

080072a4 <strtok>:
 80072a4:	4b16      	ldr	r3, [pc, #88]	; (8007300 <strtok+0x5c>)
 80072a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072a8:	681e      	ldr	r6, [r3, #0]
 80072aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80072ac:	4605      	mov	r5, r0
 80072ae:	b9fc      	cbnz	r4, 80072f0 <strtok+0x4c>
 80072b0:	2050      	movs	r0, #80	; 0x50
 80072b2:	9101      	str	r1, [sp, #4]
 80072b4:	f7ff fad0 	bl	8006858 <malloc>
 80072b8:	9901      	ldr	r1, [sp, #4]
 80072ba:	65b0      	str	r0, [r6, #88]	; 0x58
 80072bc:	4602      	mov	r2, r0
 80072be:	b920      	cbnz	r0, 80072ca <strtok+0x26>
 80072c0:	4b10      	ldr	r3, [pc, #64]	; (8007304 <strtok+0x60>)
 80072c2:	4811      	ldr	r0, [pc, #68]	; (8007308 <strtok+0x64>)
 80072c4:	2157      	movs	r1, #87	; 0x57
 80072c6:	f000 f849 	bl	800735c <__assert_func>
 80072ca:	e9c0 4400 	strd	r4, r4, [r0]
 80072ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80072d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80072d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80072da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80072de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80072e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80072e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80072ea:	6184      	str	r4, [r0, #24]
 80072ec:	7704      	strb	r4, [r0, #28]
 80072ee:	6244      	str	r4, [r0, #36]	; 0x24
 80072f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80072f2:	2301      	movs	r3, #1
 80072f4:	4628      	mov	r0, r5
 80072f6:	b002      	add	sp, #8
 80072f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072fc:	f000 b806 	b.w	800730c <__strtok_r>
 8007300:	20000154 	.word	0x20000154
 8007304:	0800934c 	.word	0x0800934c
 8007308:	08009363 	.word	0x08009363

0800730c <__strtok_r>:
 800730c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800730e:	b908      	cbnz	r0, 8007314 <__strtok_r+0x8>
 8007310:	6810      	ldr	r0, [r2, #0]
 8007312:	b188      	cbz	r0, 8007338 <__strtok_r+0x2c>
 8007314:	4604      	mov	r4, r0
 8007316:	4620      	mov	r0, r4
 8007318:	f814 5b01 	ldrb.w	r5, [r4], #1
 800731c:	460f      	mov	r7, r1
 800731e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007322:	b91e      	cbnz	r6, 800732c <__strtok_r+0x20>
 8007324:	b965      	cbnz	r5, 8007340 <__strtok_r+0x34>
 8007326:	6015      	str	r5, [r2, #0]
 8007328:	4628      	mov	r0, r5
 800732a:	e005      	b.n	8007338 <__strtok_r+0x2c>
 800732c:	42b5      	cmp	r5, r6
 800732e:	d1f6      	bne.n	800731e <__strtok_r+0x12>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1f0      	bne.n	8007316 <__strtok_r+0xa>
 8007334:	6014      	str	r4, [r2, #0]
 8007336:	7003      	strb	r3, [r0, #0]
 8007338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800733a:	461c      	mov	r4, r3
 800733c:	e00c      	b.n	8007358 <__strtok_r+0x4c>
 800733e:	b915      	cbnz	r5, 8007346 <__strtok_r+0x3a>
 8007340:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007344:	460e      	mov	r6, r1
 8007346:	f816 5b01 	ldrb.w	r5, [r6], #1
 800734a:	42ab      	cmp	r3, r5
 800734c:	d1f7      	bne.n	800733e <__strtok_r+0x32>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0f3      	beq.n	800733a <__strtok_r+0x2e>
 8007352:	2300      	movs	r3, #0
 8007354:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007358:	6014      	str	r4, [r2, #0]
 800735a:	e7ed      	b.n	8007338 <__strtok_r+0x2c>

0800735c <__assert_func>:
 800735c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800735e:	4614      	mov	r4, r2
 8007360:	461a      	mov	r2, r3
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <__assert_func+0x2c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4605      	mov	r5, r0
 8007368:	68d8      	ldr	r0, [r3, #12]
 800736a:	b14c      	cbz	r4, 8007380 <__assert_func+0x24>
 800736c:	4b07      	ldr	r3, [pc, #28]	; (800738c <__assert_func+0x30>)
 800736e:	9100      	str	r1, [sp, #0]
 8007370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007374:	4906      	ldr	r1, [pc, #24]	; (8007390 <__assert_func+0x34>)
 8007376:	462b      	mov	r3, r5
 8007378:	f000 fe1c 	bl	8007fb4 <fiprintf>
 800737c:	f001 fc16 	bl	8008bac <abort>
 8007380:	4b04      	ldr	r3, [pc, #16]	; (8007394 <__assert_func+0x38>)
 8007382:	461c      	mov	r4, r3
 8007384:	e7f3      	b.n	800736e <__assert_func+0x12>
 8007386:	bf00      	nop
 8007388:	20000154 	.word	0x20000154
 800738c:	080093c4 	.word	0x080093c4
 8007390:	080093d1 	.word	0x080093d1
 8007394:	080093ff 	.word	0x080093ff

08007398 <quorem>:
 8007398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	6903      	ldr	r3, [r0, #16]
 800739e:	690c      	ldr	r4, [r1, #16]
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	4607      	mov	r7, r0
 80073a4:	f2c0 8081 	blt.w	80074aa <quorem+0x112>
 80073a8:	3c01      	subs	r4, #1
 80073aa:	f101 0814 	add.w	r8, r1, #20
 80073ae:	f100 0514 	add.w	r5, r0, #20
 80073b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073c0:	3301      	adds	r3, #1
 80073c2:	429a      	cmp	r2, r3
 80073c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80073d0:	d331      	bcc.n	8007436 <quorem+0x9e>
 80073d2:	f04f 0e00 	mov.w	lr, #0
 80073d6:	4640      	mov	r0, r8
 80073d8:	46ac      	mov	ip, r5
 80073da:	46f2      	mov	sl, lr
 80073dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80073e0:	b293      	uxth	r3, r2
 80073e2:	fb06 e303 	mla	r3, r6, r3, lr
 80073e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	ebaa 0303 	sub.w	r3, sl, r3
 80073f0:	0c12      	lsrs	r2, r2, #16
 80073f2:	f8dc a000 	ldr.w	sl, [ip]
 80073f6:	fb06 e202 	mla	r2, r6, r2, lr
 80073fa:	fa13 f38a 	uxtah	r3, r3, sl
 80073fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007402:	fa1f fa82 	uxth.w	sl, r2
 8007406:	f8dc 2000 	ldr.w	r2, [ip]
 800740a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800740e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007412:	b29b      	uxth	r3, r3
 8007414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007418:	4581      	cmp	r9, r0
 800741a:	f84c 3b04 	str.w	r3, [ip], #4
 800741e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007422:	d2db      	bcs.n	80073dc <quorem+0x44>
 8007424:	f855 300b 	ldr.w	r3, [r5, fp]
 8007428:	b92b      	cbnz	r3, 8007436 <quorem+0x9e>
 800742a:	9b01      	ldr	r3, [sp, #4]
 800742c:	3b04      	subs	r3, #4
 800742e:	429d      	cmp	r5, r3
 8007430:	461a      	mov	r2, r3
 8007432:	d32e      	bcc.n	8007492 <quorem+0xfa>
 8007434:	613c      	str	r4, [r7, #16]
 8007436:	4638      	mov	r0, r7
 8007438:	f001 f86a 	bl	8008510 <__mcmp>
 800743c:	2800      	cmp	r0, #0
 800743e:	db24      	blt.n	800748a <quorem+0xf2>
 8007440:	3601      	adds	r6, #1
 8007442:	4628      	mov	r0, r5
 8007444:	f04f 0c00 	mov.w	ip, #0
 8007448:	f858 2b04 	ldr.w	r2, [r8], #4
 800744c:	f8d0 e000 	ldr.w	lr, [r0]
 8007450:	b293      	uxth	r3, r2
 8007452:	ebac 0303 	sub.w	r3, ip, r3
 8007456:	0c12      	lsrs	r2, r2, #16
 8007458:	fa13 f38e 	uxtah	r3, r3, lr
 800745c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007464:	b29b      	uxth	r3, r3
 8007466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800746a:	45c1      	cmp	r9, r8
 800746c:	f840 3b04 	str.w	r3, [r0], #4
 8007470:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007474:	d2e8      	bcs.n	8007448 <quorem+0xb0>
 8007476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800747a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800747e:	b922      	cbnz	r2, 800748a <quorem+0xf2>
 8007480:	3b04      	subs	r3, #4
 8007482:	429d      	cmp	r5, r3
 8007484:	461a      	mov	r2, r3
 8007486:	d30a      	bcc.n	800749e <quorem+0x106>
 8007488:	613c      	str	r4, [r7, #16]
 800748a:	4630      	mov	r0, r6
 800748c:	b003      	add	sp, #12
 800748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	3b04      	subs	r3, #4
 8007496:	2a00      	cmp	r2, #0
 8007498:	d1cc      	bne.n	8007434 <quorem+0x9c>
 800749a:	3c01      	subs	r4, #1
 800749c:	e7c7      	b.n	800742e <quorem+0x96>
 800749e:	6812      	ldr	r2, [r2, #0]
 80074a0:	3b04      	subs	r3, #4
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	d1f0      	bne.n	8007488 <quorem+0xf0>
 80074a6:	3c01      	subs	r4, #1
 80074a8:	e7eb      	b.n	8007482 <quorem+0xea>
 80074aa:	2000      	movs	r0, #0
 80074ac:	e7ee      	b.n	800748c <quorem+0xf4>
	...

080074b0 <_dtoa_r>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	ec59 8b10 	vmov	r8, r9, d0
 80074b8:	b095      	sub	sp, #84	; 0x54
 80074ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074bc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80074be:	9107      	str	r1, [sp, #28]
 80074c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80074c4:	4606      	mov	r6, r0
 80074c6:	9209      	str	r2, [sp, #36]	; 0x24
 80074c8:	9310      	str	r3, [sp, #64]	; 0x40
 80074ca:	b975      	cbnz	r5, 80074ea <_dtoa_r+0x3a>
 80074cc:	2010      	movs	r0, #16
 80074ce:	f7ff f9c3 	bl	8006858 <malloc>
 80074d2:	4602      	mov	r2, r0
 80074d4:	6270      	str	r0, [r6, #36]	; 0x24
 80074d6:	b920      	cbnz	r0, 80074e2 <_dtoa_r+0x32>
 80074d8:	4bab      	ldr	r3, [pc, #684]	; (8007788 <_dtoa_r+0x2d8>)
 80074da:	21ea      	movs	r1, #234	; 0xea
 80074dc:	48ab      	ldr	r0, [pc, #684]	; (800778c <_dtoa_r+0x2dc>)
 80074de:	f7ff ff3d 	bl	800735c <__assert_func>
 80074e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074e6:	6005      	str	r5, [r0, #0]
 80074e8:	60c5      	str	r5, [r0, #12]
 80074ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80074ec:	6819      	ldr	r1, [r3, #0]
 80074ee:	b151      	cbz	r1, 8007506 <_dtoa_r+0x56>
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	604a      	str	r2, [r1, #4]
 80074f4:	2301      	movs	r3, #1
 80074f6:	4093      	lsls	r3, r2
 80074f8:	608b      	str	r3, [r1, #8]
 80074fa:	4630      	mov	r0, r6
 80074fc:	f000 fdca 	bl	8008094 <_Bfree>
 8007500:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	f1b9 0300 	subs.w	r3, r9, #0
 800750a:	bfbb      	ittet	lt
 800750c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007510:	9303      	strlt	r3, [sp, #12]
 8007512:	2300      	movge	r3, #0
 8007514:	2201      	movlt	r2, #1
 8007516:	bfac      	ite	ge
 8007518:	6023      	strge	r3, [r4, #0]
 800751a:	6022      	strlt	r2, [r4, #0]
 800751c:	4b9c      	ldr	r3, [pc, #624]	; (8007790 <_dtoa_r+0x2e0>)
 800751e:	9c03      	ldr	r4, [sp, #12]
 8007520:	43a3      	bics	r3, r4
 8007522:	d11a      	bne.n	800755a <_dtoa_r+0xaa>
 8007524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007526:	f242 730f 	movw	r3, #9999	; 0x270f
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007530:	ea53 0308 	orrs.w	r3, r3, r8
 8007534:	f000 8512 	beq.w	8007f5c <_dtoa_r+0xaac>
 8007538:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800753a:	b953      	cbnz	r3, 8007552 <_dtoa_r+0xa2>
 800753c:	4b95      	ldr	r3, [pc, #596]	; (8007794 <_dtoa_r+0x2e4>)
 800753e:	e01f      	b.n	8007580 <_dtoa_r+0xd0>
 8007540:	4b95      	ldr	r3, [pc, #596]	; (8007798 <_dtoa_r+0x2e8>)
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	9800      	ldr	r0, [sp, #0]
 800754c:	b015      	add	sp, #84	; 0x54
 800754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007552:	4b90      	ldr	r3, [pc, #576]	; (8007794 <_dtoa_r+0x2e4>)
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	3303      	adds	r3, #3
 8007558:	e7f5      	b.n	8007546 <_dtoa_r+0x96>
 800755a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800755e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007566:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800756a:	d10b      	bne.n	8007584 <_dtoa_r+0xd4>
 800756c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800756e:	2301      	movs	r3, #1
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 84ee 	beq.w	8007f56 <_dtoa_r+0xaa6>
 800757a:	4888      	ldr	r0, [pc, #544]	; (800779c <_dtoa_r+0x2ec>)
 800757c:	6018      	str	r0, [r3, #0]
 800757e:	1e43      	subs	r3, r0, #1
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	e7e2      	b.n	800754a <_dtoa_r+0x9a>
 8007584:	a913      	add	r1, sp, #76	; 0x4c
 8007586:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800758a:	aa12      	add	r2, sp, #72	; 0x48
 800758c:	4630      	mov	r0, r6
 800758e:	f001 f863 	bl	8008658 <__d2b>
 8007592:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007596:	4605      	mov	r5, r0
 8007598:	9812      	ldr	r0, [sp, #72]	; 0x48
 800759a:	2900      	cmp	r1, #0
 800759c:	d047      	beq.n	800762e <_dtoa_r+0x17e>
 800759e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80075a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80075a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075a8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80075ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80075b0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80075b4:	2400      	movs	r4, #0
 80075b6:	ec43 2b16 	vmov	d6, r2, r3
 80075ba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80075be:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8007770 <_dtoa_r+0x2c0>
 80075c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80075c6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007778 <_dtoa_r+0x2c8>
 80075ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80075ce:	eeb0 7b46 	vmov.f64	d7, d6
 80075d2:	ee06 1a90 	vmov	s13, r1
 80075d6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80075da:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007780 <_dtoa_r+0x2d0>
 80075de:	eea5 7b06 	vfma.f64	d7, d5, d6
 80075e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80075e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80075ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ee:	ee16 ba90 	vmov	fp, s13
 80075f2:	9411      	str	r4, [sp, #68]	; 0x44
 80075f4:	d508      	bpl.n	8007608 <_dtoa_r+0x158>
 80075f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80075fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80075fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007602:	bf18      	it	ne
 8007604:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007608:	f1bb 0f16 	cmp.w	fp, #22
 800760c:	d832      	bhi.n	8007674 <_dtoa_r+0x1c4>
 800760e:	4b64      	ldr	r3, [pc, #400]	; (80077a0 <_dtoa_r+0x2f0>)
 8007610:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007614:	ed93 7b00 	vldr	d7, [r3]
 8007618:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800761c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007624:	d501      	bpl.n	800762a <_dtoa_r+0x17a>
 8007626:	f10b 3bff 	add.w	fp, fp, #4294967295
 800762a:	2300      	movs	r3, #0
 800762c:	e023      	b.n	8007676 <_dtoa_r+0x1c6>
 800762e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007630:	4401      	add	r1, r0
 8007632:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007636:	2b20      	cmp	r3, #32
 8007638:	bfc3      	ittte	gt
 800763a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800763e:	fa04 f303 	lslgt.w	r3, r4, r3
 8007642:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007646:	f1c3 0320 	rsble	r3, r3, #32
 800764a:	bfc6      	itte	gt
 800764c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007650:	ea43 0308 	orrgt.w	r3, r3, r8
 8007654:	fa08 f303 	lslle.w	r3, r8, r3
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007660:	3901      	subs	r1, #1
 8007662:	ed8d 7b00 	vstr	d7, [sp]
 8007666:	9c01      	ldr	r4, [sp, #4]
 8007668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800766c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007670:	2401      	movs	r4, #1
 8007672:	e7a0      	b.n	80075b6 <_dtoa_r+0x106>
 8007674:	2301      	movs	r3, #1
 8007676:	930f      	str	r3, [sp, #60]	; 0x3c
 8007678:	1a43      	subs	r3, r0, r1
 800767a:	1e5a      	subs	r2, r3, #1
 800767c:	bf45      	ittet	mi
 800767e:	f1c3 0301 	rsbmi	r3, r3, #1
 8007682:	9305      	strmi	r3, [sp, #20]
 8007684:	2300      	movpl	r3, #0
 8007686:	2300      	movmi	r3, #0
 8007688:	9206      	str	r2, [sp, #24]
 800768a:	bf54      	ite	pl
 800768c:	9305      	strpl	r3, [sp, #20]
 800768e:	9306      	strmi	r3, [sp, #24]
 8007690:	f1bb 0f00 	cmp.w	fp, #0
 8007694:	db18      	blt.n	80076c8 <_dtoa_r+0x218>
 8007696:	9b06      	ldr	r3, [sp, #24]
 8007698:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800769c:	445b      	add	r3, fp
 800769e:	9306      	str	r3, [sp, #24]
 80076a0:	2300      	movs	r3, #0
 80076a2:	9a07      	ldr	r2, [sp, #28]
 80076a4:	2a09      	cmp	r2, #9
 80076a6:	d849      	bhi.n	800773c <_dtoa_r+0x28c>
 80076a8:	2a05      	cmp	r2, #5
 80076aa:	bfc4      	itt	gt
 80076ac:	3a04      	subgt	r2, #4
 80076ae:	9207      	strgt	r2, [sp, #28]
 80076b0:	9a07      	ldr	r2, [sp, #28]
 80076b2:	f1a2 0202 	sub.w	r2, r2, #2
 80076b6:	bfcc      	ite	gt
 80076b8:	2400      	movgt	r4, #0
 80076ba:	2401      	movle	r4, #1
 80076bc:	2a03      	cmp	r2, #3
 80076be:	d848      	bhi.n	8007752 <_dtoa_r+0x2a2>
 80076c0:	e8df f002 	tbb	[pc, r2]
 80076c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80076c8:	9b05      	ldr	r3, [sp, #20]
 80076ca:	2200      	movs	r2, #0
 80076cc:	eba3 030b 	sub.w	r3, r3, fp
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	920e      	str	r2, [sp, #56]	; 0x38
 80076d4:	f1cb 0300 	rsb	r3, fp, #0
 80076d8:	e7e3      	b.n	80076a2 <_dtoa_r+0x1f2>
 80076da:	2200      	movs	r2, #0
 80076dc:	9208      	str	r2, [sp, #32]
 80076de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076e0:	2a00      	cmp	r2, #0
 80076e2:	dc39      	bgt.n	8007758 <_dtoa_r+0x2a8>
 80076e4:	f04f 0a01 	mov.w	sl, #1
 80076e8:	46d1      	mov	r9, sl
 80076ea:	4652      	mov	r2, sl
 80076ec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80076f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80076f2:	2100      	movs	r1, #0
 80076f4:	6079      	str	r1, [r7, #4]
 80076f6:	2004      	movs	r0, #4
 80076f8:	f100 0c14 	add.w	ip, r0, #20
 80076fc:	4594      	cmp	ip, r2
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	d92f      	bls.n	8007762 <_dtoa_r+0x2b2>
 8007702:	4630      	mov	r0, r6
 8007704:	930c      	str	r3, [sp, #48]	; 0x30
 8007706:	f000 fc85 	bl	8008014 <_Balloc>
 800770a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800770c:	9000      	str	r0, [sp, #0]
 800770e:	4602      	mov	r2, r0
 8007710:	2800      	cmp	r0, #0
 8007712:	d149      	bne.n	80077a8 <_dtoa_r+0x2f8>
 8007714:	4b23      	ldr	r3, [pc, #140]	; (80077a4 <_dtoa_r+0x2f4>)
 8007716:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800771a:	e6df      	b.n	80074dc <_dtoa_r+0x2c>
 800771c:	2201      	movs	r2, #1
 800771e:	e7dd      	b.n	80076dc <_dtoa_r+0x22c>
 8007720:	2200      	movs	r2, #0
 8007722:	9208      	str	r2, [sp, #32]
 8007724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007726:	eb0b 0a02 	add.w	sl, fp, r2
 800772a:	f10a 0901 	add.w	r9, sl, #1
 800772e:	464a      	mov	r2, r9
 8007730:	2a01      	cmp	r2, #1
 8007732:	bfb8      	it	lt
 8007734:	2201      	movlt	r2, #1
 8007736:	e7db      	b.n	80076f0 <_dtoa_r+0x240>
 8007738:	2201      	movs	r2, #1
 800773a:	e7f2      	b.n	8007722 <_dtoa_r+0x272>
 800773c:	2401      	movs	r4, #1
 800773e:	2200      	movs	r2, #0
 8007740:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007744:	f04f 3aff 	mov.w	sl, #4294967295
 8007748:	2100      	movs	r1, #0
 800774a:	46d1      	mov	r9, sl
 800774c:	2212      	movs	r2, #18
 800774e:	9109      	str	r1, [sp, #36]	; 0x24
 8007750:	e7ce      	b.n	80076f0 <_dtoa_r+0x240>
 8007752:	2201      	movs	r2, #1
 8007754:	9208      	str	r2, [sp, #32]
 8007756:	e7f5      	b.n	8007744 <_dtoa_r+0x294>
 8007758:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800775c:	46d1      	mov	r9, sl
 800775e:	4652      	mov	r2, sl
 8007760:	e7c6      	b.n	80076f0 <_dtoa_r+0x240>
 8007762:	3101      	adds	r1, #1
 8007764:	6079      	str	r1, [r7, #4]
 8007766:	0040      	lsls	r0, r0, #1
 8007768:	e7c6      	b.n	80076f8 <_dtoa_r+0x248>
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w
 8007770:	636f4361 	.word	0x636f4361
 8007774:	3fd287a7 	.word	0x3fd287a7
 8007778:	8b60c8b3 	.word	0x8b60c8b3
 800777c:	3fc68a28 	.word	0x3fc68a28
 8007780:	509f79fb 	.word	0x509f79fb
 8007784:	3fd34413 	.word	0x3fd34413
 8007788:	0800934c 	.word	0x0800934c
 800778c:	0800940d 	.word	0x0800940d
 8007790:	7ff00000 	.word	0x7ff00000
 8007794:	08009409 	.word	0x08009409
 8007798:	08009400 	.word	0x08009400
 800779c:	08009329 	.word	0x08009329
 80077a0:	08009508 	.word	0x08009508
 80077a4:	0800946c 	.word	0x0800946c
 80077a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80077aa:	9900      	ldr	r1, [sp, #0]
 80077ac:	6011      	str	r1, [r2, #0]
 80077ae:	f1b9 0f0e 	cmp.w	r9, #14
 80077b2:	d872      	bhi.n	800789a <_dtoa_r+0x3ea>
 80077b4:	2c00      	cmp	r4, #0
 80077b6:	d070      	beq.n	800789a <_dtoa_r+0x3ea>
 80077b8:	f1bb 0f00 	cmp.w	fp, #0
 80077bc:	f340 80a6 	ble.w	800790c <_dtoa_r+0x45c>
 80077c0:	49ca      	ldr	r1, [pc, #808]	; (8007aec <_dtoa_r+0x63c>)
 80077c2:	f00b 020f 	and.w	r2, fp, #15
 80077c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80077ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80077ce:	ed92 7b00 	vldr	d7, [r2]
 80077d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80077d6:	f000 808d 	beq.w	80078f4 <_dtoa_r+0x444>
 80077da:	4ac5      	ldr	r2, [pc, #788]	; (8007af0 <_dtoa_r+0x640>)
 80077dc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80077e0:	ed92 6b08 	vldr	d6, [r2, #32]
 80077e4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80077e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80077ec:	f001 010f 	and.w	r1, r1, #15
 80077f0:	2203      	movs	r2, #3
 80077f2:	48bf      	ldr	r0, [pc, #764]	; (8007af0 <_dtoa_r+0x640>)
 80077f4:	2900      	cmp	r1, #0
 80077f6:	d17f      	bne.n	80078f8 <_dtoa_r+0x448>
 80077f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80077fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007800:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007804:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007806:	2900      	cmp	r1, #0
 8007808:	f000 80b2 	beq.w	8007970 <_dtoa_r+0x4c0>
 800780c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007810:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007814:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781c:	f140 80a8 	bpl.w	8007970 <_dtoa_r+0x4c0>
 8007820:	f1b9 0f00 	cmp.w	r9, #0
 8007824:	f000 80a4 	beq.w	8007970 <_dtoa_r+0x4c0>
 8007828:	f1ba 0f00 	cmp.w	sl, #0
 800782c:	dd31      	ble.n	8007892 <_dtoa_r+0x3e2>
 800782e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007832:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007836:	ed8d 7b02 	vstr	d7, [sp, #8]
 800783a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800783e:	3201      	adds	r2, #1
 8007840:	4650      	mov	r0, sl
 8007842:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007846:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800784a:	ee07 2a90 	vmov	s15, r2
 800784e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007852:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007856:	ed8d 5b02 	vstr	d5, [sp, #8]
 800785a:	9c03      	ldr	r4, [sp, #12]
 800785c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007860:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007864:	2800      	cmp	r0, #0
 8007866:	f040 8086 	bne.w	8007976 <_dtoa_r+0x4c6>
 800786a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800786e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007872:	ec42 1b17 	vmov	d7, r1, r2
 8007876:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800787a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787e:	f300 8272 	bgt.w	8007d66 <_dtoa_r+0x8b6>
 8007882:	eeb1 7b47 	vneg.f64	d7, d7
 8007886:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800788a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788e:	f100 8267 	bmi.w	8007d60 <_dtoa_r+0x8b0>
 8007892:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8007896:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800789a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800789c:	2a00      	cmp	r2, #0
 800789e:	f2c0 8129 	blt.w	8007af4 <_dtoa_r+0x644>
 80078a2:	f1bb 0f0e 	cmp.w	fp, #14
 80078a6:	f300 8125 	bgt.w	8007af4 <_dtoa_r+0x644>
 80078aa:	4b90      	ldr	r3, [pc, #576]	; (8007aec <_dtoa_r+0x63c>)
 80078ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078b0:	ed93 6b00 	vldr	d6, [r3]
 80078b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f280 80c3 	bge.w	8007a42 <_dtoa_r+0x592>
 80078bc:	f1b9 0f00 	cmp.w	r9, #0
 80078c0:	f300 80bf 	bgt.w	8007a42 <_dtoa_r+0x592>
 80078c4:	f040 824c 	bne.w	8007d60 <_dtoa_r+0x8b0>
 80078c8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80078cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80078d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078dc:	464c      	mov	r4, r9
 80078de:	464f      	mov	r7, r9
 80078e0:	f280 8222 	bge.w	8007d28 <_dtoa_r+0x878>
 80078e4:	f8dd 8000 	ldr.w	r8, [sp]
 80078e8:	2331      	movs	r3, #49	; 0x31
 80078ea:	f808 3b01 	strb.w	r3, [r8], #1
 80078ee:	f10b 0b01 	add.w	fp, fp, #1
 80078f2:	e21e      	b.n	8007d32 <_dtoa_r+0x882>
 80078f4:	2202      	movs	r2, #2
 80078f6:	e77c      	b.n	80077f2 <_dtoa_r+0x342>
 80078f8:	07cc      	lsls	r4, r1, #31
 80078fa:	d504      	bpl.n	8007906 <_dtoa_r+0x456>
 80078fc:	ed90 6b00 	vldr	d6, [r0]
 8007900:	3201      	adds	r2, #1
 8007902:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007906:	1049      	asrs	r1, r1, #1
 8007908:	3008      	adds	r0, #8
 800790a:	e773      	b.n	80077f4 <_dtoa_r+0x344>
 800790c:	d02e      	beq.n	800796c <_dtoa_r+0x4bc>
 800790e:	f1cb 0100 	rsb	r1, fp, #0
 8007912:	4a76      	ldr	r2, [pc, #472]	; (8007aec <_dtoa_r+0x63c>)
 8007914:	f001 000f 	and.w	r0, r1, #15
 8007918:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800791c:	ed92 7b00 	vldr	d7, [r2]
 8007920:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007924:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007928:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800792c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8007930:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007934:	486e      	ldr	r0, [pc, #440]	; (8007af0 <_dtoa_r+0x640>)
 8007936:	1109      	asrs	r1, r1, #4
 8007938:	2400      	movs	r4, #0
 800793a:	2202      	movs	r2, #2
 800793c:	b939      	cbnz	r1, 800794e <_dtoa_r+0x49e>
 800793e:	2c00      	cmp	r4, #0
 8007940:	f43f af60 	beq.w	8007804 <_dtoa_r+0x354>
 8007944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800794c:	e75a      	b.n	8007804 <_dtoa_r+0x354>
 800794e:	07cf      	lsls	r7, r1, #31
 8007950:	d509      	bpl.n	8007966 <_dtoa_r+0x4b6>
 8007952:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007956:	ed90 7b00 	vldr	d7, [r0]
 800795a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800795e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007962:	3201      	adds	r2, #1
 8007964:	2401      	movs	r4, #1
 8007966:	1049      	asrs	r1, r1, #1
 8007968:	3008      	adds	r0, #8
 800796a:	e7e7      	b.n	800793c <_dtoa_r+0x48c>
 800796c:	2202      	movs	r2, #2
 800796e:	e749      	b.n	8007804 <_dtoa_r+0x354>
 8007970:	465f      	mov	r7, fp
 8007972:	4648      	mov	r0, r9
 8007974:	e765      	b.n	8007842 <_dtoa_r+0x392>
 8007976:	ec42 1b17 	vmov	d7, r1, r2
 800797a:	4a5c      	ldr	r2, [pc, #368]	; (8007aec <_dtoa_r+0x63c>)
 800797c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007980:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007984:	9a00      	ldr	r2, [sp, #0]
 8007986:	1814      	adds	r4, r2, r0
 8007988:	9a08      	ldr	r2, [sp, #32]
 800798a:	b352      	cbz	r2, 80079e2 <_dtoa_r+0x532>
 800798c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007990:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007994:	f8dd 8000 	ldr.w	r8, [sp]
 8007998:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800799c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80079a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80079a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80079a8:	ee14 2a90 	vmov	r2, s9
 80079ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80079b0:	3230      	adds	r2, #48	; 0x30
 80079b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80079b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079be:	f808 2b01 	strb.w	r2, [r8], #1
 80079c2:	d439      	bmi.n	8007a38 <_dtoa_r+0x588>
 80079c4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80079c8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80079cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d0:	d472      	bmi.n	8007ab8 <_dtoa_r+0x608>
 80079d2:	45a0      	cmp	r8, r4
 80079d4:	f43f af5d 	beq.w	8007892 <_dtoa_r+0x3e2>
 80079d8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80079dc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80079e0:	e7e0      	b.n	80079a4 <_dtoa_r+0x4f4>
 80079e2:	f8dd 8000 	ldr.w	r8, [sp]
 80079e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80079ea:	4621      	mov	r1, r4
 80079ec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80079f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80079f4:	ee14 2a90 	vmov	r2, s9
 80079f8:	3230      	adds	r2, #48	; 0x30
 80079fa:	f808 2b01 	strb.w	r2, [r8], #1
 80079fe:	45a0      	cmp	r8, r4
 8007a00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007a04:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007a08:	d118      	bne.n	8007a3c <_dtoa_r+0x58c>
 8007a0a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007a0e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007a12:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1a:	dc4d      	bgt.n	8007ab8 <_dtoa_r+0x608>
 8007a1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a20:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a28:	f57f af33 	bpl.w	8007892 <_dtoa_r+0x3e2>
 8007a2c:	4688      	mov	r8, r1
 8007a2e:	3901      	subs	r1, #1
 8007a30:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007a34:	2b30      	cmp	r3, #48	; 0x30
 8007a36:	d0f9      	beq.n	8007a2c <_dtoa_r+0x57c>
 8007a38:	46bb      	mov	fp, r7
 8007a3a:	e02a      	b.n	8007a92 <_dtoa_r+0x5e2>
 8007a3c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007a40:	e7d6      	b.n	80079f0 <_dtoa_r+0x540>
 8007a42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a46:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007a4a:	f8dd 8000 	ldr.w	r8, [sp]
 8007a4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007a52:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007a56:	ee15 3a10 	vmov	r3, s10
 8007a5a:	3330      	adds	r3, #48	; 0x30
 8007a5c:	f808 3b01 	strb.w	r3, [r8], #1
 8007a60:	9b00      	ldr	r3, [sp, #0]
 8007a62:	eba8 0303 	sub.w	r3, r8, r3
 8007a66:	4599      	cmp	r9, r3
 8007a68:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007a6c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007a70:	d133      	bne.n	8007ada <_dtoa_r+0x62a>
 8007a72:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007a76:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7e:	dc1a      	bgt.n	8007ab6 <_dtoa_r+0x606>
 8007a80:	eeb4 7b46 	vcmp.f64	d7, d6
 8007a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a88:	d103      	bne.n	8007a92 <_dtoa_r+0x5e2>
 8007a8a:	ee15 3a10 	vmov	r3, s10
 8007a8e:	07d9      	lsls	r1, r3, #31
 8007a90:	d411      	bmi.n	8007ab6 <_dtoa_r+0x606>
 8007a92:	4629      	mov	r1, r5
 8007a94:	4630      	mov	r0, r6
 8007a96:	f000 fafd 	bl	8008094 <_Bfree>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a9e:	f888 3000 	strb.w	r3, [r8]
 8007aa2:	f10b 0301 	add.w	r3, fp, #1
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f43f ad4d 	beq.w	800754a <_dtoa_r+0x9a>
 8007ab0:	f8c3 8000 	str.w	r8, [r3]
 8007ab4:	e549      	b.n	800754a <_dtoa_r+0x9a>
 8007ab6:	465f      	mov	r7, fp
 8007ab8:	4643      	mov	r3, r8
 8007aba:	4698      	mov	r8, r3
 8007abc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ac0:	2a39      	cmp	r2, #57	; 0x39
 8007ac2:	d106      	bne.n	8007ad2 <_dtoa_r+0x622>
 8007ac4:	9a00      	ldr	r2, [sp, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d1f7      	bne.n	8007aba <_dtoa_r+0x60a>
 8007aca:	9900      	ldr	r1, [sp, #0]
 8007acc:	2230      	movs	r2, #48	; 0x30
 8007ace:	3701      	adds	r7, #1
 8007ad0:	700a      	strb	r2, [r1, #0]
 8007ad2:	781a      	ldrb	r2, [r3, #0]
 8007ad4:	3201      	adds	r2, #1
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	e7ae      	b.n	8007a38 <_dtoa_r+0x588>
 8007ada:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ade:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae6:	d1b2      	bne.n	8007a4e <_dtoa_r+0x59e>
 8007ae8:	e7d3      	b.n	8007a92 <_dtoa_r+0x5e2>
 8007aea:	bf00      	nop
 8007aec:	08009508 	.word	0x08009508
 8007af0:	080094e0 	.word	0x080094e0
 8007af4:	9908      	ldr	r1, [sp, #32]
 8007af6:	2900      	cmp	r1, #0
 8007af8:	f000 80d1 	beq.w	8007c9e <_dtoa_r+0x7ee>
 8007afc:	9907      	ldr	r1, [sp, #28]
 8007afe:	2901      	cmp	r1, #1
 8007b00:	f300 80b4 	bgt.w	8007c6c <_dtoa_r+0x7bc>
 8007b04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007b06:	2900      	cmp	r1, #0
 8007b08:	f000 80ac 	beq.w	8007c64 <_dtoa_r+0x7b4>
 8007b0c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007b14:	461c      	mov	r4, r3
 8007b16:	930a      	str	r3, [sp, #40]	; 0x28
 8007b18:	9b05      	ldr	r3, [sp, #20]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	9305      	str	r3, [sp, #20]
 8007b1e:	9b06      	ldr	r3, [sp, #24]
 8007b20:	2101      	movs	r1, #1
 8007b22:	4413      	add	r3, r2
 8007b24:	4630      	mov	r0, r6
 8007b26:	9306      	str	r3, [sp, #24]
 8007b28:	f000 fb70 	bl	800820c <__i2b>
 8007b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2e:	4607      	mov	r7, r0
 8007b30:	f1b8 0f00 	cmp.w	r8, #0
 8007b34:	dd0d      	ble.n	8007b52 <_dtoa_r+0x6a2>
 8007b36:	9a06      	ldr	r2, [sp, #24]
 8007b38:	2a00      	cmp	r2, #0
 8007b3a:	dd0a      	ble.n	8007b52 <_dtoa_r+0x6a2>
 8007b3c:	4542      	cmp	r2, r8
 8007b3e:	9905      	ldr	r1, [sp, #20]
 8007b40:	bfa8      	it	ge
 8007b42:	4642      	movge	r2, r8
 8007b44:	1a89      	subs	r1, r1, r2
 8007b46:	9105      	str	r1, [sp, #20]
 8007b48:	9906      	ldr	r1, [sp, #24]
 8007b4a:	eba8 0802 	sub.w	r8, r8, r2
 8007b4e:	1a8a      	subs	r2, r1, r2
 8007b50:	9206      	str	r2, [sp, #24]
 8007b52:	b303      	cbz	r3, 8007b96 <_dtoa_r+0x6e6>
 8007b54:	9a08      	ldr	r2, [sp, #32]
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	f000 80a6 	beq.w	8007ca8 <_dtoa_r+0x7f8>
 8007b5c:	2c00      	cmp	r4, #0
 8007b5e:	dd13      	ble.n	8007b88 <_dtoa_r+0x6d8>
 8007b60:	4639      	mov	r1, r7
 8007b62:	4622      	mov	r2, r4
 8007b64:	4630      	mov	r0, r6
 8007b66:	930c      	str	r3, [sp, #48]	; 0x30
 8007b68:	f000 fc0c 	bl	8008384 <__pow5mult>
 8007b6c:	462a      	mov	r2, r5
 8007b6e:	4601      	mov	r1, r0
 8007b70:	4607      	mov	r7, r0
 8007b72:	4630      	mov	r0, r6
 8007b74:	f000 fb60 	bl	8008238 <__multiply>
 8007b78:	4629      	mov	r1, r5
 8007b7a:	900a      	str	r0, [sp, #40]	; 0x28
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f000 fa89 	bl	8008094 <_Bfree>
 8007b82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b86:	4615      	mov	r5, r2
 8007b88:	1b1a      	subs	r2, r3, r4
 8007b8a:	d004      	beq.n	8007b96 <_dtoa_r+0x6e6>
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f000 fbf8 	bl	8008384 <__pow5mult>
 8007b94:	4605      	mov	r5, r0
 8007b96:	2101      	movs	r1, #1
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f000 fb37 	bl	800820c <__i2b>
 8007b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	f340 8082 	ble.w	8007cac <_dtoa_r+0x7fc>
 8007ba8:	461a      	mov	r2, r3
 8007baa:	4601      	mov	r1, r0
 8007bac:	4630      	mov	r0, r6
 8007bae:	f000 fbe9 	bl	8008384 <__pow5mult>
 8007bb2:	9b07      	ldr	r3, [sp, #28]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	dd7b      	ble.n	8007cb2 <_dtoa_r+0x802>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	930a      	str	r3, [sp, #40]	; 0x28
 8007bbe:	6922      	ldr	r2, [r4, #16]
 8007bc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007bc4:	6910      	ldr	r0, [r2, #16]
 8007bc6:	f000 fad1 	bl	800816c <__hi0bits>
 8007bca:	f1c0 0020 	rsb	r0, r0, #32
 8007bce:	9b06      	ldr	r3, [sp, #24]
 8007bd0:	4418      	add	r0, r3
 8007bd2:	f010 001f 	ands.w	r0, r0, #31
 8007bd6:	f000 808d 	beq.w	8007cf4 <_dtoa_r+0x844>
 8007bda:	f1c0 0220 	rsb	r2, r0, #32
 8007bde:	2a04      	cmp	r2, #4
 8007be0:	f340 8086 	ble.w	8007cf0 <_dtoa_r+0x840>
 8007be4:	f1c0 001c 	rsb	r0, r0, #28
 8007be8:	9b05      	ldr	r3, [sp, #20]
 8007bea:	4403      	add	r3, r0
 8007bec:	9305      	str	r3, [sp, #20]
 8007bee:	9b06      	ldr	r3, [sp, #24]
 8007bf0:	4403      	add	r3, r0
 8007bf2:	4480      	add	r8, r0
 8007bf4:	9306      	str	r3, [sp, #24]
 8007bf6:	9b05      	ldr	r3, [sp, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	dd05      	ble.n	8007c08 <_dtoa_r+0x758>
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	461a      	mov	r2, r3
 8007c00:	4630      	mov	r0, r6
 8007c02:	f000 fc19 	bl	8008438 <__lshift>
 8007c06:	4605      	mov	r5, r0
 8007c08:	9b06      	ldr	r3, [sp, #24]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dd05      	ble.n	8007c1a <_dtoa_r+0x76a>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	461a      	mov	r2, r3
 8007c12:	4630      	mov	r0, r6
 8007c14:	f000 fc10 	bl	8008438 <__lshift>
 8007c18:	4604      	mov	r4, r0
 8007c1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d06b      	beq.n	8007cf8 <_dtoa_r+0x848>
 8007c20:	4621      	mov	r1, r4
 8007c22:	4628      	mov	r0, r5
 8007c24:	f000 fc74 	bl	8008510 <__mcmp>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	da65      	bge.n	8007cf8 <_dtoa_r+0x848>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4629      	mov	r1, r5
 8007c30:	220a      	movs	r2, #10
 8007c32:	4630      	mov	r0, r6
 8007c34:	f000 fa50 	bl	80080d8 <__multadd>
 8007c38:	9b08      	ldr	r3, [sp, #32]
 8007c3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c3e:	4605      	mov	r5, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8192 	beq.w	8007f6a <_dtoa_r+0xaba>
 8007c46:	4639      	mov	r1, r7
 8007c48:	2300      	movs	r3, #0
 8007c4a:	220a      	movs	r2, #10
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f000 fa43 	bl	80080d8 <__multadd>
 8007c52:	f1ba 0f00 	cmp.w	sl, #0
 8007c56:	4607      	mov	r7, r0
 8007c58:	f300 808e 	bgt.w	8007d78 <_dtoa_r+0x8c8>
 8007c5c:	9b07      	ldr	r3, [sp, #28]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	dc51      	bgt.n	8007d06 <_dtoa_r+0x856>
 8007c62:	e089      	b.n	8007d78 <_dtoa_r+0x8c8>
 8007c64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007c6a:	e751      	b.n	8007b10 <_dtoa_r+0x660>
 8007c6c:	f109 34ff 	add.w	r4, r9, #4294967295
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	bfbf      	itttt	lt
 8007c74:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007c76:	1ae3      	sublt	r3, r4, r3
 8007c78:	18d2      	addlt	r2, r2, r3
 8007c7a:	4613      	movlt	r3, r2
 8007c7c:	bfb7      	itett	lt
 8007c7e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007c80:	1b1c      	subge	r4, r3, r4
 8007c82:	4623      	movlt	r3, r4
 8007c84:	2400      	movlt	r4, #0
 8007c86:	f1b9 0f00 	cmp.w	r9, #0
 8007c8a:	bfb5      	itete	lt
 8007c8c:	9a05      	ldrlt	r2, [sp, #20]
 8007c8e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8007c92:	eba2 0809 	sublt.w	r8, r2, r9
 8007c96:	464a      	movge	r2, r9
 8007c98:	bfb8      	it	lt
 8007c9a:	2200      	movlt	r2, #0
 8007c9c:	e73b      	b.n	8007b16 <_dtoa_r+0x666>
 8007c9e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007ca2:	9f08      	ldr	r7, [sp, #32]
 8007ca4:	461c      	mov	r4, r3
 8007ca6:	e743      	b.n	8007b30 <_dtoa_r+0x680>
 8007ca8:	461a      	mov	r2, r3
 8007caa:	e76f      	b.n	8007b8c <_dtoa_r+0x6dc>
 8007cac:	9b07      	ldr	r3, [sp, #28]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	dc18      	bgt.n	8007ce4 <_dtoa_r+0x834>
 8007cb2:	9b02      	ldr	r3, [sp, #8]
 8007cb4:	b9b3      	cbnz	r3, 8007ce4 <_dtoa_r+0x834>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007cbc:	b9a2      	cbnz	r2, 8007ce8 <_dtoa_r+0x838>
 8007cbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007cc2:	0d12      	lsrs	r2, r2, #20
 8007cc4:	0512      	lsls	r2, r2, #20
 8007cc6:	b18a      	cbz	r2, 8007cec <_dtoa_r+0x83c>
 8007cc8:	9b05      	ldr	r3, [sp, #20]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	9305      	str	r3, [sp, #20]
 8007cce:	9b06      	ldr	r3, [sp, #24]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	9306      	str	r3, [sp, #24]
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f47f af6f 	bne.w	8007bbe <_dtoa_r+0x70e>
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	e774      	b.n	8007bce <_dtoa_r+0x71e>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e7f6      	b.n	8007cd6 <_dtoa_r+0x826>
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	e7f4      	b.n	8007cd6 <_dtoa_r+0x826>
 8007cec:	920a      	str	r2, [sp, #40]	; 0x28
 8007cee:	e7f3      	b.n	8007cd8 <_dtoa_r+0x828>
 8007cf0:	d081      	beq.n	8007bf6 <_dtoa_r+0x746>
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	301c      	adds	r0, #28
 8007cf6:	e777      	b.n	8007be8 <_dtoa_r+0x738>
 8007cf8:	f1b9 0f00 	cmp.w	r9, #0
 8007cfc:	dc37      	bgt.n	8007d6e <_dtoa_r+0x8be>
 8007cfe:	9b07      	ldr	r3, [sp, #28]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	dd34      	ble.n	8007d6e <_dtoa_r+0x8be>
 8007d04:	46ca      	mov	sl, r9
 8007d06:	f1ba 0f00 	cmp.w	sl, #0
 8007d0a:	d10d      	bne.n	8007d28 <_dtoa_r+0x878>
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	4653      	mov	r3, sl
 8007d10:	2205      	movs	r2, #5
 8007d12:	4630      	mov	r0, r6
 8007d14:	f000 f9e0 	bl	80080d8 <__multadd>
 8007d18:	4601      	mov	r1, r0
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f000 fbf7 	bl	8008510 <__mcmp>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f73f adde 	bgt.w	80078e4 <_dtoa_r+0x434>
 8007d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2a:	f8dd 8000 	ldr.w	r8, [sp]
 8007d2e:	ea6f 0b03 	mvn.w	fp, r3
 8007d32:	f04f 0900 	mov.w	r9, #0
 8007d36:	4621      	mov	r1, r4
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f000 f9ab 	bl	8008094 <_Bfree>
 8007d3e:	2f00      	cmp	r7, #0
 8007d40:	f43f aea7 	beq.w	8007a92 <_dtoa_r+0x5e2>
 8007d44:	f1b9 0f00 	cmp.w	r9, #0
 8007d48:	d005      	beq.n	8007d56 <_dtoa_r+0x8a6>
 8007d4a:	45b9      	cmp	r9, r7
 8007d4c:	d003      	beq.n	8007d56 <_dtoa_r+0x8a6>
 8007d4e:	4649      	mov	r1, r9
 8007d50:	4630      	mov	r0, r6
 8007d52:	f000 f99f 	bl	8008094 <_Bfree>
 8007d56:	4639      	mov	r1, r7
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f000 f99b 	bl	8008094 <_Bfree>
 8007d5e:	e698      	b.n	8007a92 <_dtoa_r+0x5e2>
 8007d60:	2400      	movs	r4, #0
 8007d62:	4627      	mov	r7, r4
 8007d64:	e7e0      	b.n	8007d28 <_dtoa_r+0x878>
 8007d66:	46bb      	mov	fp, r7
 8007d68:	4604      	mov	r4, r0
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	e5ba      	b.n	80078e4 <_dtoa_r+0x434>
 8007d6e:	9b08      	ldr	r3, [sp, #32]
 8007d70:	46ca      	mov	sl, r9
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 8100 	beq.w	8007f78 <_dtoa_r+0xac8>
 8007d78:	f1b8 0f00 	cmp.w	r8, #0
 8007d7c:	dd05      	ble.n	8007d8a <_dtoa_r+0x8da>
 8007d7e:	4639      	mov	r1, r7
 8007d80:	4642      	mov	r2, r8
 8007d82:	4630      	mov	r0, r6
 8007d84:	f000 fb58 	bl	8008438 <__lshift>
 8007d88:	4607      	mov	r7, r0
 8007d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d05d      	beq.n	8007e4c <_dtoa_r+0x99c>
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 f93e 	bl	8008014 <_Balloc>
 8007d98:	4680      	mov	r8, r0
 8007d9a:	b928      	cbnz	r0, 8007da8 <_dtoa_r+0x8f8>
 8007d9c:	4b82      	ldr	r3, [pc, #520]	; (8007fa8 <_dtoa_r+0xaf8>)
 8007d9e:	4602      	mov	r2, r0
 8007da0:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007da4:	f7ff bb9a 	b.w	80074dc <_dtoa_r+0x2c>
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	3202      	adds	r2, #2
 8007dac:	0092      	lsls	r2, r2, #2
 8007dae:	f107 010c 	add.w	r1, r7, #12
 8007db2:	300c      	adds	r0, #12
 8007db4:	f000 f914 	bl	8007fe0 <memcpy>
 8007db8:	2201      	movs	r2, #1
 8007dba:	4641      	mov	r1, r8
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f000 fb3b 	bl	8008438 <__lshift>
 8007dc2:	9b00      	ldr	r3, [sp, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	9305      	str	r3, [sp, #20]
 8007dc8:	9b00      	ldr	r3, [sp, #0]
 8007dca:	4453      	add	r3, sl
 8007dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dce:	9b02      	ldr	r3, [sp, #8]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	46b9      	mov	r9, r7
 8007dd6:	9308      	str	r3, [sp, #32]
 8007dd8:	4607      	mov	r7, r0
 8007dda:	9b05      	ldr	r3, [sp, #20]
 8007ddc:	4621      	mov	r1, r4
 8007dde:	3b01      	subs	r3, #1
 8007de0:	4628      	mov	r0, r5
 8007de2:	9302      	str	r3, [sp, #8]
 8007de4:	f7ff fad8 	bl	8007398 <quorem>
 8007de8:	4603      	mov	r3, r0
 8007dea:	3330      	adds	r3, #48	; 0x30
 8007dec:	9006      	str	r0, [sp, #24]
 8007dee:	4649      	mov	r1, r9
 8007df0:	4628      	mov	r0, r5
 8007df2:	930a      	str	r3, [sp, #40]	; 0x28
 8007df4:	f000 fb8c 	bl	8008510 <__mcmp>
 8007df8:	463a      	mov	r2, r7
 8007dfa:	4682      	mov	sl, r0
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f000 fba2 	bl	8008548 <__mdiff>
 8007e04:	68c2      	ldr	r2, [r0, #12]
 8007e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e08:	4680      	mov	r8, r0
 8007e0a:	bb0a      	cbnz	r2, 8007e50 <_dtoa_r+0x9a0>
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 fb7e 	bl	8008510 <__mcmp>
 8007e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e16:	4602      	mov	r2, r0
 8007e18:	4641      	mov	r1, r8
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	920e      	str	r2, [sp, #56]	; 0x38
 8007e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e20:	f000 f938 	bl	8008094 <_Bfree>
 8007e24:	9b07      	ldr	r3, [sp, #28]
 8007e26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e28:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007e2c:	ea43 0102 	orr.w	r1, r3, r2
 8007e30:	9b08      	ldr	r3, [sp, #32]
 8007e32:	430b      	orrs	r3, r1
 8007e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e36:	d10d      	bne.n	8007e54 <_dtoa_r+0x9a4>
 8007e38:	2b39      	cmp	r3, #57	; 0x39
 8007e3a:	d029      	beq.n	8007e90 <_dtoa_r+0x9e0>
 8007e3c:	f1ba 0f00 	cmp.w	sl, #0
 8007e40:	dd01      	ble.n	8007e46 <_dtoa_r+0x996>
 8007e42:	9b06      	ldr	r3, [sp, #24]
 8007e44:	3331      	adds	r3, #49	; 0x31
 8007e46:	9a02      	ldr	r2, [sp, #8]
 8007e48:	7013      	strb	r3, [r2, #0]
 8007e4a:	e774      	b.n	8007d36 <_dtoa_r+0x886>
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	e7b8      	b.n	8007dc2 <_dtoa_r+0x912>
 8007e50:	2201      	movs	r2, #1
 8007e52:	e7e1      	b.n	8007e18 <_dtoa_r+0x968>
 8007e54:	f1ba 0f00 	cmp.w	sl, #0
 8007e58:	db06      	blt.n	8007e68 <_dtoa_r+0x9b8>
 8007e5a:	9907      	ldr	r1, [sp, #28]
 8007e5c:	ea41 0a0a 	orr.w	sl, r1, sl
 8007e60:	9908      	ldr	r1, [sp, #32]
 8007e62:	ea5a 0101 	orrs.w	r1, sl, r1
 8007e66:	d120      	bne.n	8007eaa <_dtoa_r+0x9fa>
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	ddec      	ble.n	8007e46 <_dtoa_r+0x996>
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	2201      	movs	r2, #1
 8007e70:	4630      	mov	r0, r6
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	f000 fae0 	bl	8008438 <__lshift>
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	f000 fb48 	bl	8008510 <__mcmp>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	9b05      	ldr	r3, [sp, #20]
 8007e84:	dc02      	bgt.n	8007e8c <_dtoa_r+0x9dc>
 8007e86:	d1de      	bne.n	8007e46 <_dtoa_r+0x996>
 8007e88:	07da      	lsls	r2, r3, #31
 8007e8a:	d5dc      	bpl.n	8007e46 <_dtoa_r+0x996>
 8007e8c:	2b39      	cmp	r3, #57	; 0x39
 8007e8e:	d1d8      	bne.n	8007e42 <_dtoa_r+0x992>
 8007e90:	9a02      	ldr	r2, [sp, #8]
 8007e92:	2339      	movs	r3, #57	; 0x39
 8007e94:	7013      	strb	r3, [r2, #0]
 8007e96:	4643      	mov	r3, r8
 8007e98:	4698      	mov	r8, r3
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007ea0:	2a39      	cmp	r2, #57	; 0x39
 8007ea2:	d051      	beq.n	8007f48 <_dtoa_r+0xa98>
 8007ea4:	3201      	adds	r2, #1
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	e745      	b.n	8007d36 <_dtoa_r+0x886>
 8007eaa:	2a00      	cmp	r2, #0
 8007eac:	dd03      	ble.n	8007eb6 <_dtoa_r+0xa06>
 8007eae:	2b39      	cmp	r3, #57	; 0x39
 8007eb0:	d0ee      	beq.n	8007e90 <_dtoa_r+0x9e0>
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	e7c7      	b.n	8007e46 <_dtoa_r+0x996>
 8007eb6:	9a05      	ldr	r2, [sp, #20]
 8007eb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eba:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ebe:	428a      	cmp	r2, r1
 8007ec0:	d02b      	beq.n	8007f1a <_dtoa_r+0xa6a>
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	220a      	movs	r2, #10
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f000 f905 	bl	80080d8 <__multadd>
 8007ece:	45b9      	cmp	r9, r7
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	f04f 0300 	mov.w	r3, #0
 8007ed6:	f04f 020a 	mov.w	r2, #10
 8007eda:	4649      	mov	r1, r9
 8007edc:	4630      	mov	r0, r6
 8007ede:	d107      	bne.n	8007ef0 <_dtoa_r+0xa40>
 8007ee0:	f000 f8fa 	bl	80080d8 <__multadd>
 8007ee4:	4681      	mov	r9, r0
 8007ee6:	4607      	mov	r7, r0
 8007ee8:	9b05      	ldr	r3, [sp, #20]
 8007eea:	3301      	adds	r3, #1
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	e774      	b.n	8007dda <_dtoa_r+0x92a>
 8007ef0:	f000 f8f2 	bl	80080d8 <__multadd>
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	4681      	mov	r9, r0
 8007ef8:	2300      	movs	r3, #0
 8007efa:	220a      	movs	r2, #10
 8007efc:	4630      	mov	r0, r6
 8007efe:	f000 f8eb 	bl	80080d8 <__multadd>
 8007f02:	4607      	mov	r7, r0
 8007f04:	e7f0      	b.n	8007ee8 <_dtoa_r+0xa38>
 8007f06:	f1ba 0f00 	cmp.w	sl, #0
 8007f0a:	9a00      	ldr	r2, [sp, #0]
 8007f0c:	bfcc      	ite	gt
 8007f0e:	46d0      	movgt	r8, sl
 8007f10:	f04f 0801 	movle.w	r8, #1
 8007f14:	4490      	add	r8, r2
 8007f16:	f04f 0900 	mov.w	r9, #0
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	4630      	mov	r0, r6
 8007f20:	9302      	str	r3, [sp, #8]
 8007f22:	f000 fa89 	bl	8008438 <__lshift>
 8007f26:	4621      	mov	r1, r4
 8007f28:	4605      	mov	r5, r0
 8007f2a:	f000 faf1 	bl	8008510 <__mcmp>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	dcb1      	bgt.n	8007e96 <_dtoa_r+0x9e6>
 8007f32:	d102      	bne.n	8007f3a <_dtoa_r+0xa8a>
 8007f34:	9b02      	ldr	r3, [sp, #8]
 8007f36:	07db      	lsls	r3, r3, #31
 8007f38:	d4ad      	bmi.n	8007e96 <_dtoa_r+0x9e6>
 8007f3a:	4643      	mov	r3, r8
 8007f3c:	4698      	mov	r8, r3
 8007f3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f42:	2a30      	cmp	r2, #48	; 0x30
 8007f44:	d0fa      	beq.n	8007f3c <_dtoa_r+0xa8c>
 8007f46:	e6f6      	b.n	8007d36 <_dtoa_r+0x886>
 8007f48:	9a00      	ldr	r2, [sp, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d1a4      	bne.n	8007e98 <_dtoa_r+0x9e8>
 8007f4e:	f10b 0b01 	add.w	fp, fp, #1
 8007f52:	2331      	movs	r3, #49	; 0x31
 8007f54:	e778      	b.n	8007e48 <_dtoa_r+0x998>
 8007f56:	4b15      	ldr	r3, [pc, #84]	; (8007fac <_dtoa_r+0xafc>)
 8007f58:	f7ff bb12 	b.w	8007580 <_dtoa_r+0xd0>
 8007f5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f47f aaee 	bne.w	8007540 <_dtoa_r+0x90>
 8007f64:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <_dtoa_r+0xb00>)
 8007f66:	f7ff bb0b 	b.w	8007580 <_dtoa_r+0xd0>
 8007f6a:	f1ba 0f00 	cmp.w	sl, #0
 8007f6e:	dc03      	bgt.n	8007f78 <_dtoa_r+0xac8>
 8007f70:	9b07      	ldr	r3, [sp, #28]
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	f73f aec7 	bgt.w	8007d06 <_dtoa_r+0x856>
 8007f78:	f8dd 8000 	ldr.w	r8, [sp]
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f7ff fa0a 	bl	8007398 <quorem>
 8007f84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f88:	f808 3b01 	strb.w	r3, [r8], #1
 8007f8c:	9a00      	ldr	r2, [sp, #0]
 8007f8e:	eba8 0202 	sub.w	r2, r8, r2
 8007f92:	4592      	cmp	sl, r2
 8007f94:	ddb7      	ble.n	8007f06 <_dtoa_r+0xa56>
 8007f96:	4629      	mov	r1, r5
 8007f98:	2300      	movs	r3, #0
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f000 f89b 	bl	80080d8 <__multadd>
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	e7ea      	b.n	8007f7c <_dtoa_r+0xacc>
 8007fa6:	bf00      	nop
 8007fa8:	0800946c 	.word	0x0800946c
 8007fac:	08009328 	.word	0x08009328
 8007fb0:	08009400 	.word	0x08009400

08007fb4 <fiprintf>:
 8007fb4:	b40e      	push	{r1, r2, r3}
 8007fb6:	b503      	push	{r0, r1, lr}
 8007fb8:	4601      	mov	r1, r0
 8007fba:	ab03      	add	r3, sp, #12
 8007fbc:	4805      	ldr	r0, [pc, #20]	; (8007fd4 <fiprintf+0x20>)
 8007fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fc2:	6800      	ldr	r0, [r0, #0]
 8007fc4:	9301      	str	r3, [sp, #4]
 8007fc6:	f000 fc01 	bl	80087cc <_vfiprintf_r>
 8007fca:	b002      	add	sp, #8
 8007fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fd0:	b003      	add	sp, #12
 8007fd2:	4770      	bx	lr
 8007fd4:	20000154 	.word	0x20000154

08007fd8 <_localeconv_r>:
 8007fd8:	4800      	ldr	r0, [pc, #0]	; (8007fdc <_localeconv_r+0x4>)
 8007fda:	4770      	bx	lr
 8007fdc:	200002a8 	.word	0x200002a8

08007fe0 <memcpy>:
 8007fe0:	440a      	add	r2, r1
 8007fe2:	4291      	cmp	r1, r2
 8007fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fe8:	d100      	bne.n	8007fec <memcpy+0xc>
 8007fea:	4770      	bx	lr
 8007fec:	b510      	push	{r4, lr}
 8007fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ff6:	4291      	cmp	r1, r2
 8007ff8:	d1f9      	bne.n	8007fee <memcpy+0xe>
 8007ffa:	bd10      	pop	{r4, pc}

08007ffc <__malloc_lock>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	; (8008004 <__malloc_lock+0x8>)
 8007ffe:	f000 bf95 	b.w	8008f2c <__retarget_lock_acquire_recursive>
 8008002:	bf00      	nop
 8008004:	20000754 	.word	0x20000754

08008008 <__malloc_unlock>:
 8008008:	4801      	ldr	r0, [pc, #4]	; (8008010 <__malloc_unlock+0x8>)
 800800a:	f000 bf90 	b.w	8008f2e <__retarget_lock_release_recursive>
 800800e:	bf00      	nop
 8008010:	20000754 	.word	0x20000754

08008014 <_Balloc>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008018:	4604      	mov	r4, r0
 800801a:	460d      	mov	r5, r1
 800801c:	b976      	cbnz	r6, 800803c <_Balloc+0x28>
 800801e:	2010      	movs	r0, #16
 8008020:	f7fe fc1a 	bl	8006858 <malloc>
 8008024:	4602      	mov	r2, r0
 8008026:	6260      	str	r0, [r4, #36]	; 0x24
 8008028:	b920      	cbnz	r0, 8008034 <_Balloc+0x20>
 800802a:	4b18      	ldr	r3, [pc, #96]	; (800808c <_Balloc+0x78>)
 800802c:	4818      	ldr	r0, [pc, #96]	; (8008090 <_Balloc+0x7c>)
 800802e:	2166      	movs	r1, #102	; 0x66
 8008030:	f7ff f994 	bl	800735c <__assert_func>
 8008034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008038:	6006      	str	r6, [r0, #0]
 800803a:	60c6      	str	r6, [r0, #12]
 800803c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800803e:	68f3      	ldr	r3, [r6, #12]
 8008040:	b183      	cbz	r3, 8008064 <_Balloc+0x50>
 8008042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800804a:	b9b8      	cbnz	r0, 800807c <_Balloc+0x68>
 800804c:	2101      	movs	r1, #1
 800804e:	fa01 f605 	lsl.w	r6, r1, r5
 8008052:	1d72      	adds	r2, r6, #5
 8008054:	0092      	lsls	r2, r2, #2
 8008056:	4620      	mov	r0, r4
 8008058:	f000 fb5a 	bl	8008710 <_calloc_r>
 800805c:	b160      	cbz	r0, 8008078 <_Balloc+0x64>
 800805e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008062:	e00e      	b.n	8008082 <_Balloc+0x6e>
 8008064:	2221      	movs	r2, #33	; 0x21
 8008066:	2104      	movs	r1, #4
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fb51 	bl	8008710 <_calloc_r>
 800806e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008070:	60f0      	str	r0, [r6, #12]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e4      	bne.n	8008042 <_Balloc+0x2e>
 8008078:	2000      	movs	r0, #0
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	6802      	ldr	r2, [r0, #0]
 800807e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008082:	2300      	movs	r3, #0
 8008084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008088:	e7f7      	b.n	800807a <_Balloc+0x66>
 800808a:	bf00      	nop
 800808c:	0800934c 	.word	0x0800934c
 8008090:	0800947d 	.word	0x0800947d

08008094 <_Bfree>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008098:	4605      	mov	r5, r0
 800809a:	460c      	mov	r4, r1
 800809c:	b976      	cbnz	r6, 80080bc <_Bfree+0x28>
 800809e:	2010      	movs	r0, #16
 80080a0:	f7fe fbda 	bl	8006858 <malloc>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6268      	str	r0, [r5, #36]	; 0x24
 80080a8:	b920      	cbnz	r0, 80080b4 <_Bfree+0x20>
 80080aa:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <_Bfree+0x3c>)
 80080ac:	4809      	ldr	r0, [pc, #36]	; (80080d4 <_Bfree+0x40>)
 80080ae:	218a      	movs	r1, #138	; 0x8a
 80080b0:	f7ff f954 	bl	800735c <__assert_func>
 80080b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b8:	6006      	str	r6, [r0, #0]
 80080ba:	60c6      	str	r6, [r0, #12]
 80080bc:	b13c      	cbz	r4, 80080ce <_Bfree+0x3a>
 80080be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080c0:	6862      	ldr	r2, [r4, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080c8:	6021      	str	r1, [r4, #0]
 80080ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	0800934c 	.word	0x0800934c
 80080d4:	0800947d 	.word	0x0800947d

080080d8 <__multadd>:
 80080d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	690e      	ldr	r6, [r1, #16]
 80080de:	4607      	mov	r7, r0
 80080e0:	4698      	mov	r8, r3
 80080e2:	460c      	mov	r4, r1
 80080e4:	f101 0014 	add.w	r0, r1, #20
 80080e8:	2300      	movs	r3, #0
 80080ea:	6805      	ldr	r5, [r0, #0]
 80080ec:	b2a9      	uxth	r1, r5
 80080ee:	fb02 8101 	mla	r1, r2, r1, r8
 80080f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80080f6:	0c2d      	lsrs	r5, r5, #16
 80080f8:	fb02 c505 	mla	r5, r2, r5, ip
 80080fc:	b289      	uxth	r1, r1
 80080fe:	3301      	adds	r3, #1
 8008100:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008104:	429e      	cmp	r6, r3
 8008106:	f840 1b04 	str.w	r1, [r0], #4
 800810a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800810e:	dcec      	bgt.n	80080ea <__multadd+0x12>
 8008110:	f1b8 0f00 	cmp.w	r8, #0
 8008114:	d022      	beq.n	800815c <__multadd+0x84>
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	42b3      	cmp	r3, r6
 800811a:	dc19      	bgt.n	8008150 <__multadd+0x78>
 800811c:	6861      	ldr	r1, [r4, #4]
 800811e:	4638      	mov	r0, r7
 8008120:	3101      	adds	r1, #1
 8008122:	f7ff ff77 	bl	8008014 <_Balloc>
 8008126:	4605      	mov	r5, r0
 8008128:	b928      	cbnz	r0, 8008136 <__multadd+0x5e>
 800812a:	4602      	mov	r2, r0
 800812c:	4b0d      	ldr	r3, [pc, #52]	; (8008164 <__multadd+0x8c>)
 800812e:	480e      	ldr	r0, [pc, #56]	; (8008168 <__multadd+0x90>)
 8008130:	21b5      	movs	r1, #181	; 0xb5
 8008132:	f7ff f913 	bl	800735c <__assert_func>
 8008136:	6922      	ldr	r2, [r4, #16]
 8008138:	3202      	adds	r2, #2
 800813a:	f104 010c 	add.w	r1, r4, #12
 800813e:	0092      	lsls	r2, r2, #2
 8008140:	300c      	adds	r0, #12
 8008142:	f7ff ff4d 	bl	8007fe0 <memcpy>
 8008146:	4621      	mov	r1, r4
 8008148:	4638      	mov	r0, r7
 800814a:	f7ff ffa3 	bl	8008094 <_Bfree>
 800814e:	462c      	mov	r4, r5
 8008150:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008154:	3601      	adds	r6, #1
 8008156:	f8c3 8014 	str.w	r8, [r3, #20]
 800815a:	6126      	str	r6, [r4, #16]
 800815c:	4620      	mov	r0, r4
 800815e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008162:	bf00      	nop
 8008164:	0800946c 	.word	0x0800946c
 8008168:	0800947d 	.word	0x0800947d

0800816c <__hi0bits>:
 800816c:	0c03      	lsrs	r3, r0, #16
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	b9d3      	cbnz	r3, 80081a8 <__hi0bits+0x3c>
 8008172:	0400      	lsls	r0, r0, #16
 8008174:	2310      	movs	r3, #16
 8008176:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800817a:	bf04      	itt	eq
 800817c:	0200      	lsleq	r0, r0, #8
 800817e:	3308      	addeq	r3, #8
 8008180:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008184:	bf04      	itt	eq
 8008186:	0100      	lsleq	r0, r0, #4
 8008188:	3304      	addeq	r3, #4
 800818a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800818e:	bf04      	itt	eq
 8008190:	0080      	lsleq	r0, r0, #2
 8008192:	3302      	addeq	r3, #2
 8008194:	2800      	cmp	r0, #0
 8008196:	db05      	blt.n	80081a4 <__hi0bits+0x38>
 8008198:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800819c:	f103 0301 	add.w	r3, r3, #1
 80081a0:	bf08      	it	eq
 80081a2:	2320      	moveq	r3, #32
 80081a4:	4618      	mov	r0, r3
 80081a6:	4770      	bx	lr
 80081a8:	2300      	movs	r3, #0
 80081aa:	e7e4      	b.n	8008176 <__hi0bits+0xa>

080081ac <__lo0bits>:
 80081ac:	6803      	ldr	r3, [r0, #0]
 80081ae:	f013 0207 	ands.w	r2, r3, #7
 80081b2:	4601      	mov	r1, r0
 80081b4:	d00b      	beq.n	80081ce <__lo0bits+0x22>
 80081b6:	07da      	lsls	r2, r3, #31
 80081b8:	d424      	bmi.n	8008204 <__lo0bits+0x58>
 80081ba:	0798      	lsls	r0, r3, #30
 80081bc:	bf49      	itett	mi
 80081be:	085b      	lsrmi	r3, r3, #1
 80081c0:	089b      	lsrpl	r3, r3, #2
 80081c2:	2001      	movmi	r0, #1
 80081c4:	600b      	strmi	r3, [r1, #0]
 80081c6:	bf5c      	itt	pl
 80081c8:	600b      	strpl	r3, [r1, #0]
 80081ca:	2002      	movpl	r0, #2
 80081cc:	4770      	bx	lr
 80081ce:	b298      	uxth	r0, r3
 80081d0:	b9b0      	cbnz	r0, 8008200 <__lo0bits+0x54>
 80081d2:	0c1b      	lsrs	r3, r3, #16
 80081d4:	2010      	movs	r0, #16
 80081d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80081da:	bf04      	itt	eq
 80081dc:	0a1b      	lsreq	r3, r3, #8
 80081de:	3008      	addeq	r0, #8
 80081e0:	071a      	lsls	r2, r3, #28
 80081e2:	bf04      	itt	eq
 80081e4:	091b      	lsreq	r3, r3, #4
 80081e6:	3004      	addeq	r0, #4
 80081e8:	079a      	lsls	r2, r3, #30
 80081ea:	bf04      	itt	eq
 80081ec:	089b      	lsreq	r3, r3, #2
 80081ee:	3002      	addeq	r0, #2
 80081f0:	07da      	lsls	r2, r3, #31
 80081f2:	d403      	bmi.n	80081fc <__lo0bits+0x50>
 80081f4:	085b      	lsrs	r3, r3, #1
 80081f6:	f100 0001 	add.w	r0, r0, #1
 80081fa:	d005      	beq.n	8008208 <__lo0bits+0x5c>
 80081fc:	600b      	str	r3, [r1, #0]
 80081fe:	4770      	bx	lr
 8008200:	4610      	mov	r0, r2
 8008202:	e7e8      	b.n	80081d6 <__lo0bits+0x2a>
 8008204:	2000      	movs	r0, #0
 8008206:	4770      	bx	lr
 8008208:	2020      	movs	r0, #32
 800820a:	4770      	bx	lr

0800820c <__i2b>:
 800820c:	b510      	push	{r4, lr}
 800820e:	460c      	mov	r4, r1
 8008210:	2101      	movs	r1, #1
 8008212:	f7ff feff 	bl	8008014 <_Balloc>
 8008216:	4602      	mov	r2, r0
 8008218:	b928      	cbnz	r0, 8008226 <__i2b+0x1a>
 800821a:	4b05      	ldr	r3, [pc, #20]	; (8008230 <__i2b+0x24>)
 800821c:	4805      	ldr	r0, [pc, #20]	; (8008234 <__i2b+0x28>)
 800821e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008222:	f7ff f89b 	bl	800735c <__assert_func>
 8008226:	2301      	movs	r3, #1
 8008228:	6144      	str	r4, [r0, #20]
 800822a:	6103      	str	r3, [r0, #16]
 800822c:	bd10      	pop	{r4, pc}
 800822e:	bf00      	nop
 8008230:	0800946c 	.word	0x0800946c
 8008234:	0800947d 	.word	0x0800947d

08008238 <__multiply>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	4614      	mov	r4, r2
 800823e:	690a      	ldr	r2, [r1, #16]
 8008240:	6923      	ldr	r3, [r4, #16]
 8008242:	429a      	cmp	r2, r3
 8008244:	bfb8      	it	lt
 8008246:	460b      	movlt	r3, r1
 8008248:	460d      	mov	r5, r1
 800824a:	bfbc      	itt	lt
 800824c:	4625      	movlt	r5, r4
 800824e:	461c      	movlt	r4, r3
 8008250:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008254:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008258:	68ab      	ldr	r3, [r5, #8]
 800825a:	6869      	ldr	r1, [r5, #4]
 800825c:	eb0a 0709 	add.w	r7, sl, r9
 8008260:	42bb      	cmp	r3, r7
 8008262:	b085      	sub	sp, #20
 8008264:	bfb8      	it	lt
 8008266:	3101      	addlt	r1, #1
 8008268:	f7ff fed4 	bl	8008014 <_Balloc>
 800826c:	b930      	cbnz	r0, 800827c <__multiply+0x44>
 800826e:	4602      	mov	r2, r0
 8008270:	4b42      	ldr	r3, [pc, #264]	; (800837c <__multiply+0x144>)
 8008272:	4843      	ldr	r0, [pc, #268]	; (8008380 <__multiply+0x148>)
 8008274:	f240 115d 	movw	r1, #349	; 0x15d
 8008278:	f7ff f870 	bl	800735c <__assert_func>
 800827c:	f100 0614 	add.w	r6, r0, #20
 8008280:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008284:	4633      	mov	r3, r6
 8008286:	2200      	movs	r2, #0
 8008288:	4543      	cmp	r3, r8
 800828a:	d31e      	bcc.n	80082ca <__multiply+0x92>
 800828c:	f105 0c14 	add.w	ip, r5, #20
 8008290:	f104 0314 	add.w	r3, r4, #20
 8008294:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008298:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800829c:	9202      	str	r2, [sp, #8]
 800829e:	ebac 0205 	sub.w	r2, ip, r5
 80082a2:	3a15      	subs	r2, #21
 80082a4:	f022 0203 	bic.w	r2, r2, #3
 80082a8:	3204      	adds	r2, #4
 80082aa:	f105 0115 	add.w	r1, r5, #21
 80082ae:	458c      	cmp	ip, r1
 80082b0:	bf38      	it	cc
 80082b2:	2204      	movcc	r2, #4
 80082b4:	9201      	str	r2, [sp, #4]
 80082b6:	9a02      	ldr	r2, [sp, #8]
 80082b8:	9303      	str	r3, [sp, #12]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d808      	bhi.n	80082d0 <__multiply+0x98>
 80082be:	2f00      	cmp	r7, #0
 80082c0:	dc55      	bgt.n	800836e <__multiply+0x136>
 80082c2:	6107      	str	r7, [r0, #16]
 80082c4:	b005      	add	sp, #20
 80082c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ca:	f843 2b04 	str.w	r2, [r3], #4
 80082ce:	e7db      	b.n	8008288 <__multiply+0x50>
 80082d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80082d4:	f1ba 0f00 	cmp.w	sl, #0
 80082d8:	d020      	beq.n	800831c <__multiply+0xe4>
 80082da:	f105 0e14 	add.w	lr, r5, #20
 80082de:	46b1      	mov	r9, r6
 80082e0:	2200      	movs	r2, #0
 80082e2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80082e6:	f8d9 b000 	ldr.w	fp, [r9]
 80082ea:	b2a1      	uxth	r1, r4
 80082ec:	fa1f fb8b 	uxth.w	fp, fp
 80082f0:	fb0a b101 	mla	r1, sl, r1, fp
 80082f4:	4411      	add	r1, r2
 80082f6:	f8d9 2000 	ldr.w	r2, [r9]
 80082fa:	0c24      	lsrs	r4, r4, #16
 80082fc:	0c12      	lsrs	r2, r2, #16
 80082fe:	fb0a 2404 	mla	r4, sl, r4, r2
 8008302:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008306:	b289      	uxth	r1, r1
 8008308:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800830c:	45f4      	cmp	ip, lr
 800830e:	f849 1b04 	str.w	r1, [r9], #4
 8008312:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008316:	d8e4      	bhi.n	80082e2 <__multiply+0xaa>
 8008318:	9901      	ldr	r1, [sp, #4]
 800831a:	5072      	str	r2, [r6, r1]
 800831c:	9a03      	ldr	r2, [sp, #12]
 800831e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008322:	3304      	adds	r3, #4
 8008324:	f1b9 0f00 	cmp.w	r9, #0
 8008328:	d01f      	beq.n	800836a <__multiply+0x132>
 800832a:	6834      	ldr	r4, [r6, #0]
 800832c:	f105 0114 	add.w	r1, r5, #20
 8008330:	46b6      	mov	lr, r6
 8008332:	f04f 0a00 	mov.w	sl, #0
 8008336:	880a      	ldrh	r2, [r1, #0]
 8008338:	f8be b002 	ldrh.w	fp, [lr, #2]
 800833c:	fb09 b202 	mla	r2, r9, r2, fp
 8008340:	4492      	add	sl, r2
 8008342:	b2a4      	uxth	r4, r4
 8008344:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008348:	f84e 4b04 	str.w	r4, [lr], #4
 800834c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008350:	f8be 2000 	ldrh.w	r2, [lr]
 8008354:	0c24      	lsrs	r4, r4, #16
 8008356:	fb09 2404 	mla	r4, r9, r4, r2
 800835a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800835e:	458c      	cmp	ip, r1
 8008360:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008364:	d8e7      	bhi.n	8008336 <__multiply+0xfe>
 8008366:	9a01      	ldr	r2, [sp, #4]
 8008368:	50b4      	str	r4, [r6, r2]
 800836a:	3604      	adds	r6, #4
 800836c:	e7a3      	b.n	80082b6 <__multiply+0x7e>
 800836e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1a5      	bne.n	80082c2 <__multiply+0x8a>
 8008376:	3f01      	subs	r7, #1
 8008378:	e7a1      	b.n	80082be <__multiply+0x86>
 800837a:	bf00      	nop
 800837c:	0800946c 	.word	0x0800946c
 8008380:	0800947d 	.word	0x0800947d

08008384 <__pow5mult>:
 8008384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008388:	4615      	mov	r5, r2
 800838a:	f012 0203 	ands.w	r2, r2, #3
 800838e:	4606      	mov	r6, r0
 8008390:	460f      	mov	r7, r1
 8008392:	d007      	beq.n	80083a4 <__pow5mult+0x20>
 8008394:	4c25      	ldr	r4, [pc, #148]	; (800842c <__pow5mult+0xa8>)
 8008396:	3a01      	subs	r2, #1
 8008398:	2300      	movs	r3, #0
 800839a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800839e:	f7ff fe9b 	bl	80080d8 <__multadd>
 80083a2:	4607      	mov	r7, r0
 80083a4:	10ad      	asrs	r5, r5, #2
 80083a6:	d03d      	beq.n	8008424 <__pow5mult+0xa0>
 80083a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083aa:	b97c      	cbnz	r4, 80083cc <__pow5mult+0x48>
 80083ac:	2010      	movs	r0, #16
 80083ae:	f7fe fa53 	bl	8006858 <malloc>
 80083b2:	4602      	mov	r2, r0
 80083b4:	6270      	str	r0, [r6, #36]	; 0x24
 80083b6:	b928      	cbnz	r0, 80083c4 <__pow5mult+0x40>
 80083b8:	4b1d      	ldr	r3, [pc, #116]	; (8008430 <__pow5mult+0xac>)
 80083ba:	481e      	ldr	r0, [pc, #120]	; (8008434 <__pow5mult+0xb0>)
 80083bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083c0:	f7fe ffcc 	bl	800735c <__assert_func>
 80083c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083c8:	6004      	str	r4, [r0, #0]
 80083ca:	60c4      	str	r4, [r0, #12]
 80083cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083d4:	b94c      	cbnz	r4, 80083ea <__pow5mult+0x66>
 80083d6:	f240 2171 	movw	r1, #625	; 0x271
 80083da:	4630      	mov	r0, r6
 80083dc:	f7ff ff16 	bl	800820c <__i2b>
 80083e0:	2300      	movs	r3, #0
 80083e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80083e6:	4604      	mov	r4, r0
 80083e8:	6003      	str	r3, [r0, #0]
 80083ea:	f04f 0900 	mov.w	r9, #0
 80083ee:	07eb      	lsls	r3, r5, #31
 80083f0:	d50a      	bpl.n	8008408 <__pow5mult+0x84>
 80083f2:	4639      	mov	r1, r7
 80083f4:	4622      	mov	r2, r4
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7ff ff1e 	bl	8008238 <__multiply>
 80083fc:	4639      	mov	r1, r7
 80083fe:	4680      	mov	r8, r0
 8008400:	4630      	mov	r0, r6
 8008402:	f7ff fe47 	bl	8008094 <_Bfree>
 8008406:	4647      	mov	r7, r8
 8008408:	106d      	asrs	r5, r5, #1
 800840a:	d00b      	beq.n	8008424 <__pow5mult+0xa0>
 800840c:	6820      	ldr	r0, [r4, #0]
 800840e:	b938      	cbnz	r0, 8008420 <__pow5mult+0x9c>
 8008410:	4622      	mov	r2, r4
 8008412:	4621      	mov	r1, r4
 8008414:	4630      	mov	r0, r6
 8008416:	f7ff ff0f 	bl	8008238 <__multiply>
 800841a:	6020      	str	r0, [r4, #0]
 800841c:	f8c0 9000 	str.w	r9, [r0]
 8008420:	4604      	mov	r4, r0
 8008422:	e7e4      	b.n	80083ee <__pow5mult+0x6a>
 8008424:	4638      	mov	r0, r7
 8008426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800842a:	bf00      	nop
 800842c:	080095d0 	.word	0x080095d0
 8008430:	0800934c 	.word	0x0800934c
 8008434:	0800947d 	.word	0x0800947d

08008438 <__lshift>:
 8008438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	460c      	mov	r4, r1
 800843e:	6849      	ldr	r1, [r1, #4]
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008446:	68a3      	ldr	r3, [r4, #8]
 8008448:	4607      	mov	r7, r0
 800844a:	4691      	mov	r9, r2
 800844c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008450:	f108 0601 	add.w	r6, r8, #1
 8008454:	42b3      	cmp	r3, r6
 8008456:	db0b      	blt.n	8008470 <__lshift+0x38>
 8008458:	4638      	mov	r0, r7
 800845a:	f7ff fddb 	bl	8008014 <_Balloc>
 800845e:	4605      	mov	r5, r0
 8008460:	b948      	cbnz	r0, 8008476 <__lshift+0x3e>
 8008462:	4602      	mov	r2, r0
 8008464:	4b28      	ldr	r3, [pc, #160]	; (8008508 <__lshift+0xd0>)
 8008466:	4829      	ldr	r0, [pc, #164]	; (800850c <__lshift+0xd4>)
 8008468:	f240 11d9 	movw	r1, #473	; 0x1d9
 800846c:	f7fe ff76 	bl	800735c <__assert_func>
 8008470:	3101      	adds	r1, #1
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	e7ee      	b.n	8008454 <__lshift+0x1c>
 8008476:	2300      	movs	r3, #0
 8008478:	f100 0114 	add.w	r1, r0, #20
 800847c:	f100 0210 	add.w	r2, r0, #16
 8008480:	4618      	mov	r0, r3
 8008482:	4553      	cmp	r3, sl
 8008484:	db33      	blt.n	80084ee <__lshift+0xb6>
 8008486:	6920      	ldr	r0, [r4, #16]
 8008488:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800848c:	f104 0314 	add.w	r3, r4, #20
 8008490:	f019 091f 	ands.w	r9, r9, #31
 8008494:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008498:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800849c:	d02b      	beq.n	80084f6 <__lshift+0xbe>
 800849e:	f1c9 0e20 	rsb	lr, r9, #32
 80084a2:	468a      	mov	sl, r1
 80084a4:	2200      	movs	r2, #0
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	fa00 f009 	lsl.w	r0, r0, r9
 80084ac:	4302      	orrs	r2, r0
 80084ae:	f84a 2b04 	str.w	r2, [sl], #4
 80084b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b6:	459c      	cmp	ip, r3
 80084b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80084bc:	d8f3      	bhi.n	80084a6 <__lshift+0x6e>
 80084be:	ebac 0304 	sub.w	r3, ip, r4
 80084c2:	3b15      	subs	r3, #21
 80084c4:	f023 0303 	bic.w	r3, r3, #3
 80084c8:	3304      	adds	r3, #4
 80084ca:	f104 0015 	add.w	r0, r4, #21
 80084ce:	4584      	cmp	ip, r0
 80084d0:	bf38      	it	cc
 80084d2:	2304      	movcc	r3, #4
 80084d4:	50ca      	str	r2, [r1, r3]
 80084d6:	b10a      	cbz	r2, 80084dc <__lshift+0xa4>
 80084d8:	f108 0602 	add.w	r6, r8, #2
 80084dc:	3e01      	subs	r6, #1
 80084de:	4638      	mov	r0, r7
 80084e0:	612e      	str	r6, [r5, #16]
 80084e2:	4621      	mov	r1, r4
 80084e4:	f7ff fdd6 	bl	8008094 <_Bfree>
 80084e8:	4628      	mov	r0, r5
 80084ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80084f2:	3301      	adds	r3, #1
 80084f4:	e7c5      	b.n	8008482 <__lshift+0x4a>
 80084f6:	3904      	subs	r1, #4
 80084f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008500:	459c      	cmp	ip, r3
 8008502:	d8f9      	bhi.n	80084f8 <__lshift+0xc0>
 8008504:	e7ea      	b.n	80084dc <__lshift+0xa4>
 8008506:	bf00      	nop
 8008508:	0800946c 	.word	0x0800946c
 800850c:	0800947d 	.word	0x0800947d

08008510 <__mcmp>:
 8008510:	b530      	push	{r4, r5, lr}
 8008512:	6902      	ldr	r2, [r0, #16]
 8008514:	690c      	ldr	r4, [r1, #16]
 8008516:	1b12      	subs	r2, r2, r4
 8008518:	d10e      	bne.n	8008538 <__mcmp+0x28>
 800851a:	f100 0314 	add.w	r3, r0, #20
 800851e:	3114      	adds	r1, #20
 8008520:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008524:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008528:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800852c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008530:	42a5      	cmp	r5, r4
 8008532:	d003      	beq.n	800853c <__mcmp+0x2c>
 8008534:	d305      	bcc.n	8008542 <__mcmp+0x32>
 8008536:	2201      	movs	r2, #1
 8008538:	4610      	mov	r0, r2
 800853a:	bd30      	pop	{r4, r5, pc}
 800853c:	4283      	cmp	r3, r0
 800853e:	d3f3      	bcc.n	8008528 <__mcmp+0x18>
 8008540:	e7fa      	b.n	8008538 <__mcmp+0x28>
 8008542:	f04f 32ff 	mov.w	r2, #4294967295
 8008546:	e7f7      	b.n	8008538 <__mcmp+0x28>

08008548 <__mdiff>:
 8008548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	460c      	mov	r4, r1
 800854e:	4606      	mov	r6, r0
 8008550:	4611      	mov	r1, r2
 8008552:	4620      	mov	r0, r4
 8008554:	4617      	mov	r7, r2
 8008556:	f7ff ffdb 	bl	8008510 <__mcmp>
 800855a:	1e05      	subs	r5, r0, #0
 800855c:	d110      	bne.n	8008580 <__mdiff+0x38>
 800855e:	4629      	mov	r1, r5
 8008560:	4630      	mov	r0, r6
 8008562:	f7ff fd57 	bl	8008014 <_Balloc>
 8008566:	b930      	cbnz	r0, 8008576 <__mdiff+0x2e>
 8008568:	4b39      	ldr	r3, [pc, #228]	; (8008650 <__mdiff+0x108>)
 800856a:	4602      	mov	r2, r0
 800856c:	f240 2132 	movw	r1, #562	; 0x232
 8008570:	4838      	ldr	r0, [pc, #224]	; (8008654 <__mdiff+0x10c>)
 8008572:	f7fe fef3 	bl	800735c <__assert_func>
 8008576:	2301      	movs	r3, #1
 8008578:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800857c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008580:	bfa4      	itt	ge
 8008582:	463b      	movge	r3, r7
 8008584:	4627      	movge	r7, r4
 8008586:	4630      	mov	r0, r6
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	bfa6      	itte	ge
 800858c:	461c      	movge	r4, r3
 800858e:	2500      	movge	r5, #0
 8008590:	2501      	movlt	r5, #1
 8008592:	f7ff fd3f 	bl	8008014 <_Balloc>
 8008596:	b920      	cbnz	r0, 80085a2 <__mdiff+0x5a>
 8008598:	4b2d      	ldr	r3, [pc, #180]	; (8008650 <__mdiff+0x108>)
 800859a:	4602      	mov	r2, r0
 800859c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085a0:	e7e6      	b.n	8008570 <__mdiff+0x28>
 80085a2:	693e      	ldr	r6, [r7, #16]
 80085a4:	60c5      	str	r5, [r0, #12]
 80085a6:	6925      	ldr	r5, [r4, #16]
 80085a8:	f107 0114 	add.w	r1, r7, #20
 80085ac:	f104 0914 	add.w	r9, r4, #20
 80085b0:	f100 0e14 	add.w	lr, r0, #20
 80085b4:	f107 0210 	add.w	r2, r7, #16
 80085b8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80085bc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80085c0:	46f2      	mov	sl, lr
 80085c2:	2700      	movs	r7, #0
 80085c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80085c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80085cc:	fa1f f883 	uxth.w	r8, r3
 80085d0:	fa17 f78b 	uxtah	r7, r7, fp
 80085d4:	0c1b      	lsrs	r3, r3, #16
 80085d6:	eba7 0808 	sub.w	r8, r7, r8
 80085da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085e2:	fa1f f888 	uxth.w	r8, r8
 80085e6:	141f      	asrs	r7, r3, #16
 80085e8:	454d      	cmp	r5, r9
 80085ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085ee:	f84a 3b04 	str.w	r3, [sl], #4
 80085f2:	d8e7      	bhi.n	80085c4 <__mdiff+0x7c>
 80085f4:	1b2b      	subs	r3, r5, r4
 80085f6:	3b15      	subs	r3, #21
 80085f8:	f023 0303 	bic.w	r3, r3, #3
 80085fc:	3304      	adds	r3, #4
 80085fe:	3415      	adds	r4, #21
 8008600:	42a5      	cmp	r5, r4
 8008602:	bf38      	it	cc
 8008604:	2304      	movcc	r3, #4
 8008606:	4419      	add	r1, r3
 8008608:	4473      	add	r3, lr
 800860a:	469e      	mov	lr, r3
 800860c:	460d      	mov	r5, r1
 800860e:	4565      	cmp	r5, ip
 8008610:	d30e      	bcc.n	8008630 <__mdiff+0xe8>
 8008612:	f10c 0203 	add.w	r2, ip, #3
 8008616:	1a52      	subs	r2, r2, r1
 8008618:	f022 0203 	bic.w	r2, r2, #3
 800861c:	3903      	subs	r1, #3
 800861e:	458c      	cmp	ip, r1
 8008620:	bf38      	it	cc
 8008622:	2200      	movcc	r2, #0
 8008624:	441a      	add	r2, r3
 8008626:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800862a:	b17b      	cbz	r3, 800864c <__mdiff+0x104>
 800862c:	6106      	str	r6, [r0, #16]
 800862e:	e7a5      	b.n	800857c <__mdiff+0x34>
 8008630:	f855 8b04 	ldr.w	r8, [r5], #4
 8008634:	fa17 f488 	uxtah	r4, r7, r8
 8008638:	1422      	asrs	r2, r4, #16
 800863a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800863e:	b2a4      	uxth	r4, r4
 8008640:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008644:	f84e 4b04 	str.w	r4, [lr], #4
 8008648:	1417      	asrs	r7, r2, #16
 800864a:	e7e0      	b.n	800860e <__mdiff+0xc6>
 800864c:	3e01      	subs	r6, #1
 800864e:	e7ea      	b.n	8008626 <__mdiff+0xde>
 8008650:	0800946c 	.word	0x0800946c
 8008654:	0800947d 	.word	0x0800947d

08008658 <__d2b>:
 8008658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800865c:	4689      	mov	r9, r1
 800865e:	2101      	movs	r1, #1
 8008660:	ec57 6b10 	vmov	r6, r7, d0
 8008664:	4690      	mov	r8, r2
 8008666:	f7ff fcd5 	bl	8008014 <_Balloc>
 800866a:	4604      	mov	r4, r0
 800866c:	b930      	cbnz	r0, 800867c <__d2b+0x24>
 800866e:	4602      	mov	r2, r0
 8008670:	4b25      	ldr	r3, [pc, #148]	; (8008708 <__d2b+0xb0>)
 8008672:	4826      	ldr	r0, [pc, #152]	; (800870c <__d2b+0xb4>)
 8008674:	f240 310a 	movw	r1, #778	; 0x30a
 8008678:	f7fe fe70 	bl	800735c <__assert_func>
 800867c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008680:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008684:	bb35      	cbnz	r5, 80086d4 <__d2b+0x7c>
 8008686:	2e00      	cmp	r6, #0
 8008688:	9301      	str	r3, [sp, #4]
 800868a:	d028      	beq.n	80086de <__d2b+0x86>
 800868c:	4668      	mov	r0, sp
 800868e:	9600      	str	r6, [sp, #0]
 8008690:	f7ff fd8c 	bl	80081ac <__lo0bits>
 8008694:	9900      	ldr	r1, [sp, #0]
 8008696:	b300      	cbz	r0, 80086da <__d2b+0x82>
 8008698:	9a01      	ldr	r2, [sp, #4]
 800869a:	f1c0 0320 	rsb	r3, r0, #32
 800869e:	fa02 f303 	lsl.w	r3, r2, r3
 80086a2:	430b      	orrs	r3, r1
 80086a4:	40c2      	lsrs	r2, r0
 80086a6:	6163      	str	r3, [r4, #20]
 80086a8:	9201      	str	r2, [sp, #4]
 80086aa:	9b01      	ldr	r3, [sp, #4]
 80086ac:	61a3      	str	r3, [r4, #24]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	bf14      	ite	ne
 80086b2:	2202      	movne	r2, #2
 80086b4:	2201      	moveq	r2, #1
 80086b6:	6122      	str	r2, [r4, #16]
 80086b8:	b1d5      	cbz	r5, 80086f0 <__d2b+0x98>
 80086ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086be:	4405      	add	r5, r0
 80086c0:	f8c9 5000 	str.w	r5, [r9]
 80086c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086c8:	f8c8 0000 	str.w	r0, [r8]
 80086cc:	4620      	mov	r0, r4
 80086ce:	b003      	add	sp, #12
 80086d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086d8:	e7d5      	b.n	8008686 <__d2b+0x2e>
 80086da:	6161      	str	r1, [r4, #20]
 80086dc:	e7e5      	b.n	80086aa <__d2b+0x52>
 80086de:	a801      	add	r0, sp, #4
 80086e0:	f7ff fd64 	bl	80081ac <__lo0bits>
 80086e4:	9b01      	ldr	r3, [sp, #4]
 80086e6:	6163      	str	r3, [r4, #20]
 80086e8:	2201      	movs	r2, #1
 80086ea:	6122      	str	r2, [r4, #16]
 80086ec:	3020      	adds	r0, #32
 80086ee:	e7e3      	b.n	80086b8 <__d2b+0x60>
 80086f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086f8:	f8c9 0000 	str.w	r0, [r9]
 80086fc:	6918      	ldr	r0, [r3, #16]
 80086fe:	f7ff fd35 	bl	800816c <__hi0bits>
 8008702:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008706:	e7df      	b.n	80086c8 <__d2b+0x70>
 8008708:	0800946c 	.word	0x0800946c
 800870c:	0800947d 	.word	0x0800947d

08008710 <_calloc_r>:
 8008710:	b513      	push	{r0, r1, r4, lr}
 8008712:	434a      	muls	r2, r1
 8008714:	4611      	mov	r1, r2
 8008716:	9201      	str	r2, [sp, #4]
 8008718:	f7fe f906 	bl	8006928 <_malloc_r>
 800871c:	4604      	mov	r4, r0
 800871e:	b118      	cbz	r0, 8008728 <_calloc_r+0x18>
 8008720:	9a01      	ldr	r2, [sp, #4]
 8008722:	2100      	movs	r1, #0
 8008724:	f7fe f8a8 	bl	8006878 <memset>
 8008728:	4620      	mov	r0, r4
 800872a:	b002      	add	sp, #8
 800872c:	bd10      	pop	{r4, pc}

0800872e <_realloc_r>:
 800872e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008730:	4607      	mov	r7, r0
 8008732:	4614      	mov	r4, r2
 8008734:	460e      	mov	r6, r1
 8008736:	b921      	cbnz	r1, 8008742 <_realloc_r+0x14>
 8008738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800873c:	4611      	mov	r1, r2
 800873e:	f7fe b8f3 	b.w	8006928 <_malloc_r>
 8008742:	b922      	cbnz	r2, 800874e <_realloc_r+0x20>
 8008744:	f7fe f8a0 	bl	8006888 <_free_r>
 8008748:	4625      	mov	r5, r4
 800874a:	4628      	mov	r0, r5
 800874c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800874e:	f000 fc65 	bl	800901c <_malloc_usable_size_r>
 8008752:	42a0      	cmp	r0, r4
 8008754:	d20f      	bcs.n	8008776 <_realloc_r+0x48>
 8008756:	4621      	mov	r1, r4
 8008758:	4638      	mov	r0, r7
 800875a:	f7fe f8e5 	bl	8006928 <_malloc_r>
 800875e:	4605      	mov	r5, r0
 8008760:	2800      	cmp	r0, #0
 8008762:	d0f2      	beq.n	800874a <_realloc_r+0x1c>
 8008764:	4631      	mov	r1, r6
 8008766:	4622      	mov	r2, r4
 8008768:	f7ff fc3a 	bl	8007fe0 <memcpy>
 800876c:	4631      	mov	r1, r6
 800876e:	4638      	mov	r0, r7
 8008770:	f7fe f88a 	bl	8006888 <_free_r>
 8008774:	e7e9      	b.n	800874a <_realloc_r+0x1c>
 8008776:	4635      	mov	r5, r6
 8008778:	e7e7      	b.n	800874a <_realloc_r+0x1c>

0800877a <__sfputc_r>:
 800877a:	6893      	ldr	r3, [r2, #8]
 800877c:	3b01      	subs	r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	b410      	push	{r4}
 8008782:	6093      	str	r3, [r2, #8]
 8008784:	da08      	bge.n	8008798 <__sfputc_r+0x1e>
 8008786:	6994      	ldr	r4, [r2, #24]
 8008788:	42a3      	cmp	r3, r4
 800878a:	db01      	blt.n	8008790 <__sfputc_r+0x16>
 800878c:	290a      	cmp	r1, #10
 800878e:	d103      	bne.n	8008798 <__sfputc_r+0x1e>
 8008790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008794:	f000 b94a 	b.w	8008a2c <__swbuf_r>
 8008798:	6813      	ldr	r3, [r2, #0]
 800879a:	1c58      	adds	r0, r3, #1
 800879c:	6010      	str	r0, [r2, #0]
 800879e:	7019      	strb	r1, [r3, #0]
 80087a0:	4608      	mov	r0, r1
 80087a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <__sfputs_r>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	4606      	mov	r6, r0
 80087ac:	460f      	mov	r7, r1
 80087ae:	4614      	mov	r4, r2
 80087b0:	18d5      	adds	r5, r2, r3
 80087b2:	42ac      	cmp	r4, r5
 80087b4:	d101      	bne.n	80087ba <__sfputs_r+0x12>
 80087b6:	2000      	movs	r0, #0
 80087b8:	e007      	b.n	80087ca <__sfputs_r+0x22>
 80087ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087be:	463a      	mov	r2, r7
 80087c0:	4630      	mov	r0, r6
 80087c2:	f7ff ffda 	bl	800877a <__sfputc_r>
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	d1f3      	bne.n	80087b2 <__sfputs_r+0xa>
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087cc <_vfiprintf_r>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	460d      	mov	r5, r1
 80087d2:	b09d      	sub	sp, #116	; 0x74
 80087d4:	4614      	mov	r4, r2
 80087d6:	4698      	mov	r8, r3
 80087d8:	4606      	mov	r6, r0
 80087da:	b118      	cbz	r0, 80087e4 <_vfiprintf_r+0x18>
 80087dc:	6983      	ldr	r3, [r0, #24]
 80087de:	b90b      	cbnz	r3, 80087e4 <_vfiprintf_r+0x18>
 80087e0:	f000 fb06 	bl	8008df0 <__sinit>
 80087e4:	4b89      	ldr	r3, [pc, #548]	; (8008a0c <_vfiprintf_r+0x240>)
 80087e6:	429d      	cmp	r5, r3
 80087e8:	d11b      	bne.n	8008822 <_vfiprintf_r+0x56>
 80087ea:	6875      	ldr	r5, [r6, #4]
 80087ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ee:	07d9      	lsls	r1, r3, #31
 80087f0:	d405      	bmi.n	80087fe <_vfiprintf_r+0x32>
 80087f2:	89ab      	ldrh	r3, [r5, #12]
 80087f4:	059a      	lsls	r2, r3, #22
 80087f6:	d402      	bmi.n	80087fe <_vfiprintf_r+0x32>
 80087f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087fa:	f000 fb97 	bl	8008f2c <__retarget_lock_acquire_recursive>
 80087fe:	89ab      	ldrh	r3, [r5, #12]
 8008800:	071b      	lsls	r3, r3, #28
 8008802:	d501      	bpl.n	8008808 <_vfiprintf_r+0x3c>
 8008804:	692b      	ldr	r3, [r5, #16]
 8008806:	b9eb      	cbnz	r3, 8008844 <_vfiprintf_r+0x78>
 8008808:	4629      	mov	r1, r5
 800880a:	4630      	mov	r0, r6
 800880c:	f000 f960 	bl	8008ad0 <__swsetup_r>
 8008810:	b1c0      	cbz	r0, 8008844 <_vfiprintf_r+0x78>
 8008812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008814:	07dc      	lsls	r4, r3, #31
 8008816:	d50e      	bpl.n	8008836 <_vfiprintf_r+0x6a>
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	b01d      	add	sp, #116	; 0x74
 800881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008822:	4b7b      	ldr	r3, [pc, #492]	; (8008a10 <_vfiprintf_r+0x244>)
 8008824:	429d      	cmp	r5, r3
 8008826:	d101      	bne.n	800882c <_vfiprintf_r+0x60>
 8008828:	68b5      	ldr	r5, [r6, #8]
 800882a:	e7df      	b.n	80087ec <_vfiprintf_r+0x20>
 800882c:	4b79      	ldr	r3, [pc, #484]	; (8008a14 <_vfiprintf_r+0x248>)
 800882e:	429d      	cmp	r5, r3
 8008830:	bf08      	it	eq
 8008832:	68f5      	ldreq	r5, [r6, #12]
 8008834:	e7da      	b.n	80087ec <_vfiprintf_r+0x20>
 8008836:	89ab      	ldrh	r3, [r5, #12]
 8008838:	0598      	lsls	r0, r3, #22
 800883a:	d4ed      	bmi.n	8008818 <_vfiprintf_r+0x4c>
 800883c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800883e:	f000 fb76 	bl	8008f2e <__retarget_lock_release_recursive>
 8008842:	e7e9      	b.n	8008818 <_vfiprintf_r+0x4c>
 8008844:	2300      	movs	r3, #0
 8008846:	9309      	str	r3, [sp, #36]	; 0x24
 8008848:	2320      	movs	r3, #32
 800884a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800884e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008852:	2330      	movs	r3, #48	; 0x30
 8008854:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a18 <_vfiprintf_r+0x24c>
 8008858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800885c:	f04f 0901 	mov.w	r9, #1
 8008860:	4623      	mov	r3, r4
 8008862:	469a      	mov	sl, r3
 8008864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008868:	b10a      	cbz	r2, 800886e <_vfiprintf_r+0xa2>
 800886a:	2a25      	cmp	r2, #37	; 0x25
 800886c:	d1f9      	bne.n	8008862 <_vfiprintf_r+0x96>
 800886e:	ebba 0b04 	subs.w	fp, sl, r4
 8008872:	d00b      	beq.n	800888c <_vfiprintf_r+0xc0>
 8008874:	465b      	mov	r3, fp
 8008876:	4622      	mov	r2, r4
 8008878:	4629      	mov	r1, r5
 800887a:	4630      	mov	r0, r6
 800887c:	f7ff ff94 	bl	80087a8 <__sfputs_r>
 8008880:	3001      	adds	r0, #1
 8008882:	f000 80aa 	beq.w	80089da <_vfiprintf_r+0x20e>
 8008886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008888:	445a      	add	r2, fp
 800888a:	9209      	str	r2, [sp, #36]	; 0x24
 800888c:	f89a 3000 	ldrb.w	r3, [sl]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 80a2 	beq.w	80089da <_vfiprintf_r+0x20e>
 8008896:	2300      	movs	r3, #0
 8008898:	f04f 32ff 	mov.w	r2, #4294967295
 800889c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a0:	f10a 0a01 	add.w	sl, sl, #1
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	9307      	str	r3, [sp, #28]
 80088a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088ac:	931a      	str	r3, [sp, #104]	; 0x68
 80088ae:	4654      	mov	r4, sl
 80088b0:	2205      	movs	r2, #5
 80088b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b6:	4858      	ldr	r0, [pc, #352]	; (8008a18 <_vfiprintf_r+0x24c>)
 80088b8:	f7f7 fcda 	bl	8000270 <memchr>
 80088bc:	9a04      	ldr	r2, [sp, #16]
 80088be:	b9d8      	cbnz	r0, 80088f8 <_vfiprintf_r+0x12c>
 80088c0:	06d1      	lsls	r1, r2, #27
 80088c2:	bf44      	itt	mi
 80088c4:	2320      	movmi	r3, #32
 80088c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ca:	0713      	lsls	r3, r2, #28
 80088cc:	bf44      	itt	mi
 80088ce:	232b      	movmi	r3, #43	; 0x2b
 80088d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088d4:	f89a 3000 	ldrb.w	r3, [sl]
 80088d8:	2b2a      	cmp	r3, #42	; 0x2a
 80088da:	d015      	beq.n	8008908 <_vfiprintf_r+0x13c>
 80088dc:	9a07      	ldr	r2, [sp, #28]
 80088de:	4654      	mov	r4, sl
 80088e0:	2000      	movs	r0, #0
 80088e2:	f04f 0c0a 	mov.w	ip, #10
 80088e6:	4621      	mov	r1, r4
 80088e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ec:	3b30      	subs	r3, #48	; 0x30
 80088ee:	2b09      	cmp	r3, #9
 80088f0:	d94e      	bls.n	8008990 <_vfiprintf_r+0x1c4>
 80088f2:	b1b0      	cbz	r0, 8008922 <_vfiprintf_r+0x156>
 80088f4:	9207      	str	r2, [sp, #28]
 80088f6:	e014      	b.n	8008922 <_vfiprintf_r+0x156>
 80088f8:	eba0 0308 	sub.w	r3, r0, r8
 80088fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008900:	4313      	orrs	r3, r2
 8008902:	9304      	str	r3, [sp, #16]
 8008904:	46a2      	mov	sl, r4
 8008906:	e7d2      	b.n	80088ae <_vfiprintf_r+0xe2>
 8008908:	9b03      	ldr	r3, [sp, #12]
 800890a:	1d19      	adds	r1, r3, #4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	9103      	str	r1, [sp, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	bfbb      	ittet	lt
 8008914:	425b      	neglt	r3, r3
 8008916:	f042 0202 	orrlt.w	r2, r2, #2
 800891a:	9307      	strge	r3, [sp, #28]
 800891c:	9307      	strlt	r3, [sp, #28]
 800891e:	bfb8      	it	lt
 8008920:	9204      	strlt	r2, [sp, #16]
 8008922:	7823      	ldrb	r3, [r4, #0]
 8008924:	2b2e      	cmp	r3, #46	; 0x2e
 8008926:	d10c      	bne.n	8008942 <_vfiprintf_r+0x176>
 8008928:	7863      	ldrb	r3, [r4, #1]
 800892a:	2b2a      	cmp	r3, #42	; 0x2a
 800892c:	d135      	bne.n	800899a <_vfiprintf_r+0x1ce>
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	9203      	str	r2, [sp, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	bfb8      	it	lt
 800893a:	f04f 33ff 	movlt.w	r3, #4294967295
 800893e:	3402      	adds	r4, #2
 8008940:	9305      	str	r3, [sp, #20]
 8008942:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a28 <_vfiprintf_r+0x25c>
 8008946:	7821      	ldrb	r1, [r4, #0]
 8008948:	2203      	movs	r2, #3
 800894a:	4650      	mov	r0, sl
 800894c:	f7f7 fc90 	bl	8000270 <memchr>
 8008950:	b140      	cbz	r0, 8008964 <_vfiprintf_r+0x198>
 8008952:	2340      	movs	r3, #64	; 0x40
 8008954:	eba0 000a 	sub.w	r0, r0, sl
 8008958:	fa03 f000 	lsl.w	r0, r3, r0
 800895c:	9b04      	ldr	r3, [sp, #16]
 800895e:	4303      	orrs	r3, r0
 8008960:	3401      	adds	r4, #1
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008968:	482c      	ldr	r0, [pc, #176]	; (8008a1c <_vfiprintf_r+0x250>)
 800896a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800896e:	2206      	movs	r2, #6
 8008970:	f7f7 fc7e 	bl	8000270 <memchr>
 8008974:	2800      	cmp	r0, #0
 8008976:	d03f      	beq.n	80089f8 <_vfiprintf_r+0x22c>
 8008978:	4b29      	ldr	r3, [pc, #164]	; (8008a20 <_vfiprintf_r+0x254>)
 800897a:	bb1b      	cbnz	r3, 80089c4 <_vfiprintf_r+0x1f8>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	3307      	adds	r3, #7
 8008980:	f023 0307 	bic.w	r3, r3, #7
 8008984:	3308      	adds	r3, #8
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800898a:	443b      	add	r3, r7
 800898c:	9309      	str	r3, [sp, #36]	; 0x24
 800898e:	e767      	b.n	8008860 <_vfiprintf_r+0x94>
 8008990:	fb0c 3202 	mla	r2, ip, r2, r3
 8008994:	460c      	mov	r4, r1
 8008996:	2001      	movs	r0, #1
 8008998:	e7a5      	b.n	80088e6 <_vfiprintf_r+0x11a>
 800899a:	2300      	movs	r3, #0
 800899c:	3401      	adds	r4, #1
 800899e:	9305      	str	r3, [sp, #20]
 80089a0:	4619      	mov	r1, r3
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4620      	mov	r0, r4
 80089a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ac:	3a30      	subs	r2, #48	; 0x30
 80089ae:	2a09      	cmp	r2, #9
 80089b0:	d903      	bls.n	80089ba <_vfiprintf_r+0x1ee>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0c5      	beq.n	8008942 <_vfiprintf_r+0x176>
 80089b6:	9105      	str	r1, [sp, #20]
 80089b8:	e7c3      	b.n	8008942 <_vfiprintf_r+0x176>
 80089ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80089be:	4604      	mov	r4, r0
 80089c0:	2301      	movs	r3, #1
 80089c2:	e7f0      	b.n	80089a6 <_vfiprintf_r+0x1da>
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	462a      	mov	r2, r5
 80089ca:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <_vfiprintf_r+0x258>)
 80089cc:	a904      	add	r1, sp, #16
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7fe f896 	bl	8006b00 <_printf_float>
 80089d4:	4607      	mov	r7, r0
 80089d6:	1c78      	adds	r0, r7, #1
 80089d8:	d1d6      	bne.n	8008988 <_vfiprintf_r+0x1bc>
 80089da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089dc:	07d9      	lsls	r1, r3, #31
 80089de:	d405      	bmi.n	80089ec <_vfiprintf_r+0x220>
 80089e0:	89ab      	ldrh	r3, [r5, #12]
 80089e2:	059a      	lsls	r2, r3, #22
 80089e4:	d402      	bmi.n	80089ec <_vfiprintf_r+0x220>
 80089e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089e8:	f000 faa1 	bl	8008f2e <__retarget_lock_release_recursive>
 80089ec:	89ab      	ldrh	r3, [r5, #12]
 80089ee:	065b      	lsls	r3, r3, #25
 80089f0:	f53f af12 	bmi.w	8008818 <_vfiprintf_r+0x4c>
 80089f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089f6:	e711      	b.n	800881c <_vfiprintf_r+0x50>
 80089f8:	ab03      	add	r3, sp, #12
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	462a      	mov	r2, r5
 80089fe:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <_vfiprintf_r+0x258>)
 8008a00:	a904      	add	r1, sp, #16
 8008a02:	4630      	mov	r0, r6
 8008a04:	f7fe fb08 	bl	8007018 <_printf_i>
 8008a08:	e7e4      	b.n	80089d4 <_vfiprintf_r+0x208>
 8008a0a:	bf00      	nop
 8008a0c:	08009610 	.word	0x08009610
 8008a10:	08009630 	.word	0x08009630
 8008a14:	080095f0 	.word	0x080095f0
 8008a18:	080095dc 	.word	0x080095dc
 8008a1c:	080095e6 	.word	0x080095e6
 8008a20:	08006b01 	.word	0x08006b01
 8008a24:	080087a9 	.word	0x080087a9
 8008a28:	080095e2 	.word	0x080095e2

08008a2c <__swbuf_r>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	460e      	mov	r6, r1
 8008a30:	4614      	mov	r4, r2
 8008a32:	4605      	mov	r5, r0
 8008a34:	b118      	cbz	r0, 8008a3e <__swbuf_r+0x12>
 8008a36:	6983      	ldr	r3, [r0, #24]
 8008a38:	b90b      	cbnz	r3, 8008a3e <__swbuf_r+0x12>
 8008a3a:	f000 f9d9 	bl	8008df0 <__sinit>
 8008a3e:	4b21      	ldr	r3, [pc, #132]	; (8008ac4 <__swbuf_r+0x98>)
 8008a40:	429c      	cmp	r4, r3
 8008a42:	d12b      	bne.n	8008a9c <__swbuf_r+0x70>
 8008a44:	686c      	ldr	r4, [r5, #4]
 8008a46:	69a3      	ldr	r3, [r4, #24]
 8008a48:	60a3      	str	r3, [r4, #8]
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	071a      	lsls	r2, r3, #28
 8008a4e:	d52f      	bpl.n	8008ab0 <__swbuf_r+0x84>
 8008a50:	6923      	ldr	r3, [r4, #16]
 8008a52:	b36b      	cbz	r3, 8008ab0 <__swbuf_r+0x84>
 8008a54:	6923      	ldr	r3, [r4, #16]
 8008a56:	6820      	ldr	r0, [r4, #0]
 8008a58:	1ac0      	subs	r0, r0, r3
 8008a5a:	6963      	ldr	r3, [r4, #20]
 8008a5c:	b2f6      	uxtb	r6, r6
 8008a5e:	4283      	cmp	r3, r0
 8008a60:	4637      	mov	r7, r6
 8008a62:	dc04      	bgt.n	8008a6e <__swbuf_r+0x42>
 8008a64:	4621      	mov	r1, r4
 8008a66:	4628      	mov	r0, r5
 8008a68:	f000 f92e 	bl	8008cc8 <_fflush_r>
 8008a6c:	bb30      	cbnz	r0, 8008abc <__swbuf_r+0x90>
 8008a6e:	68a3      	ldr	r3, [r4, #8]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	60a3      	str	r3, [r4, #8]
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	1c5a      	adds	r2, r3, #1
 8008a78:	6022      	str	r2, [r4, #0]
 8008a7a:	701e      	strb	r6, [r3, #0]
 8008a7c:	6963      	ldr	r3, [r4, #20]
 8008a7e:	3001      	adds	r0, #1
 8008a80:	4283      	cmp	r3, r0
 8008a82:	d004      	beq.n	8008a8e <__swbuf_r+0x62>
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	07db      	lsls	r3, r3, #31
 8008a88:	d506      	bpl.n	8008a98 <__swbuf_r+0x6c>
 8008a8a:	2e0a      	cmp	r6, #10
 8008a8c:	d104      	bne.n	8008a98 <__swbuf_r+0x6c>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	f000 f919 	bl	8008cc8 <_fflush_r>
 8008a96:	b988      	cbnz	r0, 8008abc <__swbuf_r+0x90>
 8008a98:	4638      	mov	r0, r7
 8008a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <__swbuf_r+0x9c>)
 8008a9e:	429c      	cmp	r4, r3
 8008aa0:	d101      	bne.n	8008aa6 <__swbuf_r+0x7a>
 8008aa2:	68ac      	ldr	r4, [r5, #8]
 8008aa4:	e7cf      	b.n	8008a46 <__swbuf_r+0x1a>
 8008aa6:	4b09      	ldr	r3, [pc, #36]	; (8008acc <__swbuf_r+0xa0>)
 8008aa8:	429c      	cmp	r4, r3
 8008aaa:	bf08      	it	eq
 8008aac:	68ec      	ldreq	r4, [r5, #12]
 8008aae:	e7ca      	b.n	8008a46 <__swbuf_r+0x1a>
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f000 f80c 	bl	8008ad0 <__swsetup_r>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d0cb      	beq.n	8008a54 <__swbuf_r+0x28>
 8008abc:	f04f 37ff 	mov.w	r7, #4294967295
 8008ac0:	e7ea      	b.n	8008a98 <__swbuf_r+0x6c>
 8008ac2:	bf00      	nop
 8008ac4:	08009610 	.word	0x08009610
 8008ac8:	08009630 	.word	0x08009630
 8008acc:	080095f0 	.word	0x080095f0

08008ad0 <__swsetup_r>:
 8008ad0:	4b32      	ldr	r3, [pc, #200]	; (8008b9c <__swsetup_r+0xcc>)
 8008ad2:	b570      	push	{r4, r5, r6, lr}
 8008ad4:	681d      	ldr	r5, [r3, #0]
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460c      	mov	r4, r1
 8008ada:	b125      	cbz	r5, 8008ae6 <__swsetup_r+0x16>
 8008adc:	69ab      	ldr	r3, [r5, #24]
 8008ade:	b913      	cbnz	r3, 8008ae6 <__swsetup_r+0x16>
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f000 f985 	bl	8008df0 <__sinit>
 8008ae6:	4b2e      	ldr	r3, [pc, #184]	; (8008ba0 <__swsetup_r+0xd0>)
 8008ae8:	429c      	cmp	r4, r3
 8008aea:	d10f      	bne.n	8008b0c <__swsetup_r+0x3c>
 8008aec:	686c      	ldr	r4, [r5, #4]
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008af4:	0719      	lsls	r1, r3, #28
 8008af6:	d42c      	bmi.n	8008b52 <__swsetup_r+0x82>
 8008af8:	06dd      	lsls	r5, r3, #27
 8008afa:	d411      	bmi.n	8008b20 <__swsetup_r+0x50>
 8008afc:	2309      	movs	r3, #9
 8008afe:	6033      	str	r3, [r6, #0]
 8008b00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0a:	e03e      	b.n	8008b8a <__swsetup_r+0xba>
 8008b0c:	4b25      	ldr	r3, [pc, #148]	; (8008ba4 <__swsetup_r+0xd4>)
 8008b0e:	429c      	cmp	r4, r3
 8008b10:	d101      	bne.n	8008b16 <__swsetup_r+0x46>
 8008b12:	68ac      	ldr	r4, [r5, #8]
 8008b14:	e7eb      	b.n	8008aee <__swsetup_r+0x1e>
 8008b16:	4b24      	ldr	r3, [pc, #144]	; (8008ba8 <__swsetup_r+0xd8>)
 8008b18:	429c      	cmp	r4, r3
 8008b1a:	bf08      	it	eq
 8008b1c:	68ec      	ldreq	r4, [r5, #12]
 8008b1e:	e7e6      	b.n	8008aee <__swsetup_r+0x1e>
 8008b20:	0758      	lsls	r0, r3, #29
 8008b22:	d512      	bpl.n	8008b4a <__swsetup_r+0x7a>
 8008b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b26:	b141      	cbz	r1, 8008b3a <__swsetup_r+0x6a>
 8008b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b2c:	4299      	cmp	r1, r3
 8008b2e:	d002      	beq.n	8008b36 <__swsetup_r+0x66>
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7fd fea9 	bl	8006888 <_free_r>
 8008b36:	2300      	movs	r3, #0
 8008b38:	6363      	str	r3, [r4, #52]	; 0x34
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	2300      	movs	r3, #0
 8008b44:	6063      	str	r3, [r4, #4]
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f043 0308 	orr.w	r3, r3, #8
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	b94b      	cbnz	r3, 8008b6a <__swsetup_r+0x9a>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b60:	d003      	beq.n	8008b6a <__swsetup_r+0x9a>
 8008b62:	4621      	mov	r1, r4
 8008b64:	4630      	mov	r0, r6
 8008b66:	f000 fa07 	bl	8008f78 <__smakebuf_r>
 8008b6a:	89a0      	ldrh	r0, [r4, #12]
 8008b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b70:	f010 0301 	ands.w	r3, r0, #1
 8008b74:	d00a      	beq.n	8008b8c <__swsetup_r+0xbc>
 8008b76:	2300      	movs	r3, #0
 8008b78:	60a3      	str	r3, [r4, #8]
 8008b7a:	6963      	ldr	r3, [r4, #20]
 8008b7c:	425b      	negs	r3, r3
 8008b7e:	61a3      	str	r3, [r4, #24]
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	b943      	cbnz	r3, 8008b96 <__swsetup_r+0xc6>
 8008b84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b88:	d1ba      	bne.n	8008b00 <__swsetup_r+0x30>
 8008b8a:	bd70      	pop	{r4, r5, r6, pc}
 8008b8c:	0781      	lsls	r1, r0, #30
 8008b8e:	bf58      	it	pl
 8008b90:	6963      	ldrpl	r3, [r4, #20]
 8008b92:	60a3      	str	r3, [r4, #8]
 8008b94:	e7f4      	b.n	8008b80 <__swsetup_r+0xb0>
 8008b96:	2000      	movs	r0, #0
 8008b98:	e7f7      	b.n	8008b8a <__swsetup_r+0xba>
 8008b9a:	bf00      	nop
 8008b9c:	20000154 	.word	0x20000154
 8008ba0:	08009610 	.word	0x08009610
 8008ba4:	08009630 	.word	0x08009630
 8008ba8:	080095f0 	.word	0x080095f0

08008bac <abort>:
 8008bac:	b508      	push	{r3, lr}
 8008bae:	2006      	movs	r0, #6
 8008bb0:	f000 fa64 	bl	800907c <raise>
 8008bb4:	2001      	movs	r0, #1
 8008bb6:	f7f8 f9e3 	bl	8000f80 <_exit>
	...

08008bbc <__sflush_r>:
 8008bbc:	898a      	ldrh	r2, [r1, #12]
 8008bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	0710      	lsls	r0, r2, #28
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	d458      	bmi.n	8008c7c <__sflush_r+0xc0>
 8008bca:	684b      	ldr	r3, [r1, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	dc05      	bgt.n	8008bdc <__sflush_r+0x20>
 8008bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	dc02      	bgt.n	8008bdc <__sflush_r+0x20>
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	d0f9      	beq.n	8008bd6 <__sflush_r+0x1a>
 8008be2:	2300      	movs	r3, #0
 8008be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008be8:	682f      	ldr	r7, [r5, #0]
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	d032      	beq.n	8008c54 <__sflush_r+0x98>
 8008bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	075a      	lsls	r2, r3, #29
 8008bf4:	d505      	bpl.n	8008c02 <__sflush_r+0x46>
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	1ac0      	subs	r0, r0, r3
 8008bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bfc:	b10b      	cbz	r3, 8008c02 <__sflush_r+0x46>
 8008bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c00:	1ac0      	subs	r0, r0, r3
 8008c02:	2300      	movs	r3, #0
 8008c04:	4602      	mov	r2, r0
 8008c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c08:	6a21      	ldr	r1, [r4, #32]
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	47b0      	blx	r6
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	d106      	bne.n	8008c22 <__sflush_r+0x66>
 8008c14:	6829      	ldr	r1, [r5, #0]
 8008c16:	291d      	cmp	r1, #29
 8008c18:	d82c      	bhi.n	8008c74 <__sflush_r+0xb8>
 8008c1a:	4a2a      	ldr	r2, [pc, #168]	; (8008cc4 <__sflush_r+0x108>)
 8008c1c:	40ca      	lsrs	r2, r1
 8008c1e:	07d6      	lsls	r6, r2, #31
 8008c20:	d528      	bpl.n	8008c74 <__sflush_r+0xb8>
 8008c22:	2200      	movs	r2, #0
 8008c24:	6062      	str	r2, [r4, #4]
 8008c26:	04d9      	lsls	r1, r3, #19
 8008c28:	6922      	ldr	r2, [r4, #16]
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	d504      	bpl.n	8008c38 <__sflush_r+0x7c>
 8008c2e:	1c42      	adds	r2, r0, #1
 8008c30:	d101      	bne.n	8008c36 <__sflush_r+0x7a>
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	b903      	cbnz	r3, 8008c38 <__sflush_r+0x7c>
 8008c36:	6560      	str	r0, [r4, #84]	; 0x54
 8008c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c3a:	602f      	str	r7, [r5, #0]
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	d0ca      	beq.n	8008bd6 <__sflush_r+0x1a>
 8008c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c44:	4299      	cmp	r1, r3
 8008c46:	d002      	beq.n	8008c4e <__sflush_r+0x92>
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f7fd fe1d 	bl	8006888 <_free_r>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	6360      	str	r0, [r4, #52]	; 0x34
 8008c52:	e7c1      	b.n	8008bd8 <__sflush_r+0x1c>
 8008c54:	6a21      	ldr	r1, [r4, #32]
 8008c56:	2301      	movs	r3, #1
 8008c58:	4628      	mov	r0, r5
 8008c5a:	47b0      	blx	r6
 8008c5c:	1c41      	adds	r1, r0, #1
 8008c5e:	d1c7      	bne.n	8008bf0 <__sflush_r+0x34>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0c4      	beq.n	8008bf0 <__sflush_r+0x34>
 8008c66:	2b1d      	cmp	r3, #29
 8008c68:	d001      	beq.n	8008c6e <__sflush_r+0xb2>
 8008c6a:	2b16      	cmp	r3, #22
 8008c6c:	d101      	bne.n	8008c72 <__sflush_r+0xb6>
 8008c6e:	602f      	str	r7, [r5, #0]
 8008c70:	e7b1      	b.n	8008bd6 <__sflush_r+0x1a>
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c78:	81a3      	strh	r3, [r4, #12]
 8008c7a:	e7ad      	b.n	8008bd8 <__sflush_r+0x1c>
 8008c7c:	690f      	ldr	r7, [r1, #16]
 8008c7e:	2f00      	cmp	r7, #0
 8008c80:	d0a9      	beq.n	8008bd6 <__sflush_r+0x1a>
 8008c82:	0793      	lsls	r3, r2, #30
 8008c84:	680e      	ldr	r6, [r1, #0]
 8008c86:	bf08      	it	eq
 8008c88:	694b      	ldreq	r3, [r1, #20]
 8008c8a:	600f      	str	r7, [r1, #0]
 8008c8c:	bf18      	it	ne
 8008c8e:	2300      	movne	r3, #0
 8008c90:	eba6 0807 	sub.w	r8, r6, r7
 8008c94:	608b      	str	r3, [r1, #8]
 8008c96:	f1b8 0f00 	cmp.w	r8, #0
 8008c9a:	dd9c      	ble.n	8008bd6 <__sflush_r+0x1a>
 8008c9c:	6a21      	ldr	r1, [r4, #32]
 8008c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ca0:	4643      	mov	r3, r8
 8008ca2:	463a      	mov	r2, r7
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b0      	blx	r6
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	dc06      	bgt.n	8008cba <__sflush_r+0xfe>
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb8:	e78e      	b.n	8008bd8 <__sflush_r+0x1c>
 8008cba:	4407      	add	r7, r0
 8008cbc:	eba8 0800 	sub.w	r8, r8, r0
 8008cc0:	e7e9      	b.n	8008c96 <__sflush_r+0xda>
 8008cc2:	bf00      	nop
 8008cc4:	20400001 	.word	0x20400001

08008cc8 <_fflush_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	690b      	ldr	r3, [r1, #16]
 8008ccc:	4605      	mov	r5, r0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	b913      	cbnz	r3, 8008cd8 <_fflush_r+0x10>
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	b118      	cbz	r0, 8008ce2 <_fflush_r+0x1a>
 8008cda:	6983      	ldr	r3, [r0, #24]
 8008cdc:	b90b      	cbnz	r3, 8008ce2 <_fflush_r+0x1a>
 8008cde:	f000 f887 	bl	8008df0 <__sinit>
 8008ce2:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <_fflush_r+0x6c>)
 8008ce4:	429c      	cmp	r4, r3
 8008ce6:	d11b      	bne.n	8008d20 <_fflush_r+0x58>
 8008ce8:	686c      	ldr	r4, [r5, #4]
 8008cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0ef      	beq.n	8008cd2 <_fflush_r+0xa>
 8008cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cf4:	07d0      	lsls	r0, r2, #31
 8008cf6:	d404      	bmi.n	8008d02 <_fflush_r+0x3a>
 8008cf8:	0599      	lsls	r1, r3, #22
 8008cfa:	d402      	bmi.n	8008d02 <_fflush_r+0x3a>
 8008cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cfe:	f000 f915 	bl	8008f2c <__retarget_lock_acquire_recursive>
 8008d02:	4628      	mov	r0, r5
 8008d04:	4621      	mov	r1, r4
 8008d06:	f7ff ff59 	bl	8008bbc <__sflush_r>
 8008d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d0c:	07da      	lsls	r2, r3, #31
 8008d0e:	4605      	mov	r5, r0
 8008d10:	d4e0      	bmi.n	8008cd4 <_fflush_r+0xc>
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	059b      	lsls	r3, r3, #22
 8008d16:	d4dd      	bmi.n	8008cd4 <_fflush_r+0xc>
 8008d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1a:	f000 f908 	bl	8008f2e <__retarget_lock_release_recursive>
 8008d1e:	e7d9      	b.n	8008cd4 <_fflush_r+0xc>
 8008d20:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <_fflush_r+0x70>)
 8008d22:	429c      	cmp	r4, r3
 8008d24:	d101      	bne.n	8008d2a <_fflush_r+0x62>
 8008d26:	68ac      	ldr	r4, [r5, #8]
 8008d28:	e7df      	b.n	8008cea <_fflush_r+0x22>
 8008d2a:	4b04      	ldr	r3, [pc, #16]	; (8008d3c <_fflush_r+0x74>)
 8008d2c:	429c      	cmp	r4, r3
 8008d2e:	bf08      	it	eq
 8008d30:	68ec      	ldreq	r4, [r5, #12]
 8008d32:	e7da      	b.n	8008cea <_fflush_r+0x22>
 8008d34:	08009610 	.word	0x08009610
 8008d38:	08009630 	.word	0x08009630
 8008d3c:	080095f0 	.word	0x080095f0

08008d40 <std>:
 8008d40:	2300      	movs	r3, #0
 8008d42:	b510      	push	{r4, lr}
 8008d44:	4604      	mov	r4, r0
 8008d46:	e9c0 3300 	strd	r3, r3, [r0]
 8008d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d4e:	6083      	str	r3, [r0, #8]
 8008d50:	8181      	strh	r1, [r0, #12]
 8008d52:	6643      	str	r3, [r0, #100]	; 0x64
 8008d54:	81c2      	strh	r2, [r0, #14]
 8008d56:	6183      	str	r3, [r0, #24]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	2208      	movs	r2, #8
 8008d5c:	305c      	adds	r0, #92	; 0x5c
 8008d5e:	f7fd fd8b 	bl	8006878 <memset>
 8008d62:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <std+0x38>)
 8008d64:	6263      	str	r3, [r4, #36]	; 0x24
 8008d66:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <std+0x3c>)
 8008d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d6a:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <std+0x40>)
 8008d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <std+0x44>)
 8008d70:	6224      	str	r4, [r4, #32]
 8008d72:	6323      	str	r3, [r4, #48]	; 0x30
 8008d74:	bd10      	pop	{r4, pc}
 8008d76:	bf00      	nop
 8008d78:	080090b5 	.word	0x080090b5
 8008d7c:	080090d7 	.word	0x080090d7
 8008d80:	0800910f 	.word	0x0800910f
 8008d84:	08009133 	.word	0x08009133

08008d88 <_cleanup_r>:
 8008d88:	4901      	ldr	r1, [pc, #4]	; (8008d90 <_cleanup_r+0x8>)
 8008d8a:	f000 b8af 	b.w	8008eec <_fwalk_reent>
 8008d8e:	bf00      	nop
 8008d90:	08008cc9 	.word	0x08008cc9

08008d94 <__sfmoreglue>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	1e4a      	subs	r2, r1, #1
 8008d98:	2568      	movs	r5, #104	; 0x68
 8008d9a:	4355      	muls	r5, r2
 8008d9c:	460e      	mov	r6, r1
 8008d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008da2:	f7fd fdc1 	bl	8006928 <_malloc_r>
 8008da6:	4604      	mov	r4, r0
 8008da8:	b140      	cbz	r0, 8008dbc <__sfmoreglue+0x28>
 8008daa:	2100      	movs	r1, #0
 8008dac:	e9c0 1600 	strd	r1, r6, [r0]
 8008db0:	300c      	adds	r0, #12
 8008db2:	60a0      	str	r0, [r4, #8]
 8008db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008db8:	f7fd fd5e 	bl	8006878 <memset>
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}

08008dc0 <__sfp_lock_acquire>:
 8008dc0:	4801      	ldr	r0, [pc, #4]	; (8008dc8 <__sfp_lock_acquire+0x8>)
 8008dc2:	f000 b8b3 	b.w	8008f2c <__retarget_lock_acquire_recursive>
 8008dc6:	bf00      	nop
 8008dc8:	20000758 	.word	0x20000758

08008dcc <__sfp_lock_release>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	; (8008dd4 <__sfp_lock_release+0x8>)
 8008dce:	f000 b8ae 	b.w	8008f2e <__retarget_lock_release_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	20000758 	.word	0x20000758

08008dd8 <__sinit_lock_acquire>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__sinit_lock_acquire+0x8>)
 8008dda:	f000 b8a7 	b.w	8008f2c <__retarget_lock_acquire_recursive>
 8008dde:	bf00      	nop
 8008de0:	20000753 	.word	0x20000753

08008de4 <__sinit_lock_release>:
 8008de4:	4801      	ldr	r0, [pc, #4]	; (8008dec <__sinit_lock_release+0x8>)
 8008de6:	f000 b8a2 	b.w	8008f2e <__retarget_lock_release_recursive>
 8008dea:	bf00      	nop
 8008dec:	20000753 	.word	0x20000753

08008df0 <__sinit>:
 8008df0:	b510      	push	{r4, lr}
 8008df2:	4604      	mov	r4, r0
 8008df4:	f7ff fff0 	bl	8008dd8 <__sinit_lock_acquire>
 8008df8:	69a3      	ldr	r3, [r4, #24]
 8008dfa:	b11b      	cbz	r3, 8008e04 <__sinit+0x14>
 8008dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e00:	f7ff bff0 	b.w	8008de4 <__sinit_lock_release>
 8008e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e08:	6523      	str	r3, [r4, #80]	; 0x50
 8008e0a:	4b13      	ldr	r3, [pc, #76]	; (8008e58 <__sinit+0x68>)
 8008e0c:	4a13      	ldr	r2, [pc, #76]	; (8008e5c <__sinit+0x6c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e12:	42a3      	cmp	r3, r4
 8008e14:	bf04      	itt	eq
 8008e16:	2301      	moveq	r3, #1
 8008e18:	61a3      	streq	r3, [r4, #24]
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 f820 	bl	8008e60 <__sfp>
 8008e20:	6060      	str	r0, [r4, #4]
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 f81c 	bl	8008e60 <__sfp>
 8008e28:	60a0      	str	r0, [r4, #8]
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 f818 	bl	8008e60 <__sfp>
 8008e30:	2200      	movs	r2, #0
 8008e32:	60e0      	str	r0, [r4, #12]
 8008e34:	2104      	movs	r1, #4
 8008e36:	6860      	ldr	r0, [r4, #4]
 8008e38:	f7ff ff82 	bl	8008d40 <std>
 8008e3c:	68a0      	ldr	r0, [r4, #8]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	2109      	movs	r1, #9
 8008e42:	f7ff ff7d 	bl	8008d40 <std>
 8008e46:	68e0      	ldr	r0, [r4, #12]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	2112      	movs	r1, #18
 8008e4c:	f7ff ff78 	bl	8008d40 <std>
 8008e50:	2301      	movs	r3, #1
 8008e52:	61a3      	str	r3, [r4, #24]
 8008e54:	e7d2      	b.n	8008dfc <__sinit+0xc>
 8008e56:	bf00      	nop
 8008e58:	08009314 	.word	0x08009314
 8008e5c:	08008d89 	.word	0x08008d89

08008e60 <__sfp>:
 8008e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e62:	4607      	mov	r7, r0
 8008e64:	f7ff ffac 	bl	8008dc0 <__sfp_lock_acquire>
 8008e68:	4b1e      	ldr	r3, [pc, #120]	; (8008ee4 <__sfp+0x84>)
 8008e6a:	681e      	ldr	r6, [r3, #0]
 8008e6c:	69b3      	ldr	r3, [r6, #24]
 8008e6e:	b913      	cbnz	r3, 8008e76 <__sfp+0x16>
 8008e70:	4630      	mov	r0, r6
 8008e72:	f7ff ffbd 	bl	8008df0 <__sinit>
 8008e76:	3648      	adds	r6, #72	; 0x48
 8008e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	d503      	bpl.n	8008e88 <__sfp+0x28>
 8008e80:	6833      	ldr	r3, [r6, #0]
 8008e82:	b30b      	cbz	r3, 8008ec8 <__sfp+0x68>
 8008e84:	6836      	ldr	r6, [r6, #0]
 8008e86:	e7f7      	b.n	8008e78 <__sfp+0x18>
 8008e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e8c:	b9d5      	cbnz	r5, 8008ec4 <__sfp+0x64>
 8008e8e:	4b16      	ldr	r3, [pc, #88]	; (8008ee8 <__sfp+0x88>)
 8008e90:	60e3      	str	r3, [r4, #12]
 8008e92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e96:	6665      	str	r5, [r4, #100]	; 0x64
 8008e98:	f000 f847 	bl	8008f2a <__retarget_lock_init_recursive>
 8008e9c:	f7ff ff96 	bl	8008dcc <__sfp_lock_release>
 8008ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ea8:	6025      	str	r5, [r4, #0]
 8008eaa:	61a5      	str	r5, [r4, #24]
 8008eac:	2208      	movs	r2, #8
 8008eae:	4629      	mov	r1, r5
 8008eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008eb4:	f7fd fce0 	bl	8006878 <memset>
 8008eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec4:	3468      	adds	r4, #104	; 0x68
 8008ec6:	e7d9      	b.n	8008e7c <__sfp+0x1c>
 8008ec8:	2104      	movs	r1, #4
 8008eca:	4638      	mov	r0, r7
 8008ecc:	f7ff ff62 	bl	8008d94 <__sfmoreglue>
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	6030      	str	r0, [r6, #0]
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d1d5      	bne.n	8008e84 <__sfp+0x24>
 8008ed8:	f7ff ff78 	bl	8008dcc <__sfp_lock_release>
 8008edc:	230c      	movs	r3, #12
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	e7ee      	b.n	8008ec0 <__sfp+0x60>
 8008ee2:	bf00      	nop
 8008ee4:	08009314 	.word	0x08009314
 8008ee8:	ffff0001 	.word	0xffff0001

08008eec <_fwalk_reent>:
 8008eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	4688      	mov	r8, r1
 8008ef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ef8:	2700      	movs	r7, #0
 8008efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008efe:	f1b9 0901 	subs.w	r9, r9, #1
 8008f02:	d505      	bpl.n	8008f10 <_fwalk_reent+0x24>
 8008f04:	6824      	ldr	r4, [r4, #0]
 8008f06:	2c00      	cmp	r4, #0
 8008f08:	d1f7      	bne.n	8008efa <_fwalk_reent+0xe>
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f10:	89ab      	ldrh	r3, [r5, #12]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d907      	bls.n	8008f26 <_fwalk_reent+0x3a>
 8008f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	d003      	beq.n	8008f26 <_fwalk_reent+0x3a>
 8008f1e:	4629      	mov	r1, r5
 8008f20:	4630      	mov	r0, r6
 8008f22:	47c0      	blx	r8
 8008f24:	4307      	orrs	r7, r0
 8008f26:	3568      	adds	r5, #104	; 0x68
 8008f28:	e7e9      	b.n	8008efe <_fwalk_reent+0x12>

08008f2a <__retarget_lock_init_recursive>:
 8008f2a:	4770      	bx	lr

08008f2c <__retarget_lock_acquire_recursive>:
 8008f2c:	4770      	bx	lr

08008f2e <__retarget_lock_release_recursive>:
 8008f2e:	4770      	bx	lr

08008f30 <__swhatbuf_r>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	460e      	mov	r6, r1
 8008f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	b096      	sub	sp, #88	; 0x58
 8008f3c:	4614      	mov	r4, r2
 8008f3e:	461d      	mov	r5, r3
 8008f40:	da07      	bge.n	8008f52 <__swhatbuf_r+0x22>
 8008f42:	2300      	movs	r3, #0
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	89b3      	ldrh	r3, [r6, #12]
 8008f48:	061a      	lsls	r2, r3, #24
 8008f4a:	d410      	bmi.n	8008f6e <__swhatbuf_r+0x3e>
 8008f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f50:	e00e      	b.n	8008f70 <__swhatbuf_r+0x40>
 8008f52:	466a      	mov	r2, sp
 8008f54:	f000 f920 	bl	8009198 <_fstat_r>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	dbf2      	blt.n	8008f42 <__swhatbuf_r+0x12>
 8008f5c:	9a01      	ldr	r2, [sp, #4]
 8008f5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f66:	425a      	negs	r2, r3
 8008f68:	415a      	adcs	r2, r3
 8008f6a:	602a      	str	r2, [r5, #0]
 8008f6c:	e7ee      	b.n	8008f4c <__swhatbuf_r+0x1c>
 8008f6e:	2340      	movs	r3, #64	; 0x40
 8008f70:	2000      	movs	r0, #0
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	b016      	add	sp, #88	; 0x58
 8008f76:	bd70      	pop	{r4, r5, r6, pc}

08008f78 <__smakebuf_r>:
 8008f78:	898b      	ldrh	r3, [r1, #12]
 8008f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f7c:	079d      	lsls	r5, r3, #30
 8008f7e:	4606      	mov	r6, r0
 8008f80:	460c      	mov	r4, r1
 8008f82:	d507      	bpl.n	8008f94 <__smakebuf_r+0x1c>
 8008f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	6123      	str	r3, [r4, #16]
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	6163      	str	r3, [r4, #20]
 8008f90:	b002      	add	sp, #8
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	ab01      	add	r3, sp, #4
 8008f96:	466a      	mov	r2, sp
 8008f98:	f7ff ffca 	bl	8008f30 <__swhatbuf_r>
 8008f9c:	9900      	ldr	r1, [sp, #0]
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7fd fcc1 	bl	8006928 <_malloc_r>
 8008fa6:	b948      	cbnz	r0, 8008fbc <__smakebuf_r+0x44>
 8008fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fac:	059a      	lsls	r2, r3, #22
 8008fae:	d4ef      	bmi.n	8008f90 <__smakebuf_r+0x18>
 8008fb0:	f023 0303 	bic.w	r3, r3, #3
 8008fb4:	f043 0302 	orr.w	r3, r3, #2
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	e7e3      	b.n	8008f84 <__smakebuf_r+0xc>
 8008fbc:	4b0d      	ldr	r3, [pc, #52]	; (8008ff4 <__smakebuf_r+0x7c>)
 8008fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	6020      	str	r0, [r4, #0]
 8008fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	9b00      	ldr	r3, [sp, #0]
 8008fcc:	6163      	str	r3, [r4, #20]
 8008fce:	9b01      	ldr	r3, [sp, #4]
 8008fd0:	6120      	str	r0, [r4, #16]
 8008fd2:	b15b      	cbz	r3, 8008fec <__smakebuf_r+0x74>
 8008fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f000 f8ef 	bl	80091bc <_isatty_r>
 8008fde:	b128      	cbz	r0, 8008fec <__smakebuf_r+0x74>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f023 0303 	bic.w	r3, r3, #3
 8008fe6:	f043 0301 	orr.w	r3, r3, #1
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	89a0      	ldrh	r0, [r4, #12]
 8008fee:	4305      	orrs	r5, r0
 8008ff0:	81a5      	strh	r5, [r4, #12]
 8008ff2:	e7cd      	b.n	8008f90 <__smakebuf_r+0x18>
 8008ff4:	08008d89 	.word	0x08008d89

08008ff8 <__ascii_mbtowc>:
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	b901      	cbnz	r1, 8008ffe <__ascii_mbtowc+0x6>
 8008ffc:	a901      	add	r1, sp, #4
 8008ffe:	b142      	cbz	r2, 8009012 <__ascii_mbtowc+0x1a>
 8009000:	b14b      	cbz	r3, 8009016 <__ascii_mbtowc+0x1e>
 8009002:	7813      	ldrb	r3, [r2, #0]
 8009004:	600b      	str	r3, [r1, #0]
 8009006:	7812      	ldrb	r2, [r2, #0]
 8009008:	1e10      	subs	r0, r2, #0
 800900a:	bf18      	it	ne
 800900c:	2001      	movne	r0, #1
 800900e:	b002      	add	sp, #8
 8009010:	4770      	bx	lr
 8009012:	4610      	mov	r0, r2
 8009014:	e7fb      	b.n	800900e <__ascii_mbtowc+0x16>
 8009016:	f06f 0001 	mvn.w	r0, #1
 800901a:	e7f8      	b.n	800900e <__ascii_mbtowc+0x16>

0800901c <_malloc_usable_size_r>:
 800901c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009020:	1f18      	subs	r0, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	bfbc      	itt	lt
 8009026:	580b      	ldrlt	r3, [r1, r0]
 8009028:	18c0      	addlt	r0, r0, r3
 800902a:	4770      	bx	lr

0800902c <_raise_r>:
 800902c:	291f      	cmp	r1, #31
 800902e:	b538      	push	{r3, r4, r5, lr}
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	d904      	bls.n	8009040 <_raise_r+0x14>
 8009036:	2316      	movs	r3, #22
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	f04f 30ff 	mov.w	r0, #4294967295
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009042:	b112      	cbz	r2, 800904a <_raise_r+0x1e>
 8009044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009048:	b94b      	cbnz	r3, 800905e <_raise_r+0x32>
 800904a:	4620      	mov	r0, r4
 800904c:	f000 f830 	bl	80090b0 <_getpid_r>
 8009050:	462a      	mov	r2, r5
 8009052:	4601      	mov	r1, r0
 8009054:	4620      	mov	r0, r4
 8009056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800905a:	f000 b817 	b.w	800908c <_kill_r>
 800905e:	2b01      	cmp	r3, #1
 8009060:	d00a      	beq.n	8009078 <_raise_r+0x4c>
 8009062:	1c59      	adds	r1, r3, #1
 8009064:	d103      	bne.n	800906e <_raise_r+0x42>
 8009066:	2316      	movs	r3, #22
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	2001      	movs	r0, #1
 800906c:	e7e7      	b.n	800903e <_raise_r+0x12>
 800906e:	2400      	movs	r4, #0
 8009070:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009074:	4628      	mov	r0, r5
 8009076:	4798      	blx	r3
 8009078:	2000      	movs	r0, #0
 800907a:	e7e0      	b.n	800903e <_raise_r+0x12>

0800907c <raise>:
 800907c:	4b02      	ldr	r3, [pc, #8]	; (8009088 <raise+0xc>)
 800907e:	4601      	mov	r1, r0
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	f7ff bfd3 	b.w	800902c <_raise_r>
 8009086:	bf00      	nop
 8009088:	20000154 	.word	0x20000154

0800908c <_kill_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d07      	ldr	r5, [pc, #28]	; (80090ac <_kill_r+0x20>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	4611      	mov	r1, r2
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	f7f7 ff61 	bl	8000f60 <_kill>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d102      	bne.n	80090a8 <_kill_r+0x1c>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	b103      	cbz	r3, 80090a8 <_kill_r+0x1c>
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	bf00      	nop
 80090ac:	2000074c 	.word	0x2000074c

080090b0 <_getpid_r>:
 80090b0:	f7f7 bf4e 	b.w	8000f50 <_getpid>

080090b4 <__sread>:
 80090b4:	b510      	push	{r4, lr}
 80090b6:	460c      	mov	r4, r1
 80090b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090bc:	f000 f8a0 	bl	8009200 <_read_r>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	bfab      	itete	ge
 80090c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090c6:	89a3      	ldrhlt	r3, [r4, #12]
 80090c8:	181b      	addge	r3, r3, r0
 80090ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090ce:	bfac      	ite	ge
 80090d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80090d2:	81a3      	strhlt	r3, [r4, #12]
 80090d4:	bd10      	pop	{r4, pc}

080090d6 <__swrite>:
 80090d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090da:	461f      	mov	r7, r3
 80090dc:	898b      	ldrh	r3, [r1, #12]
 80090de:	05db      	lsls	r3, r3, #23
 80090e0:	4605      	mov	r5, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	4616      	mov	r6, r2
 80090e6:	d505      	bpl.n	80090f4 <__swrite+0x1e>
 80090e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ec:	2302      	movs	r3, #2
 80090ee:	2200      	movs	r2, #0
 80090f0:	f000 f874 	bl	80091dc <_lseek_r>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	4632      	mov	r2, r6
 8009102:	463b      	mov	r3, r7
 8009104:	4628      	mov	r0, r5
 8009106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800910a:	f000 b823 	b.w	8009154 <_write_r>

0800910e <__sseek>:
 800910e:	b510      	push	{r4, lr}
 8009110:	460c      	mov	r4, r1
 8009112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009116:	f000 f861 	bl	80091dc <_lseek_r>
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	bf15      	itete	ne
 8009120:	6560      	strne	r0, [r4, #84]	; 0x54
 8009122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800912a:	81a3      	strheq	r3, [r4, #12]
 800912c:	bf18      	it	ne
 800912e:	81a3      	strhne	r3, [r4, #12]
 8009130:	bd10      	pop	{r4, pc}

08009132 <__sclose>:
 8009132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009136:	f000 b81f 	b.w	8009178 <_close_r>

0800913a <__ascii_wctomb>:
 800913a:	b149      	cbz	r1, 8009150 <__ascii_wctomb+0x16>
 800913c:	2aff      	cmp	r2, #255	; 0xff
 800913e:	bf85      	ittet	hi
 8009140:	238a      	movhi	r3, #138	; 0x8a
 8009142:	6003      	strhi	r3, [r0, #0]
 8009144:	700a      	strbls	r2, [r1, #0]
 8009146:	f04f 30ff 	movhi.w	r0, #4294967295
 800914a:	bf98      	it	ls
 800914c:	2001      	movls	r0, #1
 800914e:	4770      	bx	lr
 8009150:	4608      	mov	r0, r1
 8009152:	4770      	bx	lr

08009154 <_write_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	; (8009174 <_write_r+0x20>)
 8009158:	4604      	mov	r4, r0
 800915a:	4608      	mov	r0, r1
 800915c:	4611      	mov	r1, r2
 800915e:	2200      	movs	r2, #0
 8009160:	602a      	str	r2, [r5, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	f7f7 ff33 	bl	8000fce <_write>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_write_r+0x1e>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_write_r+0x1e>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	2000074c 	.word	0x2000074c

08009178 <_close_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d06      	ldr	r5, [pc, #24]	; (8009194 <_close_r+0x1c>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f7 ff3f 	bl	8001006 <_close>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_close_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_close_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	2000074c 	.word	0x2000074c

08009198 <_fstat_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4d07      	ldr	r5, [pc, #28]	; (80091b8 <_fstat_r+0x20>)
 800919c:	2300      	movs	r3, #0
 800919e:	4604      	mov	r4, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	4611      	mov	r1, r2
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	f7f7 ff3a 	bl	800101e <_fstat>
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	d102      	bne.n	80091b4 <_fstat_r+0x1c>
 80091ae:	682b      	ldr	r3, [r5, #0]
 80091b0:	b103      	cbz	r3, 80091b4 <_fstat_r+0x1c>
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	bd38      	pop	{r3, r4, r5, pc}
 80091b6:	bf00      	nop
 80091b8:	2000074c 	.word	0x2000074c

080091bc <_isatty_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4d06      	ldr	r5, [pc, #24]	; (80091d8 <_isatty_r+0x1c>)
 80091c0:	2300      	movs	r3, #0
 80091c2:	4604      	mov	r4, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	602b      	str	r3, [r5, #0]
 80091c8:	f7f7 ff39 	bl	800103e <_isatty>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d102      	bne.n	80091d6 <_isatty_r+0x1a>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	b103      	cbz	r3, 80091d6 <_isatty_r+0x1a>
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	bd38      	pop	{r3, r4, r5, pc}
 80091d8:	2000074c 	.word	0x2000074c

080091dc <_lseek_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d07      	ldr	r5, [pc, #28]	; (80091fc <_lseek_r+0x20>)
 80091e0:	4604      	mov	r4, r0
 80091e2:	4608      	mov	r0, r1
 80091e4:	4611      	mov	r1, r2
 80091e6:	2200      	movs	r2, #0
 80091e8:	602a      	str	r2, [r5, #0]
 80091ea:	461a      	mov	r2, r3
 80091ec:	f7f7 ff32 	bl	8001054 <_lseek>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_lseek_r+0x1e>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_lseek_r+0x1e>
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	2000074c 	.word	0x2000074c

08009200 <_read_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4d07      	ldr	r5, [pc, #28]	; (8009220 <_read_r+0x20>)
 8009204:	4604      	mov	r4, r0
 8009206:	4608      	mov	r0, r1
 8009208:	4611      	mov	r1, r2
 800920a:	2200      	movs	r2, #0
 800920c:	602a      	str	r2, [r5, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	f7f7 fec0 	bl	8000f94 <_read>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d102      	bne.n	800921e <_read_r+0x1e>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	b103      	cbz	r3, 800921e <_read_r+0x1e>
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	bd38      	pop	{r3, r4, r5, pc}
 8009220:	2000074c 	.word	0x2000074c

08009224 <_init>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	bf00      	nop
 8009228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922a:	bc08      	pop	{r3}
 800922c:	469e      	mov	lr, r3
 800922e:	4770      	bx	lr

08009230 <_fini>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	bf00      	nop
 8009234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009236:	bc08      	pop	{r3}
 8009238:	469e      	mov	lr, r3
 800923a:	4770      	bx	lr
