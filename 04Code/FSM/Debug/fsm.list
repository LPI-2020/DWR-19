
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a058  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800a258  0800a258  0001a258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a68c  0800a68c  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a68c  0800a68c  0001a68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a694  0800a694  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a694  0800a694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a698  0800a698  0001a698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800a69c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  200002d0  0800a96c  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800a96c  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b6e  00000000  00000000  000202fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004860  00000000  00000000  00041e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  000466d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  00047c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c274  00000000  00000000  00048fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d095  00000000  00000000  0007522c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106739  00000000  00000000  000922c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001989fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064a4  00000000  00000000  00198a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002d0 	.word	0x200002d0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a240 	.word	0x0800a240

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002d4 	.word	0x200002d4
 800023c:	0800a240 	.word	0x0800a240

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC2_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC2_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC2_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC2_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC2_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC2_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC2_Init+0x98>)
 8000616:	2201      	movs	r2, #1
 8000618:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC2_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC2_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC2_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC2_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC2_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC2_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC2_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC2_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC2_Init+0x98>)
 800064a:	f001 fe1b 	bl	8002284 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fc9c 	bl	8000f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000658:	2303      	movs	r3, #3
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000660:	2307      	movs	r3, #7
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC2_Init+0x98>)
 800066a:	f002 f90d 	bl	8002888 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fc8c 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000328 	.word	0x20000328
 8000684:	40012100 	.word	0x40012100
 8000688:	0f000001 	.word	0x0f000001

0800068c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <MX_ADC3_Init+0x128>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b2:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006b8:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ce:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <MX_ADC3_Init+0x12c>)
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006da:	2206      	movs	r2, #6
 80006dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006ec:	4830      	ldr	r0, [pc, #192]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ee:	f001 fdc9 	bl	8002284 <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 fc4a 	bl	8000f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006fc:	230a      	movs	r3, #10
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000704:	2307      	movs	r3, #7
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4828      	ldr	r0, [pc, #160]	; (80007b0 <MX_ADC3_Init+0x124>)
 800070e:	f002 f8bb 	bl	8002888 <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 fc3a 	bl	8000f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800071c:	230d      	movs	r3, #13
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000720:	2302      	movs	r3, #2
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4821      	ldr	r0, [pc, #132]	; (80007b0 <MX_ADC3_Init+0x124>)
 800072a:	f002 f8ad 	bl	8002888 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000734:	f000 fc2c 	bl	8000f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000738:	2309      	movs	r3, #9
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	481a      	ldr	r0, [pc, #104]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000746:	f002 f89f 	bl	8002888 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000750:	f000 fc1e 	bl	8000f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000754:	230f      	movs	r3, #15
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000758:	2304      	movs	r3, #4
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000762:	f002 f891 	bl	8002888 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800076c:	f000 fc10 	bl	8000f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000770:	2308      	movs	r3, #8
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000774:	2305      	movs	r3, #5
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_ADC3_Init+0x124>)
 800077e:	f002 f883 	bl	8002888 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000788:	f000 fc02 	bl	8000f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800078c:	2306      	movs	r3, #6
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000790:	2306      	movs	r3, #6
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC3_Init+0x124>)
 800079a:	f002 f875 	bl	8002888 <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80007a4:	f000 fbf4 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200003d0 	.word	0x200003d0
 80007b4:	40012200 	.word	0x40012200
 80007b8:	0f000001 	.word	0x0f000001

080007bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a7c      	ldr	r2, [pc, #496]	; (80009cc <HAL_ADC_MspInit+0x210>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d15d      	bne.n	800089a <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007de:	4b7c      	ldr	r3, [pc, #496]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a7b      	ldr	r2, [pc, #492]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b79      	ldr	r3, [pc, #484]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007f2:	623b      	str	r3, [r7, #32]
 80007f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b76      	ldr	r3, [pc, #472]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a75      	ldr	r2, [pc, #468]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b73      	ldr	r3, [pc, #460]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69fb      	ldr	r3, [r7, #28]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	486c      	ldr	r0, [pc, #432]	; (80009d4 <HAL_ADC_MspInit+0x218>)
 8000822:	f003 f837 	bl	8003894 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8000826:	4b6c      	ldr	r3, [pc, #432]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000828:	4a6c      	ldr	r2, [pc, #432]	; (80009dc <HAL_ADC_MspInit+0x220>)
 800082a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800082c:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800082e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000832:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000834:	4b68      	ldr	r3, [pc, #416]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b65      	ldr	r3, [pc, #404]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000846:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800084a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800085a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000860:	4b5d      	ldr	r3, [pc, #372]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000866:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800086c:	485a      	ldr	r0, [pc, #360]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800086e:	f002 fc07 	bl	8003080 <HAL_DMA_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000878:	f000 fb8a 	bl	8000f90 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a56      	ldr	r2, [pc, #344]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
 8000882:	4a55      	ldr	r2, [pc, #340]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2012      	movs	r0, #18
 800088e:	f002 fbbc 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000892:	2012      	movs	r0, #18
 8000894:	f002 fbd5 	bl	8003042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000898:	e093      	b.n	80009c2 <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC3)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a50      	ldr	r2, [pc, #320]	; (80009e0 <HAL_ADC_MspInit+0x224>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f040 808e 	bne.w	80009c2 <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008a6:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a43      	ldr	r2, [pc, #268]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008c4:	f043 0320 	orr.w	r3, r3, #32
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a3d      	ldr	r2, [pc, #244]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin|SENSOR8_Pin|SENSOR6_Pin;
 8000906:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	4832      	ldr	r0, [pc, #200]	; (80009e4 <HAL_ADC_MspInit+0x228>)
 800091c:	f002 ffba 	bl	8003894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR3_Pin;
 8000920:	2309      	movs	r3, #9
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000924:	2303      	movs	r3, #3
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	482d      	ldr	r0, [pc, #180]	; (80009e8 <HAL_ADC_MspInit+0x22c>)
 8000934:	f002 ffae 	bl	8003894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 8000938:	2308      	movs	r3, #8
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4822      	ldr	r0, [pc, #136]	; (80009d4 <HAL_ADC_MspInit+0x218>)
 800094c:	f002 ffa2 	bl	8003894 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000952:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <HAL_ADC_MspInit+0x234>)
 8000954:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000958:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800095c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000978:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800097c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000980:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000988:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000998:	f002 fb72 	bl	8003080 <HAL_DMA_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x1ea>
      Error_Handler();
 80009a2:	f000 faf5 	bl	8000f90 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_ADC_MspInit+0x230>)
 80009aa:	639a      	str	r2, [r3, #56]	; 0x38
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_ADC_MspInit+0x230>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2012      	movs	r0, #18
 80009b8:	f002 fb27 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009bc:	2012      	movs	r0, #18
 80009be:	f002 fb40 	bl	8003042 <HAL_NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3738      	adds	r7, #56	; 0x38
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40012100 	.word	0x40012100
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	20000418 	.word	0x20000418
 80009dc:	40026440 	.word	0x40026440
 80009e0:	40012200 	.word	0x40012200
 80009e4:	40021400 	.word	0x40021400
 80009e8:	40020800 	.word	0x40020800
 80009ec:	20000370 	.word	0x20000370
 80009f0:	40026428 	.word	0x40026428

080009f4 <debounce>:
@brief
@param	none
@retval	none
******************************************************************************/
static uint8_t debounce(ST_debounce *pb)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	uint8_t pin_sample;
	// sample pin - once per interrupt

	pin_sample = HAL_GPIO_ReadPin(pb->GPIOx, pb->GPIO_Pin);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	891b      	ldrh	r3, [r3, #8]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4610      	mov	r0, r2
 8000a08:	f003 f8f0 	bl	8003bec <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	73fb      	strb	r3, [r7, #15]

	// refresh count1s
	// subtract window bit 7 to count1s
	pb->count1s -= (pb->window >> 7);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	785a      	ldrb	r2, [r3, #1]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	11db      	asrs	r3, r3, #7
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4413      	add	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	705a      	strb	r2, [r3, #1]
	// add pim_sample
	pb->count1s += pin_sample;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	785a      	ldrb	r2, [r3, #1]
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	705a      	strb	r2, [r3, #1]

	// slide window
	pb->window <<=1;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	701a      	strb	r2, [r3, #0]
	// put pin_sample bit 0 if window
	pb->window |= pin_sample;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	701a      	strb	r2, [r3, #0]

	// verify output
	return (((4 - pb->count1s) >> 7) & 0x01);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	f1c3 0304 	rsb	r3, r3, #4
 8000a58:	11db      	asrs	r3, r3, #7
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <debounce_isr>:

void debounce_isr(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	// previous button state
	static uint8_t pre_state = 0;
	// current button state
	uint8_t state = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]

	// debounce button
	state = debounce(&button);
 8000a76:	4810      	ldr	r0, [pc, #64]	; (8000ab8 <debounce_isr+0x4c>)
 8000a78:	f7ff ffbc 	bl	80009f4 <debounce>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
	// determine button output
//	if((pre_state == 0) && (state == 1))
//		button.pin_output = 0;
//	if((pre_state == 1) && (state == 0))
//		button.pin_output = 1;
	if((pre_state == 0) && (state == 1))
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <debounce_isr+0x50>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d105      	bne.n	8000a94 <debounce_isr+0x28>
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d102      	bne.n	8000a94 <debounce_isr+0x28>
		button.pin_output = 1;
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <debounce_isr+0x4c>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	729a      	strb	r2, [r3, #10]
	if((pre_state == 1) && (state == 0))
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <debounce_isr+0x50>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d105      	bne.n	8000aa8 <debounce_isr+0x3c>
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <debounce_isr+0x3c>
		button.pin_output = 0;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <debounce_isr+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	729a      	strb	r2, [r3, #10]

	//button.pin_output = (state * ((~pre_state) & 0x01));

	// update previous button state
	pre_state = state;
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <debounce_isr+0x50>)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	7013      	strb	r3, [r2, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000540 	.word	0x20000540
 8000abc:	200002ec 	.word	0x200002ec

08000ac0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_DMA_Init+0x48>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <MX_DMA_Init+0x48>)
 8000acc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_DMA_Init+0x48>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2039      	movs	r0, #57	; 0x39
 8000ae4:	f002 fa91 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ae8:	2039      	movs	r0, #57	; 0x39
 8000aea:	f002 faaa 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	203a      	movs	r0, #58	; 0x3a
 8000af4:	f002 fa89 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000af8:	203a      	movs	r0, #58	; 0x3a
 8000afa:	f002 faa2 	bl	8003042 <HAL_NVIC_EnableIRQ>

}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <MX_GPIO_Init>:

/** Configure pins
     PC0   ------> ADCx_IN10
*/
void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b22:	4b4b      	ldr	r3, [pc, #300]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a4a      	ldr	r2, [pc, #296]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b28:	f043 0320 	orr.w	r3, r3, #32
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b48      	ldr	r3, [pc, #288]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0320 	and.w	r3, r3, #32
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a44      	ldr	r2, [pc, #272]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a38      	ldr	r2, [pc, #224]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	4b33      	ldr	r3, [pc, #204]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <MX_GPIO_Init+0x144>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2160      	movs	r1, #96	; 0x60
 8000b9e:	482d      	ldr	r0, [pc, #180]	; (8000c54 <MX_GPIO_Init+0x148>)
 8000ba0:	f003 f83c 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f244 2181 	movw	r1, #17025	; 0x4281
 8000baa:	482b      	ldr	r0, [pc, #172]	; (8000c58 <MX_GPIO_Init+0x14c>)
 8000bac:	f003 f836 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f244 0104 	movw	r1, #16388	; 0x4004
 8000bb6:	4829      	ldr	r0, [pc, #164]	; (8000c5c <MX_GPIO_Init+0x150>)
 8000bb8:	f003 f830 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4824      	ldr	r0, [pc, #144]	; (8000c60 <MX_GPIO_Init+0x154>)
 8000bd0:	f002 fe60 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8000bd4:	2360      	movs	r3, #96	; 0x60
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	481a      	ldr	r0, [pc, #104]	; (8000c54 <MX_GPIO_Init+0x148>)
 8000bec:	f002 fe52 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin;
 8000bf0:	f244 2381 	movw	r3, #17025	; 0x4281
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4813      	ldr	r0, [pc, #76]	; (8000c58 <MX_GPIO_Init+0x14c>)
 8000c0a:	f002 fe43 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|SPI3_SDA_Pin;
 8000c0e:	f244 0304 	movw	r3, #16388	; 0x4004
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_GPIO_Init+0x150>)
 8000c28:	f002 fe34 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <MX_GPIO_Init+0x154>)
 8000c42:	f002 fe27 	bl	8003894 <HAL_GPIO_Init>

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	40020800 	.word	0x40020800

08000c64 <lfollower_start>:
@brief	Starts line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_start(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	// line follower already enabled?
	if(lfollower_status == 1)
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <lfollower_start+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d007      	beq.n	8000c80 <lfollower_start+0x1c>
		return;

	// start storing QTR Sensor values
	qtr_init();
 8000c70:	f000 fb88 	bl	8001384 <qtr_init>
	// start movement
	move_start();
 8000c74:	f000 fa64 	bl	8001140 <move_start>

	// mark line follower is enabled
	lfollower_status = 1;
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <lfollower_start+0x20>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	e000      	b.n	8000c82 <lfollower_start+0x1e>
		return;
 8000c80:	bf00      	nop
}
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200002ef 	.word	0x200002ef

08000c88 <lfollower_stop>:
@brief 	Stops line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_stop(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	// line follower already disabled?
	if(lfollower_status == 0)
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <lfollower_stop+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d007      	beq.n	8000ca4 <lfollower_stop+0x1c>
		return;

	// stop storing QTR sensor values
	qtr_kill();
 8000c94:	f000 fb84 	bl	80013a0 <qtr_kill>
	// stop movement
	move_stop();
 8000c98:	f000 fa66 	bl	8001168 <move_stop>

	// mark line follower is disabled
	lfollower_status = 0;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <lfollower_stop+0x20>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e000      	b.n	8000ca6 <lfollower_stop+0x1e>
		return;
 8000ca4:	bf00      	nop
}
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200002ef 	.word	0x200002ef

08000cac <lfollower_isr>:

/******************************************************************************
Line Follower ISR
******************************************************************************/
uint8_t lfollower_isr(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	ed2d 8b02 	vpush	{d8}
 8000cb2:	af00      	add	r7, sp, #0
	if(lfollower_status == 0)
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <lfollower_isr+0xa0>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <lfollower_isr+0x14>
		// line follower is disabled
		return E_LF_OFF;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e03f      	b.n	8000d40 <lfollower_isr+0x94>

	if((qtr_get_digital(LF_SENSOR_CTR_R) == 0) &&
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f000 fb79 	bl	80013b8 <qtr_get_digital>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d109      	bne.n	8000ce0 <lfollower_isr+0x34>
		(qtr_get_digital(LF_SENSOR_CTR_L) == 0))
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 fb73 	bl	80013b8 <qtr_get_digital>
 8000cd2:	4603      	mov	r3, r0
	if((qtr_get_digital(LF_SENSOR_CTR_R) == 0) &&
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d103      	bne.n	8000ce0 <lfollower_isr+0x34>
	{
		// robot is not over the line
		// stop line follower
		lfollower_stop();
 8000cd8:	f7ff ffd6 	bl	8000c88 <lfollower_stop>
		// send error: no line to follow
		return E_LF_NO_LINE;
 8000cdc:	2305      	movs	r3, #5
 8000cde:	e02f      	b.n	8000d40 <lfollower_isr+0x94>
	}

	// else, robot over the line
	// use PID to obtain PWM values to use on motors
	// error = S_LEFT_VAL - S_RIGHT_VAL
	pid_calcule(&pid, qtr_get_analog(LF_SENSOR_L), qtr_get_analog(LF_SENSOR_R));
 8000ce0:	2004      	movs	r0, #4
 8000ce2:	f000 fba1 	bl	8001428 <qtr_get_analog>
 8000ce6:	eeb0 8a40 	vmov.f32	s16, s0
 8000cea:	2001      	movs	r0, #1
 8000cec:	f000 fb9c 	bl	8001428 <qtr_get_analog>
 8000cf0:	eef0 7a40 	vmov.f32	s15, s0
 8000cf4:	eef0 0a67 	vmov.f32	s1, s15
 8000cf8:	eeb0 0a48 	vmov.f32	s0, s16
 8000cfc:	4814      	ldr	r0, [pc, #80]	; (8000d50 <lfollower_isr+0xa4>)
 8000cfe:	f000 fab5 	bl	800126c <pid_calcule>

	// Apply PID to adjust motor PWM/velocity
	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <lfollower_isr+0xa4>)
 8000d04:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d08:	eef1 7a67 	vneg.f32	s15, s15
 8000d0c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000d54 <lfollower_isr+0xa8>
 8000d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d14:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d58 <lfollower_isr+0xac>
 8000d18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <lfollower_isr+0xa4>)
 8000d1e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d22:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000d54 <lfollower_isr+0xa8>
 8000d26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d2a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000d58 <lfollower_isr+0xac>
 8000d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d32:	eef0 0a67 	vmov.f32	s1, s15
 8000d36:	eeb0 0a47 	vmov.f32	s0, s14
 8000d3a:	f000 fa29 	bl	8001190 <move_control>

	return EXIT_SUCCESS;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	ecbd 8b02 	vpop	{d8}
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200002ef 	.word	0x200002ef
 8000d50:	20000000 	.word	0x20000000
 8000d54:	3e99999a 	.word	0x3e99999a
 8000d58:	3f333333 	.word	0x3f333333

08000d5c <lfollower_print_sens>:
		"S5",
		"S6",
		"S8"
};
void lfollower_print_sens(void)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	ed2d 8b02 	vpush	{d8}
 8000d62:	b08f      	sub	sp, #60	; 0x3c
 8000d64:	af04      	add	r7, sp, #16
	char str[32];

	// enable QTR readings
	qtr_init();
 8000d66:	f000 fb0d 	bl	8001384 <qtr_init>

	for(uint8_t i = 0; i < QTR_SENS_NUM; i++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d70:	e028      	b.n	8000dc4 <lfollower_print_sens+0x68>
	{
		snprintf(str, sizeof(str), "%s[%.4f]=[%d]\n\r", lf_sens_str[i],
 8000d72:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <lfollower_print_sens+0x88>)
 8000d7e:	189c      	adds	r4, r3, r2
													qtr_get_analog(i),
 8000d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fb4f 	bl	8001428 <qtr_get_analog>
 8000d8a:	eef0 7a40 	vmov.f32	s15, s0
		snprintf(str, sizeof(str), "%s[%.4f]=[%d]\n\r", lf_sens_str[i],
 8000d8e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
													qtr_get_digital(i));
 8000d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fb0e 	bl	80013b8 <qtr_get_digital>
 8000d9c:	4603      	mov	r3, r0
		snprintf(str, sizeof(str), "%s[%.4f]=[%d]\n\r", lf_sens_str[i],
 8000d9e:	1d38      	adds	r0, r7, #4
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	ed8d 8b00 	vstr	d8, [sp]
 8000da6:	4623      	mov	r3, r4
 8000da8:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <lfollower_print_sens+0x8c>)
 8000daa:	2120      	movs	r1, #32
 8000dac:	f007 f932 	bl	8008014 <sniprintf>
		UART_puts(&bluet_uart,str);
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <lfollower_print_sens+0x90>)
 8000db6:	f001 f98b 	bl	80020d0 <UART_puts>
	for(uint8_t i = 0; i < QTR_SENS_NUM; i++)
 8000dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d9d2      	bls.n	8000d72 <lfollower_print_sens+0x16>
	}

	UART_puts(&bluet_uart, "\n\r");
 8000dcc:	4908      	ldr	r1, [pc, #32]	; (8000df0 <lfollower_print_sens+0x94>)
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <lfollower_print_sens+0x90>)
 8000dd0:	f001 f97e 	bl	80020d0 <UART_puts>

	// stop QTR readings
	qtr_kill();
 8000dd4:	f000 fae4 	bl	80013a0 <qtr_kill>
}
 8000dd8:	bf00      	nop
 8000dda:	372c      	adds	r7, #44	; 0x2c
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	ecbd 8b02 	vpop	{d8}
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	0800a26c 	.word	0x0800a26c
 8000de8:	0800a258 	.word	0x0800a258
 8000dec:	20000060 	.word	0x20000060
 8000df0:	0800a268 	.word	0x0800a268

08000df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfa:	f001 f9c2 	bl	8002182 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfe:	f000 f835 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e02:	f7ff fe83 	bl	8000b0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e06:	f7ff fe5b 	bl	8000ac0 <MX_DMA_Init>
  MX_SPI3_Init();
 8000e0a:	f000 fb37 	bl	800147c <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000e0e:	f001 f897 	bl	8001f40 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000e12:	f000 fe8b 	bl	8001b2c <MX_TIM6_Init>
  MX_ADC3_Init();
 8000e16:	f7ff fc39 	bl	800068c <MX_ADC3_Init>
  MX_TIM4_Init();
 8000e1a:	f000 fe23 	bl	8001a64 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000e1e:	f001 f85f 	bl	8001ee0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000e22:	f000 fdcf 	bl	80019c4 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000e26:	f7ff fbdf 	bl	80005e8 <MX_ADC2_Init>
  MX_TIM13_Init();
 8000e2a:	f000 feb5 	bl	8001b98 <MX_TIM13_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize FSM state and next state
  state = S_STOPPED;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <main+0x6c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <main+0x70>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]

  int err = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]

  while (1)
  {
	err = test_modules();
 8000e3e:	f000 fdb9 	bl	80019b4 <test_modules>
 8000e42:	6078      	str	r0, [r7, #4]

	switch(err)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <main+0x5c>
	{
		case 0:
			HAL_NVIC_SystemReset();
 8000e4a:	f002 f908 	bl	800305e <HAL_NVIC_SystemReset>
			break;
 8000e4e:	e005      	b.n	8000e5c <main+0x68>

		default:
			// signal error. Light up RED LED
			write_led(LRED, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <main+0x74>)
 8000e58:	f002 fee0 	bl	8003c1c <HAL_GPIO_WritePin>
	}

	while(1)
 8000e5c:	e7fe      	b.n	8000e5c <main+0x68>
 8000e5e:	bf00      	nop
 8000e60:	200002ed 	.word	0x200002ed
 8000e64:	200002ee 	.word	0x200002ee
 8000e68:	40020400 	.word	0x40020400

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0b8      	sub	sp, #224	; 0xe0
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e76:	2234      	movs	r2, #52	; 0x34
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f006 fbc4 	bl	8007608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2290      	movs	r2, #144	; 0x90
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f006 fbb5 	bl	8007608 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <SystemClock_Config+0x11c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a39      	ldr	r2, [pc, #228]	; (8000f88 <SystemClock_Config+0x11c>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <SystemClock_Config+0x11c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb6:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <SystemClock_Config+0x120>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a34      	ldr	r2, [pc, #208]	; (8000f8c <SystemClock_Config+0x120>)
 8000ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <SystemClock_Config+0x120>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eda:	2310      	movs	r3, #16
 8000edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eec:	2308      	movs	r3, #8
 8000eee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ef2:	23d8      	movs	r3, #216	; 0xd8
 8000ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 ff0b 	bl	8003d24 <HAL_RCC_OscConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f14:	f000 f83c 	bl	8000f90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f18:	f002 feb4 	bl	8003c84 <HAL_PWREx_EnableOverDrive>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f22:	f000 f835 	bl	8000f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	230f      	movs	r3, #15
 8000f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f4c:	2107      	movs	r1, #7
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 f996 	bl	8004280 <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000f5a:	f000 f819 	bl	8000f90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000f5e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f62:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f64:	2300      	movs	r3, #0
 8000f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 fb5b 	bl	800462c <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000f7c:	f000 f808 	bl	8000f90 <Error_Handler>
  }
}
 8000f80:	bf00      	nop
 8000f82:	37e0      	adds	r7, #224	; 0xe0
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <motion_start>:

/******************************************************************************
Motion Functions
******************************************************************************/
void motion_start(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	if(motion_status == MOT_ON)
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <motion_start+0x40>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d016      	beq.n	8000fd6 <motion_start+0x3a>
		// already moving
		return;

	// enable Line Follower
	lfollower_start();
 8000fa8:	f7ff fe5c 	bl	8000c64 <lfollower_start>

	// start movement before beeing on Hold
	if(motion_status == MOT_HOLD)
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <motion_start+0x40>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d103      	bne.n	8000fbc <motion_start+0x20>
	{
		// motion ON
		motion_status = MOT_ON;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <motion_start+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
		return;
 8000fba:	e00d      	b.n	8000fd8 <motion_start+0x3c>
	}

	// motion ON
	motion_status = MOT_ON;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <motion_start+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
	// enable Stop Detectors
	stop_detector_init();
 8000fc2:	f000 fba7 	bl	8001714 <stop_detector_init>

	// start sampling motion sensors
	HAL_TIM_Base_Start_IT(&TIM_MOTION);
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <motion_start+0x44>)
 8000fc8:	f004 f97a 	bl	80052c0 <HAL_TIM_Base_Start_IT>
	TIM_MOTION.Instance->EGR = TIM_EGR_UG;
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <motion_start+0x44>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	615a      	str	r2, [r3, #20]
 8000fd4:	e000      	b.n	8000fd8 <motion_start+0x3c>
		return;
 8000fd6:	bf00      	nop
}
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000030 	.word	0x20000030
 8000fe0:	20000630 	.word	0x20000630

08000fe4 <motion_stop>:

void motion_stop(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
//	if(motion_status == MOT_OFF)
//		// already stopped
//		return;

	// disable Line Follower
	lfollower_stop();
 8000fe8:	f7ff fe4e 	bl	8000c88 <lfollower_stop>

	if(motion_status == MOT_HOLD)
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <motion_stop+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d005      	beq.n	8001000 <motion_stop+0x1c>
		// motion in hold
		// stop detectors remain enabled
		return;

	// else, stop sampling motion sensors
	HAL_TIM_Base_Stop_IT(&TIM_MOTION);
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <motion_stop+0x24>)
 8000ff6:	f004 f9db 	bl	80053b0 <HAL_TIM_Base_Stop_IT>

	// disable Stop Detectors
	stop_detector_deInit();
 8000ffa:	f000 fb9d 	bl	8001738 <stop_detector_deInit>
 8000ffe:	e000      	b.n	8001002 <motion_stop+0x1e>
		return;
 8001000:	bf00      	nop
	// motion OFF
//	motion_status = MOT_OFF;
}
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000030 	.word	0x20000030
 8001008:	20000630 	.word	0x20000630

0800100c <motion_isr>:

void motion_isr(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint8_t err;

	// check Stop Sensors
	err = stop_detector_isr();
 8001012:	f000 fb9f 	bl	8001754 <stop_detector_isr>
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]

	if(motion_status == MOT_HOLD)
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <motion_isr+0x80>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d111      	bne.n	8001046 <motion_isr+0x3a>
	{
		if(timeout_flag)
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <motion_isr+0x84>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <motion_isr+0x2a>
		{
			// motion timeout occured
			motion_status = MOT_TIMEOUT;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <motion_isr+0x80>)
 800102c:	2206      	movs	r2, #6
 800102e:	701a      	strb	r2, [r3, #0]
			// stop everything
			motion_stop();
 8001030:	f7ff ffd8 	bl	8000fe4 <motion_stop>
			// motion timeout occured
//			motion_status = MOT_TIMEOUT;
			return;
 8001034:	e027      	b.n	8001086 <motion_isr+0x7a>
		}
		if(err == 0)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d123      	bne.n	8001084 <motion_isr+0x78>
		{
			// obstacle has been moved
			// stop timeout
			timeout_stop();
 800103c:	f000 ff3a 	bl	8001eb4 <timeout_stop>
			// restart movement
			motion_start();
 8001040:	f7ff ffac 	bl	8000f9c <motion_start>
 8001044:	e011      	b.n	800106a <motion_isr+0x5e>
		}
		else
			// continue in Hold
			return;
	}
	else if(err)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00e      	beq.n	800106a <motion_isr+0x5e>
		// update motion_status
		// Signal that Motion is stopped due to Stop Mark/Obstacle
		// err = E_CROSS_FOUND (1) -> motion_status = MOT_CROSS_FOUND (2)
		// err = E_ROOM_FOUND (2) -> motion_status = MOT_ROOM_FOUND (3)
		// err = E_OBS_FOUND (3) -> motion_status = MOT_HOLD (4)
		motion_status = err + (MOT_CROSS_FOUND - E_ST_CROSS_FOUND);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <motion_isr+0x80>)
 8001054:	701a      	strb	r2, [r3, #0]

		// if motion is on hold, begin timeout
		if(motion_status == MOT_HOLD)
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <motion_isr+0x80>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b04      	cmp	r3, #4
 800105c:	d105      	bne.n	800106a <motion_isr+0x5e>
		{
			timeout_start(HOLD_TIMEOUT);
 800105e:	201e      	movs	r0, #30
 8001060:	f000 fef6 	bl	8001e50 <timeout_start>
			motion_stop();
 8001064:	f7ff ffbe 	bl	8000fe4 <motion_stop>
			return;
 8001068:	e00d      	b.n	8001086 <motion_isr+0x7a>
//		return;
	}

	// line follower ISR
	// continue to follow line
	err = lfollower_isr();
 800106a:	f7ff fe1f 	bl	8000cac <lfollower_isr>
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	if(err)
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <motion_isr+0x7a>
	{
		// signal motion error
		motion_status = MOT_ERR;
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <motion_isr+0x80>)
 800107a:	2205      	movs	r2, #5
 800107c:	701a      	strb	r2, [r3, #0]

		// error following line
		// stop movement
		motion_stop();
 800107e:	f7ff ffb1 	bl	8000fe4 <motion_stop>
 8001082:	e000      	b.n	8001086 <motion_isr+0x7a>
			return;
 8001084:	bf00      	nop
	}
}
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000030 	.word	0x20000030
 8001090:	2000031c 	.word	0x2000031c

08001094 <motor_init>:
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <motor_init+0x1c>)
 80010a4:	f004 fa0a 	bl	80054bc <HAL_TIM_PWM_Start>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000054c 	.word	0x2000054c

080010b4 <motor_kill>:
@brief	Stops PWM generation to a given motor
@param	Motor to be killed
@retval none
******************************************************************************/
void motor_kill(motor_st *m)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <motor_kill+0x28>)
 80010c4:	f004 faf4 	bl	80056b0 <HAL_TIM_PWM_Stop>
	// disable IN pins
	motor_control(m,  0, MOTOR_STOP);
 80010c8:	2202      	movs	r2, #2
 80010ca:	2100      	movs	r1, #0
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f807 	bl	80010e0 <motor_control>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000054c 	.word	0x2000054c

080010e0 <motor_control>:
		New PWM duty cycle
		Direction of motor rotation
@retval none
******************************************************************************/
void motor_control(motor_st *m,  uint8_t dc, motor_dir_e dir)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
 80010ec:	4613      	mov	r3, r2
 80010ee:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6858      	ldr	r0, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	8919      	ldrh	r1, [r3, #8]
 80010f8:	78bb      	ldrb	r3, [r7, #2]
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <motor_control+0x58>)
 80010fc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001100:	461a      	mov	r2, r3
 8001102:	f002 fd8b 	bl	8003c1c <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68d8      	ldr	r0, [r3, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	8a19      	ldrh	r1, [r3, #16]
 800110e:	78bb      	ldrb	r3, [r7, #2]
 8001110:	4a09      	ldr	r2, [pc, #36]	; (8001138 <motor_control+0x58>)
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	461a      	mov	r2, r3
 800111a:	f002 fd7f 	bl	8003c1c <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	78fa      	ldrb	r2, [r7, #3]
 8001126:	b292      	uxth	r2, r2
 8001128:	4619      	mov	r1, r3
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <motor_control+0x5c>)
 800112c:	f000 fe34 	bl	8001d98 <set_pwm>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	0800a280 	.word	0x0800a280
 800113c:	2000054c 	.word	0x2000054c

08001140 <move_start>:
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <move_start+0x1c>)
 8001146:	f7ff ffa5 	bl	8001094 <motor_init>
	motor_init(&motor_left);
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <move_start+0x20>)
 800114c:	f7ff ffa2 	bl	8001094 <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <move_start+0x24>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000034 	.word	0x20000034
 8001160:	20000048 	.word	0x20000048
 8001164:	200002f0 	.word	0x200002f0

08001168 <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <move_stop+0x1c>)
 800116e:	f7ff ffa1 	bl	80010b4 <motor_kill>
	motor_kill(&motor_left);
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <move_stop+0x20>)
 8001174:	f7ff ff9e 	bl	80010b4 <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <move_stop+0x24>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000034 	.word	0x20000034
 8001188:	20000048 	.word	0x20000048
 800118c:	200002f0 	.word	0x200002f0

08001190 <move_control>:
@brief	Controls movement, setting speeds on each motor.
@param	Left and right motor speeds, respectively
@retval none
******************************************************************************/
void move_control(float speedL, float speedR)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	ed87 0a03 	vstr	s0, [r7, #12]
 800119a:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <move_control+0xd0>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 80011a6:	f7ff ffcb 	bl	8001140 <move_start>
	// speedL and speedR are PWM values, from -1 to +1
	// since dirL and dirR are uint8_t, speed values are truncated
	// so, by adding 0.99 (number less than 1) we get:
	// dirX = 0 if speedX is negative
	// dirX = 1 if speedX is positive
	uint8_t dirL = 0.99 + speedL;
 80011aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011b2:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001250 <move_control+0xc0>
 80011b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011be:	edc7 7a01 	vstr	s15, [r7, #4]
 80011c2:	793b      	ldrb	r3, [r7, #4]
 80011c4:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 80011c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ce:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8001250 <move_control+0xc0>
 80011d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011da:	edc7 7a01 	vstr	s15, [r7, #4]
 80011de:	793b      	ldrb	r3, [r7, #4]
 80011e0:	75bb      	strb	r3, [r7, #22]

	// dirL and dirR (motor_dir_e) are:
	// 0 -> motor moving BACKWARDS (MOTOR_BACKWARD)
	// 1 -> motor moving FORWARD (MOTOR_FORWARD)
	motor_control(&motor_right, fabs(speedR) * 100, (motor_dir_e)(dirR & 0x01));
 80011e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e6:	eef0 7ae7 	vabs.f32	s15, s15
 80011ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ee:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001258 <move_control+0xc8>
 80011f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80011fe:	793b      	ldrb	r3, [r7, #4]
 8001200:	b2d9      	uxtb	r1, r3
 8001202:	7dbb      	ldrb	r3, [r7, #22]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	4815      	ldr	r0, [pc, #84]	; (8001264 <move_control+0xd4>)
 800120e:	f7ff ff67 	bl	80010e0 <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, (motor_dir_e)(dirL & 0x01));
 8001212:	edd7 7a03 	vldr	s15, [r7, #12]
 8001216:	eef0 7ae7 	vabs.f32	s15, s15
 800121a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800121e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001258 <move_control+0xc8>
 8001222:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001226:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800122a:	edc7 7a01 	vstr	s15, [r7, #4]
 800122e:	793b      	ldrb	r3, [r7, #4]
 8001230:	b2d9      	uxtb	r1, r3
 8001232:	7dfb      	ldrb	r3, [r7, #23]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	480a      	ldr	r0, [pc, #40]	; (8001268 <move_control+0xd8>)
 800123e:	f7ff ff4f 	bl	80010e0 <motor_control>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	f3af 8000 	nop.w
 8001250:	7ae147ae 	.word	0x7ae147ae
 8001254:	3fefae14 	.word	0x3fefae14
 8001258:	00000000 	.word	0x00000000
 800125c:	40590000 	.word	0x40590000
 8001260:	200002f0 	.word	0x200002f0
 8001264:	20000034 	.word	0x20000034
 8001268:	20000048 	.word	0x20000048

0800126c <pid_calcule>:
@param	PID struct
		inputs to the controller, in1 and in2
@retval none
******************************************************************************/
void pid_calcule(pid_st* pid, float in1, float in2)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	ed87 0a02 	vstr	s0, [r7, #8]
 8001278:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 800127c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	ed93 7a05 	vldr	s14, [r3, #20]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	edd3 7a04 	vldr	s15, [r3, #16]
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80012be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80012cc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001380 <pid_calcule+0x114>
 80012d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	ed93 7a00 	vldr	s14, [r3]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80012ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80012fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	edd3 7a07 	vldr	s15, [r3, #28]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	69da      	ldr	r2, [r3, #28]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800132e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	dd08      	ble.n	800134a <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	615a      	str	r2, [r3, #20]
	{
		pid->u = pid->u_sat_b;
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
	}
}
 8001348:	e013      	b.n	8001372 <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001356:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	d400      	bmi.n	8001362 <pid_calcule+0xf6>
}
 8001360:	e007      	b.n	8001372 <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	699a      	ldr	r2, [r3, #24]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	615a      	str	r2, [r3, #20]
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	3e99999a 	.word	0x3e99999a

08001384 <qtr_init>:
@brief 	Starts storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&ADC_QTR_DMA, qtr_sens, QTR_SENS_NUM);
 8001388:	2206      	movs	r2, #6
 800138a:	4903      	ldr	r1, [pc, #12]	; (8001398 <qtr_init+0x14>)
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <qtr_init+0x18>)
 800138e:	f001 f8ff 	bl	8002590 <HAL_ADC_Start_DMA>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200002f4 	.word	0x200002f4
 800139c:	200003d0 	.word	0x200003d0

080013a0 <qtr_kill>:
@brief 	Stops storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_kill(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&ADC_QTR_DMA);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <qtr_kill+0x10>)
 80013a6:	f001 f9ed 	bl	8002784 <HAL_ADC_Stop_DMA>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200003d0 	.word	0x200003d0
 80013b4:	00000000 	.word	0x00000000

080013b8 <qtr_get_digital>:
@param	Sensor
@retval	Digital/analog value of the requested sensor
******************************************************************************/
// QTR get sensor digital value
uint8_t qtr_get_digital(qtr_e sensor)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]) > ANALOG_HI_VOLT) & 0x01;
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4a16      	ldr	r2, [pc, #88]	; (8001420 <qtr_get_digital+0x68>)
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80013d2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001408 <qtr_get_digital+0x50>
 80013d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013da:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001410 <qtr_get_digital+0x58>
 80013de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013e2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001418 <qtr_get_digital+0x60>
 80013e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	bfcc      	ite	gt
 80013f0:	2301      	movgt	r3, #1
 80013f2:	2300      	movle	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	f3af 8000 	nop.w
 8001408:	66666666 	.word	0x66666666
 800140c:	400a6666 	.word	0x400a6666
 8001410:	00000000 	.word	0x00000000
 8001414:	40affe00 	.word	0x40affe00
 8001418:	9999999a 	.word	0x9999999a
 800141c:	40039999 	.word	0x40039999
 8001420:	200002f4 	.word	0x200002f4
 8001424:	00000000 	.word	0x00000000

08001428 <qtr_get_analog>:

// QTR get sensor analog value
float qtr_get_analog(qtr_e sensor)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4a10      	ldr	r2, [pc, #64]	; (8001478 <qtr_get_analog+0x50>)
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001442:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001468 <qtr_get_analog+0x40>
 8001446:	ee27 6b06 	vmul.f64	d6, d7, d6
 800144a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001470 <qtr_get_analog+0x48>
 800144e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001452:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8001456:	eeb0 0a67 	vmov.f32	s0, s15
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	f3af 8000 	nop.w
 8001468:	66666666 	.word	0x66666666
 800146c:	400a6666 	.word	0x400a6666
 8001470:	00000000 	.word	0x00000000
 8001474:	40affe00 	.word	0x40affe00
 8001478:	200002f4 	.word	0x200002f4

0800147c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_SPI3_Init+0x74>)
 8001482:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <MX_SPI3_Init+0x78>)
 8001484:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <MX_SPI3_Init+0x74>)
 8001488:	f44f 7282 	mov.w	r2, #260	; 0x104
 800148c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <MX_SPI3_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <MX_SPI3_Init+0x74>)
 8001496:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800149a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_SPI3_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_SPI3_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_SPI3_Init+0x74>)
 80014aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_SPI3_Init+0x74>)
 80014b2:	2218      	movs	r2, #24
 80014b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_SPI3_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_SPI3_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_SPI3_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_SPI3_Init+0x74>)
 80014ca:	2207      	movs	r2, #7
 80014cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_SPI3_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_SPI3_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_SPI3_Init+0x74>)
 80014dc:	f003 fcce 	bl	8004e7c <HAL_SPI_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80014e6:	f7ff fd53 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000478 	.word	0x20000478
 80014f4:	40003c00 	.word	0x40003c00

080014f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <HAL_SPI_MspInit+0x8c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d130      	bne.n	800157c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_SPI_MspInit+0x90>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a1a      	ldr	r2, [pc, #104]	; (8001588 <HAL_SPI_MspInit+0x90>)
 8001520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_SPI_MspInit+0x90>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_SPI_MspInit+0x90>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a14      	ldr	r2, [pc, #80]	; (8001588 <HAL_SPI_MspInit+0x90>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_SPI_MspInit+0x90>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800154a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800155c:	2306      	movs	r3, #6
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <HAL_SPI_MspInit+0x94>)
 8001568:	f002 f994 	bl	8003894 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2033      	movs	r0, #51	; 0x33
 8001572:	f001 fd4a 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001576:	2033      	movs	r0, #51	; 0x33
 8001578:	f001 fd63 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40003c00 	.word	0x40003c00
 8001588:	40023800 	.word	0x40023800
 800158c:	40020800 	.word	0x40020800

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_MspInit+0x44>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_MspInit+0x44>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_MspInit+0x44>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_MspInit+0x44>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_MspInit+0x44>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_MspInit+0x44>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>
	...

080015e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  // blink LED RED
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80015e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <HardFault_Handler+0x18>)
 80015ea:	f002 fb30 	bl	8003c4e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80015ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f2:	f000 fe23 	bl	800223c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80015f6:	e7f5      	b.n	80015e4 <HardFault_Handler+0x4>
 80015f8:	40020400 	.word	0x40020400

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 fdde 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <ADC_IRQHandler+0x14>)
 800164a:	f000 fe5f 	bl	800230c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800164e:	4803      	ldr	r0, [pc, #12]	; (800165c <ADC_IRQHandler+0x18>)
 8001650:	f000 fe5c 	bl	800230c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000328 	.word	0x20000328
 800165c:	200003d0 	.word	0x200003d0

08001660 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <TIM3_IRQHandler+0x10>)
 8001666:	f004 f8a3 	bl	80057b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000598 	.word	0x20000598

08001674 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <TIM4_IRQHandler+0x10>)
 800167a:	f004 f899 	bl	80057b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000054c 	.word	0x2000054c

08001688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <USART1_IRQHandler+0x10>)
 800168e:	f005 f8c1 	bl	8006814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000700 	.word	0x20000700

0800169c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <USART3_IRQHandler+0x10>)
 80016a2:	f005 f8b7 	bl	8006814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000067c 	.word	0x2000067c

080016b0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80016b6:	f004 f87b 	bl	80057b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200005e4 	.word	0x200005e4

080016c4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <SPI3_IRQHandler+0x10>)
 80016ca:	f003 fc83 	bl	8004fd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000478 	.word	0x20000478

080016d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <TIM6_DAC_IRQHandler+0x10>)
 80016de:	f004 f867 	bl	80057b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000630 	.word	0x20000630

080016ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <DMA2_Stream1_IRQHandler+0x10>)
 80016f2:	f001 fe65 	bl	80033c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000370 	.word	0x20000370

08001700 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA2_Stream2_IRQHandler+0x10>)
 8001706:	f001 fe5b 	bl	80033c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000418 	.word	0x20000418

08001714 <stop_detector_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void stop_detector_init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	// start Obstacle detector ADC DMA
	HAL_ADC_Start_DMA(&OBS_DETECTOR_ADC_DMA, &obs_distance, 1);
 8001718:	2201      	movs	r2, #1
 800171a:	4904      	ldr	r1, [pc, #16]	; (800172c <stop_detector_init+0x18>)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <stop_detector_init+0x1c>)
 800171e:	f000 ff37 	bl	8002590 <HAL_ADC_Start_DMA>
	// stop detector enabled
	stop_detector_status = 1;
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <stop_detector_init+0x20>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000030c 	.word	0x2000030c
 8001730:	20000328 	.word	0x20000328
 8001734:	20000310 	.word	0x20000310

08001738 <stop_detector_deInit>:

void stop_detector_deInit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	// stop Obstacle detector ADC DMA
	HAL_ADC_Stop_DMA(&OBS_DETECTOR_ADC_DMA);
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <stop_detector_deInit+0x14>)
 800173e:	f001 f821 	bl	8002784 <HAL_ADC_Stop_DMA>
	// stop detector disabled
	stop_detector_status = 0;
 8001742:	4b03      	ldr	r3, [pc, #12]	; (8001750 <stop_detector_deInit+0x18>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000328 	.word	0x20000328
 8001750:	20000310 	.word	0x20000310

08001754 <stop_detector_isr>:
		 	 - R (right sensor)
@param	none
@retval	none
******************************************************************************/
uint8_t stop_detector_isr()
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	// previous sensor values
	static uint8_t sens_prev = 0;
	// current sensor values
	uint8_t sens = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]

	// Digital value of distance
	static uint32_t old_obs_distance = 0;
	uint8_t obs_found_flag = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	71bb      	strb	r3, [r7, #6]

	// is stop detector ON?
	if(stop_detector_status == 0)
 8001762:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <stop_detector_isr+0x8c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <stop_detector_isr+0x1a>
		// return all ok
		return 0;
 800176a:	2300      	movs	r3, #0
 800176c:	e034      	b.n	80017d8 <stop_detector_isr+0x84>

	// ***** Check Stop Marks Detector *****
	// if SENSOR_L enabled sens = 0000 0001 (1)
	// if SENSOR_L disabled sens = 0000 0000 (0)
	sens = qtr_get_digital(ST_SENSOR_L);
 800176e:	2005      	movs	r0, #5
 8001770:	f7ff fe22 	bl	80013b8 <qtr_get_digital>
 8001774:	4603      	mov	r3, r0
 8001776:	71fb      	strb	r3, [r7, #7]

	// rotate left one bit
	// SENSOR_L enabled: sens = 0000 0010
	// SENSOR_L disabled: sens = 0000 0000
	sens = sens << 1;
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]

	// SENSOR_L enabled:
		// if SENSOR_R enabled sens = 0000 0011 (3)
		// if SENSOR_R disabled sens = 0000 0010 (2)
	sens += qtr_get_digital(ST_SENSOR_R);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fe1a 	bl	80013b8 <qtr_get_digital>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	4413      	add	r3, r2
 800178c:	71fb      	strb	r3, [r7, #7]

	// both sensors enabled
	if((sens == sens_prev) && (sens == 3))
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <stop_detector_isr+0x90>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	79fa      	ldrb	r2, [r7, #7]
 8001794:	429a      	cmp	r2, r3
 8001796:	d104      	bne.n	80017a2 <stop_detector_isr+0x4e>
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d101      	bne.n	80017a2 <stop_detector_isr+0x4e>
		// return cross found error
		return E_ST_CROSS_FOUND;
 800179e:	2301      	movs	r3, #1
 80017a0:	e01a      	b.n	80017d8 <stop_detector_isr+0x84>
//		// return room found error
//		return E_ST_ROOM_FOUND;

	// ***** Check Obstacle Detector *****
	// Obstacle found flag update
	obs_found_flag = OBS_TOO_CLOSE(obs_distance, old_obs_distance);
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <stop_detector_isr+0x94>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017aa:	d306      	bcc.n	80017ba <stop_detector_isr+0x66>
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <stop_detector_isr+0x98>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017b4:	d301      	bcc.n	80017ba <stop_detector_isr+0x66>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <stop_detector_isr+0x68>
 80017ba:	2300      	movs	r3, #0
 80017bc:	71bb      	strb	r3, [r7, #6]
														obs_found_flag);
	UART_puts(str);
#endif // !_DEBUG_

	// update old distance variable
	old_obs_distance = obs_distance;
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <stop_detector_isr+0x94>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <stop_detector_isr+0x98>)
 80017c4:	6013      	str	r3, [r2, #0]

	if(obs_found_flag)
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <stop_detector_isr+0x7c>
		// return obstacle found error
		return E_ST_OBS_FOUND;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e003      	b.n	80017d8 <stop_detector_isr+0x84>
//		return 0;

	// update sensors value
	sens_prev = sens;
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <stop_detector_isr+0x90>)
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	7013      	strb	r3, [r2, #0]

	return EXIT_SUCCESS;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000310 	.word	0x20000310
 80017e4:	20000311 	.word	0x20000311
 80017e8:	2000030c 	.word	0x2000030c
 80017ec:	20000314 	.word	0x20000314

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
	return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800180a:	f005 fecb 	bl	80075a4 <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
	return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0x12>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
	}

return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
	}
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f005 fe30 	bl	80075a4 <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20080000 	.word	0x20080000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000318 	.word	0x20000318
 8001978:	200007a0 	.word	0x200007a0

0800197c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <test_lf_print_qtr>:

/******************************************************************************
Test lineFollower module
******************************************************************************/
void test_lf_print_qtr(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	lfollower_print_sens();
 80019a4:	f7ff f9da 	bl	8000d5c <lfollower_print_sens>
	HAL_Delay(300);
 80019a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019ac:	f000 fc46 	bl	800223c <HAL_Delay>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <test_modules>:

/******************************************************************************
Test modules functions
******************************************************************************/
int test_modules(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
	int err = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]

//	test_move(0.7);

	while(1)
		test_lf_print_qtr();
 80019be:	f7ff ffef 	bl	80019a0 <test_lf_print_qtr>
 80019c2:	e7fc      	b.n	80019be <test_modules+0xa>

080019c4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim13;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <MX_TIM3_Init+0x98>)
 80019e4:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <MX_TIM3_Init+0x9c>)
 80019e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000-1;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <MX_TIM3_Init+0x98>)
 80019ea:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80019ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_TIM3_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1800-1;
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <MX_TIM3_Init+0x98>)
 80019f8:	f240 7207 	movw	r2, #1799	; 0x707
 80019fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_TIM3_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_TIM3_Init+0x98>)
 8001a06:	2280      	movs	r2, #128	; 0x80
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a0a:	4814      	ldr	r0, [pc, #80]	; (8001a5c <MX_TIM3_Init+0x98>)
 8001a0c:	f003 fc01 	bl	8005212 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a16:	f7ff fabb 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	480d      	ldr	r0, [pc, #52]	; (8001a5c <MX_TIM3_Init+0x98>)
 8001a28:	f004 f8f2 	bl	8005c10 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001a32:	f7ff faad 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a36:	2320      	movs	r3, #32
 8001a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <MX_TIM3_Init+0x98>)
 8001a44:	f004 fd90 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001a4e:	f7ff fa9f 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000598 	.word	0x20000598
 8001a60:	40000400 	.word	0x40000400

08001a64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a76:	463b      	mov	r3, r7
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
 8001a84:	615a      	str	r2, [r3, #20]
 8001a86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001a8a:	4a27      	ldr	r2, [pc, #156]	; (8001b28 <MX_TIM4_Init+0xc4>)
 8001a8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001a90:	226b      	movs	r2, #107	; 0x6b
 8001a92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001a9c:	2264      	movs	r2, #100	; 0x64
 8001a9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001aac:	481d      	ldr	r0, [pc, #116]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001aae:	f003 fcae 	bl	800540e <HAL_TIM_PWM_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001ab8:	f7ff fa6a 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4816      	ldr	r0, [pc, #88]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001acc:	f004 fd4c 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001ad6:	f7ff fa5b 	bl	8000f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ada:	2360      	movs	r3, #96	; 0x60
 8001adc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aea:	463b      	mov	r3, r7
 8001aec:	2208      	movs	r2, #8
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001af2:	f003 ff7d 	bl	80059f0 <HAL_TIM_PWM_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001afc:	f7ff fa48 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	220c      	movs	r2, #12
 8001b04:	4619      	mov	r1, r3
 8001b06:	4807      	ldr	r0, [pc, #28]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001b08:	f003 ff72 	bl	80059f0 <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001b12:	f7ff fa3d 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b16:	4803      	ldr	r0, [pc, #12]	; (8001b24 <MX_TIM4_Init+0xc0>)
 8001b18:	f000 f8e6 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	; 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000054c 	.word	0x2000054c
 8001b28:	40000800 	.word	0x40000800

08001b2c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <MX_TIM6_Init+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b44:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001b48:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b52:	2263      	movs	r2, #99	; 0x63
 8001b54:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b5e:	f003 fb58 	bl	8005212 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b68:	f7ff fa12 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_TIM6_Init+0x64>)
 8001b7a:	f004 fcf5 	bl	8006568 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b84:	f7ff fa04 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000630 	.word	0x20000630
 8001b94:	40001000 	.word	0x40001000

08001b98 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_TIM13_Init+0x40>)
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <MX_TIM13_Init+0x44>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 10800-1;
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <MX_TIM13_Init+0x40>)
 8001ba4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001ba8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_TIM13_Init+0x40>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 300-1;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_TIM13_Init+0x40>)
 8001bb2:	f240 122b 	movw	r2, #299	; 0x12b
 8001bb6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <MX_TIM13_Init+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_TIM13_Init+0x40>)
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001bc4:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <MX_TIM13_Init+0x40>)
 8001bc6:	f003 fb24 	bl	8005212 <HAL_TIM_Base_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001bd0:	f7ff f9de 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200005e4 	.word	0x200005e4
 8001bdc:	40001c00 	.word	0x40001c00

08001be0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <HAL_TIM_Base_MspInit+0xac>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d114      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf2:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_TIM_Base_MspInit+0xb0>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <HAL_TIM_Base_MspInit+0xb0>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_TIM_Base_MspInit+0xb0>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	201d      	movs	r0, #29
 8001c10:	f001 f9fb 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c14:	201d      	movs	r0, #29
 8001c16:	f001 fa14 	bl	8003042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001c1a:	e032      	b.n	8001c82 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_TIM_Base_MspInit+0xb4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d114      	bne.n	8001c50 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_TIM_Base_MspInit+0xb0>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_TIM_Base_MspInit+0xb0>)
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_TIM_Base_MspInit+0xb0>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	2036      	movs	r0, #54	; 0x36
 8001c44:	f001 f9e1 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c48:	2036      	movs	r0, #54	; 0x36
 8001c4a:	f001 f9fa 	bl	8003042 <HAL_NVIC_EnableIRQ>
}
 8001c4e:	e018      	b.n	8001c82 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM13)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a10      	ldr	r2, [pc, #64]	; (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d113      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_TIM_Base_MspInit+0xb0>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a0c      	ldr	r2, [pc, #48]	; (8001c90 <HAL_TIM_Base_MspInit+0xb0>)
 8001c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_TIM_Base_MspInit+0xb0>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	202c      	movs	r0, #44	; 0x2c
 8001c78:	f001 f9c7 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c7c:	202c      	movs	r0, #44	; 0x2c
 8001c7e:	f001 f9e0 	bl	8003042 <HAL_NVIC_EnableIRQ>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40001000 	.word	0x40001000
 8001c98:	40001c00 	.word	0x40001c00

08001c9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x44>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d113      	bne.n	8001cd6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x48>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x48>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x48>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	201e      	movs	r0, #30
 8001ccc:	f001 f99d 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cd0:	201e      	movs	r0, #30
 8001cd2:	f001 f9b6 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40000800 	.word	0x40000800
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <HAL_TIM_MspPostInit+0xa0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d139      	bne.n	8001d7e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_TIM_MspPostInit+0xa4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_TIM_MspPostInit+0xa4>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_TIM_MspPostInit+0xa4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_TIM_MspPostInit+0xa4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_TIM_MspPostInit+0xa4>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <HAL_TIM_MspPostInit+0xa4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 8001d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4619      	mov	r1, r3
 8001d56:	480e      	ldr	r0, [pc, #56]	; (8001d90 <HAL_TIM_MspPostInit+0xa8>)
 8001d58:	f001 fd9c 	bl	8003894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 8001d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4806      	ldr	r0, [pc, #24]	; (8001d94 <HAL_TIM_MspPostInit+0xac>)
 8001d7a:	f001 fd8b 	bl	8003894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d7e:	bf00      	nop
 8001d80:	3728      	adds	r7, #40	; 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40000800 	.word	0x40000800
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40020400 	.word	0x40020400

08001d98 <set_pwm>:
  }
}

/* USER CODE BEGIN 1 */
void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t dc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d104      	bne.n	8001db8 <set_pwm+0x20>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	883a      	ldrh	r2, [r7, #0]
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001db6:	e023      	b.n	8001e00 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d104      	bne.n	8001dc8 <set_pwm+0x30>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	883b      	ldrh	r3, [r7, #0]
 8001dc4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001dc6:	e01b      	b.n	8001e00 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d104      	bne.n	8001dd8 <set_pwm+0x40>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	883b      	ldrh	r3, [r7, #0]
 8001dd4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001dd6:	e013      	b.n	8001e00 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d104      	bne.n	8001de8 <set_pwm+0x50>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	883b      	ldrh	r3, [r7, #0]
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001de6:	e00b      	b.n	8001e00 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d104      	bne.n	8001df8 <set_pwm+0x60>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	883b      	ldrh	r3, [r7, #0]
 8001df4:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001df6:	e003      	b.n	8001e00 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	883b      	ldrh	r3, [r7, #0]
 8001dfe:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	if(htim == &TIM_MOTION)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d102      	bne.n	8001e22 <HAL_TIM_PeriodElapsedCallback+0x16>
	{// enters every 10ms
		// line follower PID and stop_sensors
		motion_isr();
 8001e1c:	f7ff f8f6 	bl	800100c <motion_isr>
	}
	else if(htim == &TIM_DEBOUNCE)
	{// user button debounce
		debounce_isr();
	}
}
 8001e20:	e00c      	b.n	8001e3c <HAL_TIM_PeriodElapsedCallback+0x30>
	else if(htim == &TIM_TIMEOUTS)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d102      	bne.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x24>
		timeout_isr();
 8001e2a:	f000 f84d 	bl	8001ec8 <timeout_isr>
}
 8001e2e:	e005      	b.n	8001e3c <HAL_TIM_PeriodElapsedCallback+0x30>
	else if(htim == &TIM_DEBOUNCE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_TIM_PeriodElapsedCallback+0x30>
		debounce_isr();
 8001e38:	f7fe fe18 	bl	8000a6c <debounce_isr>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000630 	.word	0x20000630
 8001e48:	20000598 	.word	0x20000598
 8001e4c:	200005e4 	.word	0x200005e4

08001e50 <timeout_start>:

/******************************************************************************
Timeout Start
******************************************************************************/
void timeout_start(int time_sec)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	// update timeout timer reload
	if(time_sec > MAX_TIMEOUT)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b24      	cmp	r3, #36	; 0x24
 8001e5c:	dd04      	ble.n	8001e68 <timeout_start+0x18>
	{
//		TIM_TIMEOUTS.Init.Prescaler = x - 1;
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * MAX_TIMEOUT) - 1;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <timeout_start+0x5c>)
 8001e60:	f64f 521f 	movw	r2, #64799	; 0xfd1f
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	e008      	b.n	8001e7a <timeout_start+0x2a>
//		timeout_cycles = time_sec ...
	}
	else
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * time_sec) - 1; // >>>>>>>>>>>>> check this
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <timeout_start+0x5c>)
 8001e78:	60da      	str	r2, [r3, #12]

	// init Timer
	if(HAL_TIM_Base_Init(&TIM_TIMEOUTS) != HAL_OK)
 8001e7a:	480c      	ldr	r0, [pc, #48]	; (8001eac <timeout_start+0x5c>)
 8001e7c:	f003 f9c9 	bl	8005212 <HAL_TIM_Base_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <timeout_start+0x3c>
		// init error
		Error_Handler();
 8001e86:	f7ff f883 	bl	8000f90 <Error_Handler>
		// clear TIM_SR_UIF TIM flag
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
		// start timeout Timer
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
	}
}
 8001e8a:	e00a      	b.n	8001ea2 <timeout_start+0x52>
		timeout_flag = 0;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <timeout_start+0x60>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <timeout_start+0x5c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f06f 0201 	mvn.w	r2, #1
 8001e9a:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
 8001e9c:	4803      	ldr	r0, [pc, #12]	; (8001eac <timeout_start+0x5c>)
 8001e9e:	f003 fa0f 	bl	80052c0 <HAL_TIM_Base_Start_IT>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000598 	.word	0x20000598
 8001eb0:	2000031c 	.word	0x2000031c

08001eb4 <timeout_stop>:

/******************************************************************************
Timeout Stop
******************************************************************************/
void timeout_stop(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	// stop timeout Timer
	HAL_TIM_Base_Stop_IT(&TIM_TIMEOUTS);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <timeout_stop+0x10>)
 8001eba:	f003 fa79 	bl	80053b0 <HAL_TIM_Base_Stop_IT>
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000598 	.word	0x20000598

08001ec8 <timeout_isr>:

/******************************************************************************
Timeout ISR
******************************************************************************/
void timeout_isr(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	// set timeout flag
	timeout_flag = 1;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <timeout_isr+0x14>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
	// stop generating timeouts
	timeout_stop();
 8001ed2:	f7ff ffef 	bl	8001eb4 <timeout_stop>
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000031c 	.word	0x2000031c

08001ee0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001ee6:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <MX_USART1_UART_Init+0x5c>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001eec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_USART1_UART_Init+0x58>)
 8001f24:	f004 fbcc 	bl	80066c0 <HAL_UART_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f2e:	f7ff f82f 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000700 	.word	0x20000700
 8001f3c:	40011000 	.word	0x40011000

08001f40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f46:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <MX_USART3_UART_Init+0x5c>)
 8001f48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f66:	220c      	movs	r2, #12
 8001f68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <MX_USART3_UART_Init+0x58>)
 8001f84:	f004 fb9c 	bl	80066c0 <HAL_UART_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f8e:	f7fe ffff 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000067c 	.word	0x2000067c
 8001f9c:	40004800 	.word	0x40004800

08001fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a3f      	ldr	r2, [pc, #252]	; (80020bc <HAL_UART_MspInit+0x11c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d141      	bne.n	8002046 <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc2:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <HAL_UART_MspInit+0x120>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a3e      	ldr	r2, [pc, #248]	; (80020c0 <HAL_UART_MspInit+0x120>)
 8001fc8:	f043 0310 	orr.w	r3, r3, #16
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <HAL_UART_MspInit+0x120>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <HAL_UART_MspInit+0x120>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a38      	ldr	r2, [pc, #224]	; (80020c0 <HAL_UART_MspInit+0x120>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_UART_MspInit+0x120>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUET_RX_Pin;
 8001ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002004:	2304      	movs	r3, #4
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	482d      	ldr	r0, [pc, #180]	; (80020c4 <HAL_UART_MspInit+0x124>)
 8002010:	f001 fc40 	bl	8003894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 8002014:	2340      	movs	r3, #64	; 0x40
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002024:	2307      	movs	r3, #7
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	4619      	mov	r1, r3
 800202e:	4825      	ldr	r0, [pc, #148]	; (80020c4 <HAL_UART_MspInit+0x124>)
 8002030:	f001 fc30 	bl	8003894 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	2100      	movs	r1, #0
 8002038:	2025      	movs	r0, #37	; 0x25
 800203a:	f000 ffe6 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800203e:	2025      	movs	r0, #37	; 0x25
 8002040:	f000 ffff 	bl	8003042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002044:	e035      	b.n	80020b2 <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <HAL_UART_MspInit+0x128>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d130      	bne.n	80020b2 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_UART_MspInit+0x120>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_UART_MspInit+0x120>)
 8002056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205a:	6413      	str	r3, [r2, #64]	; 0x40
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_UART_MspInit+0x120>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_UART_MspInit+0x120>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_UART_MspInit+0x120>)
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	6313      	str	r3, [r2, #48]	; 0x30
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_UART_MspInit+0x120>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002080:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002092:	2307      	movs	r3, #7
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	4619      	mov	r1, r3
 800209c:	480b      	ldr	r0, [pc, #44]	; (80020cc <HAL_UART_MspInit+0x12c>)
 800209e:	f001 fbf9 	bl	8003894 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2027      	movs	r0, #39	; 0x27
 80020a8:	f000 ffaf 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020ac:	2027      	movs	r0, #39	; 0x27
 80020ae:	f000 ffc8 	bl	8003042 <HAL_NVIC_EnableIRQ>
}
 80020b2:	bf00      	nop
 80020b4:	3730      	adds	r7, #48	; 0x30
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40011000 	.word	0x40011000
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40004800 	.word	0x40004800
 80020cc:	40020c00 	.word	0x40020c00

080020d0 <UART_puts>:
@brief	 	 Sends a string by UART - Polling (Waits for UART_Tx to transmit
							queued data
@param  	 String to be transmitted
******************************************************************************/
void UART_puts(uart_t *huart, const char *str)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
	if((str == NULL) || (str[0] == 0))	// string empty?
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d021      	beq.n	8002124 <UART_puts+0x54>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01d      	beq.n	8002124 <UART_puts+0x54>
		return;
	
	int len = strlen(str);
 80020e8:	6838      	ldr	r0, [r7, #0]
 80020ea:	f7fe f8a9 	bl	8000240 <strlen>
 80020ee:	4603      	mov	r3, r0
 80020f0:	60fb      	str	r3, [r7, #12]
	if(len > TX_BUFF_LEN)		// string size bigger than the max size of Tx_Buffer?
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	dc17      	bgt.n	8002128 <UART_puts+0x58>
		return;

	while(huart->uart->gState == HAL_UART_STATE_BUSY_TX) // Waits for UART_Tx to transmit queued data
 80020f8:	bf00      	nop
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002100:	2b21      	cmp	r3, #33	; 0x21
 8002102:	d0fa      	beq.n	80020fa <UART_puts+0x2a>
		;
	
	strcpy((char *)huart->Tx_Buffer, str);	// send string 'str' to 'TX_Buffer'
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3316      	adds	r3, #22
 8002108:	6839      	ldr	r1, [r7, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f005 ffb6 	bl	800807c <strcpy>
	HAL_UART_Transmit_IT(huart->uart, (uint8_t*)huart->Tx_Buffer, len);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3316      	adds	r3, #22
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	b292      	uxth	r2, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f004 fb1d 	bl	800675c <HAL_UART_Transmit_IT>
 8002122:	e002      	b.n	800212a <UART_puts+0x5a>
		return;
 8002124:	bf00      	nop
 8002126:	e000      	b.n	800212a <UART_puts+0x5a>
		return;
 8002128:	bf00      	nop
}
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002134:	480d      	ldr	r0, [pc, #52]	; (800216c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002136:	490e      	ldr	r1, [pc, #56]	; (8002170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800214c:	4c0b      	ldr	r4, [pc, #44]	; (800217c <LoopFillZerobss+0x26>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800215a:	f7ff fc0f 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215e:	f005 fa27 	bl	80075b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002162:	f7fe fe47 	bl	8000df4 <main>
  bx  lr    
 8002166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002168:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002170:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8002174:	0800a69c 	.word	0x0800a69c
  ldr r2, =_sbss
 8002178:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800217c:	2000079c 	.word	0x2000079c

08002180 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002180:	e7fe      	b.n	8002180 <CAN1_RX0_IRQHandler>

08002182 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002186:	2003      	movs	r0, #3
 8002188:	f000 ff34 	bl	8002ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218c:	2000      	movs	r0, #0
 800218e:	f000 f805 	bl	800219c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002192:	f7ff f9fd 	bl	8001590 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x54>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x58>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 ff53 	bl	8003066 <HAL_SYSTICK_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00e      	b.n	80021e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d80a      	bhi.n	80021e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f000 ff17 	bl	800300a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021dc:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <HAL_InitTick+0x5c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000005c 	.word	0x2000005c
 80021f4:	200000fc 	.word	0x200000fc
 80021f8:	200000f8 	.word	0x200000f8

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	200000fc 	.word	0x200000fc
 8002220:	20000788 	.word	0x20000788

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000788 	.word	0x20000788

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff ffee 	bl	8002224 <HAL_GetTick>
 8002248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002262:	bf00      	nop
 8002264:	f7ff ffde 	bl	8002224 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200000fc 	.word	0x200000fc

08002284 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e031      	b.n	80022fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fa8a 	bl	80007bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d116      	bne.n	80022f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_ADC_Init+0x84>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	f043 0202 	orr.w	r2, r3, #2
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fc22 	bl	8002b1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
 80022ee:	e001      	b.n	80022f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	ffffeefd 	.word	0xffffeefd

0800230c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b02      	cmp	r3, #2
 8002328:	bf0c      	ite	eq
 800232a:	2301      	moveq	r3, #1
 800232c:	2300      	movne	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b20      	cmp	r3, #32
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d049      	beq.n	80023e2 <HAL_ADC_IRQHandler+0xd6>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d046      	beq.n	80023e2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d12b      	bne.n	80023d2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d127      	bne.n	80023d2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800239a:	2b00      	cmp	r3, #0
 800239c:	d119      	bne.n	80023d2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0220 	bic.w	r2, r2, #32
 80023ac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fa30 	bl	8002838 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0212 	mvn.w	r2, #18
 80023e0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b80      	cmp	r3, #128	; 0x80
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d057      	beq.n	80024c4 <HAL_ADC_IRQHandler+0x1b8>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d054      	beq.n	80024c4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d139      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002458:	2b00      	cmp	r3, #0
 800245a:	d12b      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	d124      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11d      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800247c:	2b00      	cmp	r3, #0
 800247e:	d119      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800248e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fcad 	bl	8002e14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f06f 020c 	mvn.w	r2, #12
 80024c2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e4:	2b40      	cmp	r3, #64	; 0x40
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d017      	beq.n	8002526 <HAL_ADC_IRQHandler+0x21a>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d014      	beq.n	8002526 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d10d      	bne.n	8002526 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f9a2 	bl	8002860 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0201 	mvn.w	r2, #1
 8002524:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b20      	cmp	r3, #32
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d015      	beq.n	8002586 <HAL_ADC_IRQHandler+0x27a>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	f043 0202 	orr.w	r2, r3, #2
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0220 	mvn.w	r2, #32
 8002574:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f97c 	bl	8002874 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0220 	mvn.w	r2, #32
 8002584:	601a      	str	r2, [r3, #0]
  }
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Start_DMA+0x1e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e0d4      	b.n	8002758 <HAL_ADC_Start_DMA+0x1c8>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d018      	beq.n	80025f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80025d4:	4b62      	ldr	r3, [pc, #392]	; (8002760 <HAL_ADC_Start_DMA+0x1d0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a62      	ldr	r2, [pc, #392]	; (8002764 <HAL_ADC_Start_DMA+0x1d4>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9a      	lsrs	r2, r3, #18
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f9      	bne.n	80025ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	f040 809c 	bne.w	800273e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260a:	4b57      	ldr	r3, [pc, #348]	; (8002768 <HAL_ADC_Start_DMA+0x1d8>)
 800260c:	4013      	ands	r3, r2
 800260e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800262c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002640:	d106      	bne.n	8002650 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f023 0206 	bic.w	r2, r3, #6
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
 800264e:	e002      	b.n	8002656 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	4a42      	ldr	r2, [pc, #264]	; (800276c <HAL_ADC_Start_DMA+0x1dc>)
 8002664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	4a41      	ldr	r2, [pc, #260]	; (8002770 <HAL_ADC_Start_DMA+0x1e0>)
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	4a40      	ldr	r2, [pc, #256]	; (8002774 <HAL_ADC_Start_DMA+0x1e4>)
 8002674:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800267e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800268e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	334c      	adds	r3, #76	; 0x4c
 80026aa:	4619      	mov	r1, r3
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f000 fd94 	bl	80031dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <HAL_ADC_Start_DMA+0x1e8>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10f      	bne.n	80026e0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d143      	bne.n	8002756 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	e03a      	b.n	8002756 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a25      	ldr	r2, [pc, #148]	; (800277c <HAL_ADC_Start_DMA+0x1ec>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10e      	bne.n	8002708 <HAL_ADC_Start_DMA+0x178>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d107      	bne.n	8002708 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002706:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_ADC_Start_DMA+0x1e8>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d120      	bne.n	8002756 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a19      	ldr	r2, [pc, #100]	; (8002780 <HAL_ADC_Start_DMA+0x1f0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d11b      	bne.n	8002756 <HAL_ADC_Start_DMA+0x1c6>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d114      	bne.n	8002756 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e00b      	b.n	8002756 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f043 0210 	orr.w	r2, r3, #16
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	2000005c 	.word	0x2000005c
 8002764:	431bde83 	.word	0x431bde83
 8002768:	fffff8fe 	.word	0xfffff8fe
 800276c:	08002d11 	.word	0x08002d11
 8002770:	08002dcb 	.word	0x08002dcb
 8002774:	08002de7 	.word	0x08002de7
 8002778:	40012300 	.word	0x40012300
 800277c:	40012000 	.word	0x40012000
 8002780:	40012200 	.word	0x40012200

08002784 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ADC_Stop_DMA+0x1a>
 800279a:	2302      	movs	r3, #2
 800279c:	e046      	b.n	800282c <HAL_ADC_Stop_DMA+0xa8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0201 	bic.w	r2, r2, #1
 80027b4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d12e      	bne.n	8002822 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d10f      	bne.n	8002802 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fd58 	bl	800329c <HAL_DMA_Abort>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002810:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_ADC_Stop_DMA+0xb0>)
 8002818:	4013      	ands	r3, r2
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	ffffeefe 	.word	0xffffeefe

08002838 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1c>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e12a      	b.n	8002afa <HAL_ADC_ConfigChannel+0x272>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b09      	cmp	r3, #9
 80028b2:	d93a      	bls.n	800292a <HAL_ADC_ConfigChannel+0xa2>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028bc:	d035      	beq.n	800292a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68d9      	ldr	r1, [r3, #12]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	3b1e      	subs	r3, #30
 80028d4:	2207      	movs	r2, #7
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	400a      	ands	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a87      	ldr	r2, [pc, #540]	; (8002b08 <HAL_ADC_ConfigChannel+0x280>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d10a      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68d9      	ldr	r1, [r3, #12]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	061a      	lsls	r2, r3, #24
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002902:	e035      	b.n	8002970 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68d9      	ldr	r1, [r3, #12]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	4618      	mov	r0, r3
 8002916:	4603      	mov	r3, r0
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4403      	add	r3, r0
 800291c:	3b1e      	subs	r3, #30
 800291e:	409a      	lsls	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002928:	e022      	b.n	8002970 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6919      	ldr	r1, [r3, #16]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	2207      	movs	r2, #7
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43da      	mvns	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	400a      	ands	r2, r1
 800294c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6919      	ldr	r1, [r3, #16]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	4618      	mov	r0, r3
 8002960:	4603      	mov	r3, r0
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4403      	add	r3, r0
 8002966:	409a      	lsls	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d824      	bhi.n	80029c2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	3b05      	subs	r3, #5
 800298a:	221f      	movs	r2, #31
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43da      	mvns	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	400a      	ands	r2, r1
 8002998:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	4618      	mov	r0, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	3b05      	subs	r3, #5
 80029b4:	fa00 f203 	lsl.w	r2, r0, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	635a      	str	r2, [r3, #52]	; 0x34
 80029c0:	e04c      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d824      	bhi.n	8002a14 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	3b23      	subs	r3, #35	; 0x23
 80029dc:	221f      	movs	r2, #31
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	400a      	ands	r2, r1
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4618      	mov	r0, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	3b23      	subs	r3, #35	; 0x23
 8002a06:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
 8002a12:	e023      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	3b41      	subs	r3, #65	; 0x41
 8002a26:	221f      	movs	r2, #31
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	400a      	ands	r2, r1
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3b41      	subs	r3, #65	; 0x41
 8002a50:	fa00 f203 	lsl.w	r2, r0, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2a      	ldr	r2, [pc, #168]	; (8002b0c <HAL_ADC_ConfigChannel+0x284>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10a      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1f4>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a6e:	d105      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_ADC_ConfigChannel+0x288>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <HAL_ADC_ConfigChannel+0x288>)
 8002a76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a7a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <HAL_ADC_ConfigChannel+0x284>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d109      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x212>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d105      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_ADC_ConfigChannel+0x288>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <HAL_ADC_ConfigChannel+0x288>)
 8002a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a98:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <HAL_ADC_ConfigChannel+0x284>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d125      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x268>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <HAL_ADC_ConfigChannel+0x280>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d003      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x22e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b11      	cmp	r3, #17
 8002ab4:	d11c      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_ADC_ConfigChannel+0x288>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <HAL_ADC_ConfigChannel+0x288>)
 8002abc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ac0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_ADC_ConfigChannel+0x280>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d111      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_ADC_ConfigChannel+0x28c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a11      	ldr	r2, [pc, #68]	; (8002b18 <HAL_ADC_ConfigChannel+0x290>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9a      	lsrs	r2, r3, #18
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ae2:	e002      	b.n	8002aea <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	10000012 	.word	0x10000012
 8002b0c:	40012000 	.word	0x40012000
 8002b10:	40012300 	.word	0x40012300
 8002b14:	2000005c 	.word	0x2000005c
 8002b18:	431bde83 	.word	0x431bde83

08002b1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b24:	4b78      	ldr	r3, [pc, #480]	; (8002d08 <ADC_Init+0x1ec>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a77      	ldr	r2, [pc, #476]	; (8002d08 <ADC_Init+0x1ec>)
 8002b2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b2e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b30:	4b75      	ldr	r3, [pc, #468]	; (8002d08 <ADC_Init+0x1ec>)
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4973      	ldr	r1, [pc, #460]	; (8002d08 <ADC_Init+0x1ec>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6899      	ldr	r1, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <ADC_Init+0x1f0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6899      	ldr	r1, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6899      	ldr	r1, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	e00f      	b.n	8002c16 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0202 	bic.w	r2, r2, #2
 8002c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	005a      	lsls	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01b      	beq.n	8002c7c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	035a      	lsls	r2, r3, #13
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	e007      	b.n	8002c8c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	051a      	lsls	r2, r3, #20
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cce:	025a      	lsls	r2, r3, #9
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6899      	ldr	r1, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	029a      	lsls	r2, r3, #10
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40012300 	.word	0x40012300
 8002d0c:	0f000001 	.word	0x0f000001

08002d10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d13c      	bne.n	8002da4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d12b      	bne.n	8002d9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d127      	bne.n	8002d9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d119      	bne.n	8002d9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0220 	bic.w	r2, r2, #32
 8002d76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff fd4b 	bl	8002838 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002da2:	e00e      	b.n	8002dc2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff fd5f 	bl	8002874 <HAL_ADC_ErrorCallback>
}
 8002db6:	e004      	b.n	8002dc2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff fd37 	bl	800284c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2240      	movs	r2, #64	; 0x40
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f043 0204 	orr.w	r2, r3, #4
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff fd34 	bl	8002874 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <__NVIC_SetPriorityGrouping+0x40>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e56:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <__NVIC_SetPriorityGrouping+0x40>)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	60d3      	str	r3, [r2, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00
 8002e6c:	05fa0000 	.word	0x05fa0000

08002e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0b      	blt.n	8002eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <__NVIC_EnableIRQ+0x38>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	; (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	; (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f88:	f3bf 8f4f 	dsb	sy
}
 8002f8c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <__NVIC_SystemReset+0x24>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002f96:	4904      	ldr	r1, [pc, #16]	; (8002fa8 <__NVIC_SystemReset+0x24>)
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <__NVIC_SystemReset+0x28>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f9e:	f3bf 8f4f 	dsb	sy
}
 8002fa2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <__NVIC_SystemReset+0x20>
 8002fa8:	e000ed00 	.word	0xe000ed00
 8002fac:	05fa0004 	.word	0x05fa0004

08002fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc0:	d301      	bcc.n	8002fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00f      	b.n	8002fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <SysTick_Config+0x40>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fce:	210f      	movs	r1, #15
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	f7ff ff78 	bl	8002ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <SysTick_Config+0x40>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <SysTick_Config+0x40>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	e000e010 	.word	0xe000e010

08002ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff13 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	4603      	mov	r3, r0
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800301c:	f7ff ff28 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8003020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f7ff ff78 	bl	8002f1c <NVIC_EncodePriority>
 800302c:	4602      	mov	r2, r0
 800302e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff47 	bl	8002ec8 <__NVIC_SetPriority>
}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800304c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff1b 	bl	8002e8c <__NVIC_EnableIRQ>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003062:	f7ff ff8f 	bl	8002f84 <__NVIC_SystemReset>

08003066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff ff9e 	bl	8002fb0 <SysTick_Config>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff f8ca 	bl	8002224 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e099      	b.n	80031d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030bc:	e00f      	b.n	80030de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030be:	f7ff f8b1 	bl	8002224 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d908      	bls.n	80030de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2203      	movs	r2, #3
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e078      	b.n	80031d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e8      	bne.n	80030be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <HAL_DMA_Init+0x158>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800310a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	2b04      	cmp	r3, #4
 8003136:	d107      	bne.n	8003148 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	4313      	orrs	r3, r2
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0307 	bic.w	r3, r3, #7
 800315e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b04      	cmp	r3, #4
 8003170:	d117      	bne.n	80031a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fb09 	bl	800379c <DMA_CheckFifoParam>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2240      	movs	r2, #64	; 0x40
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800319e:	2301      	movs	r3, #1
 80031a0:	e016      	b.n	80031d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fac0 	bl	8003730 <DMA_CalcBaseAndBitshift>
 80031b0:	4603      	mov	r3, r0
 80031b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	223f      	movs	r2, #63	; 0x3f
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	e010803f 	.word	0xe010803f

080031dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_DMA_Start_IT+0x26>
 80031fe:	2302      	movs	r3, #2
 8003200:	e048      	b.n	8003294 <HAL_DMA_Start_IT+0xb8>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d137      	bne.n	8003286 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fa52 	bl	80036d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	223f      	movs	r2, #63	; 0x3f
 8003236:	409a      	lsls	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0216 	orr.w	r2, r2, #22
 800324a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800325a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0208 	orr.w	r2, r2, #8
 8003272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e005      	b.n	8003292 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003292:	7dfb      	ldrb	r3, [r7, #23]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032aa:	f7fe ffbb 	bl	8002224 <HAL_GetTick>
 80032ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d008      	beq.n	80032ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e052      	b.n	8003374 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0216 	bic.w	r2, r2, #22
 80032dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_DMA_Abort+0x62>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0208 	bic.w	r2, r2, #8
 800330c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331e:	e013      	b.n	8003348 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003320:	f7fe ff80 	bl	8002224 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b05      	cmp	r3, #5
 800332c:	d90c      	bls.n	8003348 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2203      	movs	r2, #3
 8003340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e015      	b.n	8003374 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e4      	bne.n	8003320 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	223f      	movs	r2, #63	; 0x3f
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d004      	beq.n	800339a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2280      	movs	r2, #128	; 0x80
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e00c      	b.n	80033b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2205      	movs	r2, #5
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0201 	bic.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80033cc:	4b92      	ldr	r3, [pc, #584]	; (8003618 <HAL_DMA_IRQHandler+0x258>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a92      	ldr	r2, [pc, #584]	; (800361c <HAL_DMA_IRQHandler+0x25c>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	0a9b      	lsrs	r3, r3, #10
 80033d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	2208      	movs	r2, #8
 80033ec:	409a      	lsls	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01a      	beq.n	800342c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0204 	bic.w	r2, r2, #4
 8003412:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	2208      	movs	r2, #8
 800341a:	409a      	lsls	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2201      	movs	r2, #1
 8003432:	409a      	lsls	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d012      	beq.n	8003462 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	2201      	movs	r2, #1
 8003450:	409a      	lsls	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	f043 0202 	orr.w	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	2204      	movs	r2, #4
 8003468:	409a      	lsls	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d012      	beq.n	8003498 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00b      	beq.n	8003498 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	2204      	movs	r2, #4
 8003486:	409a      	lsls	r2, r3
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f043 0204 	orr.w	r2, r3, #4
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	2210      	movs	r2, #16
 800349e:	409a      	lsls	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d043      	beq.n	8003530 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d03c      	beq.n	8003530 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	2210      	movs	r2, #16
 80034bc:	409a      	lsls	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d108      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d024      	beq.n	8003530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
 80034ee:	e01f      	b.n	8003530 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01b      	beq.n	8003530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
 8003500:	e016      	b.n	8003530 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0208 	bic.w	r2, r2, #8
 800351e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	2220      	movs	r2, #32
 8003536:	409a      	lsls	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 808e 	beq.w	800365e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8086 	beq.w	800365e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	2220      	movs	r2, #32
 8003558:	409a      	lsls	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b05      	cmp	r3, #5
 8003568:	d136      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0216 	bic.w	r2, r2, #22
 8003578:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003588:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <HAL_DMA_IRQHandler+0x1da>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0208 	bic.w	r2, r2, #8
 80035a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	223f      	movs	r2, #63	; 0x3f
 80035b0:	409a      	lsls	r2, r3
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d07d      	beq.n	80036ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
        }
        return;
 80035d6:	e078      	b.n	80036ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01c      	beq.n	8003620 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d108      	bne.n	8003606 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d030      	beq.n	800365e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	4798      	blx	r3
 8003604:	e02b      	b.n	800365e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d027      	beq.n	800365e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
 8003616:	e022      	b.n	800365e <HAL_DMA_IRQHandler+0x29e>
 8003618:	2000005c 	.word	0x2000005c
 800361c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0210 	bic.w	r2, r2, #16
 800363c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	2b00      	cmp	r3, #0
 8003664:	d032      	beq.n	80036cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d022      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2205      	movs	r2, #5
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3301      	adds	r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	429a      	cmp	r2, r3
 8003694:	d307      	bcc.n	80036a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f2      	bne.n	800368a <HAL_DMA_IRQHandler+0x2ca>
 80036a4:	e000      	b.n	80036a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036a6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
 80036c8:	e000      	b.n	80036cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80036ca:	bf00      	nop
    }
  }
}
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop

080036d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d108      	bne.n	8003714 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003712:	e007      	b.n	8003724 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	60da      	str	r2, [r3, #12]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	3b10      	subs	r3, #16
 8003740:	4a13      	ldr	r2, [pc, #76]	; (8003790 <DMA_CalcBaseAndBitshift+0x60>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800374a:	4a12      	ldr	r2, [pc, #72]	; (8003794 <DMA_CalcBaseAndBitshift+0x64>)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b03      	cmp	r3, #3
 800375c:	d908      	bls.n	8003770 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <DMA_CalcBaseAndBitshift+0x68>)
 8003766:	4013      	ands	r3, r2
 8003768:	1d1a      	adds	r2, r3, #4
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	659a      	str	r2, [r3, #88]	; 0x58
 800376e:	e006      	b.n	800377e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4b08      	ldr	r3, [pc, #32]	; (8003798 <DMA_CalcBaseAndBitshift+0x68>)
 8003778:	4013      	ands	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	aaaaaaab 	.word	0xaaaaaaab
 8003794:	0800a2a0 	.word	0x0800a2a0
 8003798:	fffffc00 	.word	0xfffffc00

0800379c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11f      	bne.n	80037f6 <DMA_CheckFifoParam+0x5a>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d856      	bhi.n	800386a <DMA_CheckFifoParam+0xce>
 80037bc:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <DMA_CheckFifoParam+0x28>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037e7 	.word	0x080037e7
 80037cc:	080037d5 	.word	0x080037d5
 80037d0:	0800386b 	.word	0x0800386b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d046      	beq.n	800386e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e4:	e043      	b.n	800386e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ee:	d140      	bne.n	8003872 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f4:	e03d      	b.n	8003872 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fe:	d121      	bne.n	8003844 <DMA_CheckFifoParam+0xa8>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d837      	bhi.n	8003876 <DMA_CheckFifoParam+0xda>
 8003806:	a201      	add	r2, pc, #4	; (adr r2, 800380c <DMA_CheckFifoParam+0x70>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	0800381d 	.word	0x0800381d
 8003810:	08003823 	.word	0x08003823
 8003814:	0800381d 	.word	0x0800381d
 8003818:	08003835 	.word	0x08003835
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e030      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d025      	beq.n	800387a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003832:	e022      	b.n	800387a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800383c:	d11f      	bne.n	800387e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003842:	e01c      	b.n	800387e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d903      	bls.n	8003852 <DMA_CheckFifoParam+0xb6>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d003      	beq.n	8003858 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003850:	e018      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
      break;
 8003856:	e015      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00e      	beq.n	8003882 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      break;
 8003868:	e00b      	b.n	8003882 <DMA_CheckFifoParam+0xe6>
      break;
 800386a:	bf00      	nop
 800386c:	e00a      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;
 800386e:	bf00      	nop
 8003870:	e008      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;
 8003872:	bf00      	nop
 8003874:	e006      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;
 8003876:	bf00      	nop
 8003878:	e004      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;   
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <DMA_CheckFifoParam+0xe8>
      break;
 8003882:	bf00      	nop
    }
  } 
  
  return status; 
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop

08003894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003894:	b480      	push	{r7}
 8003896:	b089      	sub	sp, #36	; 0x24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e175      	b.n	8003ba0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f040 8164 	bne.w	8003b9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d00b      	beq.n	80038f2 <HAL_GPIO_Init+0x5e>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d007      	beq.n	80038f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038e6:	2b11      	cmp	r3, #17
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b12      	cmp	r3, #18
 80038f0:	d130      	bne.n	8003954 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 0201 	and.w	r2, r3, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2203      	movs	r2, #3
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x100>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b12      	cmp	r3, #18
 8003992:	d123      	bne.n	80039dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	08da      	lsrs	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3208      	adds	r2, #8
 800399c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	220f      	movs	r2, #15
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	08da      	lsrs	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3208      	adds	r2, #8
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80be 	beq.w	8003b9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	4b66      	ldr	r3, [pc, #408]	; (8003bb8 <HAL_GPIO_Init+0x324>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	4a65      	ldr	r2, [pc, #404]	; (8003bb8 <HAL_GPIO_Init+0x324>)
 8003a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a28:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2a:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <HAL_GPIO_Init+0x324>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a36:	4a61      	ldr	r2, [pc, #388]	; (8003bbc <HAL_GPIO_Init+0x328>)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	089b      	lsrs	r3, r3, #2
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	220f      	movs	r2, #15
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a58      	ldr	r2, [pc, #352]	; (8003bc0 <HAL_GPIO_Init+0x32c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d037      	beq.n	8003ad2 <HAL_GPIO_Init+0x23e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a57      	ldr	r2, [pc, #348]	; (8003bc4 <HAL_GPIO_Init+0x330>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d031      	beq.n	8003ace <HAL_GPIO_Init+0x23a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a56      	ldr	r2, [pc, #344]	; (8003bc8 <HAL_GPIO_Init+0x334>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d02b      	beq.n	8003aca <HAL_GPIO_Init+0x236>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a55      	ldr	r2, [pc, #340]	; (8003bcc <HAL_GPIO_Init+0x338>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d025      	beq.n	8003ac6 <HAL_GPIO_Init+0x232>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a54      	ldr	r2, [pc, #336]	; (8003bd0 <HAL_GPIO_Init+0x33c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01f      	beq.n	8003ac2 <HAL_GPIO_Init+0x22e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a53      	ldr	r2, [pc, #332]	; (8003bd4 <HAL_GPIO_Init+0x340>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d019      	beq.n	8003abe <HAL_GPIO_Init+0x22a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <HAL_GPIO_Init+0x344>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_GPIO_Init+0x226>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a51      	ldr	r2, [pc, #324]	; (8003bdc <HAL_GPIO_Init+0x348>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00d      	beq.n	8003ab6 <HAL_GPIO_Init+0x222>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a50      	ldr	r2, [pc, #320]	; (8003be0 <HAL_GPIO_Init+0x34c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <HAL_GPIO_Init+0x21e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a4f      	ldr	r2, [pc, #316]	; (8003be4 <HAL_GPIO_Init+0x350>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_GPIO_Init+0x21a>
 8003aaa:	2309      	movs	r3, #9
 8003aac:	e012      	b.n	8003ad4 <HAL_GPIO_Init+0x240>
 8003aae:	230a      	movs	r3, #10
 8003ab0:	e010      	b.n	8003ad4 <HAL_GPIO_Init+0x240>
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	e00e      	b.n	8003ad4 <HAL_GPIO_Init+0x240>
 8003ab6:	2307      	movs	r3, #7
 8003ab8:	e00c      	b.n	8003ad4 <HAL_GPIO_Init+0x240>
 8003aba:	2306      	movs	r3, #6
 8003abc:	e00a      	b.n	8003ad4 <HAL_GPIO_Init+0x240>
 8003abe:	2305      	movs	r3, #5
 8003ac0:	e008      	b.n	8003ad4 <HAL_GPIO_Init+0x240>
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	e006      	b.n	8003ad4 <HAL_GPIO_Init+0x240>
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e004      	b.n	8003ad4 <HAL_GPIO_Init+0x240>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e002      	b.n	8003ad4 <HAL_GPIO_Init+0x240>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_GPIO_Init+0x240>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	f002 0203 	and.w	r2, r2, #3
 8003ada:	0092      	lsls	r2, r2, #2
 8003adc:	4093      	lsls	r3, r2
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ae4:	4935      	ldr	r1, [pc, #212]	; (8003bbc <HAL_GPIO_Init+0x328>)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	089b      	lsrs	r3, r3, #2
 8003aea:	3302      	adds	r3, #2
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af2:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_GPIO_Init+0x354>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b16:	4a34      	ldr	r2, [pc, #208]	; (8003be8 <HAL_GPIO_Init+0x354>)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b1c:	4b32      	ldr	r3, [pc, #200]	; (8003be8 <HAL_GPIO_Init+0x354>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b40:	4a29      	ldr	r2, [pc, #164]	; (8003be8 <HAL_GPIO_Init+0x354>)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b46:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <HAL_GPIO_Init+0x354>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b6a:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <HAL_GPIO_Init+0x354>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_GPIO_Init+0x354>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b94:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <HAL_GPIO_Init+0x354>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b0f      	cmp	r3, #15
 8003ba4:	f67f ae86 	bls.w	80038b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3724      	adds	r7, #36	; 0x24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	40020000 	.word	0x40020000
 8003bc4:	40020400 	.word	0x40020400
 8003bc8:	40020800 	.word	0x40020800
 8003bcc:	40020c00 	.word	0x40020c00
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40021400 	.word	0x40021400
 8003bd8:	40021800 	.word	0x40021800
 8003bdc:	40021c00 	.word	0x40021c00
 8003be0:	40022000 	.word	0x40022000
 8003be4:	40022400 	.word	0x40022400
 8003be8:	40013c00 	.word	0x40013c00

08003bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e001      	b.n	8003c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c2c:	787b      	ldrb	r3, [r7, #1]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c38:	e003      	b.n	8003c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	041a      	lsls	r2, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	619a      	str	r2, [r3, #24]
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c60:	887a      	ldrh	r2, [r7, #2]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4013      	ands	r3, r2
 8003c66:	041a      	lsls	r2, r3, #16
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	43d9      	mvns	r1, r3
 8003c6c:	887b      	ldrh	r3, [r7, #2]
 8003c6e:	400b      	ands	r3, r1
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	619a      	str	r2, [r3, #24]
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4a22      	ldr	r2, [pc, #136]	; (8003d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ca6:	4b1e      	ldr	r3, [pc, #120]	; (8003d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb2:	f7fe fab7 	bl	8002224 <HAL_GetTick>
 8003cb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cb8:	e009      	b.n	8003cce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cba:	f7fe fab3 	bl	8002224 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc8:	d901      	bls.n	8003cce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e022      	b.n	8003d14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cce:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cda:	d1ee      	bne.n	8003cba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cdc:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0f      	ldr	r2, [pc, #60]	; (8003d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ce8:	f7fe fa9c 	bl	8002224 <HAL_GetTick>
 8003cec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cee:	e009      	b.n	8003d04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cf0:	f7fe fa98 	bl	8002224 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cfe:	d901      	bls.n	8003d04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e007      	b.n	8003d14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d10:	d1ee      	bne.n	8003cf0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40007000 	.word	0x40007000

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e29b      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8087 	beq.w	8003e56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d48:	4b96      	ldr	r3, [pc, #600]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d00c      	beq.n	8003d6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d54:	4b93      	ldr	r3, [pc, #588]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 030c 	and.w	r3, r3, #12
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d112      	bne.n	8003d86 <HAL_RCC_OscConfig+0x62>
 8003d60:	4b90      	ldr	r3, [pc, #576]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6c:	d10b      	bne.n	8003d86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6e:	4b8d      	ldr	r3, [pc, #564]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d06c      	beq.n	8003e54 <HAL_RCC_OscConfig+0x130>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d168      	bne.n	8003e54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e275      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x7a>
 8003d90:	4b84      	ldr	r3, [pc, #528]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a83      	ldr	r2, [pc, #524]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	e02e      	b.n	8003dfc <HAL_RCC_OscConfig+0xd8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x9c>
 8003da6:	4b7f      	ldr	r3, [pc, #508]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7e      	ldr	r2, [pc, #504]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	4b7c      	ldr	r3, [pc, #496]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7b      	ldr	r2, [pc, #492]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e01d      	b.n	8003dfc <HAL_RCC_OscConfig+0xd8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0xc0>
 8003dca:	4b76      	ldr	r3, [pc, #472]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a75      	ldr	r2, [pc, #468]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b73      	ldr	r3, [pc, #460]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a72      	ldr	r2, [pc, #456]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e00b      	b.n	8003dfc <HAL_RCC_OscConfig+0xd8>
 8003de4:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a6e      	ldr	r2, [pc, #440]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	4b6c      	ldr	r3, [pc, #432]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a6b      	ldr	r2, [pc, #428]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d013      	beq.n	8003e2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe fa0e 	bl	8002224 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fe fa0a 	bl	8002224 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e229      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0xe8>
 8003e2a:	e014      	b.n	8003e56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fe f9fa 	bl	8002224 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e34:	f7fe f9f6 	bl	8002224 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e215      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e46:	4b57      	ldr	r3, [pc, #348]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x110>
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d069      	beq.n	8003f36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e62:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6e:	4b4d      	ldr	r3, [pc, #308]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d11c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x190>
 8003e7a:	4b4a      	ldr	r3, [pc, #296]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d116      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_RCC_OscConfig+0x17a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d001      	beq.n	8003e9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e1e9      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	493d      	ldr	r1, [pc, #244]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb2:	e040      	b.n	8003f36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d023      	beq.n	8003f04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ebc:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a38      	ldr	r2, [pc, #224]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fe f9ac 	bl	8002224 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed0:	f7fe f9a8 	bl	8002224 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e1c7      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee2:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4929      	ldr	r1, [pc, #164]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
 8003f02:	e018      	b.n	8003f36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe f988 	bl	8002224 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f18:	f7fe f984 	bl	8002224 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1a3      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d038      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d019      	beq.n	8003f7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4e:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fe f965 	bl	8002224 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5e:	f7fe f961 	bl	8002224 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e180      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x23a>
 8003f7c:	e01a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f82:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7fe f94b 	bl	8002224 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f92:	f7fe f947 	bl	8002224 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d903      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e166      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
 8003fa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	4b92      	ldr	r3, [pc, #584]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8003faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1ee      	bne.n	8003f92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a4 	beq.w	800410a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc2:	4b8c      	ldr	r3, [pc, #560]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10d      	bne.n	8003fea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	4b89      	ldr	r3, [pc, #548]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	4a88      	ldr	r2, [pc, #544]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fda:	4b86      	ldr	r3, [pc, #536]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fea:	4b83      	ldr	r3, [pc, #524]	; (80041f8 <HAL_RCC_OscConfig+0x4d4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d118      	bne.n	8004028 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ff6:	4b80      	ldr	r3, [pc, #512]	; (80041f8 <HAL_RCC_OscConfig+0x4d4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a7f      	ldr	r2, [pc, #508]	; (80041f8 <HAL_RCC_OscConfig+0x4d4>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004002:	f7fe f90f 	bl	8002224 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400a:	f7fe f90b 	bl	8002224 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b64      	cmp	r3, #100	; 0x64
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e12a      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401c:	4b76      	ldr	r3, [pc, #472]	; (80041f8 <HAL_RCC_OscConfig+0x4d4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d106      	bne.n	800403e <HAL_RCC_OscConfig+0x31a>
 8004030:	4b70      	ldr	r3, [pc, #448]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a6f      	ldr	r2, [pc, #444]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	e02d      	b.n	800409a <HAL_RCC_OscConfig+0x376>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x33c>
 8004046:	4b6b      	ldr	r3, [pc, #428]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a6a      	ldr	r2, [pc, #424]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	6713      	str	r3, [r2, #112]	; 0x70
 8004052:	4b68      	ldr	r3, [pc, #416]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a67      	ldr	r2, [pc, #412]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004058:	f023 0304 	bic.w	r3, r3, #4
 800405c:	6713      	str	r3, [r2, #112]	; 0x70
 800405e:	e01c      	b.n	800409a <HAL_RCC_OscConfig+0x376>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b05      	cmp	r3, #5
 8004066:	d10c      	bne.n	8004082 <HAL_RCC_OscConfig+0x35e>
 8004068:	4b62      	ldr	r3, [pc, #392]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	4a61      	ldr	r2, [pc, #388]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	6713      	str	r3, [r2, #112]	; 0x70
 8004074:	4b5f      	ldr	r3, [pc, #380]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4a5e      	ldr	r2, [pc, #376]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6713      	str	r3, [r2, #112]	; 0x70
 8004080:	e00b      	b.n	800409a <HAL_RCC_OscConfig+0x376>
 8004082:	4b5c      	ldr	r3, [pc, #368]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	4a5b      	ldr	r2, [pc, #364]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	6713      	str	r3, [r2, #112]	; 0x70
 800408e:	4b59      	ldr	r3, [pc, #356]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a58      	ldr	r2, [pc, #352]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d015      	beq.n	80040ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a2:	f7fe f8bf 	bl	8002224 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fe f8bb 	bl	8002224 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0d8      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	4b4c      	ldr	r3, [pc, #304]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ee      	beq.n	80040aa <HAL_RCC_OscConfig+0x386>
 80040cc:	e014      	b.n	80040f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fe f8a9 	bl	8002224 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fe f8a5 	bl	8002224 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e0c2      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	4b41      	ldr	r3, [pc, #260]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ee      	bne.n	80040d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d105      	bne.n	800410a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4b3d      	ldr	r3, [pc, #244]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a3c      	ldr	r2, [pc, #240]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80ae 	beq.w	8004270 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004114:	4b37      	ldr	r3, [pc, #220]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 030c 	and.w	r3, r3, #12
 800411c:	2b08      	cmp	r3, #8
 800411e:	d06d      	beq.n	80041fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d14b      	bne.n	80041c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004128:	4b32      	ldr	r3, [pc, #200]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a31      	ldr	r2, [pc, #196]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 800412e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe f876 	bl	8002224 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413c:	f7fe f872 	bl	8002224 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e091      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414e:	4b29      	ldr	r3, [pc, #164]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	3b01      	subs	r3, #1
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	071b      	lsls	r3, r3, #28
 8004186:	491b      	ldr	r1, [pc, #108]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a18      	ldr	r2, [pc, #96]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 8004192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fe f844 	bl	8002224 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fe f840 	bl	8002224 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e05f      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x47c>
 80041be:	e057      	b.n	8004270 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 80041c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fe f82a 	bl	8002224 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fe f826 	bl	8002224 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e045      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e6:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <HAL_RCC_OscConfig+0x4d0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x4b0>
 80041f2:	e03d      	b.n	8004270 <HAL_RCC_OscConfig+0x54c>
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041fc:	4b1f      	ldr	r3, [pc, #124]	; (800427c <HAL_RCC_OscConfig+0x558>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d030      	beq.n	800426c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d129      	bne.n	800426c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d122      	bne.n	800426c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800422c:	4013      	ands	r3, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004232:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004234:	4293      	cmp	r3, r2
 8004236:	d119      	bne.n	800426c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	3b01      	subs	r3, #1
 8004246:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d10f      	bne.n	800426c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d107      	bne.n	800426c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004268:	429a      	cmp	r2, r3
 800426a:	d001      	beq.n	8004270 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40023800 	.word	0x40023800

08004280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0d0      	b.n	800443a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004298:	4b6a      	ldr	r3, [pc, #424]	; (8004444 <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d910      	bls.n	80042c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b67      	ldr	r3, [pc, #412]	; (8004444 <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 020f 	bic.w	r2, r3, #15
 80042ae:	4965      	ldr	r1, [pc, #404]	; (8004444 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b6:	4b63      	ldr	r3, [pc, #396]	; (8004444 <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0b8      	b.n	800443a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e0:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a58      	ldr	r2, [pc, #352]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f8:	4b53      	ldr	r3, [pc, #332]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4a52      	ldr	r2, [pc, #328]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 80042fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004302:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004304:	4b50      	ldr	r3, [pc, #320]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	494d      	ldr	r1, [pc, #308]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d040      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432a:	4b47      	ldr	r3, [pc, #284]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d115      	bne.n	8004362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e07f      	b.n	800443a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d107      	bne.n	8004352 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	4b41      	ldr	r3, [pc, #260]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e073      	b.n	800443a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004352:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e06b      	b.n	800443a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004362:	4b39      	ldr	r3, [pc, #228]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4936      	ldr	r1, [pc, #216]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fd ff56 	bl	8002224 <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	e00a      	b.n	8004392 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7fd ff52 	bl	8002224 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e053      	b.n	800443a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004392:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 020c 	and.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1eb      	bne.n	800437c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a4:	4b27      	ldr	r3, [pc, #156]	; (8004444 <HAL_RCC_ClockConfig+0x1c4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d210      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b24      	ldr	r3, [pc, #144]	; (8004444 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 020f 	bic.w	r2, r3, #15
 80043ba:	4922      	ldr	r1, [pc, #136]	; (8004444 <HAL_RCC_ClockConfig+0x1c4>)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <HAL_RCC_ClockConfig+0x1c4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e032      	b.n	800443a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4916      	ldr	r1, [pc, #88]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004412:	f000 f821 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 8004416:	4602      	mov	r2, r0
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_ClockConfig+0x1c8>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	490a      	ldr	r1, [pc, #40]	; (800444c <HAL_RCC_ClockConfig+0x1cc>)
 8004424:	5ccb      	ldrb	r3, [r1, r3]
 8004426:	fa22 f303 	lsr.w	r3, r2, r3
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <HAL_RCC_ClockConfig+0x1d0>)
 800442c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1d4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fd feb2 	bl	800219c <HAL_InitTick>

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023c00 	.word	0x40023c00
 8004448:	40023800 	.word	0x40023800
 800444c:	0800a288 	.word	0x0800a288
 8004450:	2000005c 	.word	0x2000005c
 8004454:	200000f8 	.word	0x200000f8

08004458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004458:	b5b0      	push	{r4, r5, r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800445e:	2100      	movs	r1, #0
 8004460:	6079      	str	r1, [r7, #4]
 8004462:	2100      	movs	r1, #0
 8004464:	60f9      	str	r1, [r7, #12]
 8004466:	2100      	movs	r1, #0
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800446a:	2100      	movs	r1, #0
 800446c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800446e:	4952      	ldr	r1, [pc, #328]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004470:	6889      	ldr	r1, [r1, #8]
 8004472:	f001 010c 	and.w	r1, r1, #12
 8004476:	2908      	cmp	r1, #8
 8004478:	d00d      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x3e>
 800447a:	2908      	cmp	r1, #8
 800447c:	f200 8094 	bhi.w	80045a8 <HAL_RCC_GetSysClockFreq+0x150>
 8004480:	2900      	cmp	r1, #0
 8004482:	d002      	beq.n	800448a <HAL_RCC_GetSysClockFreq+0x32>
 8004484:	2904      	cmp	r1, #4
 8004486:	d003      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x38>
 8004488:	e08e      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800448a:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <HAL_RCC_GetSysClockFreq+0x164>)
 800448c:	60bb      	str	r3, [r7, #8]
      break;
 800448e:	e08e      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004490:	4b4b      	ldr	r3, [pc, #300]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004492:	60bb      	str	r3, [r7, #8]
      break;
 8004494:	e08b      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004496:	4948      	ldr	r1, [pc, #288]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004498:	6849      	ldr	r1, [r1, #4]
 800449a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800449e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044a0:	4945      	ldr	r1, [pc, #276]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80044a2:	6849      	ldr	r1, [r1, #4]
 80044a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80044a8:	2900      	cmp	r1, #0
 80044aa:	d024      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ac:	4942      	ldr	r1, [pc, #264]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80044ae:	6849      	ldr	r1, [r1, #4]
 80044b0:	0989      	lsrs	r1, r1, #6
 80044b2:	4608      	mov	r0, r1
 80044b4:	f04f 0100 	mov.w	r1, #0
 80044b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80044bc:	f04f 0500 	mov.w	r5, #0
 80044c0:	ea00 0204 	and.w	r2, r0, r4
 80044c4:	ea01 0305 	and.w	r3, r1, r5
 80044c8:	493d      	ldr	r1, [pc, #244]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80044ca:	fb01 f003 	mul.w	r0, r1, r3
 80044ce:	2100      	movs	r1, #0
 80044d0:	fb01 f102 	mul.w	r1, r1, r2
 80044d4:	1844      	adds	r4, r0, r1
 80044d6:	493a      	ldr	r1, [pc, #232]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80044d8:	fba2 0101 	umull	r0, r1, r2, r1
 80044dc:	1863      	adds	r3, r4, r1
 80044de:	4619      	mov	r1, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	f7fb ff02 	bl	80002f0 <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4613      	mov	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e04a      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f6:	4b30      	ldr	r3, [pc, #192]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	099b      	lsrs	r3, r3, #6
 80044fc:	461a      	mov	r2, r3
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	ea02 0400 	and.w	r4, r2, r0
 800450e:	ea03 0501 	and.w	r5, r3, r1
 8004512:	4620      	mov	r0, r4
 8004514:	4629      	mov	r1, r5
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	014b      	lsls	r3, r1, #5
 8004520:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004524:	0142      	lsls	r2, r0, #5
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	1b00      	subs	r0, r0, r4
 800452c:	eb61 0105 	sbc.w	r1, r1, r5
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	018b      	lsls	r3, r1, #6
 800453a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800453e:	0182      	lsls	r2, r0, #6
 8004540:	1a12      	subs	r2, r2, r0
 8004542:	eb63 0301 	sbc.w	r3, r3, r1
 8004546:	f04f 0000 	mov.w	r0, #0
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	00d9      	lsls	r1, r3, #3
 8004550:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004554:	00d0      	lsls	r0, r2, #3
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	1912      	adds	r2, r2, r4
 800455c:	eb45 0303 	adc.w	r3, r5, r3
 8004560:	f04f 0000 	mov.w	r0, #0
 8004564:	f04f 0100 	mov.w	r1, #0
 8004568:	0299      	lsls	r1, r3, #10
 800456a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800456e:	0290      	lsls	r0, r2, #10
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	f7fb feb6 	bl	80002f0 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4613      	mov	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	0c1b      	lsrs	r3, r3, #16
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	3301      	adds	r3, #1
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	60bb      	str	r3, [r7, #8]
      break;
 80045a6:	e002      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <HAL_RCC_GetSysClockFreq+0x164>)
 80045aa:	60bb      	str	r3, [r7, #8]
      break;
 80045ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ae:	68bb      	ldr	r3, [r7, #8]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bdb0      	pop	{r4, r5, r7, pc}
 80045b8:	40023800 	.word	0x40023800
 80045bc:	00f42400 	.word	0x00f42400
 80045c0:	017d7840 	.word	0x017d7840

080045c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	2000005c 	.word	0x2000005c

080045dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045e0:	f7ff fff0 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0a9b      	lsrs	r3, r3, #10
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	0800a298 	.word	0x0800a298

08004604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004608:	f7ff ffdc 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 800460c:	4602      	mov	r2, r0
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	0b5b      	lsrs	r3, r3, #13
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	4903      	ldr	r1, [pc, #12]	; (8004628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40023800 	.word	0x40023800
 8004628:	0800a298 	.word	0x0800a298

0800462c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d012      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004654:	4b69      	ldr	r3, [pc, #420]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4a68      	ldr	r2, [pc, #416]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800465e:	6093      	str	r3, [r2, #8]
 8004660:	4b66      	ldr	r3, [pc, #408]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	4964      	ldr	r1, [pc, #400]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004676:	2301      	movs	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d017      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004686:	4b5d      	ldr	r3, [pc, #372]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800468c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	4959      	ldr	r1, [pc, #356]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a4:	d101      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046a6:	2301      	movs	r3, #1
 80046a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d017      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046c2:	4b4e      	ldr	r3, [pc, #312]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	494a      	ldr	r1, [pc, #296]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e0:	d101      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 808b 	beq.w	8004826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b3a      	ldr	r3, [pc, #232]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	4a39      	ldr	r2, [pc, #228]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	6413      	str	r3, [r2, #64]	; 0x40
 800471c:	4b37      	ldr	r3, [pc, #220]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004728:	4b35      	ldr	r3, [pc, #212]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a34      	ldr	r2, [pc, #208]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800472e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004734:	f7fd fd76 	bl	8002224 <HAL_GetTick>
 8004738:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800473a:	e008      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473c:	f7fd fd72 	bl	8002224 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	; 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e38f      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800474e:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800475a:	4b28      	ldr	r3, [pc, #160]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004762:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d035      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	429a      	cmp	r2, r3
 8004776:	d02e      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004778:	4b20      	ldr	r3, [pc, #128]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004780:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004782:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800478e:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4a1a      	ldr	r2, [pc, #104]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004798:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800479a:	4a18      	ldr	r2, [pc, #96]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047a0:	4b16      	ldr	r3, [pc, #88]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d114      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fd3a 	bl	8002224 <HAL_GetTick>
 80047b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b2:	e00a      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fd fd36 	bl	8002224 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e351      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ee      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e2:	d111      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047f2:	400b      	ands	r3, r1
 80047f4:	4901      	ldr	r1, [pc, #4]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
 80047fa:	e00b      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047fc:	40023800 	.word	0x40023800
 8004800:	40007000 	.word	0x40007000
 8004804:	0ffffcff 	.word	0x0ffffcff
 8004808:	4bb3      	ldr	r3, [pc, #716]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4ab2      	ldr	r2, [pc, #712]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004812:	6093      	str	r3, [r2, #8]
 8004814:	4bb0      	ldr	r3, [pc, #704]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	49ad      	ldr	r1, [pc, #692]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004822:	4313      	orrs	r3, r2
 8004824:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	d010      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004832:	4ba9      	ldr	r3, [pc, #676]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004838:	4aa7      	ldr	r2, [pc, #668]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800483e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004842:	4ba5      	ldr	r3, [pc, #660]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004844:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	49a2      	ldr	r1, [pc, #648]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004860:	4b9d      	ldr	r3, [pc, #628]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800486e:	499a      	ldr	r1, [pc, #616]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004882:	4b95      	ldr	r3, [pc, #596]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004890:	4991      	ldr	r1, [pc, #580]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048a4:	4b8c      	ldr	r3, [pc, #560]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b2:	4989      	ldr	r1, [pc, #548]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048c6:	4b84      	ldr	r3, [pc, #528]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	4980      	ldr	r1, [pc, #512]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e8:	4b7b      	ldr	r3, [pc, #492]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	4978      	ldr	r1, [pc, #480]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800490a:	4b73      	ldr	r3, [pc, #460]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f023 020c 	bic.w	r2, r3, #12
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004918:	496f      	ldr	r1, [pc, #444]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800492c:	4b6a      	ldr	r3, [pc, #424]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	4967      	ldr	r1, [pc, #412]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800494e:	4b62      	ldr	r3, [pc, #392]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	495e      	ldr	r1, [pc, #376]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	4956      	ldr	r1, [pc, #344]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004992:	4b51      	ldr	r3, [pc, #324]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	494d      	ldr	r1, [pc, #308]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049b4:	4b48      	ldr	r3, [pc, #288]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c2:	4945      	ldr	r1, [pc, #276]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049d6:	4b40      	ldr	r3, [pc, #256]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e4:	493c      	ldr	r1, [pc, #240]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f8:	4b37      	ldr	r3, [pc, #220]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a06:	4934      	ldr	r1, [pc, #208]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d011      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a28:	492b      	ldr	r1, [pc, #172]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a38:	d101      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a68:	491b      	ldr	r1, [pc, #108]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a7c:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a8c:	4912      	ldr	r1, [pc, #72]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab0:	4909      	ldr	r1, [pc, #36]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00f      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ac4:	4b04      	ldr	r3, [pc, #16]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad4:	e002      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	4986      	ldr	r1, [pc, #536]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004af0:	4b81      	ldr	r3, [pc, #516]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b00:	497d      	ldr	r1, [pc, #500]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d006      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80d6 	beq.w	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b1c:	4b76      	ldr	r3, [pc, #472]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a75      	ldr	r2, [pc, #468]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b28:	f7fd fb7c 	bl	8002224 <HAL_GetTick>
 8004b2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b30:	f7fd fb78 	bl	8002224 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	; 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e195      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b42:	4b6d      	ldr	r3, [pc, #436]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d021      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d11d      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b62:	4b65      	ldr	r3, [pc, #404]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b70:	4b61      	ldr	r3, [pc, #388]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b76:	0e1b      	lsrs	r3, r3, #24
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	019a      	lsls	r2, r3, #6
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	061b      	lsls	r3, r3, #24
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	071b      	lsls	r3, r3, #28
 8004b96:	4958      	ldr	r1, [pc, #352]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc8:	d129      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bca:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bd8:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bde:	0f1b      	lsrs	r3, r3, #28
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	019a      	lsls	r2, r3, #6
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	041b      	lsls	r3, r3, #16
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	071b      	lsls	r3, r3, #28
 8004bfe:	493e      	ldr	r1, [pc, #248]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c06:	4b3c      	ldr	r3, [pc, #240]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0c:	f023 021f 	bic.w	r2, r3, #31
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	3b01      	subs	r3, #1
 8004c16:	4938      	ldr	r1, [pc, #224]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01d      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c2a:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c30:	0e1b      	lsrs	r3, r3, #24
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c38:	4b2f      	ldr	r3, [pc, #188]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3e:	0f1b      	lsrs	r3, r3, #28
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	019a      	lsls	r2, r3, #6
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	431a      	orrs	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	061b      	lsls	r3, r3, #24
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	071b      	lsls	r3, r3, #28
 8004c5e:	4926      	ldr	r1, [pc, #152]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d011      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	019a      	lsls	r2, r3, #6
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	071b      	lsls	r3, r3, #28
 8004c8e:	491a      	ldr	r1, [pc, #104]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca2:	f7fd fabf 	bl	8002224 <HAL_GetTick>
 8004ca6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004caa:	f7fd fabb 	bl	8002224 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b64      	cmp	r3, #100	; 0x64
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e0d8      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	f040 80ce 	bne.w	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cd0:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cdc:	f7fd faa2 	bl	8002224 <HAL_GetTick>
 8004ce0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ce2:	e00b      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ce4:	f7fd fa9e 	bl	8002224 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d904      	bls.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e0bb      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cfc:	4b5e      	ldr	r3, [pc, #376]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d08:	d0ec      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02e      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d12a      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d32:	4b51      	ldr	r3, [pc, #324]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d40:	4b4d      	ldr	r3, [pc, #308]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	0f1b      	lsrs	r3, r3, #28
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	019a      	lsls	r2, r3, #6
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	061b      	lsls	r3, r3, #24
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	4944      	ldr	r1, [pc, #272]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d6e:	4b42      	ldr	r3, [pc, #264]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	493d      	ldr	r1, [pc, #244]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d022      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d9c:	d11d      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	0e1b      	lsrs	r3, r3, #24
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dac:	4b32      	ldr	r3, [pc, #200]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	0f1b      	lsrs	r3, r3, #28
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	019a      	lsls	r2, r3, #6
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	071b      	lsls	r3, r3, #28
 8004dd2:	4929      	ldr	r1, [pc, #164]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d028      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004de6:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	0e1b      	lsrs	r3, r3, #24
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004df4:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	019a      	lsls	r2, r3, #6
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	071b      	lsls	r3, r3, #28
 8004e1a:	4917      	ldr	r1, [pc, #92]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	4911      	ldr	r1, [pc, #68]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e38:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e44:	f7fd f9ee 	bl	8002224 <HAL_GetTick>
 8004e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e4c:	f7fd f9ea 	bl	8002224 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b64      	cmp	r3, #100	; 0x64
 8004e58:	d901      	bls.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e007      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e6a:	d1ef      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40023800 	.word	0x40023800

08004e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e09d      	b.n	8004fca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d108      	bne.n	8004ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9e:	d009      	beq.n	8004eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	61da      	str	r2, [r3, #28]
 8004ea6:	e005      	b.n	8004eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fc fb12 	bl	80014f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ef4:	d902      	bls.n	8004efc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e002      	b.n	8004f02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f0a:	d007      	beq.n	8004f1c <HAL_SPI_Init+0xa0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f14:	d002      	beq.n	8004f1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5e:	ea42 0103 	orr.w	r1, r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	f003 0204 	and.w	r2, r3, #4
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f98:	ea42 0103 	orr.w	r1, r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	099b      	lsrs	r3, r3, #6
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10f      	bne.n	8005018 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	099b      	lsrs	r3, r3, #6
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d004      	beq.n	8005018 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
    return;
 8005016:	e0d7      	b.n	80051c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	085b      	lsrs	r3, r3, #1
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_SPI_IRQHandler+0x66>
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	09db      	lsrs	r3, r3, #7
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	4798      	blx	r3
    return;
 8005038:	e0c6      	b.n	80051c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10c      	bne.n	8005060 <HAL_SPI_IRQHandler+0x8c>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	099b      	lsrs	r3, r3, #6
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 80b4 	beq.w	80051c8 <HAL_SPI_IRQHandler+0x1f4>
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80ad 	beq.w	80051c8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	099b      	lsrs	r3, r3, #6
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d023      	beq.n	80050c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b03      	cmp	r3, #3
 8005084:	d011      	beq.n	80050aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508a:	f043 0204 	orr.w	r2, r3, #4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	e00b      	b.n	80050c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	693b      	ldr	r3, [r7, #16]
        return;
 80050c0:	e082      	b.n	80051c8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d014      	beq.n	80050f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d2:	f043 0201 	orr.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	0a1b      	lsrs	r3, r3, #8
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00c      	beq.n	800511e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005108:	f043 0208 	orr.w	r2, r3, #8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005122:	2b00      	cmp	r3, #0
 8005124:	d04f      	beq.n	80051c6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005134:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <HAL_SPI_IRQHandler+0x17e>
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d034      	beq.n	80051bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0203 	bic.w	r2, r2, #3
 8005160:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	2b00      	cmp	r3, #0
 8005168:	d011      	beq.n	800518e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516e:	4a18      	ldr	r2, [pc, #96]	; (80051d0 <HAL_SPI_IRQHandler+0x1fc>)
 8005170:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe f900 	bl	800337c <HAL_DMA_Abort_IT>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005186:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	2b00      	cmp	r3, #0
 8005194:	d016      	beq.n	80051c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519a:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <HAL_SPI_IRQHandler+0x1fc>)
 800519c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe f8ea 	bl	800337c <HAL_DMA_Abort_IT>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80051ba:	e003      	b.n	80051c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f809 	bl	80051d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051c2:	e000      	b.n	80051c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80051c4:	bf00      	nop
    return;
 80051c6:	bf00      	nop
  }
}
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	080051e9 	.word	0x080051e9

080051d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff ffe5 	bl	80051d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e049      	b.n	80052b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fc fcd1 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f000 fdcb 	bl	8005dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d001      	beq.n	80052d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e054      	b.n	8005382 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a26      	ldr	r2, [pc, #152]	; (8005390 <HAL_TIM_Base_Start_IT+0xd0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d022      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005302:	d01d      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a22      	ldr	r2, [pc, #136]	; (8005394 <HAL_TIM_Base_Start_IT+0xd4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d018      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a21      	ldr	r2, [pc, #132]	; (8005398 <HAL_TIM_Base_Start_IT+0xd8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d013      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1f      	ldr	r2, [pc, #124]	; (800539c <HAL_TIM_Base_Start_IT+0xdc>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00e      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1e      	ldr	r2, [pc, #120]	; (80053a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d009      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d004      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d115      	bne.n	800536c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	4b19      	ldr	r3, [pc, #100]	; (80053ac <HAL_TIM_Base_Start_IT+0xec>)
 8005348:	4013      	ands	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b06      	cmp	r3, #6
 8005350:	d015      	beq.n	800537e <HAL_TIM_Base_Start_IT+0xbe>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005358:	d011      	beq.n	800537e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0201 	orr.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536a:	e008      	b.n	800537e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	e000      	b.n	8005380 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40010400 	.word	0x40010400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40001800 	.word	0x40001800
 80053ac:	00010007 	.word	0x00010007

080053b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a1a      	ldr	r2, [r3, #32]
 80053ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10f      	bne.n	80053f8 <HAL_TIM_Base_Stop_IT+0x48>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	f240 4344 	movw	r3, #1092	; 0x444
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <HAL_TIM_Base_Stop_IT+0x48>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e049      	b.n	80054b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fc fc31 	bl	8001c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3304      	adds	r3, #4
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f000 fccd 	bl	8005dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d109      	bne.n	80054e0 <HAL_TIM_PWM_Start+0x24>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e03c      	b.n	800555a <HAL_TIM_PWM_Start+0x9e>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d109      	bne.n	80054fa <HAL_TIM_PWM_Start+0x3e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	bf14      	ite	ne
 80054f2:	2301      	movne	r3, #1
 80054f4:	2300      	moveq	r3, #0
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	e02f      	b.n	800555a <HAL_TIM_PWM_Start+0x9e>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d109      	bne.n	8005514 <HAL_TIM_PWM_Start+0x58>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	bf14      	ite	ne
 800550c:	2301      	movne	r3, #1
 800550e:	2300      	moveq	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e022      	b.n	800555a <HAL_TIM_PWM_Start+0x9e>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b0c      	cmp	r3, #12
 8005518:	d109      	bne.n	800552e <HAL_TIM_PWM_Start+0x72>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	bf14      	ite	ne
 8005526:	2301      	movne	r3, #1
 8005528:	2300      	moveq	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	e015      	b.n	800555a <HAL_TIM_PWM_Start+0x9e>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b10      	cmp	r3, #16
 8005532:	d109      	bne.n	8005548 <HAL_TIM_PWM_Start+0x8c>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	bf14      	ite	ne
 8005540:	2301      	movne	r3, #1
 8005542:	2300      	moveq	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	e008      	b.n	800555a <HAL_TIM_PWM_Start+0x9e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	bf14      	ite	ne
 8005554:	2301      	movne	r3, #1
 8005556:	2300      	moveq	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e092      	b.n	8005688 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d104      	bne.n	8005572 <HAL_TIM_PWM_Start+0xb6>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005570:	e023      	b.n	80055ba <HAL_TIM_PWM_Start+0xfe>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b04      	cmp	r3, #4
 8005576:	d104      	bne.n	8005582 <HAL_TIM_PWM_Start+0xc6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005580:	e01b      	b.n	80055ba <HAL_TIM_PWM_Start+0xfe>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b08      	cmp	r3, #8
 8005586:	d104      	bne.n	8005592 <HAL_TIM_PWM_Start+0xd6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005590:	e013      	b.n	80055ba <HAL_TIM_PWM_Start+0xfe>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b0c      	cmp	r3, #12
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_PWM_Start+0xe6>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055a0:	e00b      	b.n	80055ba <HAL_TIM_PWM_Start+0xfe>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	d104      	bne.n	80055b2 <HAL_TIM_PWM_Start+0xf6>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b0:	e003      	b.n	80055ba <HAL_TIM_PWM_Start+0xfe>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2201      	movs	r2, #1
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 ffaa 	bl	800651c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a30      	ldr	r2, [pc, #192]	; (8005690 <HAL_TIM_PWM_Start+0x1d4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_TIM_PWM_Start+0x120>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2f      	ldr	r2, [pc, #188]	; (8005694 <HAL_TIM_PWM_Start+0x1d8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d101      	bne.n	80055e0 <HAL_TIM_PWM_Start+0x124>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <HAL_TIM_PWM_Start+0x126>
 80055e0:	2300      	movs	r3, #0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a25      	ldr	r2, [pc, #148]	; (8005690 <HAL_TIM_PWM_Start+0x1d4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d022      	beq.n	8005646 <HAL_TIM_PWM_Start+0x18a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005608:	d01d      	beq.n	8005646 <HAL_TIM_PWM_Start+0x18a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a22      	ldr	r2, [pc, #136]	; (8005698 <HAL_TIM_PWM_Start+0x1dc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d018      	beq.n	8005646 <HAL_TIM_PWM_Start+0x18a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a20      	ldr	r2, [pc, #128]	; (800569c <HAL_TIM_PWM_Start+0x1e0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d013      	beq.n	8005646 <HAL_TIM_PWM_Start+0x18a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1f      	ldr	r2, [pc, #124]	; (80056a0 <HAL_TIM_PWM_Start+0x1e4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00e      	beq.n	8005646 <HAL_TIM_PWM_Start+0x18a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a19      	ldr	r2, [pc, #100]	; (8005694 <HAL_TIM_PWM_Start+0x1d8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d009      	beq.n	8005646 <HAL_TIM_PWM_Start+0x18a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <HAL_TIM_PWM_Start+0x1e8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <HAL_TIM_PWM_Start+0x18a>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <HAL_TIM_PWM_Start+0x1ec>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d115      	bne.n	8005672 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	4b17      	ldr	r3, [pc, #92]	; (80056ac <HAL_TIM_PWM_Start+0x1f0>)
 800564e:	4013      	ands	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b06      	cmp	r3, #6
 8005656:	d015      	beq.n	8005684 <HAL_TIM_PWM_Start+0x1c8>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800565e:	d011      	beq.n	8005684 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005670:	e008      	b.n	8005684 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0201 	orr.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	e000      	b.n	8005686 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005684:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40010000 	.word	0x40010000
 8005694:	40010400 	.word	0x40010400
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40001800 	.word	0x40001800
 80056ac:	00010007 	.word	0x00010007

080056b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2200      	movs	r2, #0
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 ff2a 	bl	800651c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a36      	ldr	r2, [pc, #216]	; (80057a8 <HAL_TIM_PWM_Stop+0xf8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_TIM_PWM_Stop+0x2c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a35      	ldr	r2, [pc, #212]	; (80057ac <HAL_TIM_PWM_Stop+0xfc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d101      	bne.n	80056e0 <HAL_TIM_PWM_Stop+0x30>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_TIM_PWM_Stop+0x32>
 80056e0:	2300      	movs	r3, #0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d017      	beq.n	8005716 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10f      	bne.n	8005716 <HAL_TIM_PWM_Stop+0x66>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6a1a      	ldr	r2, [r3, #32]
 80056fc:	f240 4344 	movw	r3, #1092	; 0x444
 8005700:	4013      	ands	r3, r2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d107      	bne.n	8005716 <HAL_TIM_PWM_Stop+0x66>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005714:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6a1a      	ldr	r2, [r3, #32]
 800571c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <HAL_TIM_PWM_Stop+0x96>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a1a      	ldr	r2, [r3, #32]
 800572c:	f240 4344 	movw	r3, #1092	; 0x444
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <HAL_TIM_PWM_Stop+0x96>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0201 	bic.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <HAL_TIM_PWM_Stop+0xa6>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005754:	e023      	b.n	800579e <HAL_TIM_PWM_Stop+0xee>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b04      	cmp	r3, #4
 800575a:	d104      	bne.n	8005766 <HAL_TIM_PWM_Stop+0xb6>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005764:	e01b      	b.n	800579e <HAL_TIM_PWM_Stop+0xee>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b08      	cmp	r3, #8
 800576a:	d104      	bne.n	8005776 <HAL_TIM_PWM_Stop+0xc6>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005774:	e013      	b.n	800579e <HAL_TIM_PWM_Stop+0xee>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b0c      	cmp	r3, #12
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Stop+0xd6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005784:	e00b      	b.n	800579e <HAL_TIM_PWM_Stop+0xee>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b10      	cmp	r3, #16
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Stop+0xe6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005794:	e003      	b.n	800579e <HAL_TIM_PWM_Stop+0xee>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40010400 	.word	0x40010400

080057b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d122      	bne.n	800580c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d11b      	bne.n	800580c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0202 	mvn.w	r2, #2
 80057dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fadc 	bl	8005db0 <HAL_TIM_IC_CaptureCallback>
 80057f8:	e005      	b.n	8005806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 face 	bl	8005d9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fadf 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b04      	cmp	r3, #4
 8005818:	d122      	bne.n	8005860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b04      	cmp	r3, #4
 8005826:	d11b      	bne.n	8005860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0204 	mvn.w	r2, #4
 8005830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fab2 	bl	8005db0 <HAL_TIM_IC_CaptureCallback>
 800584c:	e005      	b.n	800585a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 faa4 	bl	8005d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fab5 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b08      	cmp	r3, #8
 800586c:	d122      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b08      	cmp	r3, #8
 800587a:	d11b      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0208 	mvn.w	r2, #8
 8005884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2204      	movs	r2, #4
 800588a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fa88 	bl	8005db0 <HAL_TIM_IC_CaptureCallback>
 80058a0:	e005      	b.n	80058ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa7a 	bl	8005d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fa8b 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b10      	cmp	r3, #16
 80058c0:	d122      	bne.n	8005908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d11b      	bne.n	8005908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0210 	mvn.w	r2, #16
 80058d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2208      	movs	r2, #8
 80058de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fa5e 	bl	8005db0 <HAL_TIM_IC_CaptureCallback>
 80058f4:	e005      	b.n	8005902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa50 	bl	8005d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fa61 	bl	8005dc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	d10e      	bne.n	8005934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d107      	bne.n	8005934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0201 	mvn.w	r2, #1
 800592c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc fa6c 	bl	8001e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593e:	2b80      	cmp	r3, #128	; 0x80
 8005940:	d10e      	bne.n	8005960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594c:	2b80      	cmp	r3, #128	; 0x80
 800594e:	d107      	bne.n	8005960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fe9c 	bl	8006698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596e:	d10e      	bne.n	800598e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597a:	2b80      	cmp	r3, #128	; 0x80
 800597c:	d107      	bne.n	800598e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fe8f 	bl	80066ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d10e      	bne.n	80059ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	2b40      	cmp	r3, #64	; 0x40
 80059a8:	d107      	bne.n	80059ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fa0f 	bl	8005dd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d10e      	bne.n	80059e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d107      	bne.n	80059e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f06f 0220 	mvn.w	r2, #32
 80059de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fe4f 	bl	8006684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e0fd      	b.n	8005c06 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b14      	cmp	r3, #20
 8005a16:	f200 80f0 	bhi.w	8005bfa <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005a1a:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	08005bfb 	.word	0x08005bfb
 8005a28:	08005bfb 	.word	0x08005bfb
 8005a2c:	08005bfb 	.word	0x08005bfb
 8005a30:	08005ab5 	.word	0x08005ab5
 8005a34:	08005bfb 	.word	0x08005bfb
 8005a38:	08005bfb 	.word	0x08005bfb
 8005a3c:	08005bfb 	.word	0x08005bfb
 8005a40:	08005af7 	.word	0x08005af7
 8005a44:	08005bfb 	.word	0x08005bfb
 8005a48:	08005bfb 	.word	0x08005bfb
 8005a4c:	08005bfb 	.word	0x08005bfb
 8005a50:	08005b37 	.word	0x08005b37
 8005a54:	08005bfb 	.word	0x08005bfb
 8005a58:	08005bfb 	.word	0x08005bfb
 8005a5c:	08005bfb 	.word	0x08005bfb
 8005a60:	08005b79 	.word	0x08005b79
 8005a64:	08005bfb 	.word	0x08005bfb
 8005a68:	08005bfb 	.word	0x08005bfb
 8005a6c:	08005bfb 	.word	0x08005bfb
 8005a70:	08005bb9 	.word	0x08005bb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fa56 	bl	8005f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0208 	orr.w	r2, r2, #8
 8005a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0204 	bic.w	r2, r2, #4
 8005a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6999      	ldr	r1, [r3, #24]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	619a      	str	r2, [r3, #24]
      break;
 8005ab2:	e0a3      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 faa8 	bl	8006010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6999      	ldr	r1, [r3, #24]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	021a      	lsls	r2, r3, #8
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	619a      	str	r2, [r3, #24]
      break;
 8005af4:	e082      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 faff 	bl	8006100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0208 	orr.w	r2, r2, #8
 8005b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0204 	bic.w	r2, r2, #4
 8005b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69d9      	ldr	r1, [r3, #28]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	61da      	str	r2, [r3, #28]
      break;
 8005b34:	e062      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fb55 	bl	80061ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69d9      	ldr	r1, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	61da      	str	r2, [r3, #28]
      break;
 8005b76:	e041      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fb8c 	bl	800629c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0208 	orr.w	r2, r2, #8
 8005b92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0204 	bic.w	r2, r2, #4
 8005ba2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bb6:	e021      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fbbe 	bl	8006340 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bf8:	e000      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005bfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop

08005c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIM_ConfigClockSource+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e0b3      	b.n	8005d90 <HAL_TIM_ConfigClockSource+0x180>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4b55      	ldr	r3, [pc, #340]	; (8005d98 <HAL_TIM_ConfigClockSource+0x188>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c60:	d03e      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0xd0>
 8005c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c66:	f200 8087 	bhi.w	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6e:	f000 8085 	beq.w	8005d7c <HAL_TIM_ConfigClockSource+0x16c>
 8005c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c76:	d87f      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c78:	2b70      	cmp	r3, #112	; 0x70
 8005c7a:	d01a      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0xa2>
 8005c7c:	2b70      	cmp	r3, #112	; 0x70
 8005c7e:	d87b      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c80:	2b60      	cmp	r3, #96	; 0x60
 8005c82:	d050      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x116>
 8005c84:	2b60      	cmp	r3, #96	; 0x60
 8005c86:	d877      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c88:	2b50      	cmp	r3, #80	; 0x50
 8005c8a:	d03c      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0xf6>
 8005c8c:	2b50      	cmp	r3, #80	; 0x50
 8005c8e:	d873      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d058      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x136>
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d86f      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005c98:	2b30      	cmp	r3, #48	; 0x30
 8005c9a:	d064      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x156>
 8005c9c:	2b30      	cmp	r3, #48	; 0x30
 8005c9e:	d86b      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d060      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x156>
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d867      	bhi.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d05c      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x156>
 8005cac:	2b10      	cmp	r3, #16
 8005cae:	d05a      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005cb0:	e062      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6899      	ldr	r1, [r3, #8]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f000 fc0b 	bl	80064dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	609a      	str	r2, [r3, #8]
      break;
 8005cde:	e04e      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f000 fbf4 	bl	80064dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d02:	609a      	str	r2, [r3, #8]
      break;
 8005d04:	e03b      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 fb68 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2150      	movs	r1, #80	; 0x50
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fbc1 	bl	80064a6 <TIM_ITRx_SetConfig>
      break;
 8005d24:	e02b      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f000 fb87 	bl	8006446 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2160      	movs	r1, #96	; 0x60
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fbb1 	bl	80064a6 <TIM_ITRx_SetConfig>
      break;
 8005d44:	e01b      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f000 fb48 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2140      	movs	r1, #64	; 0x40
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fba1 	bl	80064a6 <TIM_ITRx_SetConfig>
      break;
 8005d64:	e00b      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4610      	mov	r0, r2
 8005d72:	f000 fb98 	bl	80064a6 <TIM_ITRx_SetConfig>
        break;
 8005d76:	e002      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d78:	bf00      	nop
 8005d7a:	e000      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005d7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	fffeff88 	.word	0xfffeff88

08005d9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a40      	ldr	r2, [pc, #256]	; (8005f00 <TIM_Base_SetConfig+0x114>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0a:	d00f      	beq.n	8005e2c <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a3d      	ldr	r2, [pc, #244]	; (8005f04 <TIM_Base_SetConfig+0x118>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a3c      	ldr	r2, [pc, #240]	; (8005f08 <TIM_Base_SetConfig+0x11c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a3b      	ldr	r2, [pc, #236]	; (8005f0c <TIM_Base_SetConfig+0x120>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a3a      	ldr	r2, [pc, #232]	; (8005f10 <TIM_Base_SetConfig+0x124>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d108      	bne.n	8005e3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2f      	ldr	r2, [pc, #188]	; (8005f00 <TIM_Base_SetConfig+0x114>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d02b      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4c:	d027      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2c      	ldr	r2, [pc, #176]	; (8005f04 <TIM_Base_SetConfig+0x118>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d023      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a2b      	ldr	r2, [pc, #172]	; (8005f08 <TIM_Base_SetConfig+0x11c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01f      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2a      	ldr	r2, [pc, #168]	; (8005f0c <TIM_Base_SetConfig+0x120>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01b      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a29      	ldr	r2, [pc, #164]	; (8005f10 <TIM_Base_SetConfig+0x124>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d017      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a28      	ldr	r2, [pc, #160]	; (8005f14 <TIM_Base_SetConfig+0x128>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a27      	ldr	r2, [pc, #156]	; (8005f18 <TIM_Base_SetConfig+0x12c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00f      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a26      	ldr	r2, [pc, #152]	; (8005f1c <TIM_Base_SetConfig+0x130>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00b      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a25      	ldr	r2, [pc, #148]	; (8005f20 <TIM_Base_SetConfig+0x134>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d007      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a24      	ldr	r2, [pc, #144]	; (8005f24 <TIM_Base_SetConfig+0x138>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d003      	beq.n	8005e9e <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a23      	ldr	r2, [pc, #140]	; (8005f28 <TIM_Base_SetConfig+0x13c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d108      	bne.n	8005eb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a0a      	ldr	r2, [pc, #40]	; (8005f00 <TIM_Base_SetConfig+0x114>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_Base_SetConfig+0xf8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <TIM_Base_SetConfig+0x124>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d103      	bne.n	8005eec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	615a      	str	r2, [r3, #20]
}
 8005ef2:	bf00      	nop
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40010400 	.word	0x40010400
 8005f14:	40014000 	.word	0x40014000
 8005f18:	40014400 	.word	0x40014400
 8005f1c:	40014800 	.word	0x40014800
 8005f20:	40001800 	.word	0x40001800
 8005f24:	40001c00 	.word	0x40001c00
 8005f28:	40002000 	.word	0x40002000

08005f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f023 0201 	bic.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <TIM_OC1_SetConfig+0xd8>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0303 	bic.w	r3, r3, #3
 8005f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f023 0302 	bic.w	r3, r3, #2
 8005f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a21      	ldr	r2, [pc, #132]	; (8006008 <TIM_OC1_SetConfig+0xdc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_OC1_SetConfig+0x64>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a20      	ldr	r2, [pc, #128]	; (800600c <TIM_OC1_SetConfig+0xe0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10c      	bne.n	8005faa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0308 	bic.w	r3, r3, #8
 8005f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f023 0304 	bic.w	r3, r3, #4
 8005fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a16      	ldr	r2, [pc, #88]	; (8006008 <TIM_OC1_SetConfig+0xdc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC1_SetConfig+0x8e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	; (800600c <TIM_OC1_SetConfig+0xe0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d111      	bne.n	8005fde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	621a      	str	r2, [r3, #32]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	fffeff8f 	.word	0xfffeff8f
 8006008:	40010000 	.word	0x40010000
 800600c:	40010400 	.word	0x40010400

08006010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f023 0210 	bic.w	r2, r3, #16
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4b2e      	ldr	r3, [pc, #184]	; (80060f4 <TIM_OC2_SetConfig+0xe4>)
 800603c:	4013      	ands	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0320 	bic.w	r3, r3, #32
 800605a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a23      	ldr	r2, [pc, #140]	; (80060f8 <TIM_OC2_SetConfig+0xe8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC2_SetConfig+0x68>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a22      	ldr	r2, [pc, #136]	; (80060fc <TIM_OC2_SetConfig+0xec>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d10d      	bne.n	8006094 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800607e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006092:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <TIM_OC2_SetConfig+0xe8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_OC2_SetConfig+0x94>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a17      	ldr	r2, [pc, #92]	; (80060fc <TIM_OC2_SetConfig+0xec>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d113      	bne.n	80060cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	feff8fff 	.word	0xfeff8fff
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40010400 	.word	0x40010400

08006100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4b2d      	ldr	r3, [pc, #180]	; (80061e0 <TIM_OC3_SetConfig+0xe0>)
 800612c:	4013      	ands	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <TIM_OC3_SetConfig+0xe4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_OC3_SetConfig+0x66>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <TIM_OC3_SetConfig+0xe8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d10d      	bne.n	8006182 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800616c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a17      	ldr	r2, [pc, #92]	; (80061e4 <TIM_OC3_SetConfig+0xe4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <TIM_OC3_SetConfig+0x92>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a16      	ldr	r2, [pc, #88]	; (80061e8 <TIM_OC3_SetConfig+0xe8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d113      	bne.n	80061ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	621a      	str	r2, [r3, #32]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	fffeff8f 	.word	0xfffeff8f
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40010400 	.word	0x40010400

080061ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4b1e      	ldr	r3, [pc, #120]	; (8006290 <TIM_OC4_SetConfig+0xa4>)
 8006218:	4013      	ands	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	031b      	lsls	r3, r3, #12
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a13      	ldr	r2, [pc, #76]	; (8006294 <TIM_OC4_SetConfig+0xa8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC4_SetConfig+0x68>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a12      	ldr	r2, [pc, #72]	; (8006298 <TIM_OC4_SetConfig+0xac>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d109      	bne.n	8006268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	019b      	lsls	r3, r3, #6
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	feff8fff 	.word	0xfeff8fff
 8006294:	40010000 	.word	0x40010000
 8006298:	40010400 	.word	0x40010400

0800629c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <TIM_OC5_SetConfig+0x98>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	041b      	lsls	r3, r3, #16
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a12      	ldr	r2, [pc, #72]	; (8006338 <TIM_OC5_SetConfig+0x9c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d003      	beq.n	80062fa <TIM_OC5_SetConfig+0x5e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a11      	ldr	r2, [pc, #68]	; (800633c <TIM_OC5_SetConfig+0xa0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d109      	bne.n	800630e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006300:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	621a      	str	r2, [r3, #32]
}
 8006328:	bf00      	nop
 800632a:	371c      	adds	r7, #28
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	fffeff8f 	.word	0xfffeff8f
 8006338:	40010000 	.word	0x40010000
 800633c:	40010400 	.word	0x40010400

08006340 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <TIM_OC6_SetConfig+0x9c>)
 800636c:	4013      	ands	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	051b      	lsls	r3, r3, #20
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a13      	ldr	r2, [pc, #76]	; (80063e0 <TIM_OC6_SetConfig+0xa0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_OC6_SetConfig+0x60>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a12      	ldr	r2, [pc, #72]	; (80063e4 <TIM_OC6_SetConfig+0xa4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d109      	bne.n	80063b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	029b      	lsls	r3, r3, #10
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	621a      	str	r2, [r3, #32]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	feff8fff 	.word	0xfeff8fff
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40010400 	.word	0x40010400

080063e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f023 0201 	bic.w	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f023 030a 	bic.w	r3, r3, #10
 8006424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006446:	b480      	push	{r7}
 8006448:	b087      	sub	sp, #28
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	f023 0210 	bic.w	r2, r3, #16
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	031b      	lsls	r3, r3, #12
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f043 0307 	orr.w	r3, r3, #7
 80064c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	609a      	str	r2, [r3, #8]
}
 80064d0:	bf00      	nop
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	021a      	lsls	r2, r3, #8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	431a      	orrs	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4313      	orrs	r3, r2
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	609a      	str	r2, [r3, #8]
}
 8006510:	bf00      	nop
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	2201      	movs	r2, #1
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a1a      	ldr	r2, [r3, #32]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	43db      	mvns	r3, r3
 800653e:	401a      	ands	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a1a      	ldr	r2, [r3, #32]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	fa01 f303 	lsl.w	r3, r1, r3
 8006554:	431a      	orrs	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
	...

08006568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800657c:	2302      	movs	r3, #2
 800657e:	e06d      	b.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a30      	ldr	r2, [pc, #192]	; (8006668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a2f      	ldr	r2, [pc, #188]	; (800666c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d108      	bne.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a20      	ldr	r2, [pc, #128]	; (8006668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d022      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f2:	d01d      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1d      	ldr	r2, [pc, #116]	; (8006670 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d018      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d013      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a1a      	ldr	r2, [pc, #104]	; (8006678 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d00e      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a15      	ldr	r2, [pc, #84]	; (800666c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d009      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a16      	ldr	r2, [pc, #88]	; (800667c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d004      	beq.n	8006630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a15      	ldr	r2, [pc, #84]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d10c      	bne.n	800664a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	4313      	orrs	r3, r2
 8006640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400
 8006670:	40000400 	.word	0x40000400
 8006674:	40000800 	.word	0x40000800
 8006678:	40000c00 	.word	0x40000c00
 800667c:	40014000 	.word	0x40014000
 8006680:	40001800 	.word	0x40001800

08006684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e040      	b.n	8006754 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fb fc5c 	bl	8001fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2224      	movs	r2, #36	; 0x24
 80066ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fab2 	bl	8006c68 <UART_SetConfig>
 8006704:	4603      	mov	r3, r0
 8006706:	2b01      	cmp	r3, #1
 8006708:	d101      	bne.n	800670e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e022      	b.n	8006754 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fd08 	bl	800712c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800672a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800673a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fd8f 	bl	8007270 <UART_CheckIdleState>
 8006752:	4603      	mov	r3, r0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800676e:	2b20      	cmp	r3, #32
 8006770:	d145      	bne.n	80067fe <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <HAL_UART_Transmit_IT+0x22>
 8006778:	88fb      	ldrh	r3, [r7, #6]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e03e      	b.n	8006800 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_UART_Transmit_IT+0x34>
 800678c:	2302      	movs	r3, #2
 800678e:	e037      	b.n	8006800 <HAL_UART_Transmit_IT+0xa4>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	88fa      	ldrh	r2, [r7, #6]
 80067a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	88fa      	ldrh	r2, [r7, #6]
 80067aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2221      	movs	r2, #33	; 0x21
 80067c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ca:	d107      	bne.n	80067dc <HAL_UART_Transmit_IT+0x80>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d103      	bne.n	80067dc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4a0d      	ldr	r2, [pc, #52]	; (800680c <HAL_UART_Transmit_IT+0xb0>)
 80067d8:	669a      	str	r2, [r3, #104]	; 0x68
 80067da:	e002      	b.n	80067e2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a0c      	ldr	r2, [pc, #48]	; (8006810 <HAL_UART_Transmit_IT+0xb4>)
 80067e0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067f8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	080074f7 	.word	0x080074f7
 8006810:	08007485 	.word	0x08007485

08006814 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	f640 030f 	movw	r3, #2063	; 0x80f
 800683a:	4013      	ands	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d113      	bne.n	800686c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00e      	beq.n	800686c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d009      	beq.n	800686c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 81cc 	beq.w	8006bfa <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
      }
      return;
 800686a:	e1c6      	b.n	8006bfa <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 80e3 	beq.w	8006a3a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d105      	bne.n	800688a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	4ba5      	ldr	r3, [pc, #660]	; (8006b18 <HAL_UART_IRQHandler+0x304>)
 8006882:	4013      	ands	r3, r2
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80d8 	beq.w	8006a3a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d010      	beq.n	80068b6 <HAL_UART_IRQHandler+0xa2>
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2201      	movs	r2, #1
 80068a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ac:	f043 0201 	orr.w	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d010      	beq.n	80068e2 <HAL_UART_IRQHandler+0xce>
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2202      	movs	r2, #2
 80068d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d8:	f043 0204 	orr.w	r2, r3, #4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d010      	beq.n	800690e <HAL_UART_IRQHandler+0xfa>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2204      	movs	r2, #4
 80068fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006904:	f043 0202 	orr.w	r2, r3, #2
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f003 0308 	and.w	r3, r3, #8
 8006914:	2b00      	cmp	r3, #0
 8006916:	d015      	beq.n	8006944 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d104      	bne.n	800692c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2208      	movs	r2, #8
 8006932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800693a:	f043 0208 	orr.w	r2, r3, #8
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800694a:	2b00      	cmp	r3, #0
 800694c:	d011      	beq.n	8006972 <HAL_UART_IRQHandler+0x15e>
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00c      	beq.n	8006972 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006960:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006968:	f043 0220 	orr.w	r2, r3, #32
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 8140 	beq.w	8006bfe <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00c      	beq.n	80069a2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d007      	beq.n	80069a2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b4:	2b40      	cmp	r3, #64	; 0x40
 80069b6:	d004      	beq.n	80069c2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d031      	beq.n	8006a26 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fd19 	bl	80073fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d123      	bne.n	8006a1e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d013      	beq.n	8006a16 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	4a4a      	ldr	r2, [pc, #296]	; (8006b1c <HAL_UART_IRQHandler+0x308>)
 80069f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fc fcbe 	bl	800337c <HAL_DMA_Abort_IT>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d017      	beq.n	8006a36 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	e00f      	b.n	8006a36 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f906 	bl	8006c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a1c:	e00b      	b.n	8006a36 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f902 	bl	8006c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a24:	e007      	b.n	8006a36 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8fe 	bl	8006c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006a34:	e0e3      	b.n	8006bfe <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a36:	bf00      	nop
    return;
 8006a38:	e0e1      	b.n	8006bfe <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	f040 80a7 	bne.w	8006b92 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80a1 	beq.w	8006b92 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 809b 	beq.w	8006b92 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2210      	movs	r2, #16
 8006a62:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	d156      	bne.n	8006b20 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006a7c:	893b      	ldrh	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80bf 	beq.w	8006c02 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a8a:	893a      	ldrh	r2, [r7, #8]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	f080 80b8 	bcs.w	8006c02 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	893a      	ldrh	r2, [r7, #8]
 8006a96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa4:	d02a      	beq.n	8006afc <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ab4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ad4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0210 	bic.w	r2, r2, #16
 8006af0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fc fbd0 	bl	800329c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f893 	bl	8006c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b16:	e074      	b.n	8006c02 <HAL_UART_IRQHandler+0x3ee>
 8006b18:	04000120 	.word	0x04000120
 8006b1c:	08007459 	.word	0x08007459
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d063      	beq.n	8006c06 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8006b3e:	897b      	ldrh	r3, [r7, #10]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d060      	beq.n	8006c06 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b52:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689a      	ldr	r2, [r3, #8]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0210 	bic.w	r2, r2, #16
 8006b84:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f856 	bl	8006c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b90:	e039      	b.n	8006c06 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00d      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x3a4>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d008      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f84f 	bl	8006c54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bb6:	e029      	b.n	8006c0c <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00d      	beq.n	8006bde <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d008      	beq.n	8006bde <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01a      	beq.n	8006c0a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
    }
    return;
 8006bdc:	e015      	b.n	8006c0a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d011      	beq.n	8006c0c <HAL_UART_IRQHandler+0x3f8>
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00c      	beq.n	8006c0c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fcbd 	bl	8007572 <UART_EndTransmit_IT>
    return;
 8006bf8:	e008      	b.n	8006c0c <HAL_UART_IRQHandler+0x3f8>
      return;
 8006bfa:	bf00      	nop
 8006bfc:	e006      	b.n	8006c0c <HAL_UART_IRQHandler+0x3f8>
    return;
 8006bfe:	bf00      	nop
 8006c00:	e004      	b.n	8006c0c <HAL_UART_IRQHandler+0x3f8>
      return;
 8006c02:	bf00      	nop
 8006c04:	e002      	b.n	8006c0c <HAL_UART_IRQHandler+0x3f8>
      return;
 8006c06:	bf00      	nop
 8006c08:	e000      	b.n	8006c0c <HAL_UART_IRQHandler+0x3f8>
    return;
 8006c0a:	bf00      	nop
  }

}
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop

08006c14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4ba7      	ldr	r3, [pc, #668]	; (8006f30 <UART_SetConfig+0x2c8>)
 8006c94:	4013      	ands	r3, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	6979      	ldr	r1, [r7, #20]
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a95      	ldr	r2, [pc, #596]	; (8006f34 <UART_SetConfig+0x2cc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d120      	bne.n	8006d26 <UART_SetConfig+0xbe>
 8006ce4:	4b94      	ldr	r3, [pc, #592]	; (8006f38 <UART_SetConfig+0x2d0>)
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cea:	f003 0303 	and.w	r3, r3, #3
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d816      	bhi.n	8006d20 <UART_SetConfig+0xb8>
 8006cf2:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <UART_SetConfig+0x90>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d15 	.word	0x08006d15
 8006d00:	08006d0f 	.word	0x08006d0f
 8006d04:	08006d1b 	.word	0x08006d1b
 8006d08:	2301      	movs	r3, #1
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e14f      	b.n	8006fae <UART_SetConfig+0x346>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e14c      	b.n	8006fae <UART_SetConfig+0x346>
 8006d14:	2304      	movs	r3, #4
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e149      	b.n	8006fae <UART_SetConfig+0x346>
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e146      	b.n	8006fae <UART_SetConfig+0x346>
 8006d20:	2310      	movs	r3, #16
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e143      	b.n	8006fae <UART_SetConfig+0x346>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a84      	ldr	r2, [pc, #528]	; (8006f3c <UART_SetConfig+0x2d4>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d132      	bne.n	8006d96 <UART_SetConfig+0x12e>
 8006d30:	4b81      	ldr	r3, [pc, #516]	; (8006f38 <UART_SetConfig+0x2d0>)
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d36:	f003 030c 	and.w	r3, r3, #12
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	d828      	bhi.n	8006d90 <UART_SetConfig+0x128>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0xdc>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d79 	.word	0x08006d79
 8006d48:	08006d91 	.word	0x08006d91
 8006d4c:	08006d91 	.word	0x08006d91
 8006d50:	08006d91 	.word	0x08006d91
 8006d54:	08006d85 	.word	0x08006d85
 8006d58:	08006d91 	.word	0x08006d91
 8006d5c:	08006d91 	.word	0x08006d91
 8006d60:	08006d91 	.word	0x08006d91
 8006d64:	08006d7f 	.word	0x08006d7f
 8006d68:	08006d91 	.word	0x08006d91
 8006d6c:	08006d91 	.word	0x08006d91
 8006d70:	08006d91 	.word	0x08006d91
 8006d74:	08006d8b 	.word	0x08006d8b
 8006d78:	2300      	movs	r3, #0
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e117      	b.n	8006fae <UART_SetConfig+0x346>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e114      	b.n	8006fae <UART_SetConfig+0x346>
 8006d84:	2304      	movs	r3, #4
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e111      	b.n	8006fae <UART_SetConfig+0x346>
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e10e      	b.n	8006fae <UART_SetConfig+0x346>
 8006d90:	2310      	movs	r3, #16
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e10b      	b.n	8006fae <UART_SetConfig+0x346>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a69      	ldr	r2, [pc, #420]	; (8006f40 <UART_SetConfig+0x2d8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d120      	bne.n	8006de2 <UART_SetConfig+0x17a>
 8006da0:	4b65      	ldr	r3, [pc, #404]	; (8006f38 <UART_SetConfig+0x2d0>)
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006daa:	2b30      	cmp	r3, #48	; 0x30
 8006dac:	d013      	beq.n	8006dd6 <UART_SetConfig+0x16e>
 8006dae:	2b30      	cmp	r3, #48	; 0x30
 8006db0:	d814      	bhi.n	8006ddc <UART_SetConfig+0x174>
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d009      	beq.n	8006dca <UART_SetConfig+0x162>
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d810      	bhi.n	8006ddc <UART_SetConfig+0x174>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <UART_SetConfig+0x15c>
 8006dbe:	2b10      	cmp	r3, #16
 8006dc0:	d006      	beq.n	8006dd0 <UART_SetConfig+0x168>
 8006dc2:	e00b      	b.n	8006ddc <UART_SetConfig+0x174>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e0f1      	b.n	8006fae <UART_SetConfig+0x346>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	77fb      	strb	r3, [r7, #31]
 8006dce:	e0ee      	b.n	8006fae <UART_SetConfig+0x346>
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	e0eb      	b.n	8006fae <UART_SetConfig+0x346>
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	77fb      	strb	r3, [r7, #31]
 8006dda:	e0e8      	b.n	8006fae <UART_SetConfig+0x346>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	77fb      	strb	r3, [r7, #31]
 8006de0:	e0e5      	b.n	8006fae <UART_SetConfig+0x346>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a57      	ldr	r2, [pc, #348]	; (8006f44 <UART_SetConfig+0x2dc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d120      	bne.n	8006e2e <UART_SetConfig+0x1c6>
 8006dec:	4b52      	ldr	r3, [pc, #328]	; (8006f38 <UART_SetConfig+0x2d0>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006df6:	2bc0      	cmp	r3, #192	; 0xc0
 8006df8:	d013      	beq.n	8006e22 <UART_SetConfig+0x1ba>
 8006dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8006dfc:	d814      	bhi.n	8006e28 <UART_SetConfig+0x1c0>
 8006dfe:	2b80      	cmp	r3, #128	; 0x80
 8006e00:	d009      	beq.n	8006e16 <UART_SetConfig+0x1ae>
 8006e02:	2b80      	cmp	r3, #128	; 0x80
 8006e04:	d810      	bhi.n	8006e28 <UART_SetConfig+0x1c0>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <UART_SetConfig+0x1a8>
 8006e0a:	2b40      	cmp	r3, #64	; 0x40
 8006e0c:	d006      	beq.n	8006e1c <UART_SetConfig+0x1b4>
 8006e0e:	e00b      	b.n	8006e28 <UART_SetConfig+0x1c0>
 8006e10:	2300      	movs	r3, #0
 8006e12:	77fb      	strb	r3, [r7, #31]
 8006e14:	e0cb      	b.n	8006fae <UART_SetConfig+0x346>
 8006e16:	2302      	movs	r3, #2
 8006e18:	77fb      	strb	r3, [r7, #31]
 8006e1a:	e0c8      	b.n	8006fae <UART_SetConfig+0x346>
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e0c5      	b.n	8006fae <UART_SetConfig+0x346>
 8006e22:	2308      	movs	r3, #8
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	e0c2      	b.n	8006fae <UART_SetConfig+0x346>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e0bf      	b.n	8006fae <UART_SetConfig+0x346>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a45      	ldr	r2, [pc, #276]	; (8006f48 <UART_SetConfig+0x2e0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d125      	bne.n	8006e84 <UART_SetConfig+0x21c>
 8006e38:	4b3f      	ldr	r3, [pc, #252]	; (8006f38 <UART_SetConfig+0x2d0>)
 8006e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e46:	d017      	beq.n	8006e78 <UART_SetConfig+0x210>
 8006e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4c:	d817      	bhi.n	8006e7e <UART_SetConfig+0x216>
 8006e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e52:	d00b      	beq.n	8006e6c <UART_SetConfig+0x204>
 8006e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e58:	d811      	bhi.n	8006e7e <UART_SetConfig+0x216>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <UART_SetConfig+0x1fe>
 8006e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e62:	d006      	beq.n	8006e72 <UART_SetConfig+0x20a>
 8006e64:	e00b      	b.n	8006e7e <UART_SetConfig+0x216>
 8006e66:	2300      	movs	r3, #0
 8006e68:	77fb      	strb	r3, [r7, #31]
 8006e6a:	e0a0      	b.n	8006fae <UART_SetConfig+0x346>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	77fb      	strb	r3, [r7, #31]
 8006e70:	e09d      	b.n	8006fae <UART_SetConfig+0x346>
 8006e72:	2304      	movs	r3, #4
 8006e74:	77fb      	strb	r3, [r7, #31]
 8006e76:	e09a      	b.n	8006fae <UART_SetConfig+0x346>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e097      	b.n	8006fae <UART_SetConfig+0x346>
 8006e7e:	2310      	movs	r3, #16
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e094      	b.n	8006fae <UART_SetConfig+0x346>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a30      	ldr	r2, [pc, #192]	; (8006f4c <UART_SetConfig+0x2e4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d125      	bne.n	8006eda <UART_SetConfig+0x272>
 8006e8e:	4b2a      	ldr	r3, [pc, #168]	; (8006f38 <UART_SetConfig+0x2d0>)
 8006e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e9c:	d017      	beq.n	8006ece <UART_SetConfig+0x266>
 8006e9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ea2:	d817      	bhi.n	8006ed4 <UART_SetConfig+0x26c>
 8006ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea8:	d00b      	beq.n	8006ec2 <UART_SetConfig+0x25a>
 8006eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eae:	d811      	bhi.n	8006ed4 <UART_SetConfig+0x26c>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <UART_SetConfig+0x254>
 8006eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb8:	d006      	beq.n	8006ec8 <UART_SetConfig+0x260>
 8006eba:	e00b      	b.n	8006ed4 <UART_SetConfig+0x26c>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	e075      	b.n	8006fae <UART_SetConfig+0x346>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	77fb      	strb	r3, [r7, #31]
 8006ec6:	e072      	b.n	8006fae <UART_SetConfig+0x346>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	77fb      	strb	r3, [r7, #31]
 8006ecc:	e06f      	b.n	8006fae <UART_SetConfig+0x346>
 8006ece:	2308      	movs	r3, #8
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e06c      	b.n	8006fae <UART_SetConfig+0x346>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e069      	b.n	8006fae <UART_SetConfig+0x346>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <UART_SetConfig+0x2e8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d137      	bne.n	8006f54 <UART_SetConfig+0x2ec>
 8006ee4:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <UART_SetConfig+0x2d0>)
 8006ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006eee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ef2:	d017      	beq.n	8006f24 <UART_SetConfig+0x2bc>
 8006ef4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ef8:	d817      	bhi.n	8006f2a <UART_SetConfig+0x2c2>
 8006efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efe:	d00b      	beq.n	8006f18 <UART_SetConfig+0x2b0>
 8006f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f04:	d811      	bhi.n	8006f2a <UART_SetConfig+0x2c2>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <UART_SetConfig+0x2aa>
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0e:	d006      	beq.n	8006f1e <UART_SetConfig+0x2b6>
 8006f10:	e00b      	b.n	8006f2a <UART_SetConfig+0x2c2>
 8006f12:	2300      	movs	r3, #0
 8006f14:	77fb      	strb	r3, [r7, #31]
 8006f16:	e04a      	b.n	8006fae <UART_SetConfig+0x346>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	e047      	b.n	8006fae <UART_SetConfig+0x346>
 8006f1e:	2304      	movs	r3, #4
 8006f20:	77fb      	strb	r3, [r7, #31]
 8006f22:	e044      	b.n	8006fae <UART_SetConfig+0x346>
 8006f24:	2308      	movs	r3, #8
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e041      	b.n	8006fae <UART_SetConfig+0x346>
 8006f2a:	2310      	movs	r3, #16
 8006f2c:	77fb      	strb	r3, [r7, #31]
 8006f2e:	e03e      	b.n	8006fae <UART_SetConfig+0x346>
 8006f30:	efff69f3 	.word	0xefff69f3
 8006f34:	40011000 	.word	0x40011000
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	40004400 	.word	0x40004400
 8006f40:	40004800 	.word	0x40004800
 8006f44:	40004c00 	.word	0x40004c00
 8006f48:	40005000 	.word	0x40005000
 8006f4c:	40011400 	.word	0x40011400
 8006f50:	40007800 	.word	0x40007800
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a71      	ldr	r2, [pc, #452]	; (8007120 <UART_SetConfig+0x4b8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d125      	bne.n	8006faa <UART_SetConfig+0x342>
 8006f5e:	4b71      	ldr	r3, [pc, #452]	; (8007124 <UART_SetConfig+0x4bc>)
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f6c:	d017      	beq.n	8006f9e <UART_SetConfig+0x336>
 8006f6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f72:	d817      	bhi.n	8006fa4 <UART_SetConfig+0x33c>
 8006f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f78:	d00b      	beq.n	8006f92 <UART_SetConfig+0x32a>
 8006f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7e:	d811      	bhi.n	8006fa4 <UART_SetConfig+0x33c>
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <UART_SetConfig+0x324>
 8006f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f88:	d006      	beq.n	8006f98 <UART_SetConfig+0x330>
 8006f8a:	e00b      	b.n	8006fa4 <UART_SetConfig+0x33c>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e00d      	b.n	8006fae <UART_SetConfig+0x346>
 8006f92:	2302      	movs	r3, #2
 8006f94:	77fb      	strb	r3, [r7, #31]
 8006f96:	e00a      	b.n	8006fae <UART_SetConfig+0x346>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e007      	b.n	8006fae <UART_SetConfig+0x346>
 8006f9e:	2308      	movs	r3, #8
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e004      	b.n	8006fae <UART_SetConfig+0x346>
 8006fa4:	2310      	movs	r3, #16
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e001      	b.n	8006fae <UART_SetConfig+0x346>
 8006faa:	2310      	movs	r3, #16
 8006fac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb6:	d15b      	bne.n	8007070 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006fb8:	7ffb      	ldrb	r3, [r7, #31]
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d827      	bhi.n	800700e <UART_SetConfig+0x3a6>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <UART_SetConfig+0x35c>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	0800700f 	.word	0x0800700f
 8006fd4:	08006fff 	.word	0x08006fff
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	0800700f 	.word	0x0800700f
 8006fe0:	0800700f 	.word	0x0800700f
 8006fe4:	08007007 	.word	0x08007007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe8:	f7fd faf8 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8006fec:	61b8      	str	r0, [r7, #24]
        break;
 8006fee:	e013      	b.n	8007018 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff0:	f7fd fb08 	bl	8004604 <HAL_RCC_GetPCLK2Freq>
 8006ff4:	61b8      	str	r0, [r7, #24]
        break;
 8006ff6:	e00f      	b.n	8007018 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff8:	4b4b      	ldr	r3, [pc, #300]	; (8007128 <UART_SetConfig+0x4c0>)
 8006ffa:	61bb      	str	r3, [r7, #24]
        break;
 8006ffc:	e00c      	b.n	8007018 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fd fa2b 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 8007002:	61b8      	str	r0, [r7, #24]
        break;
 8007004:	e008      	b.n	8007018 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700a:	61bb      	str	r3, [r7, #24]
        break;
 800700c:	e004      	b.n	8007018 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	77bb      	strb	r3, [r7, #30]
        break;
 8007016:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d074      	beq.n	8007108 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	005a      	lsls	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	441a      	add	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007032:	b29b      	uxth	r3, r3
 8007034:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b0f      	cmp	r3, #15
 800703a:	d916      	bls.n	800706a <UART_SetConfig+0x402>
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007042:	d212      	bcs.n	800706a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	b29b      	uxth	r3, r3
 8007048:	f023 030f 	bic.w	r3, r3, #15
 800704c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	085b      	lsrs	r3, r3, #1
 8007052:	b29b      	uxth	r3, r3
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	b29a      	uxth	r2, r3
 800705a:	89fb      	ldrh	r3, [r7, #14]
 800705c:	4313      	orrs	r3, r2
 800705e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	89fa      	ldrh	r2, [r7, #14]
 8007066:	60da      	str	r2, [r3, #12]
 8007068:	e04e      	b.n	8007108 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	77bb      	strb	r3, [r7, #30]
 800706e:	e04b      	b.n	8007108 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007070:	7ffb      	ldrb	r3, [r7, #31]
 8007072:	2b08      	cmp	r3, #8
 8007074:	d827      	bhi.n	80070c6 <UART_SetConfig+0x45e>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <UART_SetConfig+0x414>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	080070a1 	.word	0x080070a1
 8007080:	080070a9 	.word	0x080070a9
 8007084:	080070b1 	.word	0x080070b1
 8007088:	080070c7 	.word	0x080070c7
 800708c:	080070b7 	.word	0x080070b7
 8007090:	080070c7 	.word	0x080070c7
 8007094:	080070c7 	.word	0x080070c7
 8007098:	080070c7 	.word	0x080070c7
 800709c:	080070bf 	.word	0x080070bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a0:	f7fd fa9c 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 80070a4:	61b8      	str	r0, [r7, #24]
        break;
 80070a6:	e013      	b.n	80070d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a8:	f7fd faac 	bl	8004604 <HAL_RCC_GetPCLK2Freq>
 80070ac:	61b8      	str	r0, [r7, #24]
        break;
 80070ae:	e00f      	b.n	80070d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b0:	4b1d      	ldr	r3, [pc, #116]	; (8007128 <UART_SetConfig+0x4c0>)
 80070b2:	61bb      	str	r3, [r7, #24]
        break;
 80070b4:	e00c      	b.n	80070d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b6:	f7fd f9cf 	bl	8004458 <HAL_RCC_GetSysClockFreq>
 80070ba:	61b8      	str	r0, [r7, #24]
        break;
 80070bc:	e008      	b.n	80070d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070c2:	61bb      	str	r3, [r7, #24]
        break;
 80070c4:	e004      	b.n	80070d0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	77bb      	strb	r3, [r7, #30]
        break;
 80070ce:	bf00      	nop
    }

    if (pclk != 0U)
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d018      	beq.n	8007108 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	085a      	lsrs	r2, r3, #1
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	441a      	add	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d908      	bls.n	8007104 <UART_SetConfig+0x49c>
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f8:	d204      	bcs.n	8007104 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	60da      	str	r2, [r3, #12]
 8007102:	e001      	b.n	8007108 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007114:	7fbb      	ldrb	r3, [r7, #30]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40007c00 	.word	0x40007c00
 8007124:	40023800 	.word	0x40023800
 8007128:	00f42400 	.word	0x00f42400

0800712c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01a      	beq.n	8007242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800722a:	d10a      	bne.n	8007242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af02      	add	r7, sp, #8
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007280:	f7fa ffd0 	bl	8002224 <HAL_GetTick>
 8007284:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b08      	cmp	r3, #8
 8007292:	d10e      	bne.n	80072b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f82d 	bl	8007302 <UART_WaitOnFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e023      	b.n	80072fa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d10e      	bne.n	80072de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f817 	bl	8007302 <UART_WaitOnFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e00d      	b.n	80072fa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	60b9      	str	r1, [r7, #8]
 800730c:	603b      	str	r3, [r7, #0]
 800730e:	4613      	mov	r3, r2
 8007310:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007312:	e05e      	b.n	80073d2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d05a      	beq.n	80073d2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731c:	f7fa ff82 	bl	8002224 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	429a      	cmp	r2, r3
 800732a:	d302      	bcc.n	8007332 <UART_WaitOnFlagUntilTimeout+0x30>
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d11b      	bne.n	800736a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007340:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0201 	bic.w	r2, r2, #1
 8007350:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2220      	movs	r2, #32
 800735c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e043      	b.n	80073f2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d02c      	beq.n	80073d2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007386:	d124      	bne.n	80073d2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007390:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0201 	bic.w	r2, r2, #1
 80073b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2220      	movs	r2, #32
 80073b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2220      	movs	r2, #32
 80073bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e00f      	b.n	80073f2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4013      	ands	r3, r2
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	429a      	cmp	r2, r3
 80073e0:	bf0c      	ite	eq
 80073e2:	2301      	moveq	r3, #1
 80073e4:	2300      	movne	r3, #0
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d091      	beq.n	8007314 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007410:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0201 	bic.w	r2, r2, #1
 8007420:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007426:	2b01      	cmp	r3, #1
 8007428:	d107      	bne.n	800743a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0210 	bic.w	r2, r2, #16
 8007438:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff fbd6 	bl	8006c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007490:	2b21      	cmp	r3, #33	; 0x21
 8007492:	d12a      	bne.n	80074ea <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800749a:	b29b      	uxth	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d110      	bne.n	80074c2 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074ae:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074be:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80074c0:	e013      	b.n	80074ea <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007502:	2b21      	cmp	r3, #33	; 0x21
 8007504:	d12f      	bne.n	8007566 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d110      	bne.n	8007534 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007520:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007530:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007532:	e018      	b.n	8007566 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007538:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007548:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754e:	1c9a      	adds	r2, r3, #2
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800755a:	b29b      	uxth	r3, r3
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007588:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff fb3c 	bl	8006c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <__errno>:
 80075a4:	4b01      	ldr	r3, [pc, #4]	; (80075ac <__errno+0x8>)
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	20000100 	.word	0x20000100

080075b0 <__libc_init_array>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	4d0d      	ldr	r5, [pc, #52]	; (80075e8 <__libc_init_array+0x38>)
 80075b4:	4c0d      	ldr	r4, [pc, #52]	; (80075ec <__libc_init_array+0x3c>)
 80075b6:	1b64      	subs	r4, r4, r5
 80075b8:	10a4      	asrs	r4, r4, #2
 80075ba:	2600      	movs	r6, #0
 80075bc:	42a6      	cmp	r6, r4
 80075be:	d109      	bne.n	80075d4 <__libc_init_array+0x24>
 80075c0:	4d0b      	ldr	r5, [pc, #44]	; (80075f0 <__libc_init_array+0x40>)
 80075c2:	4c0c      	ldr	r4, [pc, #48]	; (80075f4 <__libc_init_array+0x44>)
 80075c4:	f002 fe3c 	bl	800a240 <_init>
 80075c8:	1b64      	subs	r4, r4, r5
 80075ca:	10a4      	asrs	r4, r4, #2
 80075cc:	2600      	movs	r6, #0
 80075ce:	42a6      	cmp	r6, r4
 80075d0:	d105      	bne.n	80075de <__libc_init_array+0x2e>
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d8:	4798      	blx	r3
 80075da:	3601      	adds	r6, #1
 80075dc:	e7ee      	b.n	80075bc <__libc_init_array+0xc>
 80075de:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e2:	4798      	blx	r3
 80075e4:	3601      	adds	r6, #1
 80075e6:	e7f2      	b.n	80075ce <__libc_init_array+0x1e>
 80075e8:	0800a694 	.word	0x0800a694
 80075ec:	0800a694 	.word	0x0800a694
 80075f0:	0800a694 	.word	0x0800a694
 80075f4:	0800a698 	.word	0x0800a698

080075f8 <malloc>:
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <malloc+0xc>)
 80075fa:	4601      	mov	r1, r0
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	f000 b85b 	b.w	80076b8 <_malloc_r>
 8007602:	bf00      	nop
 8007604:	20000100 	.word	0x20000100

08007608 <memset>:
 8007608:	4402      	add	r2, r0
 800760a:	4603      	mov	r3, r0
 800760c:	4293      	cmp	r3, r2
 800760e:	d100      	bne.n	8007612 <memset+0xa>
 8007610:	4770      	bx	lr
 8007612:	f803 1b01 	strb.w	r1, [r3], #1
 8007616:	e7f9      	b.n	800760c <memset+0x4>

08007618 <_free_r>:
 8007618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800761a:	2900      	cmp	r1, #0
 800761c:	d048      	beq.n	80076b0 <_free_r+0x98>
 800761e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007622:	9001      	str	r0, [sp, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f1a1 0404 	sub.w	r4, r1, #4
 800762a:	bfb8      	it	lt
 800762c:	18e4      	addlt	r4, r4, r3
 800762e:	f001 fb7d 	bl	8008d2c <__malloc_lock>
 8007632:	4a20      	ldr	r2, [pc, #128]	; (80076b4 <_free_r+0x9c>)
 8007634:	9801      	ldr	r0, [sp, #4]
 8007636:	6813      	ldr	r3, [r2, #0]
 8007638:	4615      	mov	r5, r2
 800763a:	b933      	cbnz	r3, 800764a <_free_r+0x32>
 800763c:	6063      	str	r3, [r4, #4]
 800763e:	6014      	str	r4, [r2, #0]
 8007640:	b003      	add	sp, #12
 8007642:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007646:	f001 bb77 	b.w	8008d38 <__malloc_unlock>
 800764a:	42a3      	cmp	r3, r4
 800764c:	d90b      	bls.n	8007666 <_free_r+0x4e>
 800764e:	6821      	ldr	r1, [r4, #0]
 8007650:	1862      	adds	r2, r4, r1
 8007652:	4293      	cmp	r3, r2
 8007654:	bf04      	itt	eq
 8007656:	681a      	ldreq	r2, [r3, #0]
 8007658:	685b      	ldreq	r3, [r3, #4]
 800765a:	6063      	str	r3, [r4, #4]
 800765c:	bf04      	itt	eq
 800765e:	1852      	addeq	r2, r2, r1
 8007660:	6022      	streq	r2, [r4, #0]
 8007662:	602c      	str	r4, [r5, #0]
 8007664:	e7ec      	b.n	8007640 <_free_r+0x28>
 8007666:	461a      	mov	r2, r3
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	b10b      	cbz	r3, 8007670 <_free_r+0x58>
 800766c:	42a3      	cmp	r3, r4
 800766e:	d9fa      	bls.n	8007666 <_free_r+0x4e>
 8007670:	6811      	ldr	r1, [r2, #0]
 8007672:	1855      	adds	r5, r2, r1
 8007674:	42a5      	cmp	r5, r4
 8007676:	d10b      	bne.n	8007690 <_free_r+0x78>
 8007678:	6824      	ldr	r4, [r4, #0]
 800767a:	4421      	add	r1, r4
 800767c:	1854      	adds	r4, r2, r1
 800767e:	42a3      	cmp	r3, r4
 8007680:	6011      	str	r1, [r2, #0]
 8007682:	d1dd      	bne.n	8007640 <_free_r+0x28>
 8007684:	681c      	ldr	r4, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	6053      	str	r3, [r2, #4]
 800768a:	4421      	add	r1, r4
 800768c:	6011      	str	r1, [r2, #0]
 800768e:	e7d7      	b.n	8007640 <_free_r+0x28>
 8007690:	d902      	bls.n	8007698 <_free_r+0x80>
 8007692:	230c      	movs	r3, #12
 8007694:	6003      	str	r3, [r0, #0]
 8007696:	e7d3      	b.n	8007640 <_free_r+0x28>
 8007698:	6825      	ldr	r5, [r4, #0]
 800769a:	1961      	adds	r1, r4, r5
 800769c:	428b      	cmp	r3, r1
 800769e:	bf04      	itt	eq
 80076a0:	6819      	ldreq	r1, [r3, #0]
 80076a2:	685b      	ldreq	r3, [r3, #4]
 80076a4:	6063      	str	r3, [r4, #4]
 80076a6:	bf04      	itt	eq
 80076a8:	1949      	addeq	r1, r1, r5
 80076aa:	6021      	streq	r1, [r4, #0]
 80076ac:	6054      	str	r4, [r2, #4]
 80076ae:	e7c7      	b.n	8007640 <_free_r+0x28>
 80076b0:	b003      	add	sp, #12
 80076b2:	bd30      	pop	{r4, r5, pc}
 80076b4:	20000320 	.word	0x20000320

080076b8 <_malloc_r>:
 80076b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ba:	1ccd      	adds	r5, r1, #3
 80076bc:	f025 0503 	bic.w	r5, r5, #3
 80076c0:	3508      	adds	r5, #8
 80076c2:	2d0c      	cmp	r5, #12
 80076c4:	bf38      	it	cc
 80076c6:	250c      	movcc	r5, #12
 80076c8:	2d00      	cmp	r5, #0
 80076ca:	4606      	mov	r6, r0
 80076cc:	db01      	blt.n	80076d2 <_malloc_r+0x1a>
 80076ce:	42a9      	cmp	r1, r5
 80076d0:	d903      	bls.n	80076da <_malloc_r+0x22>
 80076d2:	230c      	movs	r3, #12
 80076d4:	6033      	str	r3, [r6, #0]
 80076d6:	2000      	movs	r0, #0
 80076d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076da:	f001 fb27 	bl	8008d2c <__malloc_lock>
 80076de:	4921      	ldr	r1, [pc, #132]	; (8007764 <_malloc_r+0xac>)
 80076e0:	680a      	ldr	r2, [r1, #0]
 80076e2:	4614      	mov	r4, r2
 80076e4:	b99c      	cbnz	r4, 800770e <_malloc_r+0x56>
 80076e6:	4f20      	ldr	r7, [pc, #128]	; (8007768 <_malloc_r+0xb0>)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	b923      	cbnz	r3, 80076f6 <_malloc_r+0x3e>
 80076ec:	4621      	mov	r1, r4
 80076ee:	4630      	mov	r0, r6
 80076f0:	f000 fc80 	bl	8007ff4 <_sbrk_r>
 80076f4:	6038      	str	r0, [r7, #0]
 80076f6:	4629      	mov	r1, r5
 80076f8:	4630      	mov	r0, r6
 80076fa:	f000 fc7b 	bl	8007ff4 <_sbrk_r>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	d123      	bne.n	800774a <_malloc_r+0x92>
 8007702:	230c      	movs	r3, #12
 8007704:	6033      	str	r3, [r6, #0]
 8007706:	4630      	mov	r0, r6
 8007708:	f001 fb16 	bl	8008d38 <__malloc_unlock>
 800770c:	e7e3      	b.n	80076d6 <_malloc_r+0x1e>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	1b5b      	subs	r3, r3, r5
 8007712:	d417      	bmi.n	8007744 <_malloc_r+0x8c>
 8007714:	2b0b      	cmp	r3, #11
 8007716:	d903      	bls.n	8007720 <_malloc_r+0x68>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	441c      	add	r4, r3
 800771c:	6025      	str	r5, [r4, #0]
 800771e:	e004      	b.n	800772a <_malloc_r+0x72>
 8007720:	6863      	ldr	r3, [r4, #4]
 8007722:	42a2      	cmp	r2, r4
 8007724:	bf0c      	ite	eq
 8007726:	600b      	streq	r3, [r1, #0]
 8007728:	6053      	strne	r3, [r2, #4]
 800772a:	4630      	mov	r0, r6
 800772c:	f001 fb04 	bl	8008d38 <__malloc_unlock>
 8007730:	f104 000b 	add.w	r0, r4, #11
 8007734:	1d23      	adds	r3, r4, #4
 8007736:	f020 0007 	bic.w	r0, r0, #7
 800773a:	1ac2      	subs	r2, r0, r3
 800773c:	d0cc      	beq.n	80076d8 <_malloc_r+0x20>
 800773e:	1a1b      	subs	r3, r3, r0
 8007740:	50a3      	str	r3, [r4, r2]
 8007742:	e7c9      	b.n	80076d8 <_malloc_r+0x20>
 8007744:	4622      	mov	r2, r4
 8007746:	6864      	ldr	r4, [r4, #4]
 8007748:	e7cc      	b.n	80076e4 <_malloc_r+0x2c>
 800774a:	1cc4      	adds	r4, r0, #3
 800774c:	f024 0403 	bic.w	r4, r4, #3
 8007750:	42a0      	cmp	r0, r4
 8007752:	d0e3      	beq.n	800771c <_malloc_r+0x64>
 8007754:	1a21      	subs	r1, r4, r0
 8007756:	4630      	mov	r0, r6
 8007758:	f000 fc4c 	bl	8007ff4 <_sbrk_r>
 800775c:	3001      	adds	r0, #1
 800775e:	d1dd      	bne.n	800771c <_malloc_r+0x64>
 8007760:	e7cf      	b.n	8007702 <_malloc_r+0x4a>
 8007762:	bf00      	nop
 8007764:	20000320 	.word	0x20000320
 8007768:	20000324 	.word	0x20000324

0800776c <__cvt>:
 800776c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776e:	ed2d 8b02 	vpush	{d8}
 8007772:	eeb0 8b40 	vmov.f64	d8, d0
 8007776:	b085      	sub	sp, #20
 8007778:	4617      	mov	r7, r2
 800777a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800777c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800777e:	ee18 2a90 	vmov	r2, s17
 8007782:	f025 0520 	bic.w	r5, r5, #32
 8007786:	2a00      	cmp	r2, #0
 8007788:	bfb6      	itet	lt
 800778a:	222d      	movlt	r2, #45	; 0x2d
 800778c:	2200      	movge	r2, #0
 800778e:	eeb1 8b40 	vneglt.f64	d8, d0
 8007792:	2d46      	cmp	r5, #70	; 0x46
 8007794:	460c      	mov	r4, r1
 8007796:	701a      	strb	r2, [r3, #0]
 8007798:	d004      	beq.n	80077a4 <__cvt+0x38>
 800779a:	2d45      	cmp	r5, #69	; 0x45
 800779c:	d100      	bne.n	80077a0 <__cvt+0x34>
 800779e:	3401      	adds	r4, #1
 80077a0:	2102      	movs	r1, #2
 80077a2:	e000      	b.n	80077a6 <__cvt+0x3a>
 80077a4:	2103      	movs	r1, #3
 80077a6:	ab03      	add	r3, sp, #12
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	ab02      	add	r3, sp, #8
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	4622      	mov	r2, r4
 80077b0:	4633      	mov	r3, r6
 80077b2:	eeb0 0b48 	vmov.f64	d0, d8
 80077b6:	f000 fd13 	bl	80081e0 <_dtoa_r>
 80077ba:	2d47      	cmp	r5, #71	; 0x47
 80077bc:	d109      	bne.n	80077d2 <__cvt+0x66>
 80077be:	07fb      	lsls	r3, r7, #31
 80077c0:	d407      	bmi.n	80077d2 <__cvt+0x66>
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077c6:	1a1b      	subs	r3, r3, r0
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	b005      	add	sp, #20
 80077cc:	ecbd 8b02 	vpop	{d8}
 80077d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d2:	2d46      	cmp	r5, #70	; 0x46
 80077d4:	eb00 0204 	add.w	r2, r0, r4
 80077d8:	d10c      	bne.n	80077f4 <__cvt+0x88>
 80077da:	7803      	ldrb	r3, [r0, #0]
 80077dc:	2b30      	cmp	r3, #48	; 0x30
 80077de:	d107      	bne.n	80077f0 <__cvt+0x84>
 80077e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80077e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e8:	bf1c      	itt	ne
 80077ea:	f1c4 0401 	rsbne	r4, r4, #1
 80077ee:	6034      	strne	r4, [r6, #0]
 80077f0:	6833      	ldr	r3, [r6, #0]
 80077f2:	441a      	add	r2, r3
 80077f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80077f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077fc:	bf08      	it	eq
 80077fe:	9203      	streq	r2, [sp, #12]
 8007800:	2130      	movs	r1, #48	; 0x30
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	4293      	cmp	r3, r2
 8007806:	d2dc      	bcs.n	80077c2 <__cvt+0x56>
 8007808:	1c5c      	adds	r4, r3, #1
 800780a:	9403      	str	r4, [sp, #12]
 800780c:	7019      	strb	r1, [r3, #0]
 800780e:	e7f8      	b.n	8007802 <__cvt+0x96>

08007810 <__exponent>:
 8007810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007812:	4603      	mov	r3, r0
 8007814:	2900      	cmp	r1, #0
 8007816:	bfb8      	it	lt
 8007818:	4249      	neglt	r1, r1
 800781a:	f803 2b02 	strb.w	r2, [r3], #2
 800781e:	bfb4      	ite	lt
 8007820:	222d      	movlt	r2, #45	; 0x2d
 8007822:	222b      	movge	r2, #43	; 0x2b
 8007824:	2909      	cmp	r1, #9
 8007826:	7042      	strb	r2, [r0, #1]
 8007828:	dd2a      	ble.n	8007880 <__exponent+0x70>
 800782a:	f10d 0407 	add.w	r4, sp, #7
 800782e:	46a4      	mov	ip, r4
 8007830:	270a      	movs	r7, #10
 8007832:	46a6      	mov	lr, r4
 8007834:	460a      	mov	r2, r1
 8007836:	fb91 f6f7 	sdiv	r6, r1, r7
 800783a:	fb07 1516 	mls	r5, r7, r6, r1
 800783e:	3530      	adds	r5, #48	; 0x30
 8007840:	2a63      	cmp	r2, #99	; 0x63
 8007842:	f104 34ff 	add.w	r4, r4, #4294967295
 8007846:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800784a:	4631      	mov	r1, r6
 800784c:	dcf1      	bgt.n	8007832 <__exponent+0x22>
 800784e:	3130      	adds	r1, #48	; 0x30
 8007850:	f1ae 0502 	sub.w	r5, lr, #2
 8007854:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007858:	1c44      	adds	r4, r0, #1
 800785a:	4629      	mov	r1, r5
 800785c:	4561      	cmp	r1, ip
 800785e:	d30a      	bcc.n	8007876 <__exponent+0x66>
 8007860:	f10d 0209 	add.w	r2, sp, #9
 8007864:	eba2 020e 	sub.w	r2, r2, lr
 8007868:	4565      	cmp	r5, ip
 800786a:	bf88      	it	hi
 800786c:	2200      	movhi	r2, #0
 800786e:	4413      	add	r3, r2
 8007870:	1a18      	subs	r0, r3, r0
 8007872:	b003      	add	sp, #12
 8007874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800787a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800787e:	e7ed      	b.n	800785c <__exponent+0x4c>
 8007880:	2330      	movs	r3, #48	; 0x30
 8007882:	3130      	adds	r1, #48	; 0x30
 8007884:	7083      	strb	r3, [r0, #2]
 8007886:	70c1      	strb	r1, [r0, #3]
 8007888:	1d03      	adds	r3, r0, #4
 800788a:	e7f1      	b.n	8007870 <__exponent+0x60>
 800788c:	0000      	movs	r0, r0
	...

08007890 <_printf_float>:
 8007890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007894:	b08b      	sub	sp, #44	; 0x2c
 8007896:	460c      	mov	r4, r1
 8007898:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800789c:	4616      	mov	r6, r2
 800789e:	461f      	mov	r7, r3
 80078a0:	4605      	mov	r5, r0
 80078a2:	f001 fa31 	bl	8008d08 <_localeconv_r>
 80078a6:	f8d0 b000 	ldr.w	fp, [r0]
 80078aa:	4658      	mov	r0, fp
 80078ac:	f7f8 fcc8 	bl	8000240 <strlen>
 80078b0:	2300      	movs	r3, #0
 80078b2:	9308      	str	r3, [sp, #32]
 80078b4:	f8d8 3000 	ldr.w	r3, [r8]
 80078b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80078bc:	6822      	ldr	r2, [r4, #0]
 80078be:	3307      	adds	r3, #7
 80078c0:	f023 0307 	bic.w	r3, r3, #7
 80078c4:	f103 0108 	add.w	r1, r3, #8
 80078c8:	f8c8 1000 	str.w	r1, [r8]
 80078cc:	4682      	mov	sl, r0
 80078ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80078d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007b38 <_printf_float+0x2a8>
 80078da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80078de:	eeb0 6bc0 	vabs.f64	d6, d0
 80078e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80078e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ea:	dd24      	ble.n	8007936 <_printf_float+0xa6>
 80078ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80078f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f4:	d502      	bpl.n	80078fc <_printf_float+0x6c>
 80078f6:	232d      	movs	r3, #45	; 0x2d
 80078f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078fc:	4b90      	ldr	r3, [pc, #576]	; (8007b40 <_printf_float+0x2b0>)
 80078fe:	4891      	ldr	r0, [pc, #580]	; (8007b44 <_printf_float+0x2b4>)
 8007900:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007904:	bf94      	ite	ls
 8007906:	4698      	movls	r8, r3
 8007908:	4680      	movhi	r8, r0
 800790a:	2303      	movs	r3, #3
 800790c:	6123      	str	r3, [r4, #16]
 800790e:	f022 0204 	bic.w	r2, r2, #4
 8007912:	2300      	movs	r3, #0
 8007914:	6022      	str	r2, [r4, #0]
 8007916:	9304      	str	r3, [sp, #16]
 8007918:	9700      	str	r7, [sp, #0]
 800791a:	4633      	mov	r3, r6
 800791c:	aa09      	add	r2, sp, #36	; 0x24
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f000 f9d3 	bl	8007ccc <_printf_common>
 8007926:	3001      	adds	r0, #1
 8007928:	f040 808a 	bne.w	8007a40 <_printf_float+0x1b0>
 800792c:	f04f 30ff 	mov.w	r0, #4294967295
 8007930:	b00b      	add	sp, #44	; 0x2c
 8007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007936:	eeb4 0b40 	vcmp.f64	d0, d0
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	d709      	bvc.n	8007954 <_printf_float+0xc4>
 8007940:	ee10 3a90 	vmov	r3, s1
 8007944:	2b00      	cmp	r3, #0
 8007946:	bfbc      	itt	lt
 8007948:	232d      	movlt	r3, #45	; 0x2d
 800794a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800794e:	487e      	ldr	r0, [pc, #504]	; (8007b48 <_printf_float+0x2b8>)
 8007950:	4b7e      	ldr	r3, [pc, #504]	; (8007b4c <_printf_float+0x2bc>)
 8007952:	e7d5      	b.n	8007900 <_printf_float+0x70>
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800795a:	9104      	str	r1, [sp, #16]
 800795c:	1c59      	adds	r1, r3, #1
 800795e:	d13c      	bne.n	80079da <_printf_float+0x14a>
 8007960:	2306      	movs	r3, #6
 8007962:	6063      	str	r3, [r4, #4]
 8007964:	2300      	movs	r3, #0
 8007966:	9303      	str	r3, [sp, #12]
 8007968:	ab08      	add	r3, sp, #32
 800796a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800796e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007972:	ab07      	add	r3, sp, #28
 8007974:	6861      	ldr	r1, [r4, #4]
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	6022      	str	r2, [r4, #0]
 800797a:	f10d 031b 	add.w	r3, sp, #27
 800797e:	4628      	mov	r0, r5
 8007980:	f7ff fef4 	bl	800776c <__cvt>
 8007984:	9b04      	ldr	r3, [sp, #16]
 8007986:	9907      	ldr	r1, [sp, #28]
 8007988:	2b47      	cmp	r3, #71	; 0x47
 800798a:	4680      	mov	r8, r0
 800798c:	d108      	bne.n	80079a0 <_printf_float+0x110>
 800798e:	1cc8      	adds	r0, r1, #3
 8007990:	db02      	blt.n	8007998 <_printf_float+0x108>
 8007992:	6863      	ldr	r3, [r4, #4]
 8007994:	4299      	cmp	r1, r3
 8007996:	dd41      	ble.n	8007a1c <_printf_float+0x18c>
 8007998:	f1a9 0902 	sub.w	r9, r9, #2
 800799c:	fa5f f989 	uxtb.w	r9, r9
 80079a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80079a4:	d820      	bhi.n	80079e8 <_printf_float+0x158>
 80079a6:	3901      	subs	r1, #1
 80079a8:	464a      	mov	r2, r9
 80079aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079ae:	9107      	str	r1, [sp, #28]
 80079b0:	f7ff ff2e 	bl	8007810 <__exponent>
 80079b4:	9a08      	ldr	r2, [sp, #32]
 80079b6:	9004      	str	r0, [sp, #16]
 80079b8:	1813      	adds	r3, r2, r0
 80079ba:	2a01      	cmp	r2, #1
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	dc02      	bgt.n	80079c6 <_printf_float+0x136>
 80079c0:	6822      	ldr	r2, [r4, #0]
 80079c2:	07d2      	lsls	r2, r2, #31
 80079c4:	d501      	bpl.n	80079ca <_printf_float+0x13a>
 80079c6:	3301      	adds	r3, #1
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0a2      	beq.n	8007918 <_printf_float+0x88>
 80079d2:	232d      	movs	r3, #45	; 0x2d
 80079d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079d8:	e79e      	b.n	8007918 <_printf_float+0x88>
 80079da:	9904      	ldr	r1, [sp, #16]
 80079dc:	2947      	cmp	r1, #71	; 0x47
 80079de:	d1c1      	bne.n	8007964 <_printf_float+0xd4>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1bf      	bne.n	8007964 <_printf_float+0xd4>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e7bc      	b.n	8007962 <_printf_float+0xd2>
 80079e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80079ec:	d118      	bne.n	8007a20 <_printf_float+0x190>
 80079ee:	2900      	cmp	r1, #0
 80079f0:	6863      	ldr	r3, [r4, #4]
 80079f2:	dd0b      	ble.n	8007a0c <_printf_float+0x17c>
 80079f4:	6121      	str	r1, [r4, #16]
 80079f6:	b913      	cbnz	r3, 80079fe <_printf_float+0x16e>
 80079f8:	6822      	ldr	r2, [r4, #0]
 80079fa:	07d0      	lsls	r0, r2, #31
 80079fc:	d502      	bpl.n	8007a04 <_printf_float+0x174>
 80079fe:	3301      	adds	r3, #1
 8007a00:	440b      	add	r3, r1
 8007a02:	6123      	str	r3, [r4, #16]
 8007a04:	2300      	movs	r3, #0
 8007a06:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	e7de      	b.n	80079ca <_printf_float+0x13a>
 8007a0c:	b913      	cbnz	r3, 8007a14 <_printf_float+0x184>
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	07d2      	lsls	r2, r2, #31
 8007a12:	d501      	bpl.n	8007a18 <_printf_float+0x188>
 8007a14:	3302      	adds	r3, #2
 8007a16:	e7f4      	b.n	8007a02 <_printf_float+0x172>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e7f2      	b.n	8007a02 <_printf_float+0x172>
 8007a1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007a20:	9b08      	ldr	r3, [sp, #32]
 8007a22:	4299      	cmp	r1, r3
 8007a24:	db05      	blt.n	8007a32 <_printf_float+0x1a2>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	6121      	str	r1, [r4, #16]
 8007a2a:	07d8      	lsls	r0, r3, #31
 8007a2c:	d5ea      	bpl.n	8007a04 <_printf_float+0x174>
 8007a2e:	1c4b      	adds	r3, r1, #1
 8007a30:	e7e7      	b.n	8007a02 <_printf_float+0x172>
 8007a32:	2900      	cmp	r1, #0
 8007a34:	bfd4      	ite	le
 8007a36:	f1c1 0202 	rsble	r2, r1, #2
 8007a3a:	2201      	movgt	r2, #1
 8007a3c:	4413      	add	r3, r2
 8007a3e:	e7e0      	b.n	8007a02 <_printf_float+0x172>
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	055a      	lsls	r2, r3, #21
 8007a44:	d407      	bmi.n	8007a56 <_printf_float+0x1c6>
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	4642      	mov	r2, r8
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	47b8      	blx	r7
 8007a50:	3001      	adds	r0, #1
 8007a52:	d12a      	bne.n	8007aaa <_printf_float+0x21a>
 8007a54:	e76a      	b.n	800792c <_printf_float+0x9c>
 8007a56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a5a:	f240 80e2 	bls.w	8007c22 <_printf_float+0x392>
 8007a5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007a62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6a:	d133      	bne.n	8007ad4 <_printf_float+0x244>
 8007a6c:	4a38      	ldr	r2, [pc, #224]	; (8007b50 <_printf_float+0x2c0>)
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b8      	blx	r7
 8007a76:	3001      	adds	r0, #1
 8007a78:	f43f af58 	beq.w	800792c <_printf_float+0x9c>
 8007a7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	db02      	blt.n	8007a8a <_printf_float+0x1fa>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	07d8      	lsls	r0, r3, #31
 8007a88:	d50f      	bpl.n	8007aaa <_printf_float+0x21a>
 8007a8a:	4653      	mov	r3, sl
 8007a8c:	465a      	mov	r2, fp
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4628      	mov	r0, r5
 8007a92:	47b8      	blx	r7
 8007a94:	3001      	adds	r0, #1
 8007a96:	f43f af49 	beq.w	800792c <_printf_float+0x9c>
 8007a9a:	f04f 0800 	mov.w	r8, #0
 8007a9e:	f104 091a 	add.w	r9, r4, #26
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	4543      	cmp	r3, r8
 8007aa8:	dc09      	bgt.n	8007abe <_printf_float+0x22e>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	079b      	lsls	r3, r3, #30
 8007aae:	f100 8108 	bmi.w	8007cc2 <_printf_float+0x432>
 8007ab2:	68e0      	ldr	r0, [r4, #12]
 8007ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab6:	4298      	cmp	r0, r3
 8007ab8:	bfb8      	it	lt
 8007aba:	4618      	movlt	r0, r3
 8007abc:	e738      	b.n	8007930 <_printf_float+0xa0>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	464a      	mov	r2, r9
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	47b8      	blx	r7
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f43f af2f 	beq.w	800792c <_printf_float+0x9c>
 8007ace:	f108 0801 	add.w	r8, r8, #1
 8007ad2:	e7e6      	b.n	8007aa2 <_printf_float+0x212>
 8007ad4:	9b07      	ldr	r3, [sp, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dc3c      	bgt.n	8007b54 <_printf_float+0x2c4>
 8007ada:	4a1d      	ldr	r2, [pc, #116]	; (8007b50 <_printf_float+0x2c0>)
 8007adc:	2301      	movs	r3, #1
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b8      	blx	r7
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	f43f af21 	beq.w	800792c <_printf_float+0x9c>
 8007aea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	d102      	bne.n	8007af8 <_printf_float+0x268>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	07d9      	lsls	r1, r3, #31
 8007af6:	d5d8      	bpl.n	8007aaa <_printf_float+0x21a>
 8007af8:	4653      	mov	r3, sl
 8007afa:	465a      	mov	r2, fp
 8007afc:	4631      	mov	r1, r6
 8007afe:	4628      	mov	r0, r5
 8007b00:	47b8      	blx	r7
 8007b02:	3001      	adds	r0, #1
 8007b04:	f43f af12 	beq.w	800792c <_printf_float+0x9c>
 8007b08:	f04f 0900 	mov.w	r9, #0
 8007b0c:	f104 0a1a 	add.w	sl, r4, #26
 8007b10:	9b07      	ldr	r3, [sp, #28]
 8007b12:	425b      	negs	r3, r3
 8007b14:	454b      	cmp	r3, r9
 8007b16:	dc01      	bgt.n	8007b1c <_printf_float+0x28c>
 8007b18:	9b08      	ldr	r3, [sp, #32]
 8007b1a:	e795      	b.n	8007a48 <_printf_float+0x1b8>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4652      	mov	r2, sl
 8007b20:	4631      	mov	r1, r6
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b8      	blx	r7
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f af00 	beq.w	800792c <_printf_float+0x9c>
 8007b2c:	f109 0901 	add.w	r9, r9, #1
 8007b30:	e7ee      	b.n	8007b10 <_printf_float+0x280>
 8007b32:	bf00      	nop
 8007b34:	f3af 8000 	nop.w
 8007b38:	ffffffff 	.word	0xffffffff
 8007b3c:	7fefffff 	.word	0x7fefffff
 8007b40:	0800a2ac 	.word	0x0800a2ac
 8007b44:	0800a2b0 	.word	0x0800a2b0
 8007b48:	0800a2b8 	.word	0x0800a2b8
 8007b4c:	0800a2b4 	.word	0x0800a2b4
 8007b50:	0800a2bc 	.word	0x0800a2bc
 8007b54:	9a08      	ldr	r2, [sp, #32]
 8007b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	bfa8      	it	ge
 8007b5c:	461a      	movge	r2, r3
 8007b5e:	2a00      	cmp	r2, #0
 8007b60:	4691      	mov	r9, r2
 8007b62:	dc38      	bgt.n	8007bd6 <_printf_float+0x346>
 8007b64:	2300      	movs	r3, #0
 8007b66:	9305      	str	r3, [sp, #20]
 8007b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b6c:	f104 021a 	add.w	r2, r4, #26
 8007b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b72:	9905      	ldr	r1, [sp, #20]
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	eba3 0309 	sub.w	r3, r3, r9
 8007b7a:	428b      	cmp	r3, r1
 8007b7c:	dc33      	bgt.n	8007be6 <_printf_float+0x356>
 8007b7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	db3c      	blt.n	8007c00 <_printf_float+0x370>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	07da      	lsls	r2, r3, #31
 8007b8a:	d439      	bmi.n	8007c00 <_printf_float+0x370>
 8007b8c:	9a08      	ldr	r2, [sp, #32]
 8007b8e:	9b04      	ldr	r3, [sp, #16]
 8007b90:	9907      	ldr	r1, [sp, #28]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	eba2 0901 	sub.w	r9, r2, r1
 8007b98:	4599      	cmp	r9, r3
 8007b9a:	bfa8      	it	ge
 8007b9c:	4699      	movge	r9, r3
 8007b9e:	f1b9 0f00 	cmp.w	r9, #0
 8007ba2:	dc35      	bgt.n	8007c10 <_printf_float+0x380>
 8007ba4:	f04f 0800 	mov.w	r8, #0
 8007ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bac:	f104 0a1a 	add.w	sl, r4, #26
 8007bb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007bb4:	1a9b      	subs	r3, r3, r2
 8007bb6:	eba3 0309 	sub.w	r3, r3, r9
 8007bba:	4543      	cmp	r3, r8
 8007bbc:	f77f af75 	ble.w	8007aaa <_printf_float+0x21a>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	4652      	mov	r2, sl
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f aeae 	beq.w	800792c <_printf_float+0x9c>
 8007bd0:	f108 0801 	add.w	r8, r8, #1
 8007bd4:	e7ec      	b.n	8007bb0 <_printf_float+0x320>
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	4631      	mov	r1, r6
 8007bda:	4642      	mov	r2, r8
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	d1bf      	bne.n	8007b64 <_printf_float+0x2d4>
 8007be4:	e6a2      	b.n	800792c <_printf_float+0x9c>
 8007be6:	2301      	movs	r3, #1
 8007be8:	4631      	mov	r1, r6
 8007bea:	4628      	mov	r0, r5
 8007bec:	9204      	str	r2, [sp, #16]
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f43f ae9b 	beq.w	800792c <_printf_float+0x9c>
 8007bf6:	9b05      	ldr	r3, [sp, #20]
 8007bf8:	9a04      	ldr	r2, [sp, #16]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	e7b7      	b.n	8007b70 <_printf_float+0x2e0>
 8007c00:	4653      	mov	r3, sl
 8007c02:	465a      	mov	r2, fp
 8007c04:	4631      	mov	r1, r6
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b8      	blx	r7
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	d1be      	bne.n	8007b8c <_printf_float+0x2fc>
 8007c0e:	e68d      	b.n	800792c <_printf_float+0x9c>
 8007c10:	9a04      	ldr	r2, [sp, #16]
 8007c12:	464b      	mov	r3, r9
 8007c14:	4442      	add	r2, r8
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d1c1      	bne.n	8007ba4 <_printf_float+0x314>
 8007c20:	e684      	b.n	800792c <_printf_float+0x9c>
 8007c22:	9a08      	ldr	r2, [sp, #32]
 8007c24:	2a01      	cmp	r2, #1
 8007c26:	dc01      	bgt.n	8007c2c <_printf_float+0x39c>
 8007c28:	07db      	lsls	r3, r3, #31
 8007c2a:	d537      	bpl.n	8007c9c <_printf_float+0x40c>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	4642      	mov	r2, r8
 8007c30:	4631      	mov	r1, r6
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b8      	blx	r7
 8007c36:	3001      	adds	r0, #1
 8007c38:	f43f ae78 	beq.w	800792c <_printf_float+0x9c>
 8007c3c:	4653      	mov	r3, sl
 8007c3e:	465a      	mov	r2, fp
 8007c40:	4631      	mov	r1, r6
 8007c42:	4628      	mov	r0, r5
 8007c44:	47b8      	blx	r7
 8007c46:	3001      	adds	r0, #1
 8007c48:	f43f ae70 	beq.w	800792c <_printf_float+0x9c>
 8007c4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007c50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c58:	d01b      	beq.n	8007c92 <_printf_float+0x402>
 8007c5a:	9b08      	ldr	r3, [sp, #32]
 8007c5c:	f108 0201 	add.w	r2, r8, #1
 8007c60:	3b01      	subs	r3, #1
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d10e      	bne.n	8007c8a <_printf_float+0x3fa>
 8007c6c:	e65e      	b.n	800792c <_printf_float+0x9c>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	464a      	mov	r2, r9
 8007c72:	4631      	mov	r1, r6
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b8      	blx	r7
 8007c78:	3001      	adds	r0, #1
 8007c7a:	f43f ae57 	beq.w	800792c <_printf_float+0x9c>
 8007c7e:	f108 0801 	add.w	r8, r8, #1
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	4543      	cmp	r3, r8
 8007c88:	dcf1      	bgt.n	8007c6e <_printf_float+0x3de>
 8007c8a:	9b04      	ldr	r3, [sp, #16]
 8007c8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c90:	e6db      	b.n	8007a4a <_printf_float+0x1ba>
 8007c92:	f04f 0800 	mov.w	r8, #0
 8007c96:	f104 091a 	add.w	r9, r4, #26
 8007c9a:	e7f2      	b.n	8007c82 <_printf_float+0x3f2>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	4642      	mov	r2, r8
 8007ca0:	e7df      	b.n	8007c62 <_printf_float+0x3d2>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	464a      	mov	r2, r9
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b8      	blx	r7
 8007cac:	3001      	adds	r0, #1
 8007cae:	f43f ae3d 	beq.w	800792c <_printf_float+0x9c>
 8007cb2:	f108 0801 	add.w	r8, r8, #1
 8007cb6:	68e3      	ldr	r3, [r4, #12]
 8007cb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cba:	1a5b      	subs	r3, r3, r1
 8007cbc:	4543      	cmp	r3, r8
 8007cbe:	dcf0      	bgt.n	8007ca2 <_printf_float+0x412>
 8007cc0:	e6f7      	b.n	8007ab2 <_printf_float+0x222>
 8007cc2:	f04f 0800 	mov.w	r8, #0
 8007cc6:	f104 0919 	add.w	r9, r4, #25
 8007cca:	e7f4      	b.n	8007cb6 <_printf_float+0x426>

08007ccc <_printf_common>:
 8007ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	4699      	mov	r9, r3
 8007cd4:	688a      	ldr	r2, [r1, #8]
 8007cd6:	690b      	ldr	r3, [r1, #16]
 8007cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	bfb8      	it	lt
 8007ce0:	4613      	movlt	r3, r2
 8007ce2:	6033      	str	r3, [r6, #0]
 8007ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ce8:	4607      	mov	r7, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	b10a      	cbz	r2, 8007cf2 <_printf_common+0x26>
 8007cee:	3301      	adds	r3, #1
 8007cf0:	6033      	str	r3, [r6, #0]
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	0699      	lsls	r1, r3, #26
 8007cf6:	bf42      	ittt	mi
 8007cf8:	6833      	ldrmi	r3, [r6, #0]
 8007cfa:	3302      	addmi	r3, #2
 8007cfc:	6033      	strmi	r3, [r6, #0]
 8007cfe:	6825      	ldr	r5, [r4, #0]
 8007d00:	f015 0506 	ands.w	r5, r5, #6
 8007d04:	d106      	bne.n	8007d14 <_printf_common+0x48>
 8007d06:	f104 0a19 	add.w	sl, r4, #25
 8007d0a:	68e3      	ldr	r3, [r4, #12]
 8007d0c:	6832      	ldr	r2, [r6, #0]
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc26      	bgt.n	8007d62 <_printf_common+0x96>
 8007d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d18:	1e13      	subs	r3, r2, #0
 8007d1a:	6822      	ldr	r2, [r4, #0]
 8007d1c:	bf18      	it	ne
 8007d1e:	2301      	movne	r3, #1
 8007d20:	0692      	lsls	r2, r2, #26
 8007d22:	d42b      	bmi.n	8007d7c <_printf_common+0xb0>
 8007d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d28:	4649      	mov	r1, r9
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	47c0      	blx	r8
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d01e      	beq.n	8007d70 <_printf_common+0xa4>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	68e5      	ldr	r5, [r4, #12]
 8007d36:	6832      	ldr	r2, [r6, #0]
 8007d38:	f003 0306 	and.w	r3, r3, #6
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	bf08      	it	eq
 8007d40:	1aad      	subeq	r5, r5, r2
 8007d42:	68a3      	ldr	r3, [r4, #8]
 8007d44:	6922      	ldr	r2, [r4, #16]
 8007d46:	bf0c      	ite	eq
 8007d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d4c:	2500      	movne	r5, #0
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	bfc4      	itt	gt
 8007d52:	1a9b      	subgt	r3, r3, r2
 8007d54:	18ed      	addgt	r5, r5, r3
 8007d56:	2600      	movs	r6, #0
 8007d58:	341a      	adds	r4, #26
 8007d5a:	42b5      	cmp	r5, r6
 8007d5c:	d11a      	bne.n	8007d94 <_printf_common+0xc8>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	e008      	b.n	8007d74 <_printf_common+0xa8>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4652      	mov	r2, sl
 8007d66:	4649      	mov	r1, r9
 8007d68:	4638      	mov	r0, r7
 8007d6a:	47c0      	blx	r8
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d103      	bne.n	8007d78 <_printf_common+0xac>
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295
 8007d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d78:	3501      	adds	r5, #1
 8007d7a:	e7c6      	b.n	8007d0a <_printf_common+0x3e>
 8007d7c:	18e1      	adds	r1, r4, r3
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	2030      	movs	r0, #48	; 0x30
 8007d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d86:	4422      	add	r2, r4
 8007d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d90:	3302      	adds	r3, #2
 8007d92:	e7c7      	b.n	8007d24 <_printf_common+0x58>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4622      	mov	r2, r4
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	47c0      	blx	r8
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d0e6      	beq.n	8007d70 <_printf_common+0xa4>
 8007da2:	3601      	adds	r6, #1
 8007da4:	e7d9      	b.n	8007d5a <_printf_common+0x8e>
	...

08007da8 <_printf_i>:
 8007da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dac:	460c      	mov	r4, r1
 8007dae:	4691      	mov	r9, r2
 8007db0:	7e27      	ldrb	r7, [r4, #24]
 8007db2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007db4:	2f78      	cmp	r7, #120	; 0x78
 8007db6:	4680      	mov	r8, r0
 8007db8:	469a      	mov	sl, r3
 8007dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dbe:	d807      	bhi.n	8007dd0 <_printf_i+0x28>
 8007dc0:	2f62      	cmp	r7, #98	; 0x62
 8007dc2:	d80a      	bhi.n	8007dda <_printf_i+0x32>
 8007dc4:	2f00      	cmp	r7, #0
 8007dc6:	f000 80d8 	beq.w	8007f7a <_printf_i+0x1d2>
 8007dca:	2f58      	cmp	r7, #88	; 0x58
 8007dcc:	f000 80a3 	beq.w	8007f16 <_printf_i+0x16e>
 8007dd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dd8:	e03a      	b.n	8007e50 <_printf_i+0xa8>
 8007dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dde:	2b15      	cmp	r3, #21
 8007de0:	d8f6      	bhi.n	8007dd0 <_printf_i+0x28>
 8007de2:	a001      	add	r0, pc, #4	; (adr r0, 8007de8 <_printf_i+0x40>)
 8007de4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007de8:	08007e41 	.word	0x08007e41
 8007dec:	08007e55 	.word	0x08007e55
 8007df0:	08007dd1 	.word	0x08007dd1
 8007df4:	08007dd1 	.word	0x08007dd1
 8007df8:	08007dd1 	.word	0x08007dd1
 8007dfc:	08007dd1 	.word	0x08007dd1
 8007e00:	08007e55 	.word	0x08007e55
 8007e04:	08007dd1 	.word	0x08007dd1
 8007e08:	08007dd1 	.word	0x08007dd1
 8007e0c:	08007dd1 	.word	0x08007dd1
 8007e10:	08007dd1 	.word	0x08007dd1
 8007e14:	08007f61 	.word	0x08007f61
 8007e18:	08007e85 	.word	0x08007e85
 8007e1c:	08007f43 	.word	0x08007f43
 8007e20:	08007dd1 	.word	0x08007dd1
 8007e24:	08007dd1 	.word	0x08007dd1
 8007e28:	08007f83 	.word	0x08007f83
 8007e2c:	08007dd1 	.word	0x08007dd1
 8007e30:	08007e85 	.word	0x08007e85
 8007e34:	08007dd1 	.word	0x08007dd1
 8007e38:	08007dd1 	.word	0x08007dd1
 8007e3c:	08007f4b 	.word	0x08007f4b
 8007e40:	680b      	ldr	r3, [r1, #0]
 8007e42:	1d1a      	adds	r2, r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	600a      	str	r2, [r1, #0]
 8007e48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0a3      	b.n	8007f9c <_printf_i+0x1f4>
 8007e54:	6825      	ldr	r5, [r4, #0]
 8007e56:	6808      	ldr	r0, [r1, #0]
 8007e58:	062e      	lsls	r6, r5, #24
 8007e5a:	f100 0304 	add.w	r3, r0, #4
 8007e5e:	d50a      	bpl.n	8007e76 <_printf_i+0xce>
 8007e60:	6805      	ldr	r5, [r0, #0]
 8007e62:	600b      	str	r3, [r1, #0]
 8007e64:	2d00      	cmp	r5, #0
 8007e66:	da03      	bge.n	8007e70 <_printf_i+0xc8>
 8007e68:	232d      	movs	r3, #45	; 0x2d
 8007e6a:	426d      	negs	r5, r5
 8007e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e70:	485e      	ldr	r0, [pc, #376]	; (8007fec <_printf_i+0x244>)
 8007e72:	230a      	movs	r3, #10
 8007e74:	e019      	b.n	8007eaa <_printf_i+0x102>
 8007e76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e7a:	6805      	ldr	r5, [r0, #0]
 8007e7c:	600b      	str	r3, [r1, #0]
 8007e7e:	bf18      	it	ne
 8007e80:	b22d      	sxthne	r5, r5
 8007e82:	e7ef      	b.n	8007e64 <_printf_i+0xbc>
 8007e84:	680b      	ldr	r3, [r1, #0]
 8007e86:	6825      	ldr	r5, [r4, #0]
 8007e88:	1d18      	adds	r0, r3, #4
 8007e8a:	6008      	str	r0, [r1, #0]
 8007e8c:	0628      	lsls	r0, r5, #24
 8007e8e:	d501      	bpl.n	8007e94 <_printf_i+0xec>
 8007e90:	681d      	ldr	r5, [r3, #0]
 8007e92:	e002      	b.n	8007e9a <_printf_i+0xf2>
 8007e94:	0669      	lsls	r1, r5, #25
 8007e96:	d5fb      	bpl.n	8007e90 <_printf_i+0xe8>
 8007e98:	881d      	ldrh	r5, [r3, #0]
 8007e9a:	4854      	ldr	r0, [pc, #336]	; (8007fec <_printf_i+0x244>)
 8007e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2308      	moveq	r3, #8
 8007ea2:	230a      	movne	r3, #10
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eaa:	6866      	ldr	r6, [r4, #4]
 8007eac:	60a6      	str	r6, [r4, #8]
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	bfa2      	ittt	ge
 8007eb2:	6821      	ldrge	r1, [r4, #0]
 8007eb4:	f021 0104 	bicge.w	r1, r1, #4
 8007eb8:	6021      	strge	r1, [r4, #0]
 8007eba:	b90d      	cbnz	r5, 8007ec0 <_printf_i+0x118>
 8007ebc:	2e00      	cmp	r6, #0
 8007ebe:	d04d      	beq.n	8007f5c <_printf_i+0x1b4>
 8007ec0:	4616      	mov	r6, r2
 8007ec2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ec6:	fb03 5711 	mls	r7, r3, r1, r5
 8007eca:	5dc7      	ldrb	r7, [r0, r7]
 8007ecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ed0:	462f      	mov	r7, r5
 8007ed2:	42bb      	cmp	r3, r7
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	d9f4      	bls.n	8007ec2 <_printf_i+0x11a>
 8007ed8:	2b08      	cmp	r3, #8
 8007eda:	d10b      	bne.n	8007ef4 <_printf_i+0x14c>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	07df      	lsls	r7, r3, #31
 8007ee0:	d508      	bpl.n	8007ef4 <_printf_i+0x14c>
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	6861      	ldr	r1, [r4, #4]
 8007ee6:	4299      	cmp	r1, r3
 8007ee8:	bfde      	ittt	le
 8007eea:	2330      	movle	r3, #48	; 0x30
 8007eec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ef4:	1b92      	subs	r2, r2, r6
 8007ef6:	6122      	str	r2, [r4, #16]
 8007ef8:	f8cd a000 	str.w	sl, [sp]
 8007efc:	464b      	mov	r3, r9
 8007efe:	aa03      	add	r2, sp, #12
 8007f00:	4621      	mov	r1, r4
 8007f02:	4640      	mov	r0, r8
 8007f04:	f7ff fee2 	bl	8007ccc <_printf_common>
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d14c      	bne.n	8007fa6 <_printf_i+0x1fe>
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f10:	b004      	add	sp, #16
 8007f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f16:	4835      	ldr	r0, [pc, #212]	; (8007fec <_printf_i+0x244>)
 8007f18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	680e      	ldr	r6, [r1, #0]
 8007f20:	061f      	lsls	r7, r3, #24
 8007f22:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f26:	600e      	str	r6, [r1, #0]
 8007f28:	d514      	bpl.n	8007f54 <_printf_i+0x1ac>
 8007f2a:	07d9      	lsls	r1, r3, #31
 8007f2c:	bf44      	itt	mi
 8007f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f32:	6023      	strmi	r3, [r4, #0]
 8007f34:	b91d      	cbnz	r5, 8007f3e <_printf_i+0x196>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	f023 0320 	bic.w	r3, r3, #32
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	2310      	movs	r3, #16
 8007f40:	e7b0      	b.n	8007ea4 <_printf_i+0xfc>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	f043 0320 	orr.w	r3, r3, #32
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	2378      	movs	r3, #120	; 0x78
 8007f4c:	4828      	ldr	r0, [pc, #160]	; (8007ff0 <_printf_i+0x248>)
 8007f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f52:	e7e3      	b.n	8007f1c <_printf_i+0x174>
 8007f54:	065e      	lsls	r6, r3, #25
 8007f56:	bf48      	it	mi
 8007f58:	b2ad      	uxthmi	r5, r5
 8007f5a:	e7e6      	b.n	8007f2a <_printf_i+0x182>
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	e7bb      	b.n	8007ed8 <_printf_i+0x130>
 8007f60:	680b      	ldr	r3, [r1, #0]
 8007f62:	6826      	ldr	r6, [r4, #0]
 8007f64:	6960      	ldr	r0, [r4, #20]
 8007f66:	1d1d      	adds	r5, r3, #4
 8007f68:	600d      	str	r5, [r1, #0]
 8007f6a:	0635      	lsls	r5, r6, #24
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	d501      	bpl.n	8007f74 <_printf_i+0x1cc>
 8007f70:	6018      	str	r0, [r3, #0]
 8007f72:	e002      	b.n	8007f7a <_printf_i+0x1d2>
 8007f74:	0671      	lsls	r1, r6, #25
 8007f76:	d5fb      	bpl.n	8007f70 <_printf_i+0x1c8>
 8007f78:	8018      	strh	r0, [r3, #0]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	6123      	str	r3, [r4, #16]
 8007f7e:	4616      	mov	r6, r2
 8007f80:	e7ba      	b.n	8007ef8 <_printf_i+0x150>
 8007f82:	680b      	ldr	r3, [r1, #0]
 8007f84:	1d1a      	adds	r2, r3, #4
 8007f86:	600a      	str	r2, [r1, #0]
 8007f88:	681e      	ldr	r6, [r3, #0]
 8007f8a:	6862      	ldr	r2, [r4, #4]
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7f8 f95e 	bl	8000250 <memchr>
 8007f94:	b108      	cbz	r0, 8007f9a <_printf_i+0x1f2>
 8007f96:	1b80      	subs	r0, r0, r6
 8007f98:	6060      	str	r0, [r4, #4]
 8007f9a:	6863      	ldr	r3, [r4, #4]
 8007f9c:	6123      	str	r3, [r4, #16]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa4:	e7a8      	b.n	8007ef8 <_printf_i+0x150>
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	4632      	mov	r2, r6
 8007faa:	4649      	mov	r1, r9
 8007fac:	4640      	mov	r0, r8
 8007fae:	47d0      	blx	sl
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d0ab      	beq.n	8007f0c <_printf_i+0x164>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	079b      	lsls	r3, r3, #30
 8007fb8:	d413      	bmi.n	8007fe2 <_printf_i+0x23a>
 8007fba:	68e0      	ldr	r0, [r4, #12]
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	4298      	cmp	r0, r3
 8007fc0:	bfb8      	it	lt
 8007fc2:	4618      	movlt	r0, r3
 8007fc4:	e7a4      	b.n	8007f10 <_printf_i+0x168>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4632      	mov	r2, r6
 8007fca:	4649      	mov	r1, r9
 8007fcc:	4640      	mov	r0, r8
 8007fce:	47d0      	blx	sl
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d09b      	beq.n	8007f0c <_printf_i+0x164>
 8007fd4:	3501      	adds	r5, #1
 8007fd6:	68e3      	ldr	r3, [r4, #12]
 8007fd8:	9903      	ldr	r1, [sp, #12]
 8007fda:	1a5b      	subs	r3, r3, r1
 8007fdc:	42ab      	cmp	r3, r5
 8007fde:	dcf2      	bgt.n	8007fc6 <_printf_i+0x21e>
 8007fe0:	e7eb      	b.n	8007fba <_printf_i+0x212>
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	f104 0619 	add.w	r6, r4, #25
 8007fe8:	e7f5      	b.n	8007fd6 <_printf_i+0x22e>
 8007fea:	bf00      	nop
 8007fec:	0800a2be 	.word	0x0800a2be
 8007ff0:	0800a2cf 	.word	0x0800a2cf

08007ff4 <_sbrk_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d06      	ldr	r5, [pc, #24]	; (8008010 <_sbrk_r+0x1c>)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	f7f9 fc86 	bl	8001910 <_sbrk>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_sbrk_r+0x1a>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_sbrk_r+0x1a>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	2000078c 	.word	0x2000078c

08008014 <sniprintf>:
 8008014:	b40c      	push	{r2, r3}
 8008016:	b530      	push	{r4, r5, lr}
 8008018:	4b17      	ldr	r3, [pc, #92]	; (8008078 <sniprintf+0x64>)
 800801a:	1e0c      	subs	r4, r1, #0
 800801c:	681d      	ldr	r5, [r3, #0]
 800801e:	b09d      	sub	sp, #116	; 0x74
 8008020:	da08      	bge.n	8008034 <sniprintf+0x20>
 8008022:	238b      	movs	r3, #139	; 0x8b
 8008024:	602b      	str	r3, [r5, #0]
 8008026:	f04f 30ff 	mov.w	r0, #4294967295
 800802a:	b01d      	add	sp, #116	; 0x74
 800802c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008030:	b002      	add	sp, #8
 8008032:	4770      	bx	lr
 8008034:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008038:	f8ad 3014 	strh.w	r3, [sp, #20]
 800803c:	bf14      	ite	ne
 800803e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008042:	4623      	moveq	r3, r4
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	9307      	str	r3, [sp, #28]
 8008048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800804c:	9002      	str	r0, [sp, #8]
 800804e:	9006      	str	r0, [sp, #24]
 8008050:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008054:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008056:	ab21      	add	r3, sp, #132	; 0x84
 8008058:	a902      	add	r1, sp, #8
 800805a:	4628      	mov	r0, r5
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	f001 fa7f 	bl	8009560 <_svfiprintf_r>
 8008062:	1c43      	adds	r3, r0, #1
 8008064:	bfbc      	itt	lt
 8008066:	238b      	movlt	r3, #139	; 0x8b
 8008068:	602b      	strlt	r3, [r5, #0]
 800806a:	2c00      	cmp	r4, #0
 800806c:	d0dd      	beq.n	800802a <sniprintf+0x16>
 800806e:	9b02      	ldr	r3, [sp, #8]
 8008070:	2200      	movs	r2, #0
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	e7d9      	b.n	800802a <sniprintf+0x16>
 8008076:	bf00      	nop
 8008078:	20000100 	.word	0x20000100

0800807c <strcpy>:
 800807c:	4603      	mov	r3, r0
 800807e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008082:	f803 2b01 	strb.w	r2, [r3], #1
 8008086:	2a00      	cmp	r2, #0
 8008088:	d1f9      	bne.n	800807e <strcpy+0x2>
 800808a:	4770      	bx	lr

0800808c <__assert_func>:
 800808c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800808e:	4614      	mov	r4, r2
 8008090:	461a      	mov	r2, r3
 8008092:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <__assert_func+0x2c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4605      	mov	r5, r0
 8008098:	68d8      	ldr	r0, [r3, #12]
 800809a:	b14c      	cbz	r4, 80080b0 <__assert_func+0x24>
 800809c:	4b07      	ldr	r3, [pc, #28]	; (80080bc <__assert_func+0x30>)
 800809e:	9100      	str	r1, [sp, #0]
 80080a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080a4:	4906      	ldr	r1, [pc, #24]	; (80080c0 <__assert_func+0x34>)
 80080a6:	462b      	mov	r3, r5
 80080a8:	f000 fe1c 	bl	8008ce4 <fiprintf>
 80080ac:	f001 fd72 	bl	8009b94 <abort>
 80080b0:	4b04      	ldr	r3, [pc, #16]	; (80080c4 <__assert_func+0x38>)
 80080b2:	461c      	mov	r4, r3
 80080b4:	e7f3      	b.n	800809e <__assert_func+0x12>
 80080b6:	bf00      	nop
 80080b8:	20000100 	.word	0x20000100
 80080bc:	0800a2e0 	.word	0x0800a2e0
 80080c0:	0800a2ed 	.word	0x0800a2ed
 80080c4:	0800a31b 	.word	0x0800a31b

080080c8 <quorem>:
 80080c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	6903      	ldr	r3, [r0, #16]
 80080ce:	690c      	ldr	r4, [r1, #16]
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	4607      	mov	r7, r0
 80080d4:	f2c0 8081 	blt.w	80081da <quorem+0x112>
 80080d8:	3c01      	subs	r4, #1
 80080da:	f101 0814 	add.w	r8, r1, #20
 80080de:	f100 0514 	add.w	r5, r0, #20
 80080e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080e6:	9301      	str	r3, [sp, #4]
 80080e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080f0:	3301      	adds	r3, #1
 80080f2:	429a      	cmp	r2, r3
 80080f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008100:	d331      	bcc.n	8008166 <quorem+0x9e>
 8008102:	f04f 0e00 	mov.w	lr, #0
 8008106:	4640      	mov	r0, r8
 8008108:	46ac      	mov	ip, r5
 800810a:	46f2      	mov	sl, lr
 800810c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008110:	b293      	uxth	r3, r2
 8008112:	fb06 e303 	mla	r3, r6, r3, lr
 8008116:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800811a:	b29b      	uxth	r3, r3
 800811c:	ebaa 0303 	sub.w	r3, sl, r3
 8008120:	0c12      	lsrs	r2, r2, #16
 8008122:	f8dc a000 	ldr.w	sl, [ip]
 8008126:	fb06 e202 	mla	r2, r6, r2, lr
 800812a:	fa13 f38a 	uxtah	r3, r3, sl
 800812e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008132:	fa1f fa82 	uxth.w	sl, r2
 8008136:	f8dc 2000 	ldr.w	r2, [ip]
 800813a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800813e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008142:	b29b      	uxth	r3, r3
 8008144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008148:	4581      	cmp	r9, r0
 800814a:	f84c 3b04 	str.w	r3, [ip], #4
 800814e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008152:	d2db      	bcs.n	800810c <quorem+0x44>
 8008154:	f855 300b 	ldr.w	r3, [r5, fp]
 8008158:	b92b      	cbnz	r3, 8008166 <quorem+0x9e>
 800815a:	9b01      	ldr	r3, [sp, #4]
 800815c:	3b04      	subs	r3, #4
 800815e:	429d      	cmp	r5, r3
 8008160:	461a      	mov	r2, r3
 8008162:	d32e      	bcc.n	80081c2 <quorem+0xfa>
 8008164:	613c      	str	r4, [r7, #16]
 8008166:	4638      	mov	r0, r7
 8008168:	f001 f86a 	bl	8009240 <__mcmp>
 800816c:	2800      	cmp	r0, #0
 800816e:	db24      	blt.n	80081ba <quorem+0xf2>
 8008170:	3601      	adds	r6, #1
 8008172:	4628      	mov	r0, r5
 8008174:	f04f 0c00 	mov.w	ip, #0
 8008178:	f858 2b04 	ldr.w	r2, [r8], #4
 800817c:	f8d0 e000 	ldr.w	lr, [r0]
 8008180:	b293      	uxth	r3, r2
 8008182:	ebac 0303 	sub.w	r3, ip, r3
 8008186:	0c12      	lsrs	r2, r2, #16
 8008188:	fa13 f38e 	uxtah	r3, r3, lr
 800818c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008190:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008194:	b29b      	uxth	r3, r3
 8008196:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800819a:	45c1      	cmp	r9, r8
 800819c:	f840 3b04 	str.w	r3, [r0], #4
 80081a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081a4:	d2e8      	bcs.n	8008178 <quorem+0xb0>
 80081a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ae:	b922      	cbnz	r2, 80081ba <quorem+0xf2>
 80081b0:	3b04      	subs	r3, #4
 80081b2:	429d      	cmp	r5, r3
 80081b4:	461a      	mov	r2, r3
 80081b6:	d30a      	bcc.n	80081ce <quorem+0x106>
 80081b8:	613c      	str	r4, [r7, #16]
 80081ba:	4630      	mov	r0, r6
 80081bc:	b003      	add	sp, #12
 80081be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	3b04      	subs	r3, #4
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	d1cc      	bne.n	8008164 <quorem+0x9c>
 80081ca:	3c01      	subs	r4, #1
 80081cc:	e7c7      	b.n	800815e <quorem+0x96>
 80081ce:	6812      	ldr	r2, [r2, #0]
 80081d0:	3b04      	subs	r3, #4
 80081d2:	2a00      	cmp	r2, #0
 80081d4:	d1f0      	bne.n	80081b8 <quorem+0xf0>
 80081d6:	3c01      	subs	r4, #1
 80081d8:	e7eb      	b.n	80081b2 <quorem+0xea>
 80081da:	2000      	movs	r0, #0
 80081dc:	e7ee      	b.n	80081bc <quorem+0xf4>
	...

080081e0 <_dtoa_r>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	ec59 8b10 	vmov	r8, r9, d0
 80081e8:	b095      	sub	sp, #84	; 0x54
 80081ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081ec:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80081ee:	9107      	str	r1, [sp, #28]
 80081f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80081f4:	4606      	mov	r6, r0
 80081f6:	9209      	str	r2, [sp, #36]	; 0x24
 80081f8:	9310      	str	r3, [sp, #64]	; 0x40
 80081fa:	b975      	cbnz	r5, 800821a <_dtoa_r+0x3a>
 80081fc:	2010      	movs	r0, #16
 80081fe:	f7ff f9fb 	bl	80075f8 <malloc>
 8008202:	4602      	mov	r2, r0
 8008204:	6270      	str	r0, [r6, #36]	; 0x24
 8008206:	b920      	cbnz	r0, 8008212 <_dtoa_r+0x32>
 8008208:	4bab      	ldr	r3, [pc, #684]	; (80084b8 <_dtoa_r+0x2d8>)
 800820a:	21ea      	movs	r1, #234	; 0xea
 800820c:	48ab      	ldr	r0, [pc, #684]	; (80084bc <_dtoa_r+0x2dc>)
 800820e:	f7ff ff3d 	bl	800808c <__assert_func>
 8008212:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008216:	6005      	str	r5, [r0, #0]
 8008218:	60c5      	str	r5, [r0, #12]
 800821a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800821c:	6819      	ldr	r1, [r3, #0]
 800821e:	b151      	cbz	r1, 8008236 <_dtoa_r+0x56>
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	604a      	str	r2, [r1, #4]
 8008224:	2301      	movs	r3, #1
 8008226:	4093      	lsls	r3, r2
 8008228:	608b      	str	r3, [r1, #8]
 800822a:	4630      	mov	r0, r6
 800822c:	f000 fdca 	bl	8008dc4 <_Bfree>
 8008230:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	f1b9 0300 	subs.w	r3, r9, #0
 800823a:	bfbb      	ittet	lt
 800823c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008240:	9303      	strlt	r3, [sp, #12]
 8008242:	2300      	movge	r3, #0
 8008244:	2201      	movlt	r2, #1
 8008246:	bfac      	ite	ge
 8008248:	6023      	strge	r3, [r4, #0]
 800824a:	6022      	strlt	r2, [r4, #0]
 800824c:	4b9c      	ldr	r3, [pc, #624]	; (80084c0 <_dtoa_r+0x2e0>)
 800824e:	9c03      	ldr	r4, [sp, #12]
 8008250:	43a3      	bics	r3, r4
 8008252:	d11a      	bne.n	800828a <_dtoa_r+0xaa>
 8008254:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008256:	f242 730f 	movw	r3, #9999	; 0x270f
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008260:	ea53 0308 	orrs.w	r3, r3, r8
 8008264:	f000 8512 	beq.w	8008c8c <_dtoa_r+0xaac>
 8008268:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800826a:	b953      	cbnz	r3, 8008282 <_dtoa_r+0xa2>
 800826c:	4b95      	ldr	r3, [pc, #596]	; (80084c4 <_dtoa_r+0x2e4>)
 800826e:	e01f      	b.n	80082b0 <_dtoa_r+0xd0>
 8008270:	4b95      	ldr	r3, [pc, #596]	; (80084c8 <_dtoa_r+0x2e8>)
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	3308      	adds	r3, #8
 8008276:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	9800      	ldr	r0, [sp, #0]
 800827c:	b015      	add	sp, #84	; 0x54
 800827e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008282:	4b90      	ldr	r3, [pc, #576]	; (80084c4 <_dtoa_r+0x2e4>)
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	3303      	adds	r3, #3
 8008288:	e7f5      	b.n	8008276 <_dtoa_r+0x96>
 800828a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800828e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008296:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800829a:	d10b      	bne.n	80082b4 <_dtoa_r+0xd4>
 800829c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800829e:	2301      	movs	r3, #1
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 84ee 	beq.w	8008c86 <_dtoa_r+0xaa6>
 80082aa:	4888      	ldr	r0, [pc, #544]	; (80084cc <_dtoa_r+0x2ec>)
 80082ac:	6018      	str	r0, [r3, #0]
 80082ae:	1e43      	subs	r3, r0, #1
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	e7e2      	b.n	800827a <_dtoa_r+0x9a>
 80082b4:	a913      	add	r1, sp, #76	; 0x4c
 80082b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80082ba:	aa12      	add	r2, sp, #72	; 0x48
 80082bc:	4630      	mov	r0, r6
 80082be:	f001 f863 	bl	8009388 <__d2b>
 80082c2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80082c6:	4605      	mov	r5, r0
 80082c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80082ca:	2900      	cmp	r1, #0
 80082cc:	d047      	beq.n	800835e <_dtoa_r+0x17e>
 80082ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80082d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80082d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082d8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80082dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082e0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80082e4:	2400      	movs	r4, #0
 80082e6:	ec43 2b16 	vmov	d6, r2, r3
 80082ea:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80082ee:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80084a0 <_dtoa_r+0x2c0>
 80082f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082f6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80084a8 <_dtoa_r+0x2c8>
 80082fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80082fe:	eeb0 7b46 	vmov.f64	d7, d6
 8008302:	ee06 1a90 	vmov	s13, r1
 8008306:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800830a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80084b0 <_dtoa_r+0x2d0>
 800830e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008312:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008316:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800831a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831e:	ee16 ba90 	vmov	fp, s13
 8008322:	9411      	str	r4, [sp, #68]	; 0x44
 8008324:	d508      	bpl.n	8008338 <_dtoa_r+0x158>
 8008326:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800832a:	eeb4 6b47 	vcmp.f64	d6, d7
 800832e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008332:	bf18      	it	ne
 8008334:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008338:	f1bb 0f16 	cmp.w	fp, #22
 800833c:	d832      	bhi.n	80083a4 <_dtoa_r+0x1c4>
 800833e:	4b64      	ldr	r3, [pc, #400]	; (80084d0 <_dtoa_r+0x2f0>)
 8008340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008344:	ed93 7b00 	vldr	d7, [r3]
 8008348:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800834c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008354:	d501      	bpl.n	800835a <_dtoa_r+0x17a>
 8008356:	f10b 3bff 	add.w	fp, fp, #4294967295
 800835a:	2300      	movs	r3, #0
 800835c:	e023      	b.n	80083a6 <_dtoa_r+0x1c6>
 800835e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008360:	4401      	add	r1, r0
 8008362:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008366:	2b20      	cmp	r3, #32
 8008368:	bfc3      	ittte	gt
 800836a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800836e:	fa04 f303 	lslgt.w	r3, r4, r3
 8008372:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008376:	f1c3 0320 	rsble	r3, r3, #32
 800837a:	bfc6      	itte	gt
 800837c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008380:	ea43 0308 	orrgt.w	r3, r3, r8
 8008384:	fa08 f303 	lslle.w	r3, r8, r3
 8008388:	ee07 3a90 	vmov	s15, r3
 800838c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008390:	3901      	subs	r1, #1
 8008392:	ed8d 7b00 	vstr	d7, [sp]
 8008396:	9c01      	ldr	r4, [sp, #4]
 8008398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800839c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80083a0:	2401      	movs	r4, #1
 80083a2:	e7a0      	b.n	80082e6 <_dtoa_r+0x106>
 80083a4:	2301      	movs	r3, #1
 80083a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80083a8:	1a43      	subs	r3, r0, r1
 80083aa:	1e5a      	subs	r2, r3, #1
 80083ac:	bf45      	ittet	mi
 80083ae:	f1c3 0301 	rsbmi	r3, r3, #1
 80083b2:	9305      	strmi	r3, [sp, #20]
 80083b4:	2300      	movpl	r3, #0
 80083b6:	2300      	movmi	r3, #0
 80083b8:	9206      	str	r2, [sp, #24]
 80083ba:	bf54      	ite	pl
 80083bc:	9305      	strpl	r3, [sp, #20]
 80083be:	9306      	strmi	r3, [sp, #24]
 80083c0:	f1bb 0f00 	cmp.w	fp, #0
 80083c4:	db18      	blt.n	80083f8 <_dtoa_r+0x218>
 80083c6:	9b06      	ldr	r3, [sp, #24]
 80083c8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80083cc:	445b      	add	r3, fp
 80083ce:	9306      	str	r3, [sp, #24]
 80083d0:	2300      	movs	r3, #0
 80083d2:	9a07      	ldr	r2, [sp, #28]
 80083d4:	2a09      	cmp	r2, #9
 80083d6:	d849      	bhi.n	800846c <_dtoa_r+0x28c>
 80083d8:	2a05      	cmp	r2, #5
 80083da:	bfc4      	itt	gt
 80083dc:	3a04      	subgt	r2, #4
 80083de:	9207      	strgt	r2, [sp, #28]
 80083e0:	9a07      	ldr	r2, [sp, #28]
 80083e2:	f1a2 0202 	sub.w	r2, r2, #2
 80083e6:	bfcc      	ite	gt
 80083e8:	2400      	movgt	r4, #0
 80083ea:	2401      	movle	r4, #1
 80083ec:	2a03      	cmp	r2, #3
 80083ee:	d848      	bhi.n	8008482 <_dtoa_r+0x2a2>
 80083f0:	e8df f002 	tbb	[pc, r2]
 80083f4:	3a2c2e0b 	.word	0x3a2c2e0b
 80083f8:	9b05      	ldr	r3, [sp, #20]
 80083fa:	2200      	movs	r2, #0
 80083fc:	eba3 030b 	sub.w	r3, r3, fp
 8008400:	9305      	str	r3, [sp, #20]
 8008402:	920e      	str	r2, [sp, #56]	; 0x38
 8008404:	f1cb 0300 	rsb	r3, fp, #0
 8008408:	e7e3      	b.n	80083d2 <_dtoa_r+0x1f2>
 800840a:	2200      	movs	r2, #0
 800840c:	9208      	str	r2, [sp, #32]
 800840e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008410:	2a00      	cmp	r2, #0
 8008412:	dc39      	bgt.n	8008488 <_dtoa_r+0x2a8>
 8008414:	f04f 0a01 	mov.w	sl, #1
 8008418:	46d1      	mov	r9, sl
 800841a:	4652      	mov	r2, sl
 800841c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008420:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008422:	2100      	movs	r1, #0
 8008424:	6079      	str	r1, [r7, #4]
 8008426:	2004      	movs	r0, #4
 8008428:	f100 0c14 	add.w	ip, r0, #20
 800842c:	4594      	cmp	ip, r2
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	d92f      	bls.n	8008492 <_dtoa_r+0x2b2>
 8008432:	4630      	mov	r0, r6
 8008434:	930c      	str	r3, [sp, #48]	; 0x30
 8008436:	f000 fc85 	bl	8008d44 <_Balloc>
 800843a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800843c:	9000      	str	r0, [sp, #0]
 800843e:	4602      	mov	r2, r0
 8008440:	2800      	cmp	r0, #0
 8008442:	d149      	bne.n	80084d8 <_dtoa_r+0x2f8>
 8008444:	4b23      	ldr	r3, [pc, #140]	; (80084d4 <_dtoa_r+0x2f4>)
 8008446:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800844a:	e6df      	b.n	800820c <_dtoa_r+0x2c>
 800844c:	2201      	movs	r2, #1
 800844e:	e7dd      	b.n	800840c <_dtoa_r+0x22c>
 8008450:	2200      	movs	r2, #0
 8008452:	9208      	str	r2, [sp, #32]
 8008454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008456:	eb0b 0a02 	add.w	sl, fp, r2
 800845a:	f10a 0901 	add.w	r9, sl, #1
 800845e:	464a      	mov	r2, r9
 8008460:	2a01      	cmp	r2, #1
 8008462:	bfb8      	it	lt
 8008464:	2201      	movlt	r2, #1
 8008466:	e7db      	b.n	8008420 <_dtoa_r+0x240>
 8008468:	2201      	movs	r2, #1
 800846a:	e7f2      	b.n	8008452 <_dtoa_r+0x272>
 800846c:	2401      	movs	r4, #1
 800846e:	2200      	movs	r2, #0
 8008470:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008474:	f04f 3aff 	mov.w	sl, #4294967295
 8008478:	2100      	movs	r1, #0
 800847a:	46d1      	mov	r9, sl
 800847c:	2212      	movs	r2, #18
 800847e:	9109      	str	r1, [sp, #36]	; 0x24
 8008480:	e7ce      	b.n	8008420 <_dtoa_r+0x240>
 8008482:	2201      	movs	r2, #1
 8008484:	9208      	str	r2, [sp, #32]
 8008486:	e7f5      	b.n	8008474 <_dtoa_r+0x294>
 8008488:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800848c:	46d1      	mov	r9, sl
 800848e:	4652      	mov	r2, sl
 8008490:	e7c6      	b.n	8008420 <_dtoa_r+0x240>
 8008492:	3101      	adds	r1, #1
 8008494:	6079      	str	r1, [r7, #4]
 8008496:	0040      	lsls	r0, r0, #1
 8008498:	e7c6      	b.n	8008428 <_dtoa_r+0x248>
 800849a:	bf00      	nop
 800849c:	f3af 8000 	nop.w
 80084a0:	636f4361 	.word	0x636f4361
 80084a4:	3fd287a7 	.word	0x3fd287a7
 80084a8:	8b60c8b3 	.word	0x8b60c8b3
 80084ac:	3fc68a28 	.word	0x3fc68a28
 80084b0:	509f79fb 	.word	0x509f79fb
 80084b4:	3fd34413 	.word	0x3fd34413
 80084b8:	0800a329 	.word	0x0800a329
 80084bc:	0800a340 	.word	0x0800a340
 80084c0:	7ff00000 	.word	0x7ff00000
 80084c4:	0800a325 	.word	0x0800a325
 80084c8:	0800a31c 	.word	0x0800a31c
 80084cc:	0800a2bd 	.word	0x0800a2bd
 80084d0:	0800a438 	.word	0x0800a438
 80084d4:	0800a39f 	.word	0x0800a39f
 80084d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80084da:	9900      	ldr	r1, [sp, #0]
 80084dc:	6011      	str	r1, [r2, #0]
 80084de:	f1b9 0f0e 	cmp.w	r9, #14
 80084e2:	d872      	bhi.n	80085ca <_dtoa_r+0x3ea>
 80084e4:	2c00      	cmp	r4, #0
 80084e6:	d070      	beq.n	80085ca <_dtoa_r+0x3ea>
 80084e8:	f1bb 0f00 	cmp.w	fp, #0
 80084ec:	f340 80a6 	ble.w	800863c <_dtoa_r+0x45c>
 80084f0:	49ca      	ldr	r1, [pc, #808]	; (800881c <_dtoa_r+0x63c>)
 80084f2:	f00b 020f 	and.w	r2, fp, #15
 80084f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80084fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80084fe:	ed92 7b00 	vldr	d7, [r2]
 8008502:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008506:	f000 808d 	beq.w	8008624 <_dtoa_r+0x444>
 800850a:	4ac5      	ldr	r2, [pc, #788]	; (8008820 <_dtoa_r+0x640>)
 800850c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008510:	ed92 6b08 	vldr	d6, [r2, #32]
 8008514:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008518:	ed8d 6b02 	vstr	d6, [sp, #8]
 800851c:	f001 010f 	and.w	r1, r1, #15
 8008520:	2203      	movs	r2, #3
 8008522:	48bf      	ldr	r0, [pc, #764]	; (8008820 <_dtoa_r+0x640>)
 8008524:	2900      	cmp	r1, #0
 8008526:	d17f      	bne.n	8008628 <_dtoa_r+0x448>
 8008528:	ed9d 6b02 	vldr	d6, [sp, #8]
 800852c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008530:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008534:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008536:	2900      	cmp	r1, #0
 8008538:	f000 80b2 	beq.w	80086a0 <_dtoa_r+0x4c0>
 800853c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008544:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854c:	f140 80a8 	bpl.w	80086a0 <_dtoa_r+0x4c0>
 8008550:	f1b9 0f00 	cmp.w	r9, #0
 8008554:	f000 80a4 	beq.w	80086a0 <_dtoa_r+0x4c0>
 8008558:	f1ba 0f00 	cmp.w	sl, #0
 800855c:	dd31      	ble.n	80085c2 <_dtoa_r+0x3e2>
 800855e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008562:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008566:	ed8d 7b02 	vstr	d7, [sp, #8]
 800856a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800856e:	3201      	adds	r2, #1
 8008570:	4650      	mov	r0, sl
 8008572:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008576:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800857a:	ee07 2a90 	vmov	s15, r2
 800857e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008582:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008586:	ed8d 5b02 	vstr	d5, [sp, #8]
 800858a:	9c03      	ldr	r4, [sp, #12]
 800858c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008590:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008594:	2800      	cmp	r0, #0
 8008596:	f040 8086 	bne.w	80086a6 <_dtoa_r+0x4c6>
 800859a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800859e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80085a2:	ec42 1b17 	vmov	d7, r1, r2
 80085a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ae:	f300 8272 	bgt.w	8008a96 <_dtoa_r+0x8b6>
 80085b2:	eeb1 7b47 	vneg.f64	d7, d7
 80085b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085be:	f100 8267 	bmi.w	8008a90 <_dtoa_r+0x8b0>
 80085c2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80085c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80085ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085cc:	2a00      	cmp	r2, #0
 80085ce:	f2c0 8129 	blt.w	8008824 <_dtoa_r+0x644>
 80085d2:	f1bb 0f0e 	cmp.w	fp, #14
 80085d6:	f300 8125 	bgt.w	8008824 <_dtoa_r+0x644>
 80085da:	4b90      	ldr	r3, [pc, #576]	; (800881c <_dtoa_r+0x63c>)
 80085dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80085e0:	ed93 6b00 	vldr	d6, [r3]
 80085e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f280 80c3 	bge.w	8008772 <_dtoa_r+0x592>
 80085ec:	f1b9 0f00 	cmp.w	r9, #0
 80085f0:	f300 80bf 	bgt.w	8008772 <_dtoa_r+0x592>
 80085f4:	f040 824c 	bne.w	8008a90 <_dtoa_r+0x8b0>
 80085f8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80085fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008600:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008604:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860c:	464c      	mov	r4, r9
 800860e:	464f      	mov	r7, r9
 8008610:	f280 8222 	bge.w	8008a58 <_dtoa_r+0x878>
 8008614:	f8dd 8000 	ldr.w	r8, [sp]
 8008618:	2331      	movs	r3, #49	; 0x31
 800861a:	f808 3b01 	strb.w	r3, [r8], #1
 800861e:	f10b 0b01 	add.w	fp, fp, #1
 8008622:	e21e      	b.n	8008a62 <_dtoa_r+0x882>
 8008624:	2202      	movs	r2, #2
 8008626:	e77c      	b.n	8008522 <_dtoa_r+0x342>
 8008628:	07cc      	lsls	r4, r1, #31
 800862a:	d504      	bpl.n	8008636 <_dtoa_r+0x456>
 800862c:	ed90 6b00 	vldr	d6, [r0]
 8008630:	3201      	adds	r2, #1
 8008632:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008636:	1049      	asrs	r1, r1, #1
 8008638:	3008      	adds	r0, #8
 800863a:	e773      	b.n	8008524 <_dtoa_r+0x344>
 800863c:	d02e      	beq.n	800869c <_dtoa_r+0x4bc>
 800863e:	f1cb 0100 	rsb	r1, fp, #0
 8008642:	4a76      	ldr	r2, [pc, #472]	; (800881c <_dtoa_r+0x63c>)
 8008644:	f001 000f 	and.w	r0, r1, #15
 8008648:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800864c:	ed92 7b00 	vldr	d7, [r2]
 8008650:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008654:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008658:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800865c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008660:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008664:	486e      	ldr	r0, [pc, #440]	; (8008820 <_dtoa_r+0x640>)
 8008666:	1109      	asrs	r1, r1, #4
 8008668:	2400      	movs	r4, #0
 800866a:	2202      	movs	r2, #2
 800866c:	b939      	cbnz	r1, 800867e <_dtoa_r+0x49e>
 800866e:	2c00      	cmp	r4, #0
 8008670:	f43f af60 	beq.w	8008534 <_dtoa_r+0x354>
 8008674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800867c:	e75a      	b.n	8008534 <_dtoa_r+0x354>
 800867e:	07cf      	lsls	r7, r1, #31
 8008680:	d509      	bpl.n	8008696 <_dtoa_r+0x4b6>
 8008682:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008686:	ed90 7b00 	vldr	d7, [r0]
 800868a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800868e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008692:	3201      	adds	r2, #1
 8008694:	2401      	movs	r4, #1
 8008696:	1049      	asrs	r1, r1, #1
 8008698:	3008      	adds	r0, #8
 800869a:	e7e7      	b.n	800866c <_dtoa_r+0x48c>
 800869c:	2202      	movs	r2, #2
 800869e:	e749      	b.n	8008534 <_dtoa_r+0x354>
 80086a0:	465f      	mov	r7, fp
 80086a2:	4648      	mov	r0, r9
 80086a4:	e765      	b.n	8008572 <_dtoa_r+0x392>
 80086a6:	ec42 1b17 	vmov	d7, r1, r2
 80086aa:	4a5c      	ldr	r2, [pc, #368]	; (800881c <_dtoa_r+0x63c>)
 80086ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80086b0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80086b4:	9a00      	ldr	r2, [sp, #0]
 80086b6:	1814      	adds	r4, r2, r0
 80086b8:	9a08      	ldr	r2, [sp, #32]
 80086ba:	b352      	cbz	r2, 8008712 <_dtoa_r+0x532>
 80086bc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80086c0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80086c4:	f8dd 8000 	ldr.w	r8, [sp]
 80086c8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80086cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80086d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80086d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80086d8:	ee14 2a90 	vmov	r2, s9
 80086dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80086e0:	3230      	adds	r2, #48	; 0x30
 80086e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80086e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ee:	f808 2b01 	strb.w	r2, [r8], #1
 80086f2:	d439      	bmi.n	8008768 <_dtoa_r+0x588>
 80086f4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80086f8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80086fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008700:	d472      	bmi.n	80087e8 <_dtoa_r+0x608>
 8008702:	45a0      	cmp	r8, r4
 8008704:	f43f af5d 	beq.w	80085c2 <_dtoa_r+0x3e2>
 8008708:	ee27 7b03 	vmul.f64	d7, d7, d3
 800870c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008710:	e7e0      	b.n	80086d4 <_dtoa_r+0x4f4>
 8008712:	f8dd 8000 	ldr.w	r8, [sp]
 8008716:	ee27 7b04 	vmul.f64	d7, d7, d4
 800871a:	4621      	mov	r1, r4
 800871c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008720:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008724:	ee14 2a90 	vmov	r2, s9
 8008728:	3230      	adds	r2, #48	; 0x30
 800872a:	f808 2b01 	strb.w	r2, [r8], #1
 800872e:	45a0      	cmp	r8, r4
 8008730:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008734:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008738:	d118      	bne.n	800876c <_dtoa_r+0x58c>
 800873a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800873e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008742:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800874a:	dc4d      	bgt.n	80087e8 <_dtoa_r+0x608>
 800874c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008750:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008758:	f57f af33 	bpl.w	80085c2 <_dtoa_r+0x3e2>
 800875c:	4688      	mov	r8, r1
 800875e:	3901      	subs	r1, #1
 8008760:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008764:	2b30      	cmp	r3, #48	; 0x30
 8008766:	d0f9      	beq.n	800875c <_dtoa_r+0x57c>
 8008768:	46bb      	mov	fp, r7
 800876a:	e02a      	b.n	80087c2 <_dtoa_r+0x5e2>
 800876c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008770:	e7d6      	b.n	8008720 <_dtoa_r+0x540>
 8008772:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008776:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800877a:	f8dd 8000 	ldr.w	r8, [sp]
 800877e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008782:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008786:	ee15 3a10 	vmov	r3, s10
 800878a:	3330      	adds	r3, #48	; 0x30
 800878c:	f808 3b01 	strb.w	r3, [r8], #1
 8008790:	9b00      	ldr	r3, [sp, #0]
 8008792:	eba8 0303 	sub.w	r3, r8, r3
 8008796:	4599      	cmp	r9, r3
 8008798:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800879c:	eea3 7b46 	vfms.f64	d7, d3, d6
 80087a0:	d133      	bne.n	800880a <_dtoa_r+0x62a>
 80087a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80087a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80087aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ae:	dc1a      	bgt.n	80087e6 <_dtoa_r+0x606>
 80087b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80087b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b8:	d103      	bne.n	80087c2 <_dtoa_r+0x5e2>
 80087ba:	ee15 3a10 	vmov	r3, s10
 80087be:	07d9      	lsls	r1, r3, #31
 80087c0:	d411      	bmi.n	80087e6 <_dtoa_r+0x606>
 80087c2:	4629      	mov	r1, r5
 80087c4:	4630      	mov	r0, r6
 80087c6:	f000 fafd 	bl	8008dc4 <_Bfree>
 80087ca:	2300      	movs	r3, #0
 80087cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087ce:	f888 3000 	strb.w	r3, [r8]
 80087d2:	f10b 0301 	add.w	r3, fp, #1
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f43f ad4d 	beq.w	800827a <_dtoa_r+0x9a>
 80087e0:	f8c3 8000 	str.w	r8, [r3]
 80087e4:	e549      	b.n	800827a <_dtoa_r+0x9a>
 80087e6:	465f      	mov	r7, fp
 80087e8:	4643      	mov	r3, r8
 80087ea:	4698      	mov	r8, r3
 80087ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087f0:	2a39      	cmp	r2, #57	; 0x39
 80087f2:	d106      	bne.n	8008802 <_dtoa_r+0x622>
 80087f4:	9a00      	ldr	r2, [sp, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d1f7      	bne.n	80087ea <_dtoa_r+0x60a>
 80087fa:	9900      	ldr	r1, [sp, #0]
 80087fc:	2230      	movs	r2, #48	; 0x30
 80087fe:	3701      	adds	r7, #1
 8008800:	700a      	strb	r2, [r1, #0]
 8008802:	781a      	ldrb	r2, [r3, #0]
 8008804:	3201      	adds	r2, #1
 8008806:	701a      	strb	r2, [r3, #0]
 8008808:	e7ae      	b.n	8008768 <_dtoa_r+0x588>
 800880a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800880e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008816:	d1b2      	bne.n	800877e <_dtoa_r+0x59e>
 8008818:	e7d3      	b.n	80087c2 <_dtoa_r+0x5e2>
 800881a:	bf00      	nop
 800881c:	0800a438 	.word	0x0800a438
 8008820:	0800a410 	.word	0x0800a410
 8008824:	9908      	ldr	r1, [sp, #32]
 8008826:	2900      	cmp	r1, #0
 8008828:	f000 80d1 	beq.w	80089ce <_dtoa_r+0x7ee>
 800882c:	9907      	ldr	r1, [sp, #28]
 800882e:	2901      	cmp	r1, #1
 8008830:	f300 80b4 	bgt.w	800899c <_dtoa_r+0x7bc>
 8008834:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008836:	2900      	cmp	r1, #0
 8008838:	f000 80ac 	beq.w	8008994 <_dtoa_r+0x7b4>
 800883c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008840:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008844:	461c      	mov	r4, r3
 8008846:	930a      	str	r3, [sp, #40]	; 0x28
 8008848:	9b05      	ldr	r3, [sp, #20]
 800884a:	4413      	add	r3, r2
 800884c:	9305      	str	r3, [sp, #20]
 800884e:	9b06      	ldr	r3, [sp, #24]
 8008850:	2101      	movs	r1, #1
 8008852:	4413      	add	r3, r2
 8008854:	4630      	mov	r0, r6
 8008856:	9306      	str	r3, [sp, #24]
 8008858:	f000 fb70 	bl	8008f3c <__i2b>
 800885c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885e:	4607      	mov	r7, r0
 8008860:	f1b8 0f00 	cmp.w	r8, #0
 8008864:	dd0d      	ble.n	8008882 <_dtoa_r+0x6a2>
 8008866:	9a06      	ldr	r2, [sp, #24]
 8008868:	2a00      	cmp	r2, #0
 800886a:	dd0a      	ble.n	8008882 <_dtoa_r+0x6a2>
 800886c:	4542      	cmp	r2, r8
 800886e:	9905      	ldr	r1, [sp, #20]
 8008870:	bfa8      	it	ge
 8008872:	4642      	movge	r2, r8
 8008874:	1a89      	subs	r1, r1, r2
 8008876:	9105      	str	r1, [sp, #20]
 8008878:	9906      	ldr	r1, [sp, #24]
 800887a:	eba8 0802 	sub.w	r8, r8, r2
 800887e:	1a8a      	subs	r2, r1, r2
 8008880:	9206      	str	r2, [sp, #24]
 8008882:	b303      	cbz	r3, 80088c6 <_dtoa_r+0x6e6>
 8008884:	9a08      	ldr	r2, [sp, #32]
 8008886:	2a00      	cmp	r2, #0
 8008888:	f000 80a6 	beq.w	80089d8 <_dtoa_r+0x7f8>
 800888c:	2c00      	cmp	r4, #0
 800888e:	dd13      	ble.n	80088b8 <_dtoa_r+0x6d8>
 8008890:	4639      	mov	r1, r7
 8008892:	4622      	mov	r2, r4
 8008894:	4630      	mov	r0, r6
 8008896:	930c      	str	r3, [sp, #48]	; 0x30
 8008898:	f000 fc0c 	bl	80090b4 <__pow5mult>
 800889c:	462a      	mov	r2, r5
 800889e:	4601      	mov	r1, r0
 80088a0:	4607      	mov	r7, r0
 80088a2:	4630      	mov	r0, r6
 80088a4:	f000 fb60 	bl	8008f68 <__multiply>
 80088a8:	4629      	mov	r1, r5
 80088aa:	900a      	str	r0, [sp, #40]	; 0x28
 80088ac:	4630      	mov	r0, r6
 80088ae:	f000 fa89 	bl	8008dc4 <_Bfree>
 80088b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088b6:	4615      	mov	r5, r2
 80088b8:	1b1a      	subs	r2, r3, r4
 80088ba:	d004      	beq.n	80088c6 <_dtoa_r+0x6e6>
 80088bc:	4629      	mov	r1, r5
 80088be:	4630      	mov	r0, r6
 80088c0:	f000 fbf8 	bl	80090b4 <__pow5mult>
 80088c4:	4605      	mov	r5, r0
 80088c6:	2101      	movs	r1, #1
 80088c8:	4630      	mov	r0, r6
 80088ca:	f000 fb37 	bl	8008f3c <__i2b>
 80088ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	4604      	mov	r4, r0
 80088d4:	f340 8082 	ble.w	80089dc <_dtoa_r+0x7fc>
 80088d8:	461a      	mov	r2, r3
 80088da:	4601      	mov	r1, r0
 80088dc:	4630      	mov	r0, r6
 80088de:	f000 fbe9 	bl	80090b4 <__pow5mult>
 80088e2:	9b07      	ldr	r3, [sp, #28]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	4604      	mov	r4, r0
 80088e8:	dd7b      	ble.n	80089e2 <_dtoa_r+0x802>
 80088ea:	2300      	movs	r3, #0
 80088ec:	930a      	str	r3, [sp, #40]	; 0x28
 80088ee:	6922      	ldr	r2, [r4, #16]
 80088f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80088f4:	6910      	ldr	r0, [r2, #16]
 80088f6:	f000 fad1 	bl	8008e9c <__hi0bits>
 80088fa:	f1c0 0020 	rsb	r0, r0, #32
 80088fe:	9b06      	ldr	r3, [sp, #24]
 8008900:	4418      	add	r0, r3
 8008902:	f010 001f 	ands.w	r0, r0, #31
 8008906:	f000 808d 	beq.w	8008a24 <_dtoa_r+0x844>
 800890a:	f1c0 0220 	rsb	r2, r0, #32
 800890e:	2a04      	cmp	r2, #4
 8008910:	f340 8086 	ble.w	8008a20 <_dtoa_r+0x840>
 8008914:	f1c0 001c 	rsb	r0, r0, #28
 8008918:	9b05      	ldr	r3, [sp, #20]
 800891a:	4403      	add	r3, r0
 800891c:	9305      	str	r3, [sp, #20]
 800891e:	9b06      	ldr	r3, [sp, #24]
 8008920:	4403      	add	r3, r0
 8008922:	4480      	add	r8, r0
 8008924:	9306      	str	r3, [sp, #24]
 8008926:	9b05      	ldr	r3, [sp, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	dd05      	ble.n	8008938 <_dtoa_r+0x758>
 800892c:	4629      	mov	r1, r5
 800892e:	461a      	mov	r2, r3
 8008930:	4630      	mov	r0, r6
 8008932:	f000 fc19 	bl	8009168 <__lshift>
 8008936:	4605      	mov	r5, r0
 8008938:	9b06      	ldr	r3, [sp, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	dd05      	ble.n	800894a <_dtoa_r+0x76a>
 800893e:	4621      	mov	r1, r4
 8008940:	461a      	mov	r2, r3
 8008942:	4630      	mov	r0, r6
 8008944:	f000 fc10 	bl	8009168 <__lshift>
 8008948:	4604      	mov	r4, r0
 800894a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d06b      	beq.n	8008a28 <_dtoa_r+0x848>
 8008950:	4621      	mov	r1, r4
 8008952:	4628      	mov	r0, r5
 8008954:	f000 fc74 	bl	8009240 <__mcmp>
 8008958:	2800      	cmp	r0, #0
 800895a:	da65      	bge.n	8008a28 <_dtoa_r+0x848>
 800895c:	2300      	movs	r3, #0
 800895e:	4629      	mov	r1, r5
 8008960:	220a      	movs	r2, #10
 8008962:	4630      	mov	r0, r6
 8008964:	f000 fa50 	bl	8008e08 <__multadd>
 8008968:	9b08      	ldr	r3, [sp, #32]
 800896a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800896e:	4605      	mov	r5, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 8192 	beq.w	8008c9a <_dtoa_r+0xaba>
 8008976:	4639      	mov	r1, r7
 8008978:	2300      	movs	r3, #0
 800897a:	220a      	movs	r2, #10
 800897c:	4630      	mov	r0, r6
 800897e:	f000 fa43 	bl	8008e08 <__multadd>
 8008982:	f1ba 0f00 	cmp.w	sl, #0
 8008986:	4607      	mov	r7, r0
 8008988:	f300 808e 	bgt.w	8008aa8 <_dtoa_r+0x8c8>
 800898c:	9b07      	ldr	r3, [sp, #28]
 800898e:	2b02      	cmp	r3, #2
 8008990:	dc51      	bgt.n	8008a36 <_dtoa_r+0x856>
 8008992:	e089      	b.n	8008aa8 <_dtoa_r+0x8c8>
 8008994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008996:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800899a:	e751      	b.n	8008840 <_dtoa_r+0x660>
 800899c:	f109 34ff 	add.w	r4, r9, #4294967295
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	bfbf      	itttt	lt
 80089a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80089a6:	1ae3      	sublt	r3, r4, r3
 80089a8:	18d2      	addlt	r2, r2, r3
 80089aa:	4613      	movlt	r3, r2
 80089ac:	bfb7      	itett	lt
 80089ae:	930e      	strlt	r3, [sp, #56]	; 0x38
 80089b0:	1b1c      	subge	r4, r3, r4
 80089b2:	4623      	movlt	r3, r4
 80089b4:	2400      	movlt	r4, #0
 80089b6:	f1b9 0f00 	cmp.w	r9, #0
 80089ba:	bfb5      	itete	lt
 80089bc:	9a05      	ldrlt	r2, [sp, #20]
 80089be:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80089c2:	eba2 0809 	sublt.w	r8, r2, r9
 80089c6:	464a      	movge	r2, r9
 80089c8:	bfb8      	it	lt
 80089ca:	2200      	movlt	r2, #0
 80089cc:	e73b      	b.n	8008846 <_dtoa_r+0x666>
 80089ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80089d2:	9f08      	ldr	r7, [sp, #32]
 80089d4:	461c      	mov	r4, r3
 80089d6:	e743      	b.n	8008860 <_dtoa_r+0x680>
 80089d8:	461a      	mov	r2, r3
 80089da:	e76f      	b.n	80088bc <_dtoa_r+0x6dc>
 80089dc:	9b07      	ldr	r3, [sp, #28]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	dc18      	bgt.n	8008a14 <_dtoa_r+0x834>
 80089e2:	9b02      	ldr	r3, [sp, #8]
 80089e4:	b9b3      	cbnz	r3, 8008a14 <_dtoa_r+0x834>
 80089e6:	9b03      	ldr	r3, [sp, #12]
 80089e8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80089ec:	b9a2      	cbnz	r2, 8008a18 <_dtoa_r+0x838>
 80089ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089f2:	0d12      	lsrs	r2, r2, #20
 80089f4:	0512      	lsls	r2, r2, #20
 80089f6:	b18a      	cbz	r2, 8008a1c <_dtoa_r+0x83c>
 80089f8:	9b05      	ldr	r3, [sp, #20]
 80089fa:	3301      	adds	r3, #1
 80089fc:	9305      	str	r3, [sp, #20]
 80089fe:	9b06      	ldr	r3, [sp, #24]
 8008a00:	3301      	adds	r3, #1
 8008a02:	9306      	str	r3, [sp, #24]
 8008a04:	2301      	movs	r3, #1
 8008a06:	930a      	str	r3, [sp, #40]	; 0x28
 8008a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f47f af6f 	bne.w	80088ee <_dtoa_r+0x70e>
 8008a10:	2001      	movs	r0, #1
 8008a12:	e774      	b.n	80088fe <_dtoa_r+0x71e>
 8008a14:	2300      	movs	r3, #0
 8008a16:	e7f6      	b.n	8008a06 <_dtoa_r+0x826>
 8008a18:	9b02      	ldr	r3, [sp, #8]
 8008a1a:	e7f4      	b.n	8008a06 <_dtoa_r+0x826>
 8008a1c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a1e:	e7f3      	b.n	8008a08 <_dtoa_r+0x828>
 8008a20:	d081      	beq.n	8008926 <_dtoa_r+0x746>
 8008a22:	4610      	mov	r0, r2
 8008a24:	301c      	adds	r0, #28
 8008a26:	e777      	b.n	8008918 <_dtoa_r+0x738>
 8008a28:	f1b9 0f00 	cmp.w	r9, #0
 8008a2c:	dc37      	bgt.n	8008a9e <_dtoa_r+0x8be>
 8008a2e:	9b07      	ldr	r3, [sp, #28]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	dd34      	ble.n	8008a9e <_dtoa_r+0x8be>
 8008a34:	46ca      	mov	sl, r9
 8008a36:	f1ba 0f00 	cmp.w	sl, #0
 8008a3a:	d10d      	bne.n	8008a58 <_dtoa_r+0x878>
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	4653      	mov	r3, sl
 8008a40:	2205      	movs	r2, #5
 8008a42:	4630      	mov	r0, r6
 8008a44:	f000 f9e0 	bl	8008e08 <__multadd>
 8008a48:	4601      	mov	r1, r0
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f000 fbf7 	bl	8009240 <__mcmp>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f73f adde 	bgt.w	8008614 <_dtoa_r+0x434>
 8008a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a5a:	f8dd 8000 	ldr.w	r8, [sp]
 8008a5e:	ea6f 0b03 	mvn.w	fp, r3
 8008a62:	f04f 0900 	mov.w	r9, #0
 8008a66:	4621      	mov	r1, r4
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f000 f9ab 	bl	8008dc4 <_Bfree>
 8008a6e:	2f00      	cmp	r7, #0
 8008a70:	f43f aea7 	beq.w	80087c2 <_dtoa_r+0x5e2>
 8008a74:	f1b9 0f00 	cmp.w	r9, #0
 8008a78:	d005      	beq.n	8008a86 <_dtoa_r+0x8a6>
 8008a7a:	45b9      	cmp	r9, r7
 8008a7c:	d003      	beq.n	8008a86 <_dtoa_r+0x8a6>
 8008a7e:	4649      	mov	r1, r9
 8008a80:	4630      	mov	r0, r6
 8008a82:	f000 f99f 	bl	8008dc4 <_Bfree>
 8008a86:	4639      	mov	r1, r7
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f000 f99b 	bl	8008dc4 <_Bfree>
 8008a8e:	e698      	b.n	80087c2 <_dtoa_r+0x5e2>
 8008a90:	2400      	movs	r4, #0
 8008a92:	4627      	mov	r7, r4
 8008a94:	e7e0      	b.n	8008a58 <_dtoa_r+0x878>
 8008a96:	46bb      	mov	fp, r7
 8008a98:	4604      	mov	r4, r0
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	e5ba      	b.n	8008614 <_dtoa_r+0x434>
 8008a9e:	9b08      	ldr	r3, [sp, #32]
 8008aa0:	46ca      	mov	sl, r9
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8100 	beq.w	8008ca8 <_dtoa_r+0xac8>
 8008aa8:	f1b8 0f00 	cmp.w	r8, #0
 8008aac:	dd05      	ble.n	8008aba <_dtoa_r+0x8da>
 8008aae:	4639      	mov	r1, r7
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f000 fb58 	bl	8009168 <__lshift>
 8008ab8:	4607      	mov	r7, r0
 8008aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d05d      	beq.n	8008b7c <_dtoa_r+0x99c>
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f000 f93e 	bl	8008d44 <_Balloc>
 8008ac8:	4680      	mov	r8, r0
 8008aca:	b928      	cbnz	r0, 8008ad8 <_dtoa_r+0x8f8>
 8008acc:	4b82      	ldr	r3, [pc, #520]	; (8008cd8 <_dtoa_r+0xaf8>)
 8008ace:	4602      	mov	r2, r0
 8008ad0:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ad4:	f7ff bb9a 	b.w	800820c <_dtoa_r+0x2c>
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	3202      	adds	r2, #2
 8008adc:	0092      	lsls	r2, r2, #2
 8008ade:	f107 010c 	add.w	r1, r7, #12
 8008ae2:	300c      	adds	r0, #12
 8008ae4:	f000 f914 	bl	8008d10 <memcpy>
 8008ae8:	2201      	movs	r2, #1
 8008aea:	4641      	mov	r1, r8
 8008aec:	4630      	mov	r0, r6
 8008aee:	f000 fb3b 	bl	8009168 <__lshift>
 8008af2:	9b00      	ldr	r3, [sp, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	9305      	str	r3, [sp, #20]
 8008af8:	9b00      	ldr	r3, [sp, #0]
 8008afa:	4453      	add	r3, sl
 8008afc:	9309      	str	r3, [sp, #36]	; 0x24
 8008afe:	9b02      	ldr	r3, [sp, #8]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	46b9      	mov	r9, r7
 8008b06:	9308      	str	r3, [sp, #32]
 8008b08:	4607      	mov	r7, r0
 8008b0a:	9b05      	ldr	r3, [sp, #20]
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	4628      	mov	r0, r5
 8008b12:	9302      	str	r3, [sp, #8]
 8008b14:	f7ff fad8 	bl	80080c8 <quorem>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	3330      	adds	r3, #48	; 0x30
 8008b1c:	9006      	str	r0, [sp, #24]
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4628      	mov	r0, r5
 8008b22:	930a      	str	r3, [sp, #40]	; 0x28
 8008b24:	f000 fb8c 	bl	8009240 <__mcmp>
 8008b28:	463a      	mov	r2, r7
 8008b2a:	4682      	mov	sl, r0
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4630      	mov	r0, r6
 8008b30:	f000 fba2 	bl	8009278 <__mdiff>
 8008b34:	68c2      	ldr	r2, [r0, #12]
 8008b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b38:	4680      	mov	r8, r0
 8008b3a:	bb0a      	cbnz	r2, 8008b80 <_dtoa_r+0x9a0>
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f000 fb7e 	bl	8009240 <__mcmp>
 8008b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b46:	4602      	mov	r2, r0
 8008b48:	4641      	mov	r1, r8
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	920e      	str	r2, [sp, #56]	; 0x38
 8008b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b50:	f000 f938 	bl	8008dc4 <_Bfree>
 8008b54:	9b07      	ldr	r3, [sp, #28]
 8008b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008b5c:	ea43 0102 	orr.w	r1, r3, r2
 8008b60:	9b08      	ldr	r3, [sp, #32]
 8008b62:	430b      	orrs	r3, r1
 8008b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b66:	d10d      	bne.n	8008b84 <_dtoa_r+0x9a4>
 8008b68:	2b39      	cmp	r3, #57	; 0x39
 8008b6a:	d029      	beq.n	8008bc0 <_dtoa_r+0x9e0>
 8008b6c:	f1ba 0f00 	cmp.w	sl, #0
 8008b70:	dd01      	ble.n	8008b76 <_dtoa_r+0x996>
 8008b72:	9b06      	ldr	r3, [sp, #24]
 8008b74:	3331      	adds	r3, #49	; 0x31
 8008b76:	9a02      	ldr	r2, [sp, #8]
 8008b78:	7013      	strb	r3, [r2, #0]
 8008b7a:	e774      	b.n	8008a66 <_dtoa_r+0x886>
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	e7b8      	b.n	8008af2 <_dtoa_r+0x912>
 8008b80:	2201      	movs	r2, #1
 8008b82:	e7e1      	b.n	8008b48 <_dtoa_r+0x968>
 8008b84:	f1ba 0f00 	cmp.w	sl, #0
 8008b88:	db06      	blt.n	8008b98 <_dtoa_r+0x9b8>
 8008b8a:	9907      	ldr	r1, [sp, #28]
 8008b8c:	ea41 0a0a 	orr.w	sl, r1, sl
 8008b90:	9908      	ldr	r1, [sp, #32]
 8008b92:	ea5a 0101 	orrs.w	r1, sl, r1
 8008b96:	d120      	bne.n	8008bda <_dtoa_r+0x9fa>
 8008b98:	2a00      	cmp	r2, #0
 8008b9a:	ddec      	ble.n	8008b76 <_dtoa_r+0x996>
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	9305      	str	r3, [sp, #20]
 8008ba4:	f000 fae0 	bl	8009168 <__lshift>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	4605      	mov	r5, r0
 8008bac:	f000 fb48 	bl	8009240 <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	9b05      	ldr	r3, [sp, #20]
 8008bb4:	dc02      	bgt.n	8008bbc <_dtoa_r+0x9dc>
 8008bb6:	d1de      	bne.n	8008b76 <_dtoa_r+0x996>
 8008bb8:	07da      	lsls	r2, r3, #31
 8008bba:	d5dc      	bpl.n	8008b76 <_dtoa_r+0x996>
 8008bbc:	2b39      	cmp	r3, #57	; 0x39
 8008bbe:	d1d8      	bne.n	8008b72 <_dtoa_r+0x992>
 8008bc0:	9a02      	ldr	r2, [sp, #8]
 8008bc2:	2339      	movs	r3, #57	; 0x39
 8008bc4:	7013      	strb	r3, [r2, #0]
 8008bc6:	4643      	mov	r3, r8
 8008bc8:	4698      	mov	r8, r3
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008bd0:	2a39      	cmp	r2, #57	; 0x39
 8008bd2:	d051      	beq.n	8008c78 <_dtoa_r+0xa98>
 8008bd4:	3201      	adds	r2, #1
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	e745      	b.n	8008a66 <_dtoa_r+0x886>
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	dd03      	ble.n	8008be6 <_dtoa_r+0xa06>
 8008bde:	2b39      	cmp	r3, #57	; 0x39
 8008be0:	d0ee      	beq.n	8008bc0 <_dtoa_r+0x9e0>
 8008be2:	3301      	adds	r3, #1
 8008be4:	e7c7      	b.n	8008b76 <_dtoa_r+0x996>
 8008be6:	9a05      	ldr	r2, [sp, #20]
 8008be8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bea:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008bee:	428a      	cmp	r2, r1
 8008bf0:	d02b      	beq.n	8008c4a <_dtoa_r+0xa6a>
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	220a      	movs	r2, #10
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f000 f905 	bl	8008e08 <__multadd>
 8008bfe:	45b9      	cmp	r9, r7
 8008c00:	4605      	mov	r5, r0
 8008c02:	f04f 0300 	mov.w	r3, #0
 8008c06:	f04f 020a 	mov.w	r2, #10
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	d107      	bne.n	8008c20 <_dtoa_r+0xa40>
 8008c10:	f000 f8fa 	bl	8008e08 <__multadd>
 8008c14:	4681      	mov	r9, r0
 8008c16:	4607      	mov	r7, r0
 8008c18:	9b05      	ldr	r3, [sp, #20]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	e774      	b.n	8008b0a <_dtoa_r+0x92a>
 8008c20:	f000 f8f2 	bl	8008e08 <__multadd>
 8008c24:	4639      	mov	r1, r7
 8008c26:	4681      	mov	r9, r0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	220a      	movs	r2, #10
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 f8eb 	bl	8008e08 <__multadd>
 8008c32:	4607      	mov	r7, r0
 8008c34:	e7f0      	b.n	8008c18 <_dtoa_r+0xa38>
 8008c36:	f1ba 0f00 	cmp.w	sl, #0
 8008c3a:	9a00      	ldr	r2, [sp, #0]
 8008c3c:	bfcc      	ite	gt
 8008c3e:	46d0      	movgt	r8, sl
 8008c40:	f04f 0801 	movle.w	r8, #1
 8008c44:	4490      	add	r8, r2
 8008c46:	f04f 0900 	mov.w	r9, #0
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	4630      	mov	r0, r6
 8008c50:	9302      	str	r3, [sp, #8]
 8008c52:	f000 fa89 	bl	8009168 <__lshift>
 8008c56:	4621      	mov	r1, r4
 8008c58:	4605      	mov	r5, r0
 8008c5a:	f000 faf1 	bl	8009240 <__mcmp>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	dcb1      	bgt.n	8008bc6 <_dtoa_r+0x9e6>
 8008c62:	d102      	bne.n	8008c6a <_dtoa_r+0xa8a>
 8008c64:	9b02      	ldr	r3, [sp, #8]
 8008c66:	07db      	lsls	r3, r3, #31
 8008c68:	d4ad      	bmi.n	8008bc6 <_dtoa_r+0x9e6>
 8008c6a:	4643      	mov	r3, r8
 8008c6c:	4698      	mov	r8, r3
 8008c6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c72:	2a30      	cmp	r2, #48	; 0x30
 8008c74:	d0fa      	beq.n	8008c6c <_dtoa_r+0xa8c>
 8008c76:	e6f6      	b.n	8008a66 <_dtoa_r+0x886>
 8008c78:	9a00      	ldr	r2, [sp, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d1a4      	bne.n	8008bc8 <_dtoa_r+0x9e8>
 8008c7e:	f10b 0b01 	add.w	fp, fp, #1
 8008c82:	2331      	movs	r3, #49	; 0x31
 8008c84:	e778      	b.n	8008b78 <_dtoa_r+0x998>
 8008c86:	4b15      	ldr	r3, [pc, #84]	; (8008cdc <_dtoa_r+0xafc>)
 8008c88:	f7ff bb12 	b.w	80082b0 <_dtoa_r+0xd0>
 8008c8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f47f aaee 	bne.w	8008270 <_dtoa_r+0x90>
 8008c94:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <_dtoa_r+0xb00>)
 8008c96:	f7ff bb0b 	b.w	80082b0 <_dtoa_r+0xd0>
 8008c9a:	f1ba 0f00 	cmp.w	sl, #0
 8008c9e:	dc03      	bgt.n	8008ca8 <_dtoa_r+0xac8>
 8008ca0:	9b07      	ldr	r3, [sp, #28]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	f73f aec7 	bgt.w	8008a36 <_dtoa_r+0x856>
 8008ca8:	f8dd 8000 	ldr.w	r8, [sp]
 8008cac:	4621      	mov	r1, r4
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f7ff fa0a 	bl	80080c8 <quorem>
 8008cb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008cb8:	f808 3b01 	strb.w	r3, [r8], #1
 8008cbc:	9a00      	ldr	r2, [sp, #0]
 8008cbe:	eba8 0202 	sub.w	r2, r8, r2
 8008cc2:	4592      	cmp	sl, r2
 8008cc4:	ddb7      	ble.n	8008c36 <_dtoa_r+0xa56>
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	2300      	movs	r3, #0
 8008cca:	220a      	movs	r2, #10
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f000 f89b 	bl	8008e08 <__multadd>
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	e7ea      	b.n	8008cac <_dtoa_r+0xacc>
 8008cd6:	bf00      	nop
 8008cd8:	0800a39f 	.word	0x0800a39f
 8008cdc:	0800a2bc 	.word	0x0800a2bc
 8008ce0:	0800a31c 	.word	0x0800a31c

08008ce4 <fiprintf>:
 8008ce4:	b40e      	push	{r1, r2, r3}
 8008ce6:	b503      	push	{r0, r1, lr}
 8008ce8:	4601      	mov	r1, r0
 8008cea:	ab03      	add	r3, sp, #12
 8008cec:	4805      	ldr	r0, [pc, #20]	; (8008d04 <fiprintf+0x20>)
 8008cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf2:	6800      	ldr	r0, [r0, #0]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	f000 fd5d 	bl	80097b4 <_vfiprintf_r>
 8008cfa:	b002      	add	sp, #8
 8008cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d00:	b003      	add	sp, #12
 8008d02:	4770      	bx	lr
 8008d04:	20000100 	.word	0x20000100

08008d08 <_localeconv_r>:
 8008d08:	4800      	ldr	r0, [pc, #0]	; (8008d0c <_localeconv_r+0x4>)
 8008d0a:	4770      	bx	lr
 8008d0c:	20000254 	.word	0x20000254

08008d10 <memcpy>:
 8008d10:	440a      	add	r2, r1
 8008d12:	4291      	cmp	r1, r2
 8008d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d18:	d100      	bne.n	8008d1c <memcpy+0xc>
 8008d1a:	4770      	bx	lr
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d26:	4291      	cmp	r1, r2
 8008d28:	d1f9      	bne.n	8008d1e <memcpy+0xe>
 8008d2a:	bd10      	pop	{r4, pc}

08008d2c <__malloc_lock>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	; (8008d34 <__malloc_lock+0x8>)
 8008d2e:	f001 b8f1 	b.w	8009f14 <__retarget_lock_acquire_recursive>
 8008d32:	bf00      	nop
 8008d34:	20000794 	.word	0x20000794

08008d38 <__malloc_unlock>:
 8008d38:	4801      	ldr	r0, [pc, #4]	; (8008d40 <__malloc_unlock+0x8>)
 8008d3a:	f001 b8ec 	b.w	8009f16 <__retarget_lock_release_recursive>
 8008d3e:	bf00      	nop
 8008d40:	20000794 	.word	0x20000794

08008d44 <_Balloc>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d48:	4604      	mov	r4, r0
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	b976      	cbnz	r6, 8008d6c <_Balloc+0x28>
 8008d4e:	2010      	movs	r0, #16
 8008d50:	f7fe fc52 	bl	80075f8 <malloc>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6260      	str	r0, [r4, #36]	; 0x24
 8008d58:	b920      	cbnz	r0, 8008d64 <_Balloc+0x20>
 8008d5a:	4b18      	ldr	r3, [pc, #96]	; (8008dbc <_Balloc+0x78>)
 8008d5c:	4818      	ldr	r0, [pc, #96]	; (8008dc0 <_Balloc+0x7c>)
 8008d5e:	2166      	movs	r1, #102	; 0x66
 8008d60:	f7ff f994 	bl	800808c <__assert_func>
 8008d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d68:	6006      	str	r6, [r0, #0]
 8008d6a:	60c6      	str	r6, [r0, #12]
 8008d6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d6e:	68f3      	ldr	r3, [r6, #12]
 8008d70:	b183      	cbz	r3, 8008d94 <_Balloc+0x50>
 8008d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d7a:	b9b8      	cbnz	r0, 8008dac <_Balloc+0x68>
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d82:	1d72      	adds	r2, r6, #5
 8008d84:	0092      	lsls	r2, r2, #2
 8008d86:	4620      	mov	r0, r4
 8008d88:	f000 fb5a 	bl	8009440 <_calloc_r>
 8008d8c:	b160      	cbz	r0, 8008da8 <_Balloc+0x64>
 8008d8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d92:	e00e      	b.n	8008db2 <_Balloc+0x6e>
 8008d94:	2221      	movs	r2, #33	; 0x21
 8008d96:	2104      	movs	r1, #4
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f000 fb51 	bl	8009440 <_calloc_r>
 8008d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008da0:	60f0      	str	r0, [r6, #12]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1e4      	bne.n	8008d72 <_Balloc+0x2e>
 8008da8:	2000      	movs	r0, #0
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	6802      	ldr	r2, [r0, #0]
 8008dae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008db2:	2300      	movs	r3, #0
 8008db4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008db8:	e7f7      	b.n	8008daa <_Balloc+0x66>
 8008dba:	bf00      	nop
 8008dbc:	0800a329 	.word	0x0800a329
 8008dc0:	0800a3b0 	.word	0x0800a3b0

08008dc4 <_Bfree>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dc8:	4605      	mov	r5, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	b976      	cbnz	r6, 8008dec <_Bfree+0x28>
 8008dce:	2010      	movs	r0, #16
 8008dd0:	f7fe fc12 	bl	80075f8 <malloc>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6268      	str	r0, [r5, #36]	; 0x24
 8008dd8:	b920      	cbnz	r0, 8008de4 <_Bfree+0x20>
 8008dda:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <_Bfree+0x3c>)
 8008ddc:	4809      	ldr	r0, [pc, #36]	; (8008e04 <_Bfree+0x40>)
 8008dde:	218a      	movs	r1, #138	; 0x8a
 8008de0:	f7ff f954 	bl	800808c <__assert_func>
 8008de4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008de8:	6006      	str	r6, [r0, #0]
 8008dea:	60c6      	str	r6, [r0, #12]
 8008dec:	b13c      	cbz	r4, 8008dfe <_Bfree+0x3a>
 8008dee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008df0:	6862      	ldr	r2, [r4, #4]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008df8:	6021      	str	r1, [r4, #0]
 8008dfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
 8008e00:	0800a329 	.word	0x0800a329
 8008e04:	0800a3b0 	.word	0x0800a3b0

08008e08 <__multadd>:
 8008e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0c:	690e      	ldr	r6, [r1, #16]
 8008e0e:	4607      	mov	r7, r0
 8008e10:	4698      	mov	r8, r3
 8008e12:	460c      	mov	r4, r1
 8008e14:	f101 0014 	add.w	r0, r1, #20
 8008e18:	2300      	movs	r3, #0
 8008e1a:	6805      	ldr	r5, [r0, #0]
 8008e1c:	b2a9      	uxth	r1, r5
 8008e1e:	fb02 8101 	mla	r1, r2, r1, r8
 8008e22:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008e26:	0c2d      	lsrs	r5, r5, #16
 8008e28:	fb02 c505 	mla	r5, r2, r5, ip
 8008e2c:	b289      	uxth	r1, r1
 8008e2e:	3301      	adds	r3, #1
 8008e30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e34:	429e      	cmp	r6, r3
 8008e36:	f840 1b04 	str.w	r1, [r0], #4
 8008e3a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e3e:	dcec      	bgt.n	8008e1a <__multadd+0x12>
 8008e40:	f1b8 0f00 	cmp.w	r8, #0
 8008e44:	d022      	beq.n	8008e8c <__multadd+0x84>
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	42b3      	cmp	r3, r6
 8008e4a:	dc19      	bgt.n	8008e80 <__multadd+0x78>
 8008e4c:	6861      	ldr	r1, [r4, #4]
 8008e4e:	4638      	mov	r0, r7
 8008e50:	3101      	adds	r1, #1
 8008e52:	f7ff ff77 	bl	8008d44 <_Balloc>
 8008e56:	4605      	mov	r5, r0
 8008e58:	b928      	cbnz	r0, 8008e66 <__multadd+0x5e>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	4b0d      	ldr	r3, [pc, #52]	; (8008e94 <__multadd+0x8c>)
 8008e5e:	480e      	ldr	r0, [pc, #56]	; (8008e98 <__multadd+0x90>)
 8008e60:	21b5      	movs	r1, #181	; 0xb5
 8008e62:	f7ff f913 	bl	800808c <__assert_func>
 8008e66:	6922      	ldr	r2, [r4, #16]
 8008e68:	3202      	adds	r2, #2
 8008e6a:	f104 010c 	add.w	r1, r4, #12
 8008e6e:	0092      	lsls	r2, r2, #2
 8008e70:	300c      	adds	r0, #12
 8008e72:	f7ff ff4d 	bl	8008d10 <memcpy>
 8008e76:	4621      	mov	r1, r4
 8008e78:	4638      	mov	r0, r7
 8008e7a:	f7ff ffa3 	bl	8008dc4 <_Bfree>
 8008e7e:	462c      	mov	r4, r5
 8008e80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e84:	3601      	adds	r6, #1
 8008e86:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e8a:	6126      	str	r6, [r4, #16]
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e92:	bf00      	nop
 8008e94:	0800a39f 	.word	0x0800a39f
 8008e98:	0800a3b0 	.word	0x0800a3b0

08008e9c <__hi0bits>:
 8008e9c:	0c03      	lsrs	r3, r0, #16
 8008e9e:	041b      	lsls	r3, r3, #16
 8008ea0:	b9d3      	cbnz	r3, 8008ed8 <__hi0bits+0x3c>
 8008ea2:	0400      	lsls	r0, r0, #16
 8008ea4:	2310      	movs	r3, #16
 8008ea6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008eaa:	bf04      	itt	eq
 8008eac:	0200      	lsleq	r0, r0, #8
 8008eae:	3308      	addeq	r3, #8
 8008eb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008eb4:	bf04      	itt	eq
 8008eb6:	0100      	lsleq	r0, r0, #4
 8008eb8:	3304      	addeq	r3, #4
 8008eba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ebe:	bf04      	itt	eq
 8008ec0:	0080      	lsleq	r0, r0, #2
 8008ec2:	3302      	addeq	r3, #2
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	db05      	blt.n	8008ed4 <__hi0bits+0x38>
 8008ec8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ecc:	f103 0301 	add.w	r3, r3, #1
 8008ed0:	bf08      	it	eq
 8008ed2:	2320      	moveq	r3, #32
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	4770      	bx	lr
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e7e4      	b.n	8008ea6 <__hi0bits+0xa>

08008edc <__lo0bits>:
 8008edc:	6803      	ldr	r3, [r0, #0]
 8008ede:	f013 0207 	ands.w	r2, r3, #7
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	d00b      	beq.n	8008efe <__lo0bits+0x22>
 8008ee6:	07da      	lsls	r2, r3, #31
 8008ee8:	d424      	bmi.n	8008f34 <__lo0bits+0x58>
 8008eea:	0798      	lsls	r0, r3, #30
 8008eec:	bf49      	itett	mi
 8008eee:	085b      	lsrmi	r3, r3, #1
 8008ef0:	089b      	lsrpl	r3, r3, #2
 8008ef2:	2001      	movmi	r0, #1
 8008ef4:	600b      	strmi	r3, [r1, #0]
 8008ef6:	bf5c      	itt	pl
 8008ef8:	600b      	strpl	r3, [r1, #0]
 8008efa:	2002      	movpl	r0, #2
 8008efc:	4770      	bx	lr
 8008efe:	b298      	uxth	r0, r3
 8008f00:	b9b0      	cbnz	r0, 8008f30 <__lo0bits+0x54>
 8008f02:	0c1b      	lsrs	r3, r3, #16
 8008f04:	2010      	movs	r0, #16
 8008f06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008f0a:	bf04      	itt	eq
 8008f0c:	0a1b      	lsreq	r3, r3, #8
 8008f0e:	3008      	addeq	r0, #8
 8008f10:	071a      	lsls	r2, r3, #28
 8008f12:	bf04      	itt	eq
 8008f14:	091b      	lsreq	r3, r3, #4
 8008f16:	3004      	addeq	r0, #4
 8008f18:	079a      	lsls	r2, r3, #30
 8008f1a:	bf04      	itt	eq
 8008f1c:	089b      	lsreq	r3, r3, #2
 8008f1e:	3002      	addeq	r0, #2
 8008f20:	07da      	lsls	r2, r3, #31
 8008f22:	d403      	bmi.n	8008f2c <__lo0bits+0x50>
 8008f24:	085b      	lsrs	r3, r3, #1
 8008f26:	f100 0001 	add.w	r0, r0, #1
 8008f2a:	d005      	beq.n	8008f38 <__lo0bits+0x5c>
 8008f2c:	600b      	str	r3, [r1, #0]
 8008f2e:	4770      	bx	lr
 8008f30:	4610      	mov	r0, r2
 8008f32:	e7e8      	b.n	8008f06 <__lo0bits+0x2a>
 8008f34:	2000      	movs	r0, #0
 8008f36:	4770      	bx	lr
 8008f38:	2020      	movs	r0, #32
 8008f3a:	4770      	bx	lr

08008f3c <__i2b>:
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	460c      	mov	r4, r1
 8008f40:	2101      	movs	r1, #1
 8008f42:	f7ff feff 	bl	8008d44 <_Balloc>
 8008f46:	4602      	mov	r2, r0
 8008f48:	b928      	cbnz	r0, 8008f56 <__i2b+0x1a>
 8008f4a:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <__i2b+0x24>)
 8008f4c:	4805      	ldr	r0, [pc, #20]	; (8008f64 <__i2b+0x28>)
 8008f4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f52:	f7ff f89b 	bl	800808c <__assert_func>
 8008f56:	2301      	movs	r3, #1
 8008f58:	6144      	str	r4, [r0, #20]
 8008f5a:	6103      	str	r3, [r0, #16]
 8008f5c:	bd10      	pop	{r4, pc}
 8008f5e:	bf00      	nop
 8008f60:	0800a39f 	.word	0x0800a39f
 8008f64:	0800a3b0 	.word	0x0800a3b0

08008f68 <__multiply>:
 8008f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	4614      	mov	r4, r2
 8008f6e:	690a      	ldr	r2, [r1, #16]
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	bfb8      	it	lt
 8008f76:	460b      	movlt	r3, r1
 8008f78:	460d      	mov	r5, r1
 8008f7a:	bfbc      	itt	lt
 8008f7c:	4625      	movlt	r5, r4
 8008f7e:	461c      	movlt	r4, r3
 8008f80:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f88:	68ab      	ldr	r3, [r5, #8]
 8008f8a:	6869      	ldr	r1, [r5, #4]
 8008f8c:	eb0a 0709 	add.w	r7, sl, r9
 8008f90:	42bb      	cmp	r3, r7
 8008f92:	b085      	sub	sp, #20
 8008f94:	bfb8      	it	lt
 8008f96:	3101      	addlt	r1, #1
 8008f98:	f7ff fed4 	bl	8008d44 <_Balloc>
 8008f9c:	b930      	cbnz	r0, 8008fac <__multiply+0x44>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	4b42      	ldr	r3, [pc, #264]	; (80090ac <__multiply+0x144>)
 8008fa2:	4843      	ldr	r0, [pc, #268]	; (80090b0 <__multiply+0x148>)
 8008fa4:	f240 115d 	movw	r1, #349	; 0x15d
 8008fa8:	f7ff f870 	bl	800808c <__assert_func>
 8008fac:	f100 0614 	add.w	r6, r0, #20
 8008fb0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008fb4:	4633      	mov	r3, r6
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	4543      	cmp	r3, r8
 8008fba:	d31e      	bcc.n	8008ffa <__multiply+0x92>
 8008fbc:	f105 0c14 	add.w	ip, r5, #20
 8008fc0:	f104 0314 	add.w	r3, r4, #20
 8008fc4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fc8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fcc:	9202      	str	r2, [sp, #8]
 8008fce:	ebac 0205 	sub.w	r2, ip, r5
 8008fd2:	3a15      	subs	r2, #21
 8008fd4:	f022 0203 	bic.w	r2, r2, #3
 8008fd8:	3204      	adds	r2, #4
 8008fda:	f105 0115 	add.w	r1, r5, #21
 8008fde:	458c      	cmp	ip, r1
 8008fe0:	bf38      	it	cc
 8008fe2:	2204      	movcc	r2, #4
 8008fe4:	9201      	str	r2, [sp, #4]
 8008fe6:	9a02      	ldr	r2, [sp, #8]
 8008fe8:	9303      	str	r3, [sp, #12]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d808      	bhi.n	8009000 <__multiply+0x98>
 8008fee:	2f00      	cmp	r7, #0
 8008ff0:	dc55      	bgt.n	800909e <__multiply+0x136>
 8008ff2:	6107      	str	r7, [r0, #16]
 8008ff4:	b005      	add	sp, #20
 8008ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	f843 2b04 	str.w	r2, [r3], #4
 8008ffe:	e7db      	b.n	8008fb8 <__multiply+0x50>
 8009000:	f8b3 a000 	ldrh.w	sl, [r3]
 8009004:	f1ba 0f00 	cmp.w	sl, #0
 8009008:	d020      	beq.n	800904c <__multiply+0xe4>
 800900a:	f105 0e14 	add.w	lr, r5, #20
 800900e:	46b1      	mov	r9, r6
 8009010:	2200      	movs	r2, #0
 8009012:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009016:	f8d9 b000 	ldr.w	fp, [r9]
 800901a:	b2a1      	uxth	r1, r4
 800901c:	fa1f fb8b 	uxth.w	fp, fp
 8009020:	fb0a b101 	mla	r1, sl, r1, fp
 8009024:	4411      	add	r1, r2
 8009026:	f8d9 2000 	ldr.w	r2, [r9]
 800902a:	0c24      	lsrs	r4, r4, #16
 800902c:	0c12      	lsrs	r2, r2, #16
 800902e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009032:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009036:	b289      	uxth	r1, r1
 8009038:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800903c:	45f4      	cmp	ip, lr
 800903e:	f849 1b04 	str.w	r1, [r9], #4
 8009042:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009046:	d8e4      	bhi.n	8009012 <__multiply+0xaa>
 8009048:	9901      	ldr	r1, [sp, #4]
 800904a:	5072      	str	r2, [r6, r1]
 800904c:	9a03      	ldr	r2, [sp, #12]
 800904e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009052:	3304      	adds	r3, #4
 8009054:	f1b9 0f00 	cmp.w	r9, #0
 8009058:	d01f      	beq.n	800909a <__multiply+0x132>
 800905a:	6834      	ldr	r4, [r6, #0]
 800905c:	f105 0114 	add.w	r1, r5, #20
 8009060:	46b6      	mov	lr, r6
 8009062:	f04f 0a00 	mov.w	sl, #0
 8009066:	880a      	ldrh	r2, [r1, #0]
 8009068:	f8be b002 	ldrh.w	fp, [lr, #2]
 800906c:	fb09 b202 	mla	r2, r9, r2, fp
 8009070:	4492      	add	sl, r2
 8009072:	b2a4      	uxth	r4, r4
 8009074:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009078:	f84e 4b04 	str.w	r4, [lr], #4
 800907c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009080:	f8be 2000 	ldrh.w	r2, [lr]
 8009084:	0c24      	lsrs	r4, r4, #16
 8009086:	fb09 2404 	mla	r4, r9, r4, r2
 800908a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800908e:	458c      	cmp	ip, r1
 8009090:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009094:	d8e7      	bhi.n	8009066 <__multiply+0xfe>
 8009096:	9a01      	ldr	r2, [sp, #4]
 8009098:	50b4      	str	r4, [r6, r2]
 800909a:	3604      	adds	r6, #4
 800909c:	e7a3      	b.n	8008fe6 <__multiply+0x7e>
 800909e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1a5      	bne.n	8008ff2 <__multiply+0x8a>
 80090a6:	3f01      	subs	r7, #1
 80090a8:	e7a1      	b.n	8008fee <__multiply+0x86>
 80090aa:	bf00      	nop
 80090ac:	0800a39f 	.word	0x0800a39f
 80090b0:	0800a3b0 	.word	0x0800a3b0

080090b4 <__pow5mult>:
 80090b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b8:	4615      	mov	r5, r2
 80090ba:	f012 0203 	ands.w	r2, r2, #3
 80090be:	4606      	mov	r6, r0
 80090c0:	460f      	mov	r7, r1
 80090c2:	d007      	beq.n	80090d4 <__pow5mult+0x20>
 80090c4:	4c25      	ldr	r4, [pc, #148]	; (800915c <__pow5mult+0xa8>)
 80090c6:	3a01      	subs	r2, #1
 80090c8:	2300      	movs	r3, #0
 80090ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090ce:	f7ff fe9b 	bl	8008e08 <__multadd>
 80090d2:	4607      	mov	r7, r0
 80090d4:	10ad      	asrs	r5, r5, #2
 80090d6:	d03d      	beq.n	8009154 <__pow5mult+0xa0>
 80090d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090da:	b97c      	cbnz	r4, 80090fc <__pow5mult+0x48>
 80090dc:	2010      	movs	r0, #16
 80090de:	f7fe fa8b 	bl	80075f8 <malloc>
 80090e2:	4602      	mov	r2, r0
 80090e4:	6270      	str	r0, [r6, #36]	; 0x24
 80090e6:	b928      	cbnz	r0, 80090f4 <__pow5mult+0x40>
 80090e8:	4b1d      	ldr	r3, [pc, #116]	; (8009160 <__pow5mult+0xac>)
 80090ea:	481e      	ldr	r0, [pc, #120]	; (8009164 <__pow5mult+0xb0>)
 80090ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090f0:	f7fe ffcc 	bl	800808c <__assert_func>
 80090f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090f8:	6004      	str	r4, [r0, #0]
 80090fa:	60c4      	str	r4, [r0, #12]
 80090fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009104:	b94c      	cbnz	r4, 800911a <__pow5mult+0x66>
 8009106:	f240 2171 	movw	r1, #625	; 0x271
 800910a:	4630      	mov	r0, r6
 800910c:	f7ff ff16 	bl	8008f3c <__i2b>
 8009110:	2300      	movs	r3, #0
 8009112:	f8c8 0008 	str.w	r0, [r8, #8]
 8009116:	4604      	mov	r4, r0
 8009118:	6003      	str	r3, [r0, #0]
 800911a:	f04f 0900 	mov.w	r9, #0
 800911e:	07eb      	lsls	r3, r5, #31
 8009120:	d50a      	bpl.n	8009138 <__pow5mult+0x84>
 8009122:	4639      	mov	r1, r7
 8009124:	4622      	mov	r2, r4
 8009126:	4630      	mov	r0, r6
 8009128:	f7ff ff1e 	bl	8008f68 <__multiply>
 800912c:	4639      	mov	r1, r7
 800912e:	4680      	mov	r8, r0
 8009130:	4630      	mov	r0, r6
 8009132:	f7ff fe47 	bl	8008dc4 <_Bfree>
 8009136:	4647      	mov	r7, r8
 8009138:	106d      	asrs	r5, r5, #1
 800913a:	d00b      	beq.n	8009154 <__pow5mult+0xa0>
 800913c:	6820      	ldr	r0, [r4, #0]
 800913e:	b938      	cbnz	r0, 8009150 <__pow5mult+0x9c>
 8009140:	4622      	mov	r2, r4
 8009142:	4621      	mov	r1, r4
 8009144:	4630      	mov	r0, r6
 8009146:	f7ff ff0f 	bl	8008f68 <__multiply>
 800914a:	6020      	str	r0, [r4, #0]
 800914c:	f8c0 9000 	str.w	r9, [r0]
 8009150:	4604      	mov	r4, r0
 8009152:	e7e4      	b.n	800911e <__pow5mult+0x6a>
 8009154:	4638      	mov	r0, r7
 8009156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800915a:	bf00      	nop
 800915c:	0800a500 	.word	0x0800a500
 8009160:	0800a329 	.word	0x0800a329
 8009164:	0800a3b0 	.word	0x0800a3b0

08009168 <__lshift>:
 8009168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	460c      	mov	r4, r1
 800916e:	6849      	ldr	r1, [r1, #4]
 8009170:	6923      	ldr	r3, [r4, #16]
 8009172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009176:	68a3      	ldr	r3, [r4, #8]
 8009178:	4607      	mov	r7, r0
 800917a:	4691      	mov	r9, r2
 800917c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009180:	f108 0601 	add.w	r6, r8, #1
 8009184:	42b3      	cmp	r3, r6
 8009186:	db0b      	blt.n	80091a0 <__lshift+0x38>
 8009188:	4638      	mov	r0, r7
 800918a:	f7ff fddb 	bl	8008d44 <_Balloc>
 800918e:	4605      	mov	r5, r0
 8009190:	b948      	cbnz	r0, 80091a6 <__lshift+0x3e>
 8009192:	4602      	mov	r2, r0
 8009194:	4b28      	ldr	r3, [pc, #160]	; (8009238 <__lshift+0xd0>)
 8009196:	4829      	ldr	r0, [pc, #164]	; (800923c <__lshift+0xd4>)
 8009198:	f240 11d9 	movw	r1, #473	; 0x1d9
 800919c:	f7fe ff76 	bl	800808c <__assert_func>
 80091a0:	3101      	adds	r1, #1
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	e7ee      	b.n	8009184 <__lshift+0x1c>
 80091a6:	2300      	movs	r3, #0
 80091a8:	f100 0114 	add.w	r1, r0, #20
 80091ac:	f100 0210 	add.w	r2, r0, #16
 80091b0:	4618      	mov	r0, r3
 80091b2:	4553      	cmp	r3, sl
 80091b4:	db33      	blt.n	800921e <__lshift+0xb6>
 80091b6:	6920      	ldr	r0, [r4, #16]
 80091b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091bc:	f104 0314 	add.w	r3, r4, #20
 80091c0:	f019 091f 	ands.w	r9, r9, #31
 80091c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091cc:	d02b      	beq.n	8009226 <__lshift+0xbe>
 80091ce:	f1c9 0e20 	rsb	lr, r9, #32
 80091d2:	468a      	mov	sl, r1
 80091d4:	2200      	movs	r2, #0
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	fa00 f009 	lsl.w	r0, r0, r9
 80091dc:	4302      	orrs	r2, r0
 80091de:	f84a 2b04 	str.w	r2, [sl], #4
 80091e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e6:	459c      	cmp	ip, r3
 80091e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80091ec:	d8f3      	bhi.n	80091d6 <__lshift+0x6e>
 80091ee:	ebac 0304 	sub.w	r3, ip, r4
 80091f2:	3b15      	subs	r3, #21
 80091f4:	f023 0303 	bic.w	r3, r3, #3
 80091f8:	3304      	adds	r3, #4
 80091fa:	f104 0015 	add.w	r0, r4, #21
 80091fe:	4584      	cmp	ip, r0
 8009200:	bf38      	it	cc
 8009202:	2304      	movcc	r3, #4
 8009204:	50ca      	str	r2, [r1, r3]
 8009206:	b10a      	cbz	r2, 800920c <__lshift+0xa4>
 8009208:	f108 0602 	add.w	r6, r8, #2
 800920c:	3e01      	subs	r6, #1
 800920e:	4638      	mov	r0, r7
 8009210:	612e      	str	r6, [r5, #16]
 8009212:	4621      	mov	r1, r4
 8009214:	f7ff fdd6 	bl	8008dc4 <_Bfree>
 8009218:	4628      	mov	r0, r5
 800921a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009222:	3301      	adds	r3, #1
 8009224:	e7c5      	b.n	80091b2 <__lshift+0x4a>
 8009226:	3904      	subs	r1, #4
 8009228:	f853 2b04 	ldr.w	r2, [r3], #4
 800922c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009230:	459c      	cmp	ip, r3
 8009232:	d8f9      	bhi.n	8009228 <__lshift+0xc0>
 8009234:	e7ea      	b.n	800920c <__lshift+0xa4>
 8009236:	bf00      	nop
 8009238:	0800a39f 	.word	0x0800a39f
 800923c:	0800a3b0 	.word	0x0800a3b0

08009240 <__mcmp>:
 8009240:	b530      	push	{r4, r5, lr}
 8009242:	6902      	ldr	r2, [r0, #16]
 8009244:	690c      	ldr	r4, [r1, #16]
 8009246:	1b12      	subs	r2, r2, r4
 8009248:	d10e      	bne.n	8009268 <__mcmp+0x28>
 800924a:	f100 0314 	add.w	r3, r0, #20
 800924e:	3114      	adds	r1, #20
 8009250:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009254:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009258:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800925c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009260:	42a5      	cmp	r5, r4
 8009262:	d003      	beq.n	800926c <__mcmp+0x2c>
 8009264:	d305      	bcc.n	8009272 <__mcmp+0x32>
 8009266:	2201      	movs	r2, #1
 8009268:	4610      	mov	r0, r2
 800926a:	bd30      	pop	{r4, r5, pc}
 800926c:	4283      	cmp	r3, r0
 800926e:	d3f3      	bcc.n	8009258 <__mcmp+0x18>
 8009270:	e7fa      	b.n	8009268 <__mcmp+0x28>
 8009272:	f04f 32ff 	mov.w	r2, #4294967295
 8009276:	e7f7      	b.n	8009268 <__mcmp+0x28>

08009278 <__mdiff>:
 8009278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	460c      	mov	r4, r1
 800927e:	4606      	mov	r6, r0
 8009280:	4611      	mov	r1, r2
 8009282:	4620      	mov	r0, r4
 8009284:	4617      	mov	r7, r2
 8009286:	f7ff ffdb 	bl	8009240 <__mcmp>
 800928a:	1e05      	subs	r5, r0, #0
 800928c:	d110      	bne.n	80092b0 <__mdiff+0x38>
 800928e:	4629      	mov	r1, r5
 8009290:	4630      	mov	r0, r6
 8009292:	f7ff fd57 	bl	8008d44 <_Balloc>
 8009296:	b930      	cbnz	r0, 80092a6 <__mdiff+0x2e>
 8009298:	4b39      	ldr	r3, [pc, #228]	; (8009380 <__mdiff+0x108>)
 800929a:	4602      	mov	r2, r0
 800929c:	f240 2132 	movw	r1, #562	; 0x232
 80092a0:	4838      	ldr	r0, [pc, #224]	; (8009384 <__mdiff+0x10c>)
 80092a2:	f7fe fef3 	bl	800808c <__assert_func>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b0:	bfa4      	itt	ge
 80092b2:	463b      	movge	r3, r7
 80092b4:	4627      	movge	r7, r4
 80092b6:	4630      	mov	r0, r6
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	bfa6      	itte	ge
 80092bc:	461c      	movge	r4, r3
 80092be:	2500      	movge	r5, #0
 80092c0:	2501      	movlt	r5, #1
 80092c2:	f7ff fd3f 	bl	8008d44 <_Balloc>
 80092c6:	b920      	cbnz	r0, 80092d2 <__mdiff+0x5a>
 80092c8:	4b2d      	ldr	r3, [pc, #180]	; (8009380 <__mdiff+0x108>)
 80092ca:	4602      	mov	r2, r0
 80092cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092d0:	e7e6      	b.n	80092a0 <__mdiff+0x28>
 80092d2:	693e      	ldr	r6, [r7, #16]
 80092d4:	60c5      	str	r5, [r0, #12]
 80092d6:	6925      	ldr	r5, [r4, #16]
 80092d8:	f107 0114 	add.w	r1, r7, #20
 80092dc:	f104 0914 	add.w	r9, r4, #20
 80092e0:	f100 0e14 	add.w	lr, r0, #20
 80092e4:	f107 0210 	add.w	r2, r7, #16
 80092e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80092f0:	46f2      	mov	sl, lr
 80092f2:	2700      	movs	r7, #0
 80092f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80092f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092fc:	fa1f f883 	uxth.w	r8, r3
 8009300:	fa17 f78b 	uxtah	r7, r7, fp
 8009304:	0c1b      	lsrs	r3, r3, #16
 8009306:	eba7 0808 	sub.w	r8, r7, r8
 800930a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800930e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009312:	fa1f f888 	uxth.w	r8, r8
 8009316:	141f      	asrs	r7, r3, #16
 8009318:	454d      	cmp	r5, r9
 800931a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800931e:	f84a 3b04 	str.w	r3, [sl], #4
 8009322:	d8e7      	bhi.n	80092f4 <__mdiff+0x7c>
 8009324:	1b2b      	subs	r3, r5, r4
 8009326:	3b15      	subs	r3, #21
 8009328:	f023 0303 	bic.w	r3, r3, #3
 800932c:	3304      	adds	r3, #4
 800932e:	3415      	adds	r4, #21
 8009330:	42a5      	cmp	r5, r4
 8009332:	bf38      	it	cc
 8009334:	2304      	movcc	r3, #4
 8009336:	4419      	add	r1, r3
 8009338:	4473      	add	r3, lr
 800933a:	469e      	mov	lr, r3
 800933c:	460d      	mov	r5, r1
 800933e:	4565      	cmp	r5, ip
 8009340:	d30e      	bcc.n	8009360 <__mdiff+0xe8>
 8009342:	f10c 0203 	add.w	r2, ip, #3
 8009346:	1a52      	subs	r2, r2, r1
 8009348:	f022 0203 	bic.w	r2, r2, #3
 800934c:	3903      	subs	r1, #3
 800934e:	458c      	cmp	ip, r1
 8009350:	bf38      	it	cc
 8009352:	2200      	movcc	r2, #0
 8009354:	441a      	add	r2, r3
 8009356:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800935a:	b17b      	cbz	r3, 800937c <__mdiff+0x104>
 800935c:	6106      	str	r6, [r0, #16]
 800935e:	e7a5      	b.n	80092ac <__mdiff+0x34>
 8009360:	f855 8b04 	ldr.w	r8, [r5], #4
 8009364:	fa17 f488 	uxtah	r4, r7, r8
 8009368:	1422      	asrs	r2, r4, #16
 800936a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800936e:	b2a4      	uxth	r4, r4
 8009370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009374:	f84e 4b04 	str.w	r4, [lr], #4
 8009378:	1417      	asrs	r7, r2, #16
 800937a:	e7e0      	b.n	800933e <__mdiff+0xc6>
 800937c:	3e01      	subs	r6, #1
 800937e:	e7ea      	b.n	8009356 <__mdiff+0xde>
 8009380:	0800a39f 	.word	0x0800a39f
 8009384:	0800a3b0 	.word	0x0800a3b0

08009388 <__d2b>:
 8009388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800938c:	4689      	mov	r9, r1
 800938e:	2101      	movs	r1, #1
 8009390:	ec57 6b10 	vmov	r6, r7, d0
 8009394:	4690      	mov	r8, r2
 8009396:	f7ff fcd5 	bl	8008d44 <_Balloc>
 800939a:	4604      	mov	r4, r0
 800939c:	b930      	cbnz	r0, 80093ac <__d2b+0x24>
 800939e:	4602      	mov	r2, r0
 80093a0:	4b25      	ldr	r3, [pc, #148]	; (8009438 <__d2b+0xb0>)
 80093a2:	4826      	ldr	r0, [pc, #152]	; (800943c <__d2b+0xb4>)
 80093a4:	f240 310a 	movw	r1, #778	; 0x30a
 80093a8:	f7fe fe70 	bl	800808c <__assert_func>
 80093ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80093b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093b4:	bb35      	cbnz	r5, 8009404 <__d2b+0x7c>
 80093b6:	2e00      	cmp	r6, #0
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	d028      	beq.n	800940e <__d2b+0x86>
 80093bc:	4668      	mov	r0, sp
 80093be:	9600      	str	r6, [sp, #0]
 80093c0:	f7ff fd8c 	bl	8008edc <__lo0bits>
 80093c4:	9900      	ldr	r1, [sp, #0]
 80093c6:	b300      	cbz	r0, 800940a <__d2b+0x82>
 80093c8:	9a01      	ldr	r2, [sp, #4]
 80093ca:	f1c0 0320 	rsb	r3, r0, #32
 80093ce:	fa02 f303 	lsl.w	r3, r2, r3
 80093d2:	430b      	orrs	r3, r1
 80093d4:	40c2      	lsrs	r2, r0
 80093d6:	6163      	str	r3, [r4, #20]
 80093d8:	9201      	str	r2, [sp, #4]
 80093da:	9b01      	ldr	r3, [sp, #4]
 80093dc:	61a3      	str	r3, [r4, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bf14      	ite	ne
 80093e2:	2202      	movne	r2, #2
 80093e4:	2201      	moveq	r2, #1
 80093e6:	6122      	str	r2, [r4, #16]
 80093e8:	b1d5      	cbz	r5, 8009420 <__d2b+0x98>
 80093ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093ee:	4405      	add	r5, r0
 80093f0:	f8c9 5000 	str.w	r5, [r9]
 80093f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093f8:	f8c8 0000 	str.w	r0, [r8]
 80093fc:	4620      	mov	r0, r4
 80093fe:	b003      	add	sp, #12
 8009400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009408:	e7d5      	b.n	80093b6 <__d2b+0x2e>
 800940a:	6161      	str	r1, [r4, #20]
 800940c:	e7e5      	b.n	80093da <__d2b+0x52>
 800940e:	a801      	add	r0, sp, #4
 8009410:	f7ff fd64 	bl	8008edc <__lo0bits>
 8009414:	9b01      	ldr	r3, [sp, #4]
 8009416:	6163      	str	r3, [r4, #20]
 8009418:	2201      	movs	r2, #1
 800941a:	6122      	str	r2, [r4, #16]
 800941c:	3020      	adds	r0, #32
 800941e:	e7e3      	b.n	80093e8 <__d2b+0x60>
 8009420:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009424:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009428:	f8c9 0000 	str.w	r0, [r9]
 800942c:	6918      	ldr	r0, [r3, #16]
 800942e:	f7ff fd35 	bl	8008e9c <__hi0bits>
 8009432:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009436:	e7df      	b.n	80093f8 <__d2b+0x70>
 8009438:	0800a39f 	.word	0x0800a39f
 800943c:	0800a3b0 	.word	0x0800a3b0

08009440 <_calloc_r>:
 8009440:	b513      	push	{r0, r1, r4, lr}
 8009442:	434a      	muls	r2, r1
 8009444:	4611      	mov	r1, r2
 8009446:	9201      	str	r2, [sp, #4]
 8009448:	f7fe f936 	bl	80076b8 <_malloc_r>
 800944c:	4604      	mov	r4, r0
 800944e:	b118      	cbz	r0, 8009458 <_calloc_r+0x18>
 8009450:	9a01      	ldr	r2, [sp, #4]
 8009452:	2100      	movs	r1, #0
 8009454:	f7fe f8d8 	bl	8007608 <memset>
 8009458:	4620      	mov	r0, r4
 800945a:	b002      	add	sp, #8
 800945c:	bd10      	pop	{r4, pc}

0800945e <_realloc_r>:
 800945e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009460:	4607      	mov	r7, r0
 8009462:	4614      	mov	r4, r2
 8009464:	460e      	mov	r6, r1
 8009466:	b921      	cbnz	r1, 8009472 <_realloc_r+0x14>
 8009468:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800946c:	4611      	mov	r1, r2
 800946e:	f7fe b923 	b.w	80076b8 <_malloc_r>
 8009472:	b922      	cbnz	r2, 800947e <_realloc_r+0x20>
 8009474:	f7fe f8d0 	bl	8007618 <_free_r>
 8009478:	4625      	mov	r5, r4
 800947a:	4628      	mov	r0, r5
 800947c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947e:	f000 fddb 	bl	800a038 <_malloc_usable_size_r>
 8009482:	42a0      	cmp	r0, r4
 8009484:	d20f      	bcs.n	80094a6 <_realloc_r+0x48>
 8009486:	4621      	mov	r1, r4
 8009488:	4638      	mov	r0, r7
 800948a:	f7fe f915 	bl	80076b8 <_malloc_r>
 800948e:	4605      	mov	r5, r0
 8009490:	2800      	cmp	r0, #0
 8009492:	d0f2      	beq.n	800947a <_realloc_r+0x1c>
 8009494:	4631      	mov	r1, r6
 8009496:	4622      	mov	r2, r4
 8009498:	f7ff fc3a 	bl	8008d10 <memcpy>
 800949c:	4631      	mov	r1, r6
 800949e:	4638      	mov	r0, r7
 80094a0:	f7fe f8ba 	bl	8007618 <_free_r>
 80094a4:	e7e9      	b.n	800947a <_realloc_r+0x1c>
 80094a6:	4635      	mov	r5, r6
 80094a8:	e7e7      	b.n	800947a <_realloc_r+0x1c>

080094aa <__ssputs_r>:
 80094aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ae:	688e      	ldr	r6, [r1, #8]
 80094b0:	429e      	cmp	r6, r3
 80094b2:	4682      	mov	sl, r0
 80094b4:	460c      	mov	r4, r1
 80094b6:	4690      	mov	r8, r2
 80094b8:	461f      	mov	r7, r3
 80094ba:	d838      	bhi.n	800952e <__ssputs_r+0x84>
 80094bc:	898a      	ldrh	r2, [r1, #12]
 80094be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094c2:	d032      	beq.n	800952a <__ssputs_r+0x80>
 80094c4:	6825      	ldr	r5, [r4, #0]
 80094c6:	6909      	ldr	r1, [r1, #16]
 80094c8:	eba5 0901 	sub.w	r9, r5, r1
 80094cc:	6965      	ldr	r5, [r4, #20]
 80094ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d6:	3301      	adds	r3, #1
 80094d8:	444b      	add	r3, r9
 80094da:	106d      	asrs	r5, r5, #1
 80094dc:	429d      	cmp	r5, r3
 80094de:	bf38      	it	cc
 80094e0:	461d      	movcc	r5, r3
 80094e2:	0553      	lsls	r3, r2, #21
 80094e4:	d531      	bpl.n	800954a <__ssputs_r+0xa0>
 80094e6:	4629      	mov	r1, r5
 80094e8:	f7fe f8e6 	bl	80076b8 <_malloc_r>
 80094ec:	4606      	mov	r6, r0
 80094ee:	b950      	cbnz	r0, 8009506 <__ssputs_r+0x5c>
 80094f0:	230c      	movs	r3, #12
 80094f2:	f8ca 3000 	str.w	r3, [sl]
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009506:	6921      	ldr	r1, [r4, #16]
 8009508:	464a      	mov	r2, r9
 800950a:	f7ff fc01 	bl	8008d10 <memcpy>
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009518:	81a3      	strh	r3, [r4, #12]
 800951a:	6126      	str	r6, [r4, #16]
 800951c:	6165      	str	r5, [r4, #20]
 800951e:	444e      	add	r6, r9
 8009520:	eba5 0509 	sub.w	r5, r5, r9
 8009524:	6026      	str	r6, [r4, #0]
 8009526:	60a5      	str	r5, [r4, #8]
 8009528:	463e      	mov	r6, r7
 800952a:	42be      	cmp	r6, r7
 800952c:	d900      	bls.n	8009530 <__ssputs_r+0x86>
 800952e:	463e      	mov	r6, r7
 8009530:	4632      	mov	r2, r6
 8009532:	6820      	ldr	r0, [r4, #0]
 8009534:	4641      	mov	r1, r8
 8009536:	f000 fd65 	bl	800a004 <memmove>
 800953a:	68a3      	ldr	r3, [r4, #8]
 800953c:	6822      	ldr	r2, [r4, #0]
 800953e:	1b9b      	subs	r3, r3, r6
 8009540:	4432      	add	r2, r6
 8009542:	60a3      	str	r3, [r4, #8]
 8009544:	6022      	str	r2, [r4, #0]
 8009546:	2000      	movs	r0, #0
 8009548:	e7db      	b.n	8009502 <__ssputs_r+0x58>
 800954a:	462a      	mov	r2, r5
 800954c:	f7ff ff87 	bl	800945e <_realloc_r>
 8009550:	4606      	mov	r6, r0
 8009552:	2800      	cmp	r0, #0
 8009554:	d1e1      	bne.n	800951a <__ssputs_r+0x70>
 8009556:	6921      	ldr	r1, [r4, #16]
 8009558:	4650      	mov	r0, sl
 800955a:	f7fe f85d 	bl	8007618 <_free_r>
 800955e:	e7c7      	b.n	80094f0 <__ssputs_r+0x46>

08009560 <_svfiprintf_r>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	4698      	mov	r8, r3
 8009566:	898b      	ldrh	r3, [r1, #12]
 8009568:	061b      	lsls	r3, r3, #24
 800956a:	b09d      	sub	sp, #116	; 0x74
 800956c:	4607      	mov	r7, r0
 800956e:	460d      	mov	r5, r1
 8009570:	4614      	mov	r4, r2
 8009572:	d50e      	bpl.n	8009592 <_svfiprintf_r+0x32>
 8009574:	690b      	ldr	r3, [r1, #16]
 8009576:	b963      	cbnz	r3, 8009592 <_svfiprintf_r+0x32>
 8009578:	2140      	movs	r1, #64	; 0x40
 800957a:	f7fe f89d 	bl	80076b8 <_malloc_r>
 800957e:	6028      	str	r0, [r5, #0]
 8009580:	6128      	str	r0, [r5, #16]
 8009582:	b920      	cbnz	r0, 800958e <_svfiprintf_r+0x2e>
 8009584:	230c      	movs	r3, #12
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	f04f 30ff 	mov.w	r0, #4294967295
 800958c:	e0d1      	b.n	8009732 <_svfiprintf_r+0x1d2>
 800958e:	2340      	movs	r3, #64	; 0x40
 8009590:	616b      	str	r3, [r5, #20]
 8009592:	2300      	movs	r3, #0
 8009594:	9309      	str	r3, [sp, #36]	; 0x24
 8009596:	2320      	movs	r3, #32
 8009598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800959c:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a0:	2330      	movs	r3, #48	; 0x30
 80095a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800974c <_svfiprintf_r+0x1ec>
 80095a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095aa:	f04f 0901 	mov.w	r9, #1
 80095ae:	4623      	mov	r3, r4
 80095b0:	469a      	mov	sl, r3
 80095b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b6:	b10a      	cbz	r2, 80095bc <_svfiprintf_r+0x5c>
 80095b8:	2a25      	cmp	r2, #37	; 0x25
 80095ba:	d1f9      	bne.n	80095b0 <_svfiprintf_r+0x50>
 80095bc:	ebba 0b04 	subs.w	fp, sl, r4
 80095c0:	d00b      	beq.n	80095da <_svfiprintf_r+0x7a>
 80095c2:	465b      	mov	r3, fp
 80095c4:	4622      	mov	r2, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff ff6e 	bl	80094aa <__ssputs_r>
 80095ce:	3001      	adds	r0, #1
 80095d0:	f000 80aa 	beq.w	8009728 <_svfiprintf_r+0x1c8>
 80095d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d6:	445a      	add	r2, fp
 80095d8:	9209      	str	r2, [sp, #36]	; 0x24
 80095da:	f89a 3000 	ldrb.w	r3, [sl]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 80a2 	beq.w	8009728 <_svfiprintf_r+0x1c8>
 80095e4:	2300      	movs	r3, #0
 80095e6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ee:	f10a 0a01 	add.w	sl, sl, #1
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	9307      	str	r3, [sp, #28]
 80095f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095fa:	931a      	str	r3, [sp, #104]	; 0x68
 80095fc:	4654      	mov	r4, sl
 80095fe:	2205      	movs	r2, #5
 8009600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009604:	4851      	ldr	r0, [pc, #324]	; (800974c <_svfiprintf_r+0x1ec>)
 8009606:	f7f6 fe23 	bl	8000250 <memchr>
 800960a:	9a04      	ldr	r2, [sp, #16]
 800960c:	b9d8      	cbnz	r0, 8009646 <_svfiprintf_r+0xe6>
 800960e:	06d0      	lsls	r0, r2, #27
 8009610:	bf44      	itt	mi
 8009612:	2320      	movmi	r3, #32
 8009614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009618:	0711      	lsls	r1, r2, #28
 800961a:	bf44      	itt	mi
 800961c:	232b      	movmi	r3, #43	; 0x2b
 800961e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009622:	f89a 3000 	ldrb.w	r3, [sl]
 8009626:	2b2a      	cmp	r3, #42	; 0x2a
 8009628:	d015      	beq.n	8009656 <_svfiprintf_r+0xf6>
 800962a:	9a07      	ldr	r2, [sp, #28]
 800962c:	4654      	mov	r4, sl
 800962e:	2000      	movs	r0, #0
 8009630:	f04f 0c0a 	mov.w	ip, #10
 8009634:	4621      	mov	r1, r4
 8009636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963a:	3b30      	subs	r3, #48	; 0x30
 800963c:	2b09      	cmp	r3, #9
 800963e:	d94e      	bls.n	80096de <_svfiprintf_r+0x17e>
 8009640:	b1b0      	cbz	r0, 8009670 <_svfiprintf_r+0x110>
 8009642:	9207      	str	r2, [sp, #28]
 8009644:	e014      	b.n	8009670 <_svfiprintf_r+0x110>
 8009646:	eba0 0308 	sub.w	r3, r0, r8
 800964a:	fa09 f303 	lsl.w	r3, r9, r3
 800964e:	4313      	orrs	r3, r2
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	46a2      	mov	sl, r4
 8009654:	e7d2      	b.n	80095fc <_svfiprintf_r+0x9c>
 8009656:	9b03      	ldr	r3, [sp, #12]
 8009658:	1d19      	adds	r1, r3, #4
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	9103      	str	r1, [sp, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	bfbb      	ittet	lt
 8009662:	425b      	neglt	r3, r3
 8009664:	f042 0202 	orrlt.w	r2, r2, #2
 8009668:	9307      	strge	r3, [sp, #28]
 800966a:	9307      	strlt	r3, [sp, #28]
 800966c:	bfb8      	it	lt
 800966e:	9204      	strlt	r2, [sp, #16]
 8009670:	7823      	ldrb	r3, [r4, #0]
 8009672:	2b2e      	cmp	r3, #46	; 0x2e
 8009674:	d10c      	bne.n	8009690 <_svfiprintf_r+0x130>
 8009676:	7863      	ldrb	r3, [r4, #1]
 8009678:	2b2a      	cmp	r3, #42	; 0x2a
 800967a:	d135      	bne.n	80096e8 <_svfiprintf_r+0x188>
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	1d1a      	adds	r2, r3, #4
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	9203      	str	r2, [sp, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	bfb8      	it	lt
 8009688:	f04f 33ff 	movlt.w	r3, #4294967295
 800968c:	3402      	adds	r4, #2
 800968e:	9305      	str	r3, [sp, #20]
 8009690:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800975c <_svfiprintf_r+0x1fc>
 8009694:	7821      	ldrb	r1, [r4, #0]
 8009696:	2203      	movs	r2, #3
 8009698:	4650      	mov	r0, sl
 800969a:	f7f6 fdd9 	bl	8000250 <memchr>
 800969e:	b140      	cbz	r0, 80096b2 <_svfiprintf_r+0x152>
 80096a0:	2340      	movs	r3, #64	; 0x40
 80096a2:	eba0 000a 	sub.w	r0, r0, sl
 80096a6:	fa03 f000 	lsl.w	r0, r3, r0
 80096aa:	9b04      	ldr	r3, [sp, #16]
 80096ac:	4303      	orrs	r3, r0
 80096ae:	3401      	adds	r4, #1
 80096b0:	9304      	str	r3, [sp, #16]
 80096b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b6:	4826      	ldr	r0, [pc, #152]	; (8009750 <_svfiprintf_r+0x1f0>)
 80096b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096bc:	2206      	movs	r2, #6
 80096be:	f7f6 fdc7 	bl	8000250 <memchr>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d038      	beq.n	8009738 <_svfiprintf_r+0x1d8>
 80096c6:	4b23      	ldr	r3, [pc, #140]	; (8009754 <_svfiprintf_r+0x1f4>)
 80096c8:	bb1b      	cbnz	r3, 8009712 <_svfiprintf_r+0x1b2>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	3307      	adds	r3, #7
 80096ce:	f023 0307 	bic.w	r3, r3, #7
 80096d2:	3308      	adds	r3, #8
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d8:	4433      	add	r3, r6
 80096da:	9309      	str	r3, [sp, #36]	; 0x24
 80096dc:	e767      	b.n	80095ae <_svfiprintf_r+0x4e>
 80096de:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e2:	460c      	mov	r4, r1
 80096e4:	2001      	movs	r0, #1
 80096e6:	e7a5      	b.n	8009634 <_svfiprintf_r+0xd4>
 80096e8:	2300      	movs	r3, #0
 80096ea:	3401      	adds	r4, #1
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	4619      	mov	r1, r3
 80096f0:	f04f 0c0a 	mov.w	ip, #10
 80096f4:	4620      	mov	r0, r4
 80096f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fa:	3a30      	subs	r2, #48	; 0x30
 80096fc:	2a09      	cmp	r2, #9
 80096fe:	d903      	bls.n	8009708 <_svfiprintf_r+0x1a8>
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0c5      	beq.n	8009690 <_svfiprintf_r+0x130>
 8009704:	9105      	str	r1, [sp, #20]
 8009706:	e7c3      	b.n	8009690 <_svfiprintf_r+0x130>
 8009708:	fb0c 2101 	mla	r1, ip, r1, r2
 800970c:	4604      	mov	r4, r0
 800970e:	2301      	movs	r3, #1
 8009710:	e7f0      	b.n	80096f4 <_svfiprintf_r+0x194>
 8009712:	ab03      	add	r3, sp, #12
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	462a      	mov	r2, r5
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <_svfiprintf_r+0x1f8>)
 800971a:	a904      	add	r1, sp, #16
 800971c:	4638      	mov	r0, r7
 800971e:	f7fe f8b7 	bl	8007890 <_printf_float>
 8009722:	1c42      	adds	r2, r0, #1
 8009724:	4606      	mov	r6, r0
 8009726:	d1d6      	bne.n	80096d6 <_svfiprintf_r+0x176>
 8009728:	89ab      	ldrh	r3, [r5, #12]
 800972a:	065b      	lsls	r3, r3, #25
 800972c:	f53f af2c 	bmi.w	8009588 <_svfiprintf_r+0x28>
 8009730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009732:	b01d      	add	sp, #116	; 0x74
 8009734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009738:	ab03      	add	r3, sp, #12
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	462a      	mov	r2, r5
 800973e:	4b06      	ldr	r3, [pc, #24]	; (8009758 <_svfiprintf_r+0x1f8>)
 8009740:	a904      	add	r1, sp, #16
 8009742:	4638      	mov	r0, r7
 8009744:	f7fe fb30 	bl	8007da8 <_printf_i>
 8009748:	e7eb      	b.n	8009722 <_svfiprintf_r+0x1c2>
 800974a:	bf00      	nop
 800974c:	0800a50c 	.word	0x0800a50c
 8009750:	0800a516 	.word	0x0800a516
 8009754:	08007891 	.word	0x08007891
 8009758:	080094ab 	.word	0x080094ab
 800975c:	0800a512 	.word	0x0800a512

08009760 <__sfputc_r>:
 8009760:	6893      	ldr	r3, [r2, #8]
 8009762:	3b01      	subs	r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	b410      	push	{r4}
 8009768:	6093      	str	r3, [r2, #8]
 800976a:	da08      	bge.n	800977e <__sfputc_r+0x1e>
 800976c:	6994      	ldr	r4, [r2, #24]
 800976e:	42a3      	cmp	r3, r4
 8009770:	db01      	blt.n	8009776 <__sfputc_r+0x16>
 8009772:	290a      	cmp	r1, #10
 8009774:	d103      	bne.n	800977e <__sfputc_r+0x1e>
 8009776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800977a:	f000 b94b 	b.w	8009a14 <__swbuf_r>
 800977e:	6813      	ldr	r3, [r2, #0]
 8009780:	1c58      	adds	r0, r3, #1
 8009782:	6010      	str	r0, [r2, #0]
 8009784:	7019      	strb	r1, [r3, #0]
 8009786:	4608      	mov	r0, r1
 8009788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800978c:	4770      	bx	lr

0800978e <__sfputs_r>:
 800978e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009790:	4606      	mov	r6, r0
 8009792:	460f      	mov	r7, r1
 8009794:	4614      	mov	r4, r2
 8009796:	18d5      	adds	r5, r2, r3
 8009798:	42ac      	cmp	r4, r5
 800979a:	d101      	bne.n	80097a0 <__sfputs_r+0x12>
 800979c:	2000      	movs	r0, #0
 800979e:	e007      	b.n	80097b0 <__sfputs_r+0x22>
 80097a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a4:	463a      	mov	r2, r7
 80097a6:	4630      	mov	r0, r6
 80097a8:	f7ff ffda 	bl	8009760 <__sfputc_r>
 80097ac:	1c43      	adds	r3, r0, #1
 80097ae:	d1f3      	bne.n	8009798 <__sfputs_r+0xa>
 80097b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097b4 <_vfiprintf_r>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	460d      	mov	r5, r1
 80097ba:	b09d      	sub	sp, #116	; 0x74
 80097bc:	4614      	mov	r4, r2
 80097be:	4698      	mov	r8, r3
 80097c0:	4606      	mov	r6, r0
 80097c2:	b118      	cbz	r0, 80097cc <_vfiprintf_r+0x18>
 80097c4:	6983      	ldr	r3, [r0, #24]
 80097c6:	b90b      	cbnz	r3, 80097cc <_vfiprintf_r+0x18>
 80097c8:	f000 fb06 	bl	8009dd8 <__sinit>
 80097cc:	4b89      	ldr	r3, [pc, #548]	; (80099f4 <_vfiprintf_r+0x240>)
 80097ce:	429d      	cmp	r5, r3
 80097d0:	d11b      	bne.n	800980a <_vfiprintf_r+0x56>
 80097d2:	6875      	ldr	r5, [r6, #4]
 80097d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d6:	07d9      	lsls	r1, r3, #31
 80097d8:	d405      	bmi.n	80097e6 <_vfiprintf_r+0x32>
 80097da:	89ab      	ldrh	r3, [r5, #12]
 80097dc:	059a      	lsls	r2, r3, #22
 80097de:	d402      	bmi.n	80097e6 <_vfiprintf_r+0x32>
 80097e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097e2:	f000 fb97 	bl	8009f14 <__retarget_lock_acquire_recursive>
 80097e6:	89ab      	ldrh	r3, [r5, #12]
 80097e8:	071b      	lsls	r3, r3, #28
 80097ea:	d501      	bpl.n	80097f0 <_vfiprintf_r+0x3c>
 80097ec:	692b      	ldr	r3, [r5, #16]
 80097ee:	b9eb      	cbnz	r3, 800982c <_vfiprintf_r+0x78>
 80097f0:	4629      	mov	r1, r5
 80097f2:	4630      	mov	r0, r6
 80097f4:	f000 f960 	bl	8009ab8 <__swsetup_r>
 80097f8:	b1c0      	cbz	r0, 800982c <_vfiprintf_r+0x78>
 80097fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097fc:	07dc      	lsls	r4, r3, #31
 80097fe:	d50e      	bpl.n	800981e <_vfiprintf_r+0x6a>
 8009800:	f04f 30ff 	mov.w	r0, #4294967295
 8009804:	b01d      	add	sp, #116	; 0x74
 8009806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980a:	4b7b      	ldr	r3, [pc, #492]	; (80099f8 <_vfiprintf_r+0x244>)
 800980c:	429d      	cmp	r5, r3
 800980e:	d101      	bne.n	8009814 <_vfiprintf_r+0x60>
 8009810:	68b5      	ldr	r5, [r6, #8]
 8009812:	e7df      	b.n	80097d4 <_vfiprintf_r+0x20>
 8009814:	4b79      	ldr	r3, [pc, #484]	; (80099fc <_vfiprintf_r+0x248>)
 8009816:	429d      	cmp	r5, r3
 8009818:	bf08      	it	eq
 800981a:	68f5      	ldreq	r5, [r6, #12]
 800981c:	e7da      	b.n	80097d4 <_vfiprintf_r+0x20>
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	0598      	lsls	r0, r3, #22
 8009822:	d4ed      	bmi.n	8009800 <_vfiprintf_r+0x4c>
 8009824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009826:	f000 fb76 	bl	8009f16 <__retarget_lock_release_recursive>
 800982a:	e7e9      	b.n	8009800 <_vfiprintf_r+0x4c>
 800982c:	2300      	movs	r3, #0
 800982e:	9309      	str	r3, [sp, #36]	; 0x24
 8009830:	2320      	movs	r3, #32
 8009832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009836:	f8cd 800c 	str.w	r8, [sp, #12]
 800983a:	2330      	movs	r3, #48	; 0x30
 800983c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a00 <_vfiprintf_r+0x24c>
 8009840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009844:	f04f 0901 	mov.w	r9, #1
 8009848:	4623      	mov	r3, r4
 800984a:	469a      	mov	sl, r3
 800984c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009850:	b10a      	cbz	r2, 8009856 <_vfiprintf_r+0xa2>
 8009852:	2a25      	cmp	r2, #37	; 0x25
 8009854:	d1f9      	bne.n	800984a <_vfiprintf_r+0x96>
 8009856:	ebba 0b04 	subs.w	fp, sl, r4
 800985a:	d00b      	beq.n	8009874 <_vfiprintf_r+0xc0>
 800985c:	465b      	mov	r3, fp
 800985e:	4622      	mov	r2, r4
 8009860:	4629      	mov	r1, r5
 8009862:	4630      	mov	r0, r6
 8009864:	f7ff ff93 	bl	800978e <__sfputs_r>
 8009868:	3001      	adds	r0, #1
 800986a:	f000 80aa 	beq.w	80099c2 <_vfiprintf_r+0x20e>
 800986e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009870:	445a      	add	r2, fp
 8009872:	9209      	str	r2, [sp, #36]	; 0x24
 8009874:	f89a 3000 	ldrb.w	r3, [sl]
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 80a2 	beq.w	80099c2 <_vfiprintf_r+0x20e>
 800987e:	2300      	movs	r3, #0
 8009880:	f04f 32ff 	mov.w	r2, #4294967295
 8009884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009888:	f10a 0a01 	add.w	sl, sl, #1
 800988c:	9304      	str	r3, [sp, #16]
 800988e:	9307      	str	r3, [sp, #28]
 8009890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009894:	931a      	str	r3, [sp, #104]	; 0x68
 8009896:	4654      	mov	r4, sl
 8009898:	2205      	movs	r2, #5
 800989a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989e:	4858      	ldr	r0, [pc, #352]	; (8009a00 <_vfiprintf_r+0x24c>)
 80098a0:	f7f6 fcd6 	bl	8000250 <memchr>
 80098a4:	9a04      	ldr	r2, [sp, #16]
 80098a6:	b9d8      	cbnz	r0, 80098e0 <_vfiprintf_r+0x12c>
 80098a8:	06d1      	lsls	r1, r2, #27
 80098aa:	bf44      	itt	mi
 80098ac:	2320      	movmi	r3, #32
 80098ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b2:	0713      	lsls	r3, r2, #28
 80098b4:	bf44      	itt	mi
 80098b6:	232b      	movmi	r3, #43	; 0x2b
 80098b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098bc:	f89a 3000 	ldrb.w	r3, [sl]
 80098c0:	2b2a      	cmp	r3, #42	; 0x2a
 80098c2:	d015      	beq.n	80098f0 <_vfiprintf_r+0x13c>
 80098c4:	9a07      	ldr	r2, [sp, #28]
 80098c6:	4654      	mov	r4, sl
 80098c8:	2000      	movs	r0, #0
 80098ca:	f04f 0c0a 	mov.w	ip, #10
 80098ce:	4621      	mov	r1, r4
 80098d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098d4:	3b30      	subs	r3, #48	; 0x30
 80098d6:	2b09      	cmp	r3, #9
 80098d8:	d94e      	bls.n	8009978 <_vfiprintf_r+0x1c4>
 80098da:	b1b0      	cbz	r0, 800990a <_vfiprintf_r+0x156>
 80098dc:	9207      	str	r2, [sp, #28]
 80098de:	e014      	b.n	800990a <_vfiprintf_r+0x156>
 80098e0:	eba0 0308 	sub.w	r3, r0, r8
 80098e4:	fa09 f303 	lsl.w	r3, r9, r3
 80098e8:	4313      	orrs	r3, r2
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	46a2      	mov	sl, r4
 80098ee:	e7d2      	b.n	8009896 <_vfiprintf_r+0xe2>
 80098f0:	9b03      	ldr	r3, [sp, #12]
 80098f2:	1d19      	adds	r1, r3, #4
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	9103      	str	r1, [sp, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	bfbb      	ittet	lt
 80098fc:	425b      	neglt	r3, r3
 80098fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009902:	9307      	strge	r3, [sp, #28]
 8009904:	9307      	strlt	r3, [sp, #28]
 8009906:	bfb8      	it	lt
 8009908:	9204      	strlt	r2, [sp, #16]
 800990a:	7823      	ldrb	r3, [r4, #0]
 800990c:	2b2e      	cmp	r3, #46	; 0x2e
 800990e:	d10c      	bne.n	800992a <_vfiprintf_r+0x176>
 8009910:	7863      	ldrb	r3, [r4, #1]
 8009912:	2b2a      	cmp	r3, #42	; 0x2a
 8009914:	d135      	bne.n	8009982 <_vfiprintf_r+0x1ce>
 8009916:	9b03      	ldr	r3, [sp, #12]
 8009918:	1d1a      	adds	r2, r3, #4
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	9203      	str	r2, [sp, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	bfb8      	it	lt
 8009922:	f04f 33ff 	movlt.w	r3, #4294967295
 8009926:	3402      	adds	r4, #2
 8009928:	9305      	str	r3, [sp, #20]
 800992a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a10 <_vfiprintf_r+0x25c>
 800992e:	7821      	ldrb	r1, [r4, #0]
 8009930:	2203      	movs	r2, #3
 8009932:	4650      	mov	r0, sl
 8009934:	f7f6 fc8c 	bl	8000250 <memchr>
 8009938:	b140      	cbz	r0, 800994c <_vfiprintf_r+0x198>
 800993a:	2340      	movs	r3, #64	; 0x40
 800993c:	eba0 000a 	sub.w	r0, r0, sl
 8009940:	fa03 f000 	lsl.w	r0, r3, r0
 8009944:	9b04      	ldr	r3, [sp, #16]
 8009946:	4303      	orrs	r3, r0
 8009948:	3401      	adds	r4, #1
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009950:	482c      	ldr	r0, [pc, #176]	; (8009a04 <_vfiprintf_r+0x250>)
 8009952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009956:	2206      	movs	r2, #6
 8009958:	f7f6 fc7a 	bl	8000250 <memchr>
 800995c:	2800      	cmp	r0, #0
 800995e:	d03f      	beq.n	80099e0 <_vfiprintf_r+0x22c>
 8009960:	4b29      	ldr	r3, [pc, #164]	; (8009a08 <_vfiprintf_r+0x254>)
 8009962:	bb1b      	cbnz	r3, 80099ac <_vfiprintf_r+0x1f8>
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	3307      	adds	r3, #7
 8009968:	f023 0307 	bic.w	r3, r3, #7
 800996c:	3308      	adds	r3, #8
 800996e:	9303      	str	r3, [sp, #12]
 8009970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009972:	443b      	add	r3, r7
 8009974:	9309      	str	r3, [sp, #36]	; 0x24
 8009976:	e767      	b.n	8009848 <_vfiprintf_r+0x94>
 8009978:	fb0c 3202 	mla	r2, ip, r2, r3
 800997c:	460c      	mov	r4, r1
 800997e:	2001      	movs	r0, #1
 8009980:	e7a5      	b.n	80098ce <_vfiprintf_r+0x11a>
 8009982:	2300      	movs	r3, #0
 8009984:	3401      	adds	r4, #1
 8009986:	9305      	str	r3, [sp, #20]
 8009988:	4619      	mov	r1, r3
 800998a:	f04f 0c0a 	mov.w	ip, #10
 800998e:	4620      	mov	r0, r4
 8009990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009994:	3a30      	subs	r2, #48	; 0x30
 8009996:	2a09      	cmp	r2, #9
 8009998:	d903      	bls.n	80099a2 <_vfiprintf_r+0x1ee>
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0c5      	beq.n	800992a <_vfiprintf_r+0x176>
 800999e:	9105      	str	r1, [sp, #20]
 80099a0:	e7c3      	b.n	800992a <_vfiprintf_r+0x176>
 80099a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099a6:	4604      	mov	r4, r0
 80099a8:	2301      	movs	r3, #1
 80099aa:	e7f0      	b.n	800998e <_vfiprintf_r+0x1da>
 80099ac:	ab03      	add	r3, sp, #12
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	462a      	mov	r2, r5
 80099b2:	4b16      	ldr	r3, [pc, #88]	; (8009a0c <_vfiprintf_r+0x258>)
 80099b4:	a904      	add	r1, sp, #16
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7fd ff6a 	bl	8007890 <_printf_float>
 80099bc:	4607      	mov	r7, r0
 80099be:	1c78      	adds	r0, r7, #1
 80099c0:	d1d6      	bne.n	8009970 <_vfiprintf_r+0x1bc>
 80099c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c4:	07d9      	lsls	r1, r3, #31
 80099c6:	d405      	bmi.n	80099d4 <_vfiprintf_r+0x220>
 80099c8:	89ab      	ldrh	r3, [r5, #12]
 80099ca:	059a      	lsls	r2, r3, #22
 80099cc:	d402      	bmi.n	80099d4 <_vfiprintf_r+0x220>
 80099ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099d0:	f000 faa1 	bl	8009f16 <__retarget_lock_release_recursive>
 80099d4:	89ab      	ldrh	r3, [r5, #12]
 80099d6:	065b      	lsls	r3, r3, #25
 80099d8:	f53f af12 	bmi.w	8009800 <_vfiprintf_r+0x4c>
 80099dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099de:	e711      	b.n	8009804 <_vfiprintf_r+0x50>
 80099e0:	ab03      	add	r3, sp, #12
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	462a      	mov	r2, r5
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <_vfiprintf_r+0x258>)
 80099e8:	a904      	add	r1, sp, #16
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7fe f9dc 	bl	8007da8 <_printf_i>
 80099f0:	e7e4      	b.n	80099bc <_vfiprintf_r+0x208>
 80099f2:	bf00      	nop
 80099f4:	0800a540 	.word	0x0800a540
 80099f8:	0800a560 	.word	0x0800a560
 80099fc:	0800a520 	.word	0x0800a520
 8009a00:	0800a50c 	.word	0x0800a50c
 8009a04:	0800a516 	.word	0x0800a516
 8009a08:	08007891 	.word	0x08007891
 8009a0c:	0800978f 	.word	0x0800978f
 8009a10:	0800a512 	.word	0x0800a512

08009a14 <__swbuf_r>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	460e      	mov	r6, r1
 8009a18:	4614      	mov	r4, r2
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	b118      	cbz	r0, 8009a26 <__swbuf_r+0x12>
 8009a1e:	6983      	ldr	r3, [r0, #24]
 8009a20:	b90b      	cbnz	r3, 8009a26 <__swbuf_r+0x12>
 8009a22:	f000 f9d9 	bl	8009dd8 <__sinit>
 8009a26:	4b21      	ldr	r3, [pc, #132]	; (8009aac <__swbuf_r+0x98>)
 8009a28:	429c      	cmp	r4, r3
 8009a2a:	d12b      	bne.n	8009a84 <__swbuf_r+0x70>
 8009a2c:	686c      	ldr	r4, [r5, #4]
 8009a2e:	69a3      	ldr	r3, [r4, #24]
 8009a30:	60a3      	str	r3, [r4, #8]
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	071a      	lsls	r2, r3, #28
 8009a36:	d52f      	bpl.n	8009a98 <__swbuf_r+0x84>
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	b36b      	cbz	r3, 8009a98 <__swbuf_r+0x84>
 8009a3c:	6923      	ldr	r3, [r4, #16]
 8009a3e:	6820      	ldr	r0, [r4, #0]
 8009a40:	1ac0      	subs	r0, r0, r3
 8009a42:	6963      	ldr	r3, [r4, #20]
 8009a44:	b2f6      	uxtb	r6, r6
 8009a46:	4283      	cmp	r3, r0
 8009a48:	4637      	mov	r7, r6
 8009a4a:	dc04      	bgt.n	8009a56 <__swbuf_r+0x42>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f000 f92e 	bl	8009cb0 <_fflush_r>
 8009a54:	bb30      	cbnz	r0, 8009aa4 <__swbuf_r+0x90>
 8009a56:	68a3      	ldr	r3, [r4, #8]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	60a3      	str	r3, [r4, #8]
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	6022      	str	r2, [r4, #0]
 8009a62:	701e      	strb	r6, [r3, #0]
 8009a64:	6963      	ldr	r3, [r4, #20]
 8009a66:	3001      	adds	r0, #1
 8009a68:	4283      	cmp	r3, r0
 8009a6a:	d004      	beq.n	8009a76 <__swbuf_r+0x62>
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	07db      	lsls	r3, r3, #31
 8009a70:	d506      	bpl.n	8009a80 <__swbuf_r+0x6c>
 8009a72:	2e0a      	cmp	r6, #10
 8009a74:	d104      	bne.n	8009a80 <__swbuf_r+0x6c>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f000 f919 	bl	8009cb0 <_fflush_r>
 8009a7e:	b988      	cbnz	r0, 8009aa4 <__swbuf_r+0x90>
 8009a80:	4638      	mov	r0, r7
 8009a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a84:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <__swbuf_r+0x9c>)
 8009a86:	429c      	cmp	r4, r3
 8009a88:	d101      	bne.n	8009a8e <__swbuf_r+0x7a>
 8009a8a:	68ac      	ldr	r4, [r5, #8]
 8009a8c:	e7cf      	b.n	8009a2e <__swbuf_r+0x1a>
 8009a8e:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <__swbuf_r+0xa0>)
 8009a90:	429c      	cmp	r4, r3
 8009a92:	bf08      	it	eq
 8009a94:	68ec      	ldreq	r4, [r5, #12]
 8009a96:	e7ca      	b.n	8009a2e <__swbuf_r+0x1a>
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f000 f80c 	bl	8009ab8 <__swsetup_r>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d0cb      	beq.n	8009a3c <__swbuf_r+0x28>
 8009aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8009aa8:	e7ea      	b.n	8009a80 <__swbuf_r+0x6c>
 8009aaa:	bf00      	nop
 8009aac:	0800a540 	.word	0x0800a540
 8009ab0:	0800a560 	.word	0x0800a560
 8009ab4:	0800a520 	.word	0x0800a520

08009ab8 <__swsetup_r>:
 8009ab8:	4b32      	ldr	r3, [pc, #200]	; (8009b84 <__swsetup_r+0xcc>)
 8009aba:	b570      	push	{r4, r5, r6, lr}
 8009abc:	681d      	ldr	r5, [r3, #0]
 8009abe:	4606      	mov	r6, r0
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	b125      	cbz	r5, 8009ace <__swsetup_r+0x16>
 8009ac4:	69ab      	ldr	r3, [r5, #24]
 8009ac6:	b913      	cbnz	r3, 8009ace <__swsetup_r+0x16>
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f000 f985 	bl	8009dd8 <__sinit>
 8009ace:	4b2e      	ldr	r3, [pc, #184]	; (8009b88 <__swsetup_r+0xd0>)
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	d10f      	bne.n	8009af4 <__swsetup_r+0x3c>
 8009ad4:	686c      	ldr	r4, [r5, #4]
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009adc:	0719      	lsls	r1, r3, #28
 8009ade:	d42c      	bmi.n	8009b3a <__swsetup_r+0x82>
 8009ae0:	06dd      	lsls	r5, r3, #27
 8009ae2:	d411      	bmi.n	8009b08 <__swsetup_r+0x50>
 8009ae4:	2309      	movs	r3, #9
 8009ae6:	6033      	str	r3, [r6, #0]
 8009ae8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009aec:	81a3      	strh	r3, [r4, #12]
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295
 8009af2:	e03e      	b.n	8009b72 <__swsetup_r+0xba>
 8009af4:	4b25      	ldr	r3, [pc, #148]	; (8009b8c <__swsetup_r+0xd4>)
 8009af6:	429c      	cmp	r4, r3
 8009af8:	d101      	bne.n	8009afe <__swsetup_r+0x46>
 8009afa:	68ac      	ldr	r4, [r5, #8]
 8009afc:	e7eb      	b.n	8009ad6 <__swsetup_r+0x1e>
 8009afe:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <__swsetup_r+0xd8>)
 8009b00:	429c      	cmp	r4, r3
 8009b02:	bf08      	it	eq
 8009b04:	68ec      	ldreq	r4, [r5, #12]
 8009b06:	e7e6      	b.n	8009ad6 <__swsetup_r+0x1e>
 8009b08:	0758      	lsls	r0, r3, #29
 8009b0a:	d512      	bpl.n	8009b32 <__swsetup_r+0x7a>
 8009b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b0e:	b141      	cbz	r1, 8009b22 <__swsetup_r+0x6a>
 8009b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b14:	4299      	cmp	r1, r3
 8009b16:	d002      	beq.n	8009b1e <__swsetup_r+0x66>
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f7fd fd7d 	bl	8007618 <_free_r>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	6363      	str	r3, [r4, #52]	; 0x34
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	6063      	str	r3, [r4, #4]
 8009b2e:	6923      	ldr	r3, [r4, #16]
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	f043 0308 	orr.w	r3, r3, #8
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	b94b      	cbnz	r3, 8009b52 <__swsetup_r+0x9a>
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b48:	d003      	beq.n	8009b52 <__swsetup_r+0x9a>
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f000 fa07 	bl	8009f60 <__smakebuf_r>
 8009b52:	89a0      	ldrh	r0, [r4, #12]
 8009b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b58:	f010 0301 	ands.w	r3, r0, #1
 8009b5c:	d00a      	beq.n	8009b74 <__swsetup_r+0xbc>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60a3      	str	r3, [r4, #8]
 8009b62:	6963      	ldr	r3, [r4, #20]
 8009b64:	425b      	negs	r3, r3
 8009b66:	61a3      	str	r3, [r4, #24]
 8009b68:	6923      	ldr	r3, [r4, #16]
 8009b6a:	b943      	cbnz	r3, 8009b7e <__swsetup_r+0xc6>
 8009b6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b70:	d1ba      	bne.n	8009ae8 <__swsetup_r+0x30>
 8009b72:	bd70      	pop	{r4, r5, r6, pc}
 8009b74:	0781      	lsls	r1, r0, #30
 8009b76:	bf58      	it	pl
 8009b78:	6963      	ldrpl	r3, [r4, #20]
 8009b7a:	60a3      	str	r3, [r4, #8]
 8009b7c:	e7f4      	b.n	8009b68 <__swsetup_r+0xb0>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	e7f7      	b.n	8009b72 <__swsetup_r+0xba>
 8009b82:	bf00      	nop
 8009b84:	20000100 	.word	0x20000100
 8009b88:	0800a540 	.word	0x0800a540
 8009b8c:	0800a560 	.word	0x0800a560
 8009b90:	0800a520 	.word	0x0800a520

08009b94 <abort>:
 8009b94:	b508      	push	{r3, lr}
 8009b96:	2006      	movs	r0, #6
 8009b98:	f000 fa7e 	bl	800a098 <raise>
 8009b9c:	2001      	movs	r0, #1
 8009b9e:	f7f7 fe3f 	bl	8001820 <_exit>
	...

08009ba4 <__sflush_r>:
 8009ba4:	898a      	ldrh	r2, [r1, #12]
 8009ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009baa:	4605      	mov	r5, r0
 8009bac:	0710      	lsls	r0, r2, #28
 8009bae:	460c      	mov	r4, r1
 8009bb0:	d458      	bmi.n	8009c64 <__sflush_r+0xc0>
 8009bb2:	684b      	ldr	r3, [r1, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dc05      	bgt.n	8009bc4 <__sflush_r+0x20>
 8009bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dc02      	bgt.n	8009bc4 <__sflush_r+0x20>
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bc6:	2e00      	cmp	r6, #0
 8009bc8:	d0f9      	beq.n	8009bbe <__sflush_r+0x1a>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bd0:	682f      	ldr	r7, [r5, #0]
 8009bd2:	602b      	str	r3, [r5, #0]
 8009bd4:	d032      	beq.n	8009c3c <__sflush_r+0x98>
 8009bd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	075a      	lsls	r2, r3, #29
 8009bdc:	d505      	bpl.n	8009bea <__sflush_r+0x46>
 8009bde:	6863      	ldr	r3, [r4, #4]
 8009be0:	1ac0      	subs	r0, r0, r3
 8009be2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009be4:	b10b      	cbz	r3, 8009bea <__sflush_r+0x46>
 8009be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009be8:	1ac0      	subs	r0, r0, r3
 8009bea:	2300      	movs	r3, #0
 8009bec:	4602      	mov	r2, r0
 8009bee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bf0:	6a21      	ldr	r1, [r4, #32]
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	47b0      	blx	r6
 8009bf6:	1c43      	adds	r3, r0, #1
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	d106      	bne.n	8009c0a <__sflush_r+0x66>
 8009bfc:	6829      	ldr	r1, [r5, #0]
 8009bfe:	291d      	cmp	r1, #29
 8009c00:	d82c      	bhi.n	8009c5c <__sflush_r+0xb8>
 8009c02:	4a2a      	ldr	r2, [pc, #168]	; (8009cac <__sflush_r+0x108>)
 8009c04:	40ca      	lsrs	r2, r1
 8009c06:	07d6      	lsls	r6, r2, #31
 8009c08:	d528      	bpl.n	8009c5c <__sflush_r+0xb8>
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	6062      	str	r2, [r4, #4]
 8009c0e:	04d9      	lsls	r1, r3, #19
 8009c10:	6922      	ldr	r2, [r4, #16]
 8009c12:	6022      	str	r2, [r4, #0]
 8009c14:	d504      	bpl.n	8009c20 <__sflush_r+0x7c>
 8009c16:	1c42      	adds	r2, r0, #1
 8009c18:	d101      	bne.n	8009c1e <__sflush_r+0x7a>
 8009c1a:	682b      	ldr	r3, [r5, #0]
 8009c1c:	b903      	cbnz	r3, 8009c20 <__sflush_r+0x7c>
 8009c1e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c22:	602f      	str	r7, [r5, #0]
 8009c24:	2900      	cmp	r1, #0
 8009c26:	d0ca      	beq.n	8009bbe <__sflush_r+0x1a>
 8009c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c2c:	4299      	cmp	r1, r3
 8009c2e:	d002      	beq.n	8009c36 <__sflush_r+0x92>
 8009c30:	4628      	mov	r0, r5
 8009c32:	f7fd fcf1 	bl	8007618 <_free_r>
 8009c36:	2000      	movs	r0, #0
 8009c38:	6360      	str	r0, [r4, #52]	; 0x34
 8009c3a:	e7c1      	b.n	8009bc0 <__sflush_r+0x1c>
 8009c3c:	6a21      	ldr	r1, [r4, #32]
 8009c3e:	2301      	movs	r3, #1
 8009c40:	4628      	mov	r0, r5
 8009c42:	47b0      	blx	r6
 8009c44:	1c41      	adds	r1, r0, #1
 8009c46:	d1c7      	bne.n	8009bd8 <__sflush_r+0x34>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0c4      	beq.n	8009bd8 <__sflush_r+0x34>
 8009c4e:	2b1d      	cmp	r3, #29
 8009c50:	d001      	beq.n	8009c56 <__sflush_r+0xb2>
 8009c52:	2b16      	cmp	r3, #22
 8009c54:	d101      	bne.n	8009c5a <__sflush_r+0xb6>
 8009c56:	602f      	str	r7, [r5, #0]
 8009c58:	e7b1      	b.n	8009bbe <__sflush_r+0x1a>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c60:	81a3      	strh	r3, [r4, #12]
 8009c62:	e7ad      	b.n	8009bc0 <__sflush_r+0x1c>
 8009c64:	690f      	ldr	r7, [r1, #16]
 8009c66:	2f00      	cmp	r7, #0
 8009c68:	d0a9      	beq.n	8009bbe <__sflush_r+0x1a>
 8009c6a:	0793      	lsls	r3, r2, #30
 8009c6c:	680e      	ldr	r6, [r1, #0]
 8009c6e:	bf08      	it	eq
 8009c70:	694b      	ldreq	r3, [r1, #20]
 8009c72:	600f      	str	r7, [r1, #0]
 8009c74:	bf18      	it	ne
 8009c76:	2300      	movne	r3, #0
 8009c78:	eba6 0807 	sub.w	r8, r6, r7
 8009c7c:	608b      	str	r3, [r1, #8]
 8009c7e:	f1b8 0f00 	cmp.w	r8, #0
 8009c82:	dd9c      	ble.n	8009bbe <__sflush_r+0x1a>
 8009c84:	6a21      	ldr	r1, [r4, #32]
 8009c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c88:	4643      	mov	r3, r8
 8009c8a:	463a      	mov	r2, r7
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b0      	blx	r6
 8009c90:	2800      	cmp	r0, #0
 8009c92:	dc06      	bgt.n	8009ca2 <__sflush_r+0xfe>
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	e78e      	b.n	8009bc0 <__sflush_r+0x1c>
 8009ca2:	4407      	add	r7, r0
 8009ca4:	eba8 0800 	sub.w	r8, r8, r0
 8009ca8:	e7e9      	b.n	8009c7e <__sflush_r+0xda>
 8009caa:	bf00      	nop
 8009cac:	20400001 	.word	0x20400001

08009cb0 <_fflush_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	690b      	ldr	r3, [r1, #16]
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	b913      	cbnz	r3, 8009cc0 <_fflush_r+0x10>
 8009cba:	2500      	movs	r5, #0
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	b118      	cbz	r0, 8009cca <_fflush_r+0x1a>
 8009cc2:	6983      	ldr	r3, [r0, #24]
 8009cc4:	b90b      	cbnz	r3, 8009cca <_fflush_r+0x1a>
 8009cc6:	f000 f887 	bl	8009dd8 <__sinit>
 8009cca:	4b14      	ldr	r3, [pc, #80]	; (8009d1c <_fflush_r+0x6c>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	d11b      	bne.n	8009d08 <_fflush_r+0x58>
 8009cd0:	686c      	ldr	r4, [r5, #4]
 8009cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0ef      	beq.n	8009cba <_fflush_r+0xa>
 8009cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cdc:	07d0      	lsls	r0, r2, #31
 8009cde:	d404      	bmi.n	8009cea <_fflush_r+0x3a>
 8009ce0:	0599      	lsls	r1, r3, #22
 8009ce2:	d402      	bmi.n	8009cea <_fflush_r+0x3a>
 8009ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ce6:	f000 f915 	bl	8009f14 <__retarget_lock_acquire_recursive>
 8009cea:	4628      	mov	r0, r5
 8009cec:	4621      	mov	r1, r4
 8009cee:	f7ff ff59 	bl	8009ba4 <__sflush_r>
 8009cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cf4:	07da      	lsls	r2, r3, #31
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	d4e0      	bmi.n	8009cbc <_fflush_r+0xc>
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	059b      	lsls	r3, r3, #22
 8009cfe:	d4dd      	bmi.n	8009cbc <_fflush_r+0xc>
 8009d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d02:	f000 f908 	bl	8009f16 <__retarget_lock_release_recursive>
 8009d06:	e7d9      	b.n	8009cbc <_fflush_r+0xc>
 8009d08:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <_fflush_r+0x70>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	d101      	bne.n	8009d12 <_fflush_r+0x62>
 8009d0e:	68ac      	ldr	r4, [r5, #8]
 8009d10:	e7df      	b.n	8009cd2 <_fflush_r+0x22>
 8009d12:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <_fflush_r+0x74>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	bf08      	it	eq
 8009d18:	68ec      	ldreq	r4, [r5, #12]
 8009d1a:	e7da      	b.n	8009cd2 <_fflush_r+0x22>
 8009d1c:	0800a540 	.word	0x0800a540
 8009d20:	0800a560 	.word	0x0800a560
 8009d24:	0800a520 	.word	0x0800a520

08009d28 <std>:
 8009d28:	2300      	movs	r3, #0
 8009d2a:	b510      	push	{r4, lr}
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d36:	6083      	str	r3, [r0, #8]
 8009d38:	8181      	strh	r1, [r0, #12]
 8009d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d3c:	81c2      	strh	r2, [r0, #14]
 8009d3e:	6183      	str	r3, [r0, #24]
 8009d40:	4619      	mov	r1, r3
 8009d42:	2208      	movs	r2, #8
 8009d44:	305c      	adds	r0, #92	; 0x5c
 8009d46:	f7fd fc5f 	bl	8007608 <memset>
 8009d4a:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <std+0x38>)
 8009d4c:	6263      	str	r3, [r4, #36]	; 0x24
 8009d4e:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <std+0x3c>)
 8009d50:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d52:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <std+0x40>)
 8009d54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d56:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <std+0x44>)
 8009d58:	6224      	str	r4, [r4, #32]
 8009d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8009d5c:	bd10      	pop	{r4, pc}
 8009d5e:	bf00      	nop
 8009d60:	0800a0d1 	.word	0x0800a0d1
 8009d64:	0800a0f3 	.word	0x0800a0f3
 8009d68:	0800a12b 	.word	0x0800a12b
 8009d6c:	0800a14f 	.word	0x0800a14f

08009d70 <_cleanup_r>:
 8009d70:	4901      	ldr	r1, [pc, #4]	; (8009d78 <_cleanup_r+0x8>)
 8009d72:	f000 b8af 	b.w	8009ed4 <_fwalk_reent>
 8009d76:	bf00      	nop
 8009d78:	08009cb1 	.word	0x08009cb1

08009d7c <__sfmoreglue>:
 8009d7c:	b570      	push	{r4, r5, r6, lr}
 8009d7e:	1e4a      	subs	r2, r1, #1
 8009d80:	2568      	movs	r5, #104	; 0x68
 8009d82:	4355      	muls	r5, r2
 8009d84:	460e      	mov	r6, r1
 8009d86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d8a:	f7fd fc95 	bl	80076b8 <_malloc_r>
 8009d8e:	4604      	mov	r4, r0
 8009d90:	b140      	cbz	r0, 8009da4 <__sfmoreglue+0x28>
 8009d92:	2100      	movs	r1, #0
 8009d94:	e9c0 1600 	strd	r1, r6, [r0]
 8009d98:	300c      	adds	r0, #12
 8009d9a:	60a0      	str	r0, [r4, #8]
 8009d9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009da0:	f7fd fc32 	bl	8007608 <memset>
 8009da4:	4620      	mov	r0, r4
 8009da6:	bd70      	pop	{r4, r5, r6, pc}

08009da8 <__sfp_lock_acquire>:
 8009da8:	4801      	ldr	r0, [pc, #4]	; (8009db0 <__sfp_lock_acquire+0x8>)
 8009daa:	f000 b8b3 	b.w	8009f14 <__retarget_lock_acquire_recursive>
 8009dae:	bf00      	nop
 8009db0:	20000798 	.word	0x20000798

08009db4 <__sfp_lock_release>:
 8009db4:	4801      	ldr	r0, [pc, #4]	; (8009dbc <__sfp_lock_release+0x8>)
 8009db6:	f000 b8ae 	b.w	8009f16 <__retarget_lock_release_recursive>
 8009dba:	bf00      	nop
 8009dbc:	20000798 	.word	0x20000798

08009dc0 <__sinit_lock_acquire>:
 8009dc0:	4801      	ldr	r0, [pc, #4]	; (8009dc8 <__sinit_lock_acquire+0x8>)
 8009dc2:	f000 b8a7 	b.w	8009f14 <__retarget_lock_acquire_recursive>
 8009dc6:	bf00      	nop
 8009dc8:	20000793 	.word	0x20000793

08009dcc <__sinit_lock_release>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	; (8009dd4 <__sinit_lock_release+0x8>)
 8009dce:	f000 b8a2 	b.w	8009f16 <__retarget_lock_release_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	20000793 	.word	0x20000793

08009dd8 <__sinit>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	4604      	mov	r4, r0
 8009ddc:	f7ff fff0 	bl	8009dc0 <__sinit_lock_acquire>
 8009de0:	69a3      	ldr	r3, [r4, #24]
 8009de2:	b11b      	cbz	r3, 8009dec <__sinit+0x14>
 8009de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de8:	f7ff bff0 	b.w	8009dcc <__sinit_lock_release>
 8009dec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009df0:	6523      	str	r3, [r4, #80]	; 0x50
 8009df2:	4b13      	ldr	r3, [pc, #76]	; (8009e40 <__sinit+0x68>)
 8009df4:	4a13      	ldr	r2, [pc, #76]	; (8009e44 <__sinit+0x6c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009dfa:	42a3      	cmp	r3, r4
 8009dfc:	bf04      	itt	eq
 8009dfe:	2301      	moveq	r3, #1
 8009e00:	61a3      	streq	r3, [r4, #24]
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 f820 	bl	8009e48 <__sfp>
 8009e08:	6060      	str	r0, [r4, #4]
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 f81c 	bl	8009e48 <__sfp>
 8009e10:	60a0      	str	r0, [r4, #8]
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 f818 	bl	8009e48 <__sfp>
 8009e18:	2200      	movs	r2, #0
 8009e1a:	60e0      	str	r0, [r4, #12]
 8009e1c:	2104      	movs	r1, #4
 8009e1e:	6860      	ldr	r0, [r4, #4]
 8009e20:	f7ff ff82 	bl	8009d28 <std>
 8009e24:	68a0      	ldr	r0, [r4, #8]
 8009e26:	2201      	movs	r2, #1
 8009e28:	2109      	movs	r1, #9
 8009e2a:	f7ff ff7d 	bl	8009d28 <std>
 8009e2e:	68e0      	ldr	r0, [r4, #12]
 8009e30:	2202      	movs	r2, #2
 8009e32:	2112      	movs	r1, #18
 8009e34:	f7ff ff78 	bl	8009d28 <std>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	61a3      	str	r3, [r4, #24]
 8009e3c:	e7d2      	b.n	8009de4 <__sinit+0xc>
 8009e3e:	bf00      	nop
 8009e40:	0800a2a8 	.word	0x0800a2a8
 8009e44:	08009d71 	.word	0x08009d71

08009e48 <__sfp>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	f7ff ffac 	bl	8009da8 <__sfp_lock_acquire>
 8009e50:	4b1e      	ldr	r3, [pc, #120]	; (8009ecc <__sfp+0x84>)
 8009e52:	681e      	ldr	r6, [r3, #0]
 8009e54:	69b3      	ldr	r3, [r6, #24]
 8009e56:	b913      	cbnz	r3, 8009e5e <__sfp+0x16>
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7ff ffbd 	bl	8009dd8 <__sinit>
 8009e5e:	3648      	adds	r6, #72	; 0x48
 8009e60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	d503      	bpl.n	8009e70 <__sfp+0x28>
 8009e68:	6833      	ldr	r3, [r6, #0]
 8009e6a:	b30b      	cbz	r3, 8009eb0 <__sfp+0x68>
 8009e6c:	6836      	ldr	r6, [r6, #0]
 8009e6e:	e7f7      	b.n	8009e60 <__sfp+0x18>
 8009e70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e74:	b9d5      	cbnz	r5, 8009eac <__sfp+0x64>
 8009e76:	4b16      	ldr	r3, [pc, #88]	; (8009ed0 <__sfp+0x88>)
 8009e78:	60e3      	str	r3, [r4, #12]
 8009e7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e7e:	6665      	str	r5, [r4, #100]	; 0x64
 8009e80:	f000 f847 	bl	8009f12 <__retarget_lock_init_recursive>
 8009e84:	f7ff ff96 	bl	8009db4 <__sfp_lock_release>
 8009e88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e90:	6025      	str	r5, [r4, #0]
 8009e92:	61a5      	str	r5, [r4, #24]
 8009e94:	2208      	movs	r2, #8
 8009e96:	4629      	mov	r1, r5
 8009e98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e9c:	f7fd fbb4 	bl	8007608 <memset>
 8009ea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eac:	3468      	adds	r4, #104	; 0x68
 8009eae:	e7d9      	b.n	8009e64 <__sfp+0x1c>
 8009eb0:	2104      	movs	r1, #4
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	f7ff ff62 	bl	8009d7c <__sfmoreglue>
 8009eb8:	4604      	mov	r4, r0
 8009eba:	6030      	str	r0, [r6, #0]
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d1d5      	bne.n	8009e6c <__sfp+0x24>
 8009ec0:	f7ff ff78 	bl	8009db4 <__sfp_lock_release>
 8009ec4:	230c      	movs	r3, #12
 8009ec6:	603b      	str	r3, [r7, #0]
 8009ec8:	e7ee      	b.n	8009ea8 <__sfp+0x60>
 8009eca:	bf00      	nop
 8009ecc:	0800a2a8 	.word	0x0800a2a8
 8009ed0:	ffff0001 	.word	0xffff0001

08009ed4 <_fwalk_reent>:
 8009ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed8:	4606      	mov	r6, r0
 8009eda:	4688      	mov	r8, r1
 8009edc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ee0:	2700      	movs	r7, #0
 8009ee2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ee6:	f1b9 0901 	subs.w	r9, r9, #1
 8009eea:	d505      	bpl.n	8009ef8 <_fwalk_reent+0x24>
 8009eec:	6824      	ldr	r4, [r4, #0]
 8009eee:	2c00      	cmp	r4, #0
 8009ef0:	d1f7      	bne.n	8009ee2 <_fwalk_reent+0xe>
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef8:	89ab      	ldrh	r3, [r5, #12]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d907      	bls.n	8009f0e <_fwalk_reent+0x3a>
 8009efe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f02:	3301      	adds	r3, #1
 8009f04:	d003      	beq.n	8009f0e <_fwalk_reent+0x3a>
 8009f06:	4629      	mov	r1, r5
 8009f08:	4630      	mov	r0, r6
 8009f0a:	47c0      	blx	r8
 8009f0c:	4307      	orrs	r7, r0
 8009f0e:	3568      	adds	r5, #104	; 0x68
 8009f10:	e7e9      	b.n	8009ee6 <_fwalk_reent+0x12>

08009f12 <__retarget_lock_init_recursive>:
 8009f12:	4770      	bx	lr

08009f14 <__retarget_lock_acquire_recursive>:
 8009f14:	4770      	bx	lr

08009f16 <__retarget_lock_release_recursive>:
 8009f16:	4770      	bx	lr

08009f18 <__swhatbuf_r>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f20:	2900      	cmp	r1, #0
 8009f22:	b096      	sub	sp, #88	; 0x58
 8009f24:	4614      	mov	r4, r2
 8009f26:	461d      	mov	r5, r3
 8009f28:	da07      	bge.n	8009f3a <__swhatbuf_r+0x22>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	89b3      	ldrh	r3, [r6, #12]
 8009f30:	061a      	lsls	r2, r3, #24
 8009f32:	d410      	bmi.n	8009f56 <__swhatbuf_r+0x3e>
 8009f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f38:	e00e      	b.n	8009f58 <__swhatbuf_r+0x40>
 8009f3a:	466a      	mov	r2, sp
 8009f3c:	f000 f93a 	bl	800a1b4 <_fstat_r>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	dbf2      	blt.n	8009f2a <__swhatbuf_r+0x12>
 8009f44:	9a01      	ldr	r2, [sp, #4]
 8009f46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f4e:	425a      	negs	r2, r3
 8009f50:	415a      	adcs	r2, r3
 8009f52:	602a      	str	r2, [r5, #0]
 8009f54:	e7ee      	b.n	8009f34 <__swhatbuf_r+0x1c>
 8009f56:	2340      	movs	r3, #64	; 0x40
 8009f58:	2000      	movs	r0, #0
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	b016      	add	sp, #88	; 0x58
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}

08009f60 <__smakebuf_r>:
 8009f60:	898b      	ldrh	r3, [r1, #12]
 8009f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f64:	079d      	lsls	r5, r3, #30
 8009f66:	4606      	mov	r6, r0
 8009f68:	460c      	mov	r4, r1
 8009f6a:	d507      	bpl.n	8009f7c <__smakebuf_r+0x1c>
 8009f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	6123      	str	r3, [r4, #16]
 8009f74:	2301      	movs	r3, #1
 8009f76:	6163      	str	r3, [r4, #20]
 8009f78:	b002      	add	sp, #8
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	ab01      	add	r3, sp, #4
 8009f7e:	466a      	mov	r2, sp
 8009f80:	f7ff ffca 	bl	8009f18 <__swhatbuf_r>
 8009f84:	9900      	ldr	r1, [sp, #0]
 8009f86:	4605      	mov	r5, r0
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7fd fb95 	bl	80076b8 <_malloc_r>
 8009f8e:	b948      	cbnz	r0, 8009fa4 <__smakebuf_r+0x44>
 8009f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f94:	059a      	lsls	r2, r3, #22
 8009f96:	d4ef      	bmi.n	8009f78 <__smakebuf_r+0x18>
 8009f98:	f023 0303 	bic.w	r3, r3, #3
 8009f9c:	f043 0302 	orr.w	r3, r3, #2
 8009fa0:	81a3      	strh	r3, [r4, #12]
 8009fa2:	e7e3      	b.n	8009f6c <__smakebuf_r+0xc>
 8009fa4:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <__smakebuf_r+0x7c>)
 8009fa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	6020      	str	r0, [r4, #0]
 8009fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	9b00      	ldr	r3, [sp, #0]
 8009fb4:	6163      	str	r3, [r4, #20]
 8009fb6:	9b01      	ldr	r3, [sp, #4]
 8009fb8:	6120      	str	r0, [r4, #16]
 8009fba:	b15b      	cbz	r3, 8009fd4 <__smakebuf_r+0x74>
 8009fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f000 f909 	bl	800a1d8 <_isatty_r>
 8009fc6:	b128      	cbz	r0, 8009fd4 <__smakebuf_r+0x74>
 8009fc8:	89a3      	ldrh	r3, [r4, #12]
 8009fca:	f023 0303 	bic.w	r3, r3, #3
 8009fce:	f043 0301 	orr.w	r3, r3, #1
 8009fd2:	81a3      	strh	r3, [r4, #12]
 8009fd4:	89a0      	ldrh	r0, [r4, #12]
 8009fd6:	4305      	orrs	r5, r0
 8009fd8:	81a5      	strh	r5, [r4, #12]
 8009fda:	e7cd      	b.n	8009f78 <__smakebuf_r+0x18>
 8009fdc:	08009d71 	.word	0x08009d71

08009fe0 <__ascii_mbtowc>:
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	b901      	cbnz	r1, 8009fe6 <__ascii_mbtowc+0x6>
 8009fe4:	a901      	add	r1, sp, #4
 8009fe6:	b142      	cbz	r2, 8009ffa <__ascii_mbtowc+0x1a>
 8009fe8:	b14b      	cbz	r3, 8009ffe <__ascii_mbtowc+0x1e>
 8009fea:	7813      	ldrb	r3, [r2, #0]
 8009fec:	600b      	str	r3, [r1, #0]
 8009fee:	7812      	ldrb	r2, [r2, #0]
 8009ff0:	1e10      	subs	r0, r2, #0
 8009ff2:	bf18      	it	ne
 8009ff4:	2001      	movne	r0, #1
 8009ff6:	b002      	add	sp, #8
 8009ff8:	4770      	bx	lr
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	e7fb      	b.n	8009ff6 <__ascii_mbtowc+0x16>
 8009ffe:	f06f 0001 	mvn.w	r0, #1
 800a002:	e7f8      	b.n	8009ff6 <__ascii_mbtowc+0x16>

0800a004 <memmove>:
 800a004:	4288      	cmp	r0, r1
 800a006:	b510      	push	{r4, lr}
 800a008:	eb01 0402 	add.w	r4, r1, r2
 800a00c:	d902      	bls.n	800a014 <memmove+0x10>
 800a00e:	4284      	cmp	r4, r0
 800a010:	4623      	mov	r3, r4
 800a012:	d807      	bhi.n	800a024 <memmove+0x20>
 800a014:	1e43      	subs	r3, r0, #1
 800a016:	42a1      	cmp	r1, r4
 800a018:	d008      	beq.n	800a02c <memmove+0x28>
 800a01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a022:	e7f8      	b.n	800a016 <memmove+0x12>
 800a024:	4402      	add	r2, r0
 800a026:	4601      	mov	r1, r0
 800a028:	428a      	cmp	r2, r1
 800a02a:	d100      	bne.n	800a02e <memmove+0x2a>
 800a02c:	bd10      	pop	{r4, pc}
 800a02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a036:	e7f7      	b.n	800a028 <memmove+0x24>

0800a038 <_malloc_usable_size_r>:
 800a038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a03c:	1f18      	subs	r0, r3, #4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bfbc      	itt	lt
 800a042:	580b      	ldrlt	r3, [r1, r0]
 800a044:	18c0      	addlt	r0, r0, r3
 800a046:	4770      	bx	lr

0800a048 <_raise_r>:
 800a048:	291f      	cmp	r1, #31
 800a04a:	b538      	push	{r3, r4, r5, lr}
 800a04c:	4604      	mov	r4, r0
 800a04e:	460d      	mov	r5, r1
 800a050:	d904      	bls.n	800a05c <_raise_r+0x14>
 800a052:	2316      	movs	r3, #22
 800a054:	6003      	str	r3, [r0, #0]
 800a056:	f04f 30ff 	mov.w	r0, #4294967295
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a05e:	b112      	cbz	r2, 800a066 <_raise_r+0x1e>
 800a060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a064:	b94b      	cbnz	r3, 800a07a <_raise_r+0x32>
 800a066:	4620      	mov	r0, r4
 800a068:	f000 f830 	bl	800a0cc <_getpid_r>
 800a06c:	462a      	mov	r2, r5
 800a06e:	4601      	mov	r1, r0
 800a070:	4620      	mov	r0, r4
 800a072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a076:	f000 b817 	b.w	800a0a8 <_kill_r>
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d00a      	beq.n	800a094 <_raise_r+0x4c>
 800a07e:	1c59      	adds	r1, r3, #1
 800a080:	d103      	bne.n	800a08a <_raise_r+0x42>
 800a082:	2316      	movs	r3, #22
 800a084:	6003      	str	r3, [r0, #0]
 800a086:	2001      	movs	r0, #1
 800a088:	e7e7      	b.n	800a05a <_raise_r+0x12>
 800a08a:	2400      	movs	r4, #0
 800a08c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a090:	4628      	mov	r0, r5
 800a092:	4798      	blx	r3
 800a094:	2000      	movs	r0, #0
 800a096:	e7e0      	b.n	800a05a <_raise_r+0x12>

0800a098 <raise>:
 800a098:	4b02      	ldr	r3, [pc, #8]	; (800a0a4 <raise+0xc>)
 800a09a:	4601      	mov	r1, r0
 800a09c:	6818      	ldr	r0, [r3, #0]
 800a09e:	f7ff bfd3 	b.w	800a048 <_raise_r>
 800a0a2:	bf00      	nop
 800a0a4:	20000100 	.word	0x20000100

0800a0a8 <_kill_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	4d07      	ldr	r5, [pc, #28]	; (800a0c8 <_kill_r+0x20>)
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	4608      	mov	r0, r1
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	602b      	str	r3, [r5, #0]
 800a0b6:	f7f7 fba3 	bl	8001800 <_kill>
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	d102      	bne.n	800a0c4 <_kill_r+0x1c>
 800a0be:	682b      	ldr	r3, [r5, #0]
 800a0c0:	b103      	cbz	r3, 800a0c4 <_kill_r+0x1c>
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	bd38      	pop	{r3, r4, r5, pc}
 800a0c6:	bf00      	nop
 800a0c8:	2000078c 	.word	0x2000078c

0800a0cc <_getpid_r>:
 800a0cc:	f7f7 bb90 	b.w	80017f0 <_getpid>

0800a0d0 <__sread>:
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d8:	f000 f8a0 	bl	800a21c <_read_r>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	bfab      	itete	ge
 800a0e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a0e4:	181b      	addge	r3, r3, r0
 800a0e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0ea:	bfac      	ite	ge
 800a0ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0ee:	81a3      	strhlt	r3, [r4, #12]
 800a0f0:	bd10      	pop	{r4, pc}

0800a0f2 <__swrite>:
 800a0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f6:	461f      	mov	r7, r3
 800a0f8:	898b      	ldrh	r3, [r1, #12]
 800a0fa:	05db      	lsls	r3, r3, #23
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	4616      	mov	r6, r2
 800a102:	d505      	bpl.n	800a110 <__swrite+0x1e>
 800a104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a108:	2302      	movs	r3, #2
 800a10a:	2200      	movs	r2, #0
 800a10c:	f000 f874 	bl	800a1f8 <_lseek_r>
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a11a:	81a3      	strh	r3, [r4, #12]
 800a11c:	4632      	mov	r2, r6
 800a11e:	463b      	mov	r3, r7
 800a120:	4628      	mov	r0, r5
 800a122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a126:	f000 b823 	b.w	800a170 <_write_r>

0800a12a <__sseek>:
 800a12a:	b510      	push	{r4, lr}
 800a12c:	460c      	mov	r4, r1
 800a12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a132:	f000 f861 	bl	800a1f8 <_lseek_r>
 800a136:	1c43      	adds	r3, r0, #1
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	bf15      	itete	ne
 800a13c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a13e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a146:	81a3      	strheq	r3, [r4, #12]
 800a148:	bf18      	it	ne
 800a14a:	81a3      	strhne	r3, [r4, #12]
 800a14c:	bd10      	pop	{r4, pc}

0800a14e <__sclose>:
 800a14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a152:	f000 b81f 	b.w	800a194 <_close_r>

0800a156 <__ascii_wctomb>:
 800a156:	b149      	cbz	r1, 800a16c <__ascii_wctomb+0x16>
 800a158:	2aff      	cmp	r2, #255	; 0xff
 800a15a:	bf85      	ittet	hi
 800a15c:	238a      	movhi	r3, #138	; 0x8a
 800a15e:	6003      	strhi	r3, [r0, #0]
 800a160:	700a      	strbls	r2, [r1, #0]
 800a162:	f04f 30ff 	movhi.w	r0, #4294967295
 800a166:	bf98      	it	ls
 800a168:	2001      	movls	r0, #1
 800a16a:	4770      	bx	lr
 800a16c:	4608      	mov	r0, r1
 800a16e:	4770      	bx	lr

0800a170 <_write_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4d07      	ldr	r5, [pc, #28]	; (800a190 <_write_r+0x20>)
 800a174:	4604      	mov	r4, r0
 800a176:	4608      	mov	r0, r1
 800a178:	4611      	mov	r1, r2
 800a17a:	2200      	movs	r2, #0
 800a17c:	602a      	str	r2, [r5, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	f7f7 fb75 	bl	800186e <_write>
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	d102      	bne.n	800a18e <_write_r+0x1e>
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	b103      	cbz	r3, 800a18e <_write_r+0x1e>
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	2000078c 	.word	0x2000078c

0800a194 <_close_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4d06      	ldr	r5, [pc, #24]	; (800a1b0 <_close_r+0x1c>)
 800a198:	2300      	movs	r3, #0
 800a19a:	4604      	mov	r4, r0
 800a19c:	4608      	mov	r0, r1
 800a19e:	602b      	str	r3, [r5, #0]
 800a1a0:	f7f7 fb81 	bl	80018a6 <_close>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	d102      	bne.n	800a1ae <_close_r+0x1a>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	b103      	cbz	r3, 800a1ae <_close_r+0x1a>
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	bd38      	pop	{r3, r4, r5, pc}
 800a1b0:	2000078c 	.word	0x2000078c

0800a1b4 <_fstat_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d07      	ldr	r5, [pc, #28]	; (800a1d4 <_fstat_r+0x20>)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	4611      	mov	r1, r2
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	f7f7 fb7c 	bl	80018be <_fstat>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d102      	bne.n	800a1d0 <_fstat_r+0x1c>
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	b103      	cbz	r3, 800a1d0 <_fstat_r+0x1c>
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	bd38      	pop	{r3, r4, r5, pc}
 800a1d2:	bf00      	nop
 800a1d4:	2000078c 	.word	0x2000078c

0800a1d8 <_isatty_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4d06      	ldr	r5, [pc, #24]	; (800a1f4 <_isatty_r+0x1c>)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	f7f7 fb7b 	bl	80018de <_isatty>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d102      	bne.n	800a1f2 <_isatty_r+0x1a>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	b103      	cbz	r3, 800a1f2 <_isatty_r+0x1a>
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	2000078c 	.word	0x2000078c

0800a1f8 <_lseek_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4d07      	ldr	r5, [pc, #28]	; (800a218 <_lseek_r+0x20>)
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	4608      	mov	r0, r1
 800a200:	4611      	mov	r1, r2
 800a202:	2200      	movs	r2, #0
 800a204:	602a      	str	r2, [r5, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	f7f7 fb74 	bl	80018f4 <_lseek>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	d102      	bne.n	800a216 <_lseek_r+0x1e>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	b103      	cbz	r3, 800a216 <_lseek_r+0x1e>
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	2000078c 	.word	0x2000078c

0800a21c <_read_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4d07      	ldr	r5, [pc, #28]	; (800a23c <_read_r+0x20>)
 800a220:	4604      	mov	r4, r0
 800a222:	4608      	mov	r0, r1
 800a224:	4611      	mov	r1, r2
 800a226:	2200      	movs	r2, #0
 800a228:	602a      	str	r2, [r5, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	f7f7 fb02 	bl	8001834 <_read>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	d102      	bne.n	800a23a <_read_r+0x1e>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	b103      	cbz	r3, 800a23a <_read_r+0x1e>
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	2000078c 	.word	0x2000078c

0800a240 <_init>:
 800a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a242:	bf00      	nop
 800a244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a246:	bc08      	pop	{r3}
 800a248:	469e      	mov	lr, r3
 800a24a:	4770      	bx	lr

0800a24c <_fini>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	bf00      	nop
 800a250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a252:	bc08      	pop	{r3}
 800a254:	469e      	mov	lr, r3
 800a256:	4770      	bx	lr
